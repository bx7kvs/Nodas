"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var extendStatics=function(e,t){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},extendStatics(e,t)};function __extends(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function __(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(__.prototype=t.prototype,new __)}var __assign=function(){return __assign=Object.assign||function __assign(e){for(var t,r=1,o=arguments.length;r<o;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},__assign.apply(this,arguments)};function __decorate(e,t,r,o){var n,i=arguments.length,a=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(a=(i<3?n(a):i>3?n(t,r,a):n(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a}function __spreadArray(e,t,r){if(r||2===arguments.length)for(var o,n=0,i=t.length;n<i;n++)!o&&n in t||(o||(o=Array.prototype.slice.call(t,0,n)),o[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))}var e=function e(t,r){this.order=0,this.callback=t,r&&(this.order=r)},t=function(){function NdEvent(e,t){this.time=new Date,this._type="default",this.propagate=!0,this.target=e,this.data=t}return Object.defineProperty(NdEvent.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),NdEvent}(),r=function(e){function NdMouseEvent(t,r){var o=e.call(this,t,r)||this;return o._type="mouse",o}return __extends(NdMouseEvent,e),NdMouseEvent}(t),o=function(e){function NdStateEvent(t,r){var o=e.call(this,t,null)||this;return o._type="state",o}return __extends(NdStateEvent,e),NdStateEvent}(t);function EventHandlers(){}function EventEmitter(){EventEmitter.init.call(this)}function $getMaxListeners(e){return void 0===e._maxListeners?EventEmitter.defaultMaxListeners:e._maxListeners}function emitNone(e,t,r){if(t)e.call(r);else for(var o=e.length,n=arrayClone(e,o),i=0;i<o;++i)n[i].call(r)}function emitOne(e,t,r,o){if(t)e.call(r,o);else for(var n=e.length,i=arrayClone(e,n),a=0;a<n;++a)i[a].call(r,o)}function emitTwo(e,t,r,o,n){if(t)e.call(r,o,n);else for(var i=e.length,a=arrayClone(e,i),s=0;s<i;++s)a[s].call(r,o,n)}function emitThree(e,t,r,o,n,i){if(t)e.call(r,o,n,i);else for(var a=e.length,s=arrayClone(e,a),u=0;u<a;++u)s[u].call(r,o,n,i)}function emitMany(e,t,r,o){if(t)e.apply(r,o);else for(var n=e.length,i=arrayClone(e,n),a=0;a<n;++a)i[a].apply(r,o)}function _addListener(e,t,r,o){var n,i,a;if("function"!=typeof r)throw new TypeError('"listener" argument must be a function');if((i=e._events)?(i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),a=i[t]):(i=e._events=new EventHandlers,e._eventsCount=0),a){if("function"==typeof a?a=i[t]=o?[r,a]:[a,r]:o?a.unshift(r):a.push(r),!a.warned&&(n=$getMaxListeners(e))&&n>0&&a.length>n){a.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=a.length,function emitWarning(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(s)}}else a=i[t]=r,++e._eventsCount;return e}function _onceWrap(e,t,r){var o=!1;function g(){e.removeListener(t,g),o||(o=!0,r.apply(e,arguments))}return g.listener=r,g}function listenerCount(e){var t=this._events;if(t){var r=t[e];if("function"==typeof r)return 1;if(r)return r.length}return 0}function arrayClone(e,t){for(var r=new Array(t);t--;)r[t]=e[t];return r}EventHandlers.prototype=Object.create(null),EventEmitter.EventEmitter=EventEmitter,EventEmitter.usingDomains=!1,EventEmitter.prototype.domain=void 0,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.init=function(){this.domain=null,EventEmitter.usingDomains&&undefined.active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new EventHandlers,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function setMaxListeners(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return $getMaxListeners(this)},EventEmitter.prototype.emit=function emit(e){var t,r,o,n,i,a,s,u="error"===e;if(a=this._events)u=u&&null==a.error;else if(!u)return!1;if(s=this.domain,u){if(t=arguments[1],!s){if(t instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}return t||(t=new Error('Uncaught, unspecified "error" event')),t.domainEmitter=this,t.domain=s,t.domainThrown=!1,s.emit("error",t),!1}if(!(r=a[e]))return!1;var d="function"==typeof r;switch(o=arguments.length){case 1:emitNone(r,d,this);break;case 2:emitOne(r,d,this,arguments[1]);break;case 3:emitTwo(r,d,this,arguments[1],arguments[2]);break;case 4:emitThree(r,d,this,arguments[1],arguments[2],arguments[3]);break;default:for(n=new Array(o-1),i=1;i<o;i++)n[i-1]=arguments[i];emitMany(r,d,this,n)}return!0},EventEmitter.prototype.addListener=function addListener(e,t){return _addListener(this,e,t,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function prependListener(e,t){return _addListener(this,e,t,!0)},EventEmitter.prototype.once=function once(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.prependOnceListener=function prependOnceListener(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.removeListener=function removeListener(e,t){var r,o,n,i,a;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(o=this._events))return this;if(!(r=o[e]))return this;if(r===t||r.listener&&r.listener===t)0==--this._eventsCount?this._events=new EventHandlers:(delete o[e],o.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(n=-1,i=r.length;i-- >0;)if(r[i]===t||r[i].listener&&r[i].listener===t){a=r[i].listener,n=i;break}if(n<0)return this;if(1===r.length){if(r[0]=void 0,0==--this._eventsCount)return this._events=new EventHandlers,this;delete o[e]}else!function spliceOne(e,t){for(var r=t,o=r+1,n=e.length;o<n;r+=1,o+=1)e[r]=e[o];e.pop()}(r,n);o.removeListener&&this.emit("removeListener",e,a||t)}return this},EventEmitter.prototype.off=function(e,t){return this.removeListener(e,t)},EventEmitter.prototype.removeAllListeners=function removeAllListeners(e){var t,r;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=new EventHandlers,this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=new EventHandlers:delete r[e]),this;if(0===arguments.length){for(var o,n=Object.keys(r),i=0;i<n.length;++i)"removeListener"!==(o=n[i])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=new EventHandlers,this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(t)do{this.removeListener(e,t[t.length-1])}while(t[0]);return this},EventEmitter.prototype.listeners=function listeners(e){var t,r=this._events;return r&&(t=r[e])?"function"==typeof t?[t.listener||t]:function unwrapListeners(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(t):[]},EventEmitter.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):listenerCount.call(e,t)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};var n=function(){function NdEmitter(){this.Emitter=new EventEmitter,this.removeAllListeners=this.Emitter.removeAllListeners}return NdEmitter.prototype.cast=function(e,t){return this.Emitter.emit(e,t),t},NdEmitter.prototype.on=function(e,t){var r=this;e instanceof Array?e.forEach((function(e){return r.Emitter.on(e,t)})):this.Emitter.on(e,t)},NdEmitter.prototype.once=function(e,t){this.Emitter.once(e,t)},NdEmitter.prototype.off=function(e,t){this.Emitter.off(e,t)},NdEmitter}(),i=new(function(e){function NodasDebug(){var t=e.call(this)||this;return t.prefix="⋒",t.warnings=!0,t.groupLevel=0,t.currentLevel=0,t.separatorMessages={},t}return __extends(NodasDebug,e),NodasDebug.prototype.getMessage=function(e,t){return"".concat(this.prefix).concat(t?"[".concat("string"==typeof t?t:t.constructor.name,"]"):"",": ").concat(e)},NodasDebug.prototype.error=function(e,t){throw"string"==typeof e?(e=this.getMessage(e,t),new Error(e)):e},NodasDebug.prototype.warn=function(e,t){e=this.getMessage(e,t),console.log("%c ".concat(e," ⚠"),"border: 1px solid #FFD166; border-radius:2px; background:rgba(255, 209, 102,.01); padding: 4px 6px 4px 4px; color:#B88100")},NodasDebug.prototype.info=function(e,t){e=this.getMessage(e,t),this.cast("info",e),console.log("%c ".concat(e," ℹ"),"border: 1px solid #118AB2; border-radius:2px; background:rgba(7, 59, 76,.01); padding: 4px 6px 4px 4px; color:#118AB2")},NodasDebug.prototype.message=function(e,t){e=this.getMessage(e,t),this.cast("info",e),console.log("%c"+e,"border: 1px solid #073B4C; border-radius:2px; background:rgba(7, 59, 76,.01); padding: 4px 6px 4px 4px; color:#073B4C")},NodasDebug.prototype.separator=function(e,t){e=this.getMessage(e,t),this.currentLevel++,this.separatorMessages[this.currentLevel]=e,this.cast("info",e),console.log("%c"+e+" ⌛","padding: 4px 10px; border-left: 2px solid #10949C; background:rgba(16,148,156,0.1); color: #10949C")},NodasDebug.prototype.separatorEnd=function(){this.warnings&&(this.separatorMessages[this.currentLevel]&&(console.log("%c"+this.separatorMessages[this.currentLevel]+" ✔","padding: 4px 10px; border-left: 2px solid #10949C; background:rgba(16,148,156,0.1); color: #10949C"),this.currentLevel--),0===this.currentLevel&&(this.separatorMessages={}))},NodasDebug.prototype.positive=function(e,t){this.warnings&&(e=this.getMessage(e,t),this.cast("info",e),console.log("%c ".concat(e," ✅"),"border: 1px solid rgb(6, 214, 160); border-radius:2px; background:rgba(6, 214, 160,.01); padding: 4px 6px 4px 4px; color:#05B384"))},NodasDebug.prototype.negative=function(e,t){this.warnings&&(e=this.getMessage(e,t),this.cast("info",e),console.log("%c ".concat(e," ❌"),"border: 1px solid #EF476F; border-radius:2px; background:rgba(239, 71, 111,.01); padding: 4px 6px 4px 4px; color:#EB1E4E"))},NodasDebug.prototype.group=function(e){this.warnings&&(console.group(e),this.groupLevel++)},NodasDebug.prototype.groupEnd=function(){this.warnings&&(this.groupLevel--,console.groupEnd())},NodasDebug}(n)),a=function(t){function Canvas(e){var o=t.call(this)||this;return o.e=null,o.context=null,o.s=[800,600],o.sNumeric=[800,600],o.resizeProcessTimeout=null,o.q=[],o._ready=!1,o._clear=!1,o.args=[o.context,new Date,0],o.scroll=[window.scrollX||document.documentElement.scrollLeft,window.scrollY||document.documentElement.scrollTop],o.offset=[0,0],o.cursor={cursor:[0,0],page:[0,0],screen:[0,0]},o.updateEventData=function(e){return o.cursor.page=[e.pageX,e.pageY],o.cursor.cursor=o.getMouseRelativePosition(e),o.cursor.screen=[e.pageX-o.scroll[0],e.pageY-o.scroll[1]],o.cursor},o.onCanvasMouseMove=function(e){o.cast("mouseMove",new r(o,o.updateEventData(e)))},o.onCanvasMouseLeave=function(e){o.cast("mouseLeave",new r(o,o.updateEventData(e)))},o.onCanvasMouseEnter=function(e){o.cast("mouseEnter",new r(o,o.updateEventData(e)))},o.onCanvasMouseDown=function(e){o.cast("mouseDown",new r(o,o.updateEventData(e)))},o.onCanvasMouseUp=function(e){o.cast("mouseUp",new r(o,o.updateEventData(e)))},o.DrawScene=function(e,t){o._ready&&o.context&&(o._clear&&o.context.clearRect(0,0,o.context.canvas.offsetWidth,o.context.canvas.offsetHeight),o.args[0]=o.context,o.args[1]=e,o.args[2]=t,o.q.forEach((function(e,t){e.callback.apply(o,o.args)})))},e.queue(0,o.DrawScene),window.addEventListener("scroll",(function(){o.scroll[0]=window.scrollX||document.documentElement.scrollLeft,o.scroll[1]=window.scrollY||document.documentElement.scrollTop})),window.addEventListener("resize",(function(){return o.handleResize()})),o}return __extends(Canvas,t),Canvas.prototype.removeEventListeners=function(){var e,t,r,o,n;null===(e=this.e)||void 0===e||e.removeEventListener("mousemove",this.onCanvasMouseMove),null===(t=this.e)||void 0===t||t.removeEventListener("mouseleave",this.onCanvasMouseLeave),null===(r=this.e)||void 0===r||r.removeEventListener("mouseenter",this.onCanvasMouseEnter),null===(o=this.e)||void 0===o||o.removeEventListener("mousedown",this.onCanvasMouseDown),null===(n=this.e)||void 0===n||n.removeEventListener("mouseup",this.onCanvasMouseUp)},Canvas.prototype.addEventListeners=function(){var e,t,r,o,n;null===(e=this.e)||void 0===e||e.addEventListener("mousemove",this.onCanvasMouseMove),null===(t=this.e)||void 0===t||t.addEventListener("mouseleave",this.onCanvasMouseLeave),null===(r=this.e)||void 0===r||r.addEventListener("mouseenter",this.onCanvasMouseEnter),null===(o=this.e)||void 0===o||o.addEventListener("mousedown",this.onCanvasMouseDown),null===(n=this.e)||void 0===n||n.addEventListener("mouseup",this.onCanvasMouseUp)},Canvas.prototype.recalculateOffset=function(){if(this.e){var e=this.e.getBoundingClientRect();this.offset=[e.x+this.scroll[0],e.y+this.scroll[1]]}},Canvas.prototype.getMouseRelativePosition=function(e){return[e.pageX-this.offset[0]-this.scroll[0],e.pageY-this.offset[1]-this.scroll[1]]},Canvas.prototype.recalculateSize=function(){if(this.e){var e=this.e.parentNode;if(e){var t=e.getBoundingClientRect(),r=t.height,o=t.width;if("string"==typeof this.s[0]){var n=parseInt(this.s[0])/100;this.sNumeric[0]=o*n}else this.sNumeric[0]=this.s[0];if("string"==typeof this.s[1]){var a=parseInt(this.s[1])/100;this.sNumeric[1]=r*a}else this.sNumeric[1]=this.s[1];this.e.setAttribute("width",this.sNumeric[0].toString()),this.e.setAttribute("height",this.sNumeric[1].toString())}else i.warn("Current canvas element is detached from DOM. Size reset skipped");this.recalculateOffset()}else i.warn("No Canvas to operate. Size reset skipped")},Canvas.prototype.handleResize=function(){var e=this;this.e&&("string"==typeof this.s[0]||"string"==typeof this.s[1]?(this.e.setAttribute("width","0"),this.e.setAttribute("height","0"),this.resizeProcessTimeout&&clearTimeout(this.resizeProcessTimeout),this.resizeProcessTimeout=setTimeout((function(){e.recalculateSize(),e.cast("resize",new o(e,null))}),1e3)):(this.resizeProcessTimeout&&clearTimeout(this.resizeProcessTimeout),this.sNumeric[0]=this.s[0],this.sNumeric[1]=this.s[1],this.recalculateSize(),this.cast("resize",new o(this,null))))},Canvas.prototype.element=function(e){if("string"==typeof e){var t=document.querySelector(e);t instanceof HTMLCanvasElement?(t.setAttribute("width",this.sNumeric[0].toString()),t.setAttribute("height",this.sNumeric[1].toString()),this.removeEventListeners(),this.e=t,this.context=t.getContext("2d"),this.addEventListeners(),this._ready=!0,i.positive("Accepted ".concat(e," as rendering root"))):i.error("Element ".concat(e," is not a HTMLCanvasElement or does not exist"))}else e.setAttribute("width",this.sNumeric[0].toString()),e.setAttribute("height",this.sNumeric[1].toString()),this.removeEventListeners(),this.e=e,this.context=e.getContext("2d"),this.addEventListeners(),this._ready=!0,i.positive("Accepted ".concat(e.id?e.id:e.classList.toString()," as rendering root"));this.handleResize(),this.cast("switch",new o(this,null))},Canvas.prototype.queue=function(t,r){return"number"==typeof t&&"function"==typeof r?this.q.push(new e(r,t)):"function"==typeof t&&this.q.push(new e(t)),this.q.sort((function(e,t){return e.order-t.order})),this},Canvas.prototype.unQueue=function(e){this.q=this.q.filter((function(t){return t.callback!==e})),i.warn("Callback removed form canvas queue")},Canvas.prototype.size=function(e,t){if("number"!=typeof e&&"string"!=typeof e)return __spreadArray([],this.sNumeric,!0);"number"==typeof t||"string"==typeof t?(this.s[0]=e,this.s[1]=t,this.handleResize()):i.error("Invalid Canvas size [".concat(e,", ").concat(t,"]"))},Canvas.prototype.forceResize=function(){this.handleResize()},Object.defineProperty(Canvas.prototype,"ready",{get:function(){return this._ready},enumerable:!1,configurable:!0}),Object.defineProperty(Canvas.prototype,"clear",{get:function(){return this._clear},set:function(e){this._clear=e},enumerable:!1,configurable:!0}),Canvas}(n),s=function(e){function Ticker(){var t=null!==e&&e.apply(this,arguments)||this;return t.frameDuration=1e3/60,t.q=[],t.frame=0,t._fps=60,t.args=[new Date,0],t.init=!1,t.tick=function(){t.args[0]=new Date,t.args[1]=t.frame;try{t.draw()}catch(e){throw t.stop(),e}},t.queue=function(e,r){return"function"==typeof e?t.q.push({order:0,f:e}):"function"==typeof r?t.q.push({order:e,f:r}):i.warn("Ticker callback is not a function. Ignored"),t.q.sort((function(e,t){return e.order-t.order})),t},t}return __extends(Ticker,e),Ticker.prototype.draw=function(){var e=this;this.q.forEach((function(t,r){try{e.q[r].f.apply(self,e.args)}catch(e){throw e}})),this.frame++},Ticker.prototype.stop=function(){return this.interval?(this.frame=0,clearInterval(this.interval),this.interval=void 0,this.cast("stop",null),i.positive("Ticker stopped")):i.warn("Ticker already stopped. Ignored"),this},Ticker.prototype.start=function(){return this.interval?i.warn("Ticker already started. Ignored"):(this.interval=window.setInterval(this.tick,this.frameDuration),this.init||(this.cast("fps",null),this.init=!0),this.cast("start",null),i.positive("Ticker started")),this},Object.defineProperty(Ticker.prototype,"frameTime",{get:function(){return this.frameDuration},enumerable:!1,configurable:!0}),Object.defineProperty(Ticker.prototype,"fps",{get:function(){return this._fps},set:function(e){e>60&&(e=60),e<=0&&(e=1),this.frameDuration=1e3/e,this.cast("fps",null),i.positive("Ticker FPS set ".concat(e,". Restart Ticker")),this.interval&&(this.stop(),this.start())},enumerable:!1,configurable:!0}),Ticker}(n),u=function(){function NdMatrix(e){void 0===e&&(e=!0),this.history=[],this._value=[1,0,0,1,0,0],this._inversion=[1,0,0,1,0,0],this.traceBack=e}return NdMatrix.prototype.invert=function(){if(!this.traceBack)return this._inversion;for(var e=this.history.length-1;e>=0;e--){if(void 0!==this.history[e].rotate){var t=Math.sin(-this.history[e].rotate),r=Math.cos(-this.history[e].rotate);NdMatrix.multiply(this._inversion,[r,t,-t,r,0,0])}this.history[e].translate&&NdMatrix.multiply(this._inversion,[1,0,0,1,-this.history[e].translate[0],-this.history[e].translate[1]]),this.history[e].skew&&NdMatrix.multiply(this._inversion,[1,Math.tan(-this.history[e].skew[1]),Math.tan(-this.history[e].skew[0]),1,0,0]),this.history[e].scale&&NdMatrix.multiply(this._inversion,[1/this.history[e].scale[0],0,0,1/this.history[e].scale[1],0,0])}},NdMatrix.prototype.rotate=function(e){var t=Math.sin(e),r=Math.cos(e),o=[r,t,-t,r,0,0];return NdMatrix.multiply(this._value,o),this.traceBack&&this.history.push({rotate:e}),this},NdMatrix.prototype.translate=function(e,t){var r=[1,0,0,1,e,t];return 0===e&&0===t||(NdMatrix.multiply(this._value,r),this.traceBack&&this.history.push({translate:[e,t]})),this},NdMatrix.prototype.scale=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1];if(1!==r||1!==o){var n=[r,0,0,o,0,0];NdMatrix.multiply(this._value,n),this.traceBack&&this.history.push({scale:[r,o]})}return this},NdMatrix.prototype.skew=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1];if(0!==r||0!==o){var n=Math.tan(r),i=Math.tan(o),a=[1,i,n,1,0,0];NdMatrix.multiply(this._value,a),this.traceBack&&this.history.push({skew:[r,o]})}return this},NdMatrix.prototype.reset=function(){this._value[0]=1,this._value[1]=0,this._value[2]=0,this._value[3]=1,this._value[4]=0,this._value[5]=0,this._inversion[0]=1,this._inversion[1]=0,this._inversion[2]=0,this._inversion[3]=1,this._inversion[4]=0,this._inversion[5]=0,this.history=[]},NdMatrix.prototype.extract=function(){return __spreadArray([],this._value,!0)},NdMatrix.prototype.extractInversion=function(){return __spreadArray([],this._inversion,!0)},NdMatrix.prototype.tracePoint=function(e){return NdMatrix.applyMatrixToPoint(this._inversion,e)},NdMatrix.multiply=function(e,t){var r=e[0]*t[0]+e[2]*t[1],o=e[1]*t[0]+e[3]*t[1],n=e[0]*t[2]+e[2]*t[3],i=e[1]*t[2]+e[3]*t[3],a=e[0]*t[4]+e[2]*t[5]+e[4],s=e[1]*t[4]+e[3]*t[5]+e[5];e[0]=r,e[1]=o,e[2]=n,e[3]=i,e[4]=a,e[5]=s},NdMatrix.applyMatrixToPoint=function(e,t){var r=t[0]*e[0]+t[1]*e[2]+e[4],o=t[0]*e[1]+t[1]*e[3]+e[5];return t[0]=r,t[1]=o,t},NdMatrix}(),c=function(e){function NdNodeMatrix(){var t=e.call(this)||this;return t._globalInversion=null,t.globalInversion=function(e){if(t._globalInversion)return t._globalInversion;var r=e.parent;return t._globalInversion=__spreadArray([],t._inversion,!0),r&&NdNodeMatrix.multiply(t._globalInversion,r.matrix.globalInversion(r)),__spreadArray([],t._globalInversion,!0)},t.purgeInversion=function(e){t._globalInversion=null,e instanceof E&&e.forEachChild((function(e){return e.matrix.purgeInversion(e)}))},t}return __extends(NdNodeMatrix,e),NdNodeMatrix.prototype.traceCursorToLocalSpace=function(e,t){return u.applyMatrixToPoint(this.globalInversion(t),e)},NdNodeMatrix.prototype.reset=function(){e.prototype.reset.call(this),this._globalInversion=null},NdNodeMatrix}(u),d=function(){function NdNodeMatrixContainer(e,t,r){var o=new c,n=r.register("transformMatrix",(function(){var r=e.boundingRect;if(r){o.reset();var n=t.position.protectedValue,i=[r.size[0]*t.origin.protectedValue[0],r.size[1]*t.origin.protectedValue[1]],a=t.skew.protectedValue,s=t.rotate.protectedValue,u=t.scale.protectedValue,c=t.translate.protectedValue,d=e instanceof E?[n[0]+c[0],n[1]+c[1]]:[r.position[0]+c[0],r.position[1]+c[1]];o.translate(i[0],i[1]),0===d[0]&&0===d[1]||o.translate(d[0],d[1]),s&&o.rotate(s),0===a[0]&&0===a[1]||o.skew(a[0],a[1]),0===u[0]&&0===u[1]||o.scale(u[0],u[1]),o.translate(-i[0],-i[1]),o.invert()}return o})),i=n.getter,a=n.purge;this.purge=a,this.getter=i}return Object.defineProperty(NdNodeMatrixContainer.prototype,"value",{get:function(){return this.getter()},enumerable:!1,configurable:!0}),NdNodeMatrixContainer}(),l=function(){function NdCache(){this.values={}}return NdCache.prototype.register=function(e,t){var r=this;return this.values[e]||(this.values[e]={value:void 0,getter:t,relevant:!1}),{purge:function(){r.values[e].relevant=!1},getter:function(){return r.values[e].relevant||(r.values[e].value=r.values[e].getter(),r.values[e].relevant=!0),r.values[e].value}}},NdCache}(),p=function(){function NdBox(){this.container={size:[0,0],position:[0,0]},this.sprite={margin:[0,0,0,0],position:[0,0],size:[0,0]}}return NdBox.prototype.value=function(e,t,r,o,n,i,a,s){this.container.size[0]=r,this.container.size[1]=o,this.container.position[0]=e,this.container.position[1]=t,this.sprite.margin[0]=n,this.sprite.margin[1]=i,this.sprite.margin[2]=a,this.sprite.margin[3]=s,this.sprite.size[0]=s+r+i,this.sprite.size[1]=n+o+a,this.sprite.position[0]=e-s,this.sprite.position[1]=t-n},NdBox}(),h=function(){function NdNodeBox(e,t,r){var o=this,n=e;this.box=new p,e.once("destroyed",(function(){return n=void 0}));var i=t.register("box",(function(){return n&&o.box.value.apply(o.box,r(n)),o.box})),a=i.getter,s=i.purge;this.getter=a,this.purge=function(){s(),n&&n.parent&&n.parent.purgeBox()}}return Object.defineProperty(NdNodeBox.prototype,"value",{get:function(){return this.getter()},enumerable:!1,configurable:!0}),NdNodeBox}(),f=function(){function NdCompiler(e,t,r){var o=this;this.conditions=[],this.drawerPipeBefore={},this.drawerPipeAfter={},this.beforePipeSize=0,this.afterPipeSize=0,this.isRenderAllowed=function(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var n=!0,i=0;i<o.conditions.length&&(n=(e=o.conditions)[i].apply(e,t));i++);return n},this.render=function(e,t,r){if(o.isRenderAllowed(e,t,r)){var n=e;if(e.save(),o.beforePipeSize)for(var i in o.drawerPipeBefore){if(o.drawerPipeBefore.hasOwnProperty(i))for(var a=0;a<o.drawerPipeBefore[i].length;a++){e.save();var s=o.drawerPipeBefore[i][a](n,t,r);if(e.restore(),!(n=s||!1))break}if(!n)break}if(n&&(n.globalCompositeOperation=o.props.blending.protectedValue,n.globalAlpha*=o.props.opacity.protectedValue),n===e?o.resolver(e,t,r):(o.resolver(e,t,r),n&&e.drawImage(n.canvas,0,0,e.canvas.width,e.canvas.height)),n=e,o.afterPipeSize)for(var i in o.drawerPipeAfter){if(o.drawerPipeAfter.hasOwnProperty(i))for(a=0;a<o.drawerPipeAfter[i].length;a++){n.save();s=o.drawerPipeAfter[i][a](n,t,r);if(n.restore(),!(n=s||!1))break}if(!n)break}e.restore()}return e},this.node=e,this.resolver=r,this.props=t}return NdCompiler.prototype.filter=function(e){this.conditions.push(e)},NdCompiler.prototype.pipe=function(e,t){return t||(t=0),t>100?(this.drawerPipeAfter[t]||(this.drawerPipeAfter[t]=[]),this.drawerPipeAfter[t].push(e),this.afterPipeSize++):(this.drawerPipeBefore[t]||(this.drawerPipeBefore[t]=[]),this.drawerPipeBefore[t].push(e),this.beforePipeSize++),this.node},NdCompiler.prototype.unpipe=function(e){var t=this;for(var r in this.drawerPipeBefore)this.drawerPipeBefore.hasOwnProperty(r)&&(this.drawerPipeBefore[r]=this.drawerPipeBefore[r].filter((function(r){return r!==e||(t.beforePipeSize--,!1)})));for(var r in this.drawerPipeAfter)this.drawerPipeAfter.hasOwnProperty(r)&&(this.drawerPipeAfter[r]=this.drawerPipeAfter[r].filter((function(r){return r!==e||(t.afterPipeSize--,!1)})));return this.node},NdCompiler}();function alive(e,t,r){if("function"==typeof r.value){var o=r.value;r.value=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];if(e.destroyed)throw new Error("Attempt to call [".concat(t,"] of a destroyed Node"));return o.apply(this?this:e,r)}}else{var n=r.get,i=r.set;i&&(r.set=function(r){if(e.destroyed)throw new Error("Attempt to set a property [".concat(t,"] of a destroyed Node"));return i.call(this,r)}),n&&(r.get=function(){if(e.destroyed)throw new Error("Attempt to access property [".concat(t,"] of a destroyed Node"));return n.call(this)})}}var y,v=function(e){function NdDestroyableNode(){var t=e.call(this)||this;return t._destroyed=!1,t}return __extends(NdDestroyableNode,e),Object.defineProperty(NdDestroyableNode.prototype,"destroyed",{get:function(){return this._destroyed},enumerable:!1,configurable:!0}),NdDestroyableNode.prototype.destroy=function(){this.cast("destroy",new o(this,null)),this._destroyed=!0,this.cast("destroyed",new o(this,null)),this.removeAllListeners()},__decorate([alive],NdDestroyableNode.prototype,"destroy",null),NdDestroyableNode}(n),m=function(e){function NdBaseNode(){var t=e.call(this)||this;return t.once("destroyed",(function(){t.Box=void 0})),t}return __extends(NdBaseNode,e),Object.defineProperty(NdBaseNode.prototype,"box",{get:function(){if(this.Box)return this.Box.value.container},enumerable:!1,configurable:!0}),Object.defineProperty(NdBaseNode.prototype,"boundingRect",{get:function(){if(this.Box)return this.Box.value.sprite},enumerable:!1,configurable:!0}),__decorate([alive],NdBaseNode.prototype,"box",null),__decorate([alive],NdBaseNode.prototype,"boundingRect",null),NdBaseNode}(v),N=function(e){function NdResource(t,r){var o=e.call(this)||this;return o.status=-1,o.resolved=!1,o.src=t,o.resolve=r,o}return __extends(NdResource,e),Object.defineProperty(NdResource.prototype,"url",{get:function(){return this.src},enumerable:!1,configurable:!0}),Object.defineProperty(NdResource.prototype,"loaded",{get:function(){return this.status>0},enumerable:!1,configurable:!0}),Object.defineProperty(NdResource.prototype,"error",{get:function(){return 0==this.status},enumerable:!1,configurable:!0}),NdResource.prototype.load=function(){return this.resolved?this:(this.resolved=!0,this.resolve())},__decorate([alive],NdResource.prototype,"load",null),NdResource}(v),_=new(function(){function NodasResources(){this.images={}}return NodasResources.prototype.image=function(e,t,r,o){var n=this;return this.images[e]?(this.images[e].loading?(t&&this.images[e].onLoad.push(t),r&&this.images[e].onError.push(r)):setTimeout((function(){n.images[e]&&(n.images[e].loaded&&t&&t(),n.images[e].error&&r&&r())})),o&&this.images[e].onReset.push(o)):(i.info("Loading image ".concat(e)),this.images[e]={loaded:!1,error:!1,loading:!0,onError:r?[r]:[],onLoad:t?[t]:[],onReset:o?[o]:[],src:e,image:new Image},this.images[e].image.addEventListener("load",(function(){i.positive("Image ".concat(e," loaded.")),n.images[e].loaded=!0,n.images[e].loading=!1,n.images[e].error=!1,n.images[e].onLoad.forEach((function(e){return e()})),n.images[e].onError=[],n.images[e].onLoad=[]})),this.images[e].image.addEventListener("error",(function(){i.negative("Image ".concat(e," failed to load")),n.images[e].loaded=!1,n.images[e].error=!0,n.images[e].loading=!1,n.images[e].onError.forEach((function(e){return e()})),n.images[e].onError=[],n.images[e].onLoad=[]})),this.images[e].image.src=e),this.images[e].image},NodasResources.prototype.reset=function(){var e=Object.values(this.images);this.images={},e.forEach((function(e){return e.onReset.forEach((function(e){return e()}))}))},NodasResources.prototype.bulkLoad=function(e){var t=this;e.forEach((function(e){t.image(e)}))},NodasResources}()),b=function(e){function NdImage(t){var r=e.call(this,t,(function(){return r.defineImage(t)}))||this;return r._size=[0,0],r.once("destroy",(function(){return r.image=void 0})),r}return __extends(NdImage,e),NdImage.prototype.defineImage=function(e){var t=this;return this.image=_.image(e,(function(){t.status=1,t.image?(t._size[0]=t.image.width,t._size[1]=t.image.height):i.error("Unable to set size of image that was not yet defined"),t.cast("load",new o(t,null))}),(function(){t.status=0,t.cast("load",new o(t,null)),t.cast("error",new o(t,null))}),(function(){return t.defineImage(e)})),this},NdImage.prototype.export=function(){return this.image},Object.defineProperty(NdImage.prototype,"width",{get:function(){return this._size[0]},enumerable:!1,configurable:!0}),Object.defineProperty(NdImage.prototype,"height",{get:function(){return this._size[1]},enumerable:!1,configurable:!0}),Object.defineProperty(NdImage.prototype,"size",{get:function(){return __spreadArray([],this._size,!0)},enumerable:!1,configurable:!0}),NdImage.isNdUrlStrRegex=function(e){return NdImage.NdUrlStrRegex.test(e)},NdImage.NdUrlStrRegex=/(^.+\.(png)|(jpg)])$/,__decorate([alive],NdImage.prototype,"defineImage",null),__decorate([alive],NdImage.prototype,"export",null),__decorate([alive],NdImage.prototype,"width",null),__decorate([alive],NdImage.prototype,"height",null),__decorate([alive],NdImage.prototype,"size",null),NdImage}(N),x=function(){function NdNodeStylesModel(){}return NdNodeStylesModel.degToRad=function(e){return e>360&&(e-=e*Math.floor(e/360)),e<360&&(e+=e*Math.floor(e/360)),e*Math.PI/180},NdNodeStylesModel.radToDeg=function(e){return e*(180/Math.PI)},NdNodeStylesModel.normalizeColor=function(e){return"string"==typeof e&&(e=NdNodeStylesModel.colorToArray(e)),e.map((function(e,t){return t<3?(e=Math.round(e))>255?255:e<0?0:e:(e<0&&(e=0),e>1&&(e=1),e.toFixed(2))})),e},NdNodeStylesModel.colorToArray=function(e){var t=e.match(/^rgba\(([\d.]+),([\d.]+),([\d.]+),([\d.]+)\)$/);return t?NdNodeStylesModel.normalizeColor([parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]):[0,0,0,1]},NdNodeStylesModel.arrayToColor=function(e){return e=NdNodeStylesModel.normalizeColor(e),"rgba(".concat(e[0],",").concat(e[1],",").concat(e[2],",").concat(e[3],")")},NdNodeStylesModel.getControlPoints=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3],a=e[4],s=e[5],u=e[6],c=Math.sqrt(Math.pow(n-r,2)+Math.pow(i-o,2)),d=Math.sqrt(Math.pow(a-n,2)+Math.pow(s-i,2)),l=u*c/(c+d),p=u*d/(c+d),h=n-l*(a-r),f=i-l*(s-o),y=n+p*(a-r),v=i+p*(s-o);return[h,f,y,v]},NdNodeStylesModel.convertComplexPath=function(e){for(var t=[],r=0;r<e.length;r++)t.push([e[r][0],e[r][1]]);return t},NdNodeStylesModel.interpolate=function(e,t,r){e.forEach((function(o,n){var i,a,s=[o[0],o[1]],u=[o[2],o[3]];i=0===n?r?[e[e.length-1][0],e[e.length-1][1]]:[s[0]-(u[0]-s[0]),s[1]-(u[1]-s[0])]:[e[n-1][0],e[n-1][1]],a=NdNodeStylesModel.getControlPoints(i[0],i[1],s[0],s[1],u[0],u[1],t),0==n?(e[n][4]=a[2],e[n][5]=a[3]):(e[n-1][6]=a[0],e[n-1][7]=a[1],o[4]=a[2],o[5]=a[3]),n==e.length-1&&(i=[e[n][0],e[n][1]],s=[e[n][2],e[n][3]],u=r?[e[0][2],e[0][3]]:[s[0]+(i[0]-s[0]),s[1]+(i[0]-s[0])],a=NdNodeStylesModel.getControlPoints(i[0],i[1],s[0],s[1],u[0],u[1],t),o[6]=a[0],o[7]=a[1])}))},NdNodeStylesModel.getPathSegmentTPoint=function(e,t){var r=e[0],o=e[1],n=e[2],i=e[3],a=e[4],s=e[5],u=e[6],c=e[7];return t>1&&(t=1),t<0&&(t=0),[Math.pow(1-t,3)*r+3*t*Math.pow(1-t,2)*a+3*t*t*(1-t)*u+t*t*t*n,Math.pow(1-t,3)*o+3*t*Math.pow(1-t,2)*s+3*t*t*(1-t)*c+t*t*t*i]},NdNodeStylesModel.comparePaths=function(e,t){if(e.length!==t.length)return!1;for(var r=!0,o=0;o<e.length;o++)for(var n=0;n<e[o].length;n++)if(e[o][n]!==t[o][n]){r=!1;break}return r},NdNodeStylesModel.extractPercentFraction=function(e){return parseFloat(e)/100},NdNodeStylesModel.syncArray=function(e,t,r){if(t.length>e.length&&t.splice(0,e.length),t.length<e.length)for(var _loop_1=function(e){t.push(r.map((function(t,r){return"function"==typeof t?t(e,r):t})))},o=0;o<e.length-t.length;o++)_loop_1(o)},NdNodeStylesModel.convertSimplePath=function(e,t){if(void 0===t&&(t=!1),e.length<2)throw new Error("Invalid path length");var r=[];return e.forEach((function(t,o){var n=t[0],i=t[1],a=[0,0,0,0,0,0,0,0];o<e.length-1&&(a[0]=n,a[1]=i),0!==o&&(r[o-1][2]=n,r[o-1][3]=i,r[o-1][4]=r[o-1][0],r[o-1][5]=r[o-1][1],r[o-1][6]=n,r[o-1][7]=i),r.push(a)})),r.pop(),t&&r[r.length-1][2]!==r[0][0]&&r[r.length-1][3]!==r[0][1]&&r.push([r[r.length-1][2],r[r.length-1][3],r[0][0],r[0][1],r[r.length-1][2],r[r.length-1][3],r[0][0],r[0][1]]),r},NdNodeStylesModel}(),w=function(){function NdStylesProperty(e,t,r,o){var n=this;this.ordering=0,this.set=function(){return n._value},this._value=t,this.default=t,this.ordering=e,this.value=r(this._value),this.reset=function(){n._value=t},this.get=function(){return n.value=r(n._value),n.value},o&&(this.set=function(e,t){return n._value=o(e,t),n.value=r(n._value),n._value})}return Object.defineProperty(NdStylesProperty.prototype,"protectedValue",{get:function(){return this._value},enumerable:!1,configurable:!0}),Object.defineProperty(NdStylesProperty.prototype,"publicValue",{get:function(){return this.get()},enumerable:!1,configurable:!0}),NdStylesProperty.prototype.sync=function(e,t){if(this._value instanceof Array&&(this._value.length>e.length&&this._value.splice(0,e.length),this._value.length<e.length))for(var r=e.length-this._value.length,_loop_1=function(e){"function"==typeof t?o._value.push(t(e)):t instanceof Array?o._value.push(t.map((function(t,r){return"function"==typeof t?t(e,r):t}))):o._value.push(t)},o=this,n=0;n<r;n++)_loop_1(n)},NdStylesProperty}(),k=function(e){function NdNodeStylePropertyAnimated(t,r,o,n,i,a){var s=e.call(this,t,r,o,n)||this;return s._start=!1,s._end=!1,s.starter=i,s.applier=a,s}return __extends(NdNodeStylePropertyAnimated,e),Object.defineProperty(NdNodeStylePropertyAnimated.prototype,"start",{get:function(){return this._start},set:function(e){this._start=e},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeStylePropertyAnimated.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),NdNodeStylePropertyAnimated.prototype.setStartValue=function(e){this.start=e},NdNodeStylePropertyAnimated.prototype.setEndValue=function(e){this._end=e},NdNodeStylePropertyAnimated.prototype.init=function(e){return this.starter(this.get(),e,this.setStartValue.bind(this),this.setEndValue.bind(this)),this},NdNodeStylePropertyAnimated.prototype.apply=function(e,t,r){return r=this.applier(r,e,t),this.set(r,e),this.publicValue},NdNodeStylePropertyAnimated}(w),S=function(e){function NdModBg(){var t=null!==e&&e.apply(this,arguments)||this;return t.fill=new k(0,"rgba(0,0,0,0)",(function(e){return e}),(function(e){return e instanceof Array?x.arrayToColor(e):e}),(function(e,t,r,o){r(x.colorToArray(e)),o("string"==typeof t?x.colorToArray(t):t)}),(function(e){return x.normalizeColor(e)})),t.bg=new w(0,[],(function(e){return e.map((function(e){return e.url}))}),(function(e,r){if(r.box){var o=__spreadArray([],t.bg.protectedValue,!0);if("string"==typeof e){NdModBg.destroyBackground(t);var n=new b(e);n.once("load",(function(){t.bg.protectedValue[0]===n&&r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,0,n)})),n.load(),o=[n]}else if(e instanceof Array)NdModBg.destroyBackground(t),o="string"==typeof e[0]?e.map((function(e,o){var n=new b(e);return n.loaded?r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,o,n):n.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,o,n)})),n})):__spreadArray([],e.map((function(e,o){return e.loaded||e.once("load",(function(){t.bg.protectedValue[o]===e&&r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,o,e)})),r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,o,e),e})),!0);else if(e instanceof b)NdModBg.destroyBackground(t),o=[e],e.loaded?NdModBg.updateSizeAndPosition(t,r.box.size,0,e):e.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,0,e)}));else if("object"==typeof e){var _loop_1=function(n){if(o[n]){if("string"==typeof e[n]&&e[n]!==o[n].url){o[n].destroy();var i=new b(e[n]);i.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,parseInt(n),i)})),o[n]=i}}else{o[n].destroy();var a=e[n];a.loaded?NdModBg.updateSizeAndPosition(t,r.box.size,parseInt(n),a):a.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,parseInt(n),a)})),o.push(e[n])}};for(var a in e)_loop_1(a)}else NdModBg.destroyBackground(t),o=[];return t.backgroundPosition.sync(o,[0,0]),t.backgroundPositionNumeric.sync(o,[0,0]),t.backgroundSize.sync(o,["auto","auto"]),t.backgroundSizeNumeric.sync(o,[function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],0,"auto"):0},function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],1,"auto"):0}]),o}return i.error("Background can be bound only to nodes with box"),[]})),t.backgroundSize=new w(1,[],(function(e){return e.map((function(e){return[e[0],e[1]]}))}),(function(e,r){var o=t.backgroundSize.protectedValue;if("string"==typeof e||"number"==typeof e)e="number"==typeof e&&e<0?0:e,o=t.bg.protectedValue.map((function(){return[e,e]}));else if(e instanceof Array)if("string"==typeof e[0]||"number"==typeof e[0]){var n=e;o=t.bg.protectedValue.map((function(){return[n[0],n[1]]}))}else{var i=e;o=t.bg.protectedValue.map((function(e,r){return i[r]?[i[r][0],i[r][1]]:t.bg.protectedValue[r]?t.bg.protectedValue[r]:["auto","auto"]}))}else for(var a in e)o[a]&&(o[a]=[e[a][0],e[a][1]]);return t.backgroundSizeNumeric.sync(o,[function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],0,o[e][0]):0},function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],1,o[e][1]):0}]),t.backgroundPosition.sync(o,[0,0]),t.backgroundPositionNumeric.sync(o,[0,0]),o})),t.backgroundSizeNumeric=new w(1,[],(function(e){return __spreadArray([],e,!0)})),t.backgroundPosition=new w(2,[],(function(e){return e.map((function(e){return[e[0],e[1]]}))}),(function(e,r){var o=t.backgroundPosition.protectedValue;if("string"==typeof e)/^[\d.]+%$/.test(e)&&(o=t.bg.protectedValue.map((function(){return[e,e]}))),/^(left|center|right)$/.test(e)&&(o=t.bg.protectedValue.map((function(r,o){return[e,t.backgroundPosition.protectedValue[o]?t.backgroundPosition.protectedValue[o][1]:0]}))),/^(top|middle|bottom)$/.test(e)&&(o=t.bg.protectedValue.map((function(r,o){return[t.backgroundPosition.protectedValue[o]?t.backgroundPosition.protectedValue[o][0]:0,e]})));else if("number"==typeof e)o=t.bg.protectedValue.map((function(){return[e,e]}));else if(e instanceof Array){if(e[0]instanceof Array){var n=e;o=t.bg.protectedValue.map((function(e,r){return n[r]?[n[r][0],n[r][1]]:t.backgroundPosition.protectedValue[r]?t.backgroundPosition.protectedValue[r]:[0,0]}))}if("string"==typeof e[0]||"number"==typeof e[0]){var i=e;o=t.bg.protectedValue.map((function(){return[i[0],i[1]]}))}}else for(var a in e)o[a]&&(o[a]=[e[a][0],e[a][1]]);return t.backgroundPositionNumeric.sync(o,[function(e){return r.box?NdModBg.readBgPosition(r.box.size,t.backgroundSize.protectedValue[e],t.bg.protectedValue[e],0,o[e][0]):0},function(e){return r.box?NdModBg.readBgPosition(r.box.size,t.backgroundSize.protectedValue[e],t.bg.protectedValue[e],0,o[e][1]):0}]),o})),t.backgroundPositionNumeric=new w(2,[],(function(e){return __spreadArray([],e,!0)})),t}return __extends(NdModBg,e),NdModBg.normalizeBgPosition=function(e){return"string"==typeof e?"left"===e||"top"==e?"0%":"bottom"===e||"right"===e?"100%":"center"===e||"middle"===e?"50%":e:e},NdModBg.readBgPosition=function(e,t,r,o,n){var i=this.normalizeBgPosition(n),a=this.readBgSize(e,r,o,t[o]);return"number"==typeof i?i:(e[o]-a)*x.extractPercentFraction(i)},NdModBg.readBgSize=function(e,t,r,o){return"string"==typeof o?"auto"!==o?e[r]*NdModBg.extractPercentFraction(o):t?t.size[r]:0:o},NdModBg.destroyBackground=function(e){e.bg.protectedValue.length&&e.bg.protectedValue.forEach((function(e){return e.destroy()}))},NdModBg.updateSizeAndPosition=function(e,t,r,o){"string"==typeof e.backgroundSize.protectedValue[r][0]&&(e.backgroundSizeNumeric.protectedValue[r][0]=NdModBg.readBgSize(t,o,0,e.backgroundSize.protectedValue[r][0])),"string"==typeof e.backgroundSize.protectedValue[r][1]&&(e.backgroundSizeNumeric.protectedValue[r][1]=NdModBg.readBgSize(t,o,1,e.backgroundSize.protectedValue[r][1])),"string"==typeof e.backgroundPosition.protectedValue[r][0]&&(e.backgroundPositionNumeric.protectedValue[r][0]=NdModBg.readBgPosition(t,e.backgroundSize.protectedValue[r],e.bg.protectedValue[r],0,e.backgroundPosition.protectedValue[r][0])),"string"==typeof e.backgroundPosition.protectedValue[r][1]&&(e.backgroundPositionNumeric.protectedValue[r][1]=NdModBg.readBgPosition(t,e.backgroundSize.protectedValue[r],e.bg.protectedValue[r],1,e.backgroundPosition.protectedValue[r][1]))},NdModBg}(x),M=function(e){function NdStyledNode(t){var r=e.call(this)||this;return r.modelEmitter=new EventEmitter,r.order=[],r.data=t,r.once("destroyed",(function(){r.modelEmitter.removeAllListeners(),r.data.bg&&S.destroyBackground(r.data),r.Box=void 0,r.data=void 0})),r}return __extends(NdStyledNode,e),NdStyledNode.prototype.style=function(e,t){var r=this;return"object"!=typeof e?void 0!==typeof t?(this.data[e].set(t,this),this.modelEmitter.emit(e),this):this.data[e].publicValue:(Object.keys(e).sort((function(e,t){return r.order.indexOf(e)-r.order.indexOf(t)})).forEach((function(t){void 0!==e[t]&&(r.data[t].set(e[t],r),r.modelEmitter.emit(t))})),this)},NdStyledNode.prototype.watch=function(e,t){var r=this;return e instanceof Array?e.forEach((function(e){return r.modelEmitter.on(e,t)})):this.modelEmitter.on(e,t),this},NdStyledNode.prototype.unwatch=function(e,t){var r=this;return e instanceof Array?e.forEach((function(e){return r.modelEmitter.off(e,t)})):this.modelEmitter.off(e,t),this},__decorate([alive],NdStyledNode.prototype,"style",null),__decorate([alive],NdStyledNode.prototype,"watch",null),__decorate([alive],NdStyledNode.prototype,"unwatch",null),NdStyledNode}(m),C={default:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*(r/=i)*r*r+o},linear:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return o+n*(r/=i)},linearSoft:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3],a=(r/=i)*r,s=a*r;return o+n*(4*s*a+-10*a*a+8*s+-2*a+r)},linearSoftOut:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3],a=(r/=i)*r,s=a*r;return o+n*(-3*s*a+11*a*a+-14*s+6*a+r)},linearSoftIn:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3],a=(r/=i)*r,s=a*r;return o+n*(-1*s*a+2*s)},easeInQuad:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*(r/=i)*r+o},easeOutQuad:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return-n*(r/=i)*(r-2)+o},easeInOutQuad:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return(r/=i/2)<1?n/2*r*r+o:-n/2*(--r*(r-2)-1)+o},easeInCubic:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*(r/=i)*r*r+o},easeOutCubic:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*((r=r/i-1)*r*r+1)+o},easeInOutCubic:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return(r/=i/2)<1?n/2*r*r*r+o:n/2*((r-=2)*r*r+2)+o},easeInQuart:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*(r/=i)*r*r*r+o},easeOutQuart:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return-n*((r=r/i-1)*r*r*r-1)+o},easeInOutQuart:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return(r/=i/2)<1?n/2*r*r*r*r+o:-n/2*((r-=2)*r*r*r-2)+o},easeInQuint:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*(r/=i)*r*r*r*r+o},easeOutQuint:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*((r=r/i-1)*r*r*r*r+1)+o},easeInOutQuint:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return(r/=i/2)<1?n/2*r*r*r*r*r+o:n/2*((r-=2)*r*r*r*r+2)+o},easeInSine:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return-n*Math.cos(r/i*(Math.PI/2))+n+o},easeOutSine:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*Math.sin(r/i*(Math.PI/2))+o},easeInOutSine:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return-n/2*(Math.cos(Math.PI*r/i)-1)+o},easeInExpo:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return 0===r?o:n*Math.pow(2,10*(r/i-1))+o},easeOutExpo:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return r===i?o+n:n*(1-Math.pow(2,-10*r/i))+o},easeInOutExpo:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return 0===r?o:r===i?o+n:(r/=i/2)<1?n/2*Math.pow(2,10*(r-1))+o:n/2*(2-Math.pow(2,-10*--r))+o},easeInCirc:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return-n*(Math.sqrt(1-(r/=i)*r)-1)+o},easeOutCirc:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return n*Math.sqrt(1-(r=r/i-1)*r)+o},easeInOutCirc:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return(r/=i/2)<1?-n/2*(Math.sqrt(1-r*r)-1)+o:n/2*(Math.sqrt(1-(r-=2)*r)+1)+o},easeInBack:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3],a=(r/=i)*r,s=a*r;return o+n*(15.26*s*a+-43.56*a*a+39.8*s+-10.6*a+.1*r)},easeOutBack:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3],a=(r/=i)*r,s=a*r;return o+n*(11.24*s*a+-23.96*a*a+12.24*s+1.44*a+.04*r)},easeInOutBack:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3],a=(r/=i)*r,s=a*r;return o+n*(22.92*s*a+-57.78*a*a+45*s+-9.28*a+.14*r)},easeOutBounce:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],o=e[1],n=e[2],i=e[3];return(r/=i)<1/2.75?n*(7.5625*r*r)+o:r<2/2.75?n*(7.5625*(r-=1.5/2.75)*r+.75)+o:r<2.5/2.75?n*(7.5625*(r-=2.25/2.75)*r+.9375)+o:n*(7.5625*(r-=2.625/2.75)*r+.984375)+o}},A=function(){function NdMorphine(e,t,r,o,n,i){this.duration=1,this.repeat=0,this.repeatCount=1,this.start_time=0,this.progress=0,this._paused=!1,this._done=!1,this.start=e,this.end=t,this.duration=r>0?r:0,this.callback=o,this.easing=n,this.repeat=i,this.start_time=(new Date).getTime()}return Object.defineProperty(NdMorphine.prototype,"done",{get:function(){return this._done},enumerable:!1,configurable:!0}),NdMorphine.prototype.stop=function(){this._done=!0},NdMorphine.prototype.pause=function(){this._paused=!0},Object.defineProperty(NdMorphine.prototype,"paused",{get:function(){return this._paused},enumerable:!1,configurable:!0}),NdMorphine.prototype.tick=function(e){this._done||(this._paused?this.start_time=(new Date).getTime()-this.duration*this.progress:(this.progress=(e-this.start_time)/this.duration,this.progress>1&&(this.progress=1),1==this.progress&&(this.repeat&&this.repeatCount>0?(this.repeatCount!==1/0&&this.repeatCount--,this.start_time=(new Date).getTime()):this._done=!0),this.callback(this.progress,this.easing((e-this.start_time)/1e3,this.start,this.end-this.start,this.duration/1e3),this.start_time)))},NdMorphine}(),P=function(e){function NdAnimation(t,r,o,n,i){void 0===o&&(o=1e3),void 0===n&&(n="default"),void 0===i&&(i=!1);var a=e.call(this)||this;return a.stack=[],a.target=null,a._queue=!1,a._active=!1,a._done=!1,a.stack=r,a.easing=n,a.duration=o,a._queue=i,a.node=t,a}return __extends(NdAnimation,e),Object.defineProperty(NdAnimation.prototype,"queue",{get:function(){return this._queue},enumerable:!1,configurable:!0}),Object.defineProperty(NdAnimation.prototype,"active",{get:function(){return this._active},enumerable:!1,configurable:!0}),Object.defineProperty(NdAnimation.prototype,"done",{get:function(){return this._done},enumerable:!1,configurable:!0}),NdAnimation.prototype.indexOf=function(e){return this.stack.findIndex((function(t){return t.name===e}))},Object.defineProperty(NdAnimation.prototype,"props",{get:function(){return this.stack.map((function(e){return e.name}))},enumerable:!1,configurable:!0}),NdAnimation.prototype.stop=function(e){if(e){var t=this.indexOf(e.toString());t>-1&&this.stack.splice(t,1)}else this.stack=[]},NdAnimation.prototype.start=function(){var e=this;this.active||(this._active=!0,this.stack=this.stack.filter((function(e){return e.ani.init(e.value)&&!1!==e.ani.start&&!1!==e.ani.end})),this.morphine=new A(0,1,this.duration,(function(r,o){0===e.stack.length?(e.cast("complete",new t(e.node,{ease:1,progress:1})),e.morphine.stop()):(e.stack.forEach((function(t){t.result=e.tick(o,r,t.ani.start,t.ani.end),e.node.style(t.name,t.result)})),e.cast("step",new t(e.node,{ease:o,progress:r})),1===r&&e.cast("complete",new t(e.node,{progress:1,ease:1})))}),C[this.easing],0))},NdAnimation.prototype.tick=function(e,t,r,o){for(var n=this;"function"==typeof r;)r=r();for(;"function"==typeof o;)o=o();var i=o;if(typeof r!=typeof o)throw new Error("start value and end value are of different types");if("number"==typeof r&&(i=t>=1?o:r+(o-r)*e),"string"==typeof r){var a=parseFloat(r);i=a+(parseFloat(o)-a)*e+"%"}if("object"==typeof r)if(Array.isArray(r)&&Array.isArray(o)){if(r.length!=o.length)throw new Error("Start and end values are of different lengths");i=r.map((function(r,i){return n.tick(e,t,r,o[i])}))}else i=Object.fromEntries(Object.keys(r).map((function(i){return[i,n.tick(e,t,r[i],o[i])]})));return i},NdAnimation}(n),T=function(e){function Node(t,r,o){var n=e.call(this,o,r)||this;return n.Cache=new l,n.data=r,n.Matrix=new d(n,r,n.Cache),n.Compiler=new f(n,r,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.render.apply(n,e)})),n.TreeConnector=o.Tree.register(t,n,n.Compiler.render),n.Mouse=o.Mouse.register(n,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.cast.apply(n,e)}),(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.test.apply(n,e)})),n.pipe=n.Compiler.pipe.bind(n.Compiler),n.unpipe=n.Compiler.unpipe.bind(n.Compiler),n.condition=n.Compiler.filter.bind(n.Compiler),n.order=Object.keys(r).sort((function(e,t){return r[e].ordering-r[t].ordering})),n.watch(["position","rotate","origin","skew","translate","scale"],(function(){n.Matrix.purge(),n.TreeConnector.forEachLayer((function(e){return e.matrix.purgeInversion(e)}))})),n.watch(["position","origin","translate"],(function(){return n.purgeBox()})),n.once("destroyed",(function(){n.Assembler&&(n.Assembler=n.Assembler.destroy()),n.TreeConnector=n.TreeConnector.destroy()})),n}return __extends(Node,e),Object.defineProperty(Node.prototype,"id",{get:function(){return this.TreeConnector.id},set:function(e){this.TreeConnector.tree.rename(this.id,e)},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"z",{get:function(){return this.TreeConnector.z},set:function(e){this.TreeConnector.tree.z(this,e)},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"parent",{get:function(){return this.TreeConnector.parent},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"matrix",{get:function(){return this.Matrix.value},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"width",{get:function(){return this.Box?this.Box.value.container.size[0]:0},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"height",{get:function(){return this.Box?this.Box.value.container.size[1]:0},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"left",{get:function(){return this.Box?this.Box.value.container.position[0]:0},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"top",{get:function(){if(this.Box)return this.Box.value.container.position[1]},enumerable:!1,configurable:!0}),Node.prototype.purgeBox=function(){return this.Box instanceof h&&this.Box.purge(),this},Node.transformContext=function(e,t){t.transform.apply(t,e.matrix.extract())},Node.drawLinearPathBg=function(e,t,r){e.path.protectedValue.length>1&&e.bg.protectedValue.length&&(t.save(),Node.clipBezierPath(e.path.protectedValue,t),Node.drawBg(e,t,r))},Node.drawBg=function(e,t,r){e.bg.protectedValue.length&&e.bg.protectedValue.forEach((function(o,n){if(o.loaded){var i=o.export();if(i){t.save();var a=e.backgroundSizeNumeric.protectedValue[n][0],s=e.backgroundSizeNumeric.protectedValue[n][1],u=e.backgroundPositionNumeric.protectedValue[n][0],c=e.backgroundPositionNumeric.protectedValue[n][1];t.translate(u,c),t.drawImage(i,0,0,a,s),t.restore()}}else o.once("load",(function(){r.update("bg")}))}))},Node.drawPathBg=function(e,t,r){e.interpolation?Node.drawBezierPathBg(e,t,r):Node.drawLinearPathBg(e,t,r)},Node.drawBezierPathBg=function(e,t,r){t.save(),Node.clipBezierPath(e.path.protectedValue,t,!0),Node.drawBg(e,t,r),t.restore()},Node.clipBezierPath=function(e,t,r,o){void 0===r&&(r=!1),void 0===o&&(o=!0),e.length>1&&(Node.registerPath(e,t,r,o),t.clip())},Node.registerPath=function(e,t,r,o){void 0===r&&(r=!1),void 0===o&&(o=!0),e.length>1&&(t.beginPath(),t.moveTo(e[0][0],e[0][1]),r?e.forEach((function(e){e[0]===e[4]&&e[1]===e[5]&&e[2]===e[6]&&e[3]===e[7]?t.lineTo(e[2],e[3]):t.bezierCurveTo(e[4],e[5],e[6],e[7],e[2],e[3])})):e.forEach((function(e){t.lineTo(e[2],e[3])})),o&&t.closePath())},Node.drawFill=function(e,t){t.save(),t.lineCap=e.cap.protectedValue,Node.registerPath(e.path.protectedValue,t,!!e.interpolation,!0),t.fillStyle=e.fill.protectedValue,t.fill(),t.restore()},Node.drawStroke=function(e,t){e.path.protectedValue.forEach((function(r,o){var n=r[0],i=r[1],a=r[2],s=r[3],u=r[4],c=r[5],d=r[6],l=r[7];e.strokeWidth.protectedValue[o]<.1?t.moveTo(a,s):(t.beginPath(),t.moveTo(n,i),t.strokeStyle=e.strokeColor.protectedValue[o],t.lineWidth=e.strokeWidth.protectedValue[o],t.setLineDash(e.strokeStyle.protectedValue[o]),e.interpolation.protectedValue?t.bezierCurveTo(u,c,d,l,a,s):t.lineTo(a,s),t.stroke())}))},Node.applyBoxAnchor=function(e,t,r,o){"center"===o.anchor.protectedValue[0]&&(e[0]-=t/2),"right"===o.anchor.protectedValue[0]&&(e[0]-=t),"middle"===o.anchor.protectedValue[1]&&(e[1]-=r/2),"bottom"==o.anchor.protectedValue[1]&&(e[1]-=r)},__decorate([alive],Node.prototype,"id",null),__decorate([alive],Node.prototype,"z",null),__decorate([alive],Node.prototype,"parent",null),__decorate([alive],Node.prototype,"matrix",null),__decorate([alive],Node.prototype,"width",null),__decorate([alive],Node.prototype,"height",null),__decorate([alive],Node.prototype,"left",null),__decorate([alive],Node.prototype,"top",null),__decorate([alive],Node.prototype,"purgeBox",null),Node}(function(e){function NdAnimatedNode(t,r){var o=e.call(this,r)||this;o.animations=[];var callback=function(e,t){return o.tickElementAnimations(t)};return t.Canvas.queue(-2,callback),o.once("destroyed",(function(){t.Canvas.unQueue(callback),o.animations=void 0})),o}return __extends(NdAnimatedNode,e),NdAnimatedNode.prototype.checkQueue=function(){var e=this;this.animations=this.animations.filter((function(t){if(t.active)return!t.done;if(t.queue)return e.findCompetitors(t).length||t.start(),!0;var r=e.findCompetitors(t);return r.length&&r.forEach((function(e){t.props.forEach((function(t){return e.stop(t)}))})),t.start(),!0}))},NdAnimatedNode.prototype.findCompetitors=function(e){for(var t=[],r=0;r<this.animations.length;r++)if(this.animations[r]!==e&&this.animations[r].active&&!this.animations[r].done)for(var o=0;o<e.props.length;o++)this.animations[r].indexOf(e.props[o])>-1&&t.push(this.animations[r]);return t},NdAnimatedNode.prototype.tickElementAnimations=function(e){if(this.animations.length){var t=e.getTime();this.animations.forEach((function(e){e.morphine&&e.morphine.tick(t)}))}},Object.defineProperty(NdAnimatedNode.prototype,"animated",{get:function(){return!!this.animations.length},enumerable:!1,configurable:!0}),NdAnimatedNode.prototype.animate=function(e,t,r){var o=this,n=Object.keys(e).sort((function(e,t){return o.data[e].ordering-o.data[t].ordering})).map((function(t){return{value:e[t],name:t,ani:o.data[t]}}));if("number"==typeof t||void 0===t)(s=new P(this,n,t,r)).on("complete",(function(){return o.checkQueue})),this.animations.push(s);else if("object"==typeof t){var a=t,s=new P(this,n,null==a?void 0:a.duration,null==a?void 0:a.easing,null==a?void 0:a.queue);a.complete&&s.on("complete",a.complete),a.step&&s.on("step",a.step),s.on("complete",(function(){return o.checkQueue}))}else i.negative("Invalid animation config",this);return this.checkQueue(),this},NdAnimatedNode.prototype.stop=function(e){return this.animations.forEach((function(t){return t.stop(e)})),this},__decorate([alive],NdAnimatedNode.prototype,"checkQueue",null),__decorate([alive],NdAnimatedNode.prototype,"findCompetitors",null),__decorate([alive],NdAnimatedNode.prototype,"tickElementAnimations",null),__decorate([alive],NdAnimatedNode.prototype,"animated",null),__decorate([alive],NdAnimatedNode.prototype,"animate",null),__decorate([alive],NdAnimatedNode.prototype,"stop",null),NdAnimatedNode}(M)),z=function(e){function NdModBase(){var t=null!==e&&e.apply(this,arguments)||this;return t.position=new k(2,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,o){r(e),o("number"==typeof t?[t,t]:[t[0],t[1]])}),(function(e){return[e[0],e[1]]})),t.scale=new k(0,[1,1],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,o){r(e),"number"==typeof t?(t<0&&(t=0),o([t,t])):(t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),o([t[0],t[1]]))}),(function(e){return[e[0],e[1]]})),t.rotate=new k(0,0,(function(e){return x.radToDeg(e)}),(function(e){return x.degToRad(e)}),(function(e,t,r,o){r(e),o(t)}),(function(e){return e})),t.translate=new k(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,o){r(e),o("number"==typeof t?[t,t]:[t[0],t[1]])}),(function(e){return[e[0],e[1]]})),t.skew=new k(0,[0,0],(function(e){return[x.radToDeg(e[0]),x.radToDeg(e[1])]}),(function(e){return e instanceof Array?[x.degToRad(e[0]),x.degToRad(e[1])]:[x.degToRad(e),x.degToRad(e)]}),(function(e,t,r,o){"number"==typeof t&&(t=[t,t]),r(e),o([t[0],t[1]])}),(function(e){return e})),t.opacity=new k(0,1,(function(e){return e}),(function(e){return e>1?1:e<0?0:e}),(function(e,t,r,o){t<0&&(t=0),t>1&&(t=1),r(e),o(t)}),(function(e){return e<0&&(e=0),e>1&&(e=1),e})),t.origin=new k(0,[.5,.5],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,o){r(e),o("number"==typeof t?[t,t]:[t[0],t[1]])}),(function(e){return[e[0],e[1]]})),t.blending=new w(0,"source-over",(function(e){return e}),(function(e){return e})),t}return __extends(NdModBase,e),NdModBase}(x),E=function(e){function Group(t,r){var o=e.call(this,t,new z,r)||this;return o.Box=new h(o,o.Cache,(function(){var e=1/0,t=1/0,r=-1/0,n=-1/0;return o.TreeConnector.forEachLayer((function(o){var i=o.box;i&&(e=Math.min(e,i.position[0]),t=Math.min(t,i.position[1]),n=Math.max(n,i.position[0]+i.size[0]),r=Math.max(r,i.position[1]+i.size[1]))})),isFinite(e)||(e=0),isFinite(n)||(n=0),isFinite(t)||(t=0),isFinite(r)||(r=0),[e+o.data.position.get()[0],t+o.data.position.get()[1],n-e,r-t,0,0,0,0]})),o.render=function(e,t,n){if(o.destroyed)throw new Error("Attempt to render destroyed Group");return T.transformContext(o,e),o.TreeConnector.forEachLayer((function(o){r.Tree.compile(o,e,t,n)})),e},o.test=function(e){if(o.destroyed)throw new Error("Attempt to test destroyed Group");var t=!1;return o.TreeConnector.forEachLayer((function(o){r.Mouse.checkNode(o,e)&&(t=o)})),t},o}return __extends(Group,e),Group.prototype.export=function(){},Group.prototype.forEachChild=function(e){this.TreeConnector.forEachLayer(e)},Group.prototype.append=function(e){var t=this;return e instanceof Array?e.forEach((function(e){t.TreeConnector.tree.append(t,e.id)})):this.TreeConnector.tree.append(this,e.id),this},__decorate([alive],Group.prototype,"export",null),__decorate([alive],Group.prototype,"forEachChild",null),__decorate([alive],Group.prototype,"append",null),Group}(T),V=function(e){function NdNodeConnector(t,r){var o=e.call(this)||this;return o._parent=null,o.layers={},o.layer=0,o.identifier=t,o.tree=r,o.once("destroyed",(function(){o.layers={},o.parent=null})),o}return __extends(NdNodeConnector,e),NdNodeConnector.prototype.zChild=function(e,t,r){this.layers[t]||(this.layers[t]=[]),r?this.layers[t].unshift(e):this.layers[t].push(e)},NdNodeConnector.prototype.removeChild=function(e,t){this.layers[t]=this.layers[t].filter((function(t){return t!==e})),this.layers[t].length||delete this.layers[t]},Object.defineProperty(NdNodeConnector.prototype,"z",{get:function(){return this.layer},set:function(e){this.layer=e},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeConnector.prototype,"parent",{get:function(){return this._parent},set:function(e){this._parent=e},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeConnector.prototype,"id",{get:function(){return this.identifier},set:function(e){this.identifier=e},enumerable:!1,configurable:!0}),NdNodeConnector.prototype.forEachLayer=function(e){var _loop_1=function(r){t.layers[r].forEach((function(t,o){e(t,o,parseInt(r))}))},t=this;for(var r in this.layers)_loop_1(r)},NdNodeConnector}(v),B=function(){function Nodes(e){var t=this;this._root={},this.clear=!1,this.ids=new Set,this.nodes={},this.drawNodeTree=function(e,r,o){t._root.node&&e&&(t.clear&&e.clearRect(0,0,e.canvas.offsetWidth,e.canvas.offsetHeight),t.compile(t._root.node,e,r,o))},e.queue(0,this.drawNodeTree)}return Nodes.prototype.treeViolation=function(e,t){return e===t||!!e.parent&&this.treeViolation(e.parent,e)},Nodes.prototype.register=function(e,t,r){var o=this;if(this._root.node)this.ids.has(e)?i.warn("Node ".concat(e," already exists. Ignored.")):(this.ids.add(e),this.nodes[e]={node:t,render:r,connector:new V(e,this)},this._root.node?this.append(this._root.node,e):i.error("Application root lost. Not root group node to append to"));else{if(!(t instanceof E))throw new Error("Root node must be a Group instance");var n={node:t,render:r,connector:new V(e,this)};this._root=n,this.ids.add(n.connector.id),this.nodes[e]=n,i.positive("Node ".concat(e," registered"))}return t.once("destroyed",(function(){return o.unregister(t)})),this.nodes[e].connector},Nodes.prototype.unregister=function(e){this.ids.has(e.id)&&(this.unmount(e),delete this.nodes[e.id],this.ids.delete(e.id),i.positive("Node ".concat(e.id," unregistered")))},Nodes.prototype.unmount=function(e){if(this.nodes[e.id].connector.parent){var t=this.nodes[e.id].connector.parent;t&&this.nodes[t.id].connector.removeChild(e,e.z)}this.nodes[e.id].connector.parent=null,e==this._root.node&&(this._root={},i.warn("Unmounting root group.")),i.positive("Node ".concat(e.id," unmounted"))},Nodes.prototype.compile=function(e,t,r,o){this.nodes[e.id]&&this.nodes[e.id].node===e?this.nodes[e.id].node.destroyed?i.warn("Attempt to compile a destroyed node. Ignored"):(t.save(),this.nodes[e.id].render(t,r,o),t.restore()):i.error("Attempt to render unmounted node ".concat(e.id))},Nodes.prototype.rename=function(e,t){this.ids.has(e)&&(this.nodes[e].node.destroyed?i.warn("Unable to rename destroyed node. Ignored"):(this.ids.has(t)||(this.nodes[t]=this.nodes[e],this.ids.add(t),this.ids.delete(e),this.nodes[t].connector.id=t,delete this.nodes[e]),i.warn("Can not rename node ".concat(e,". Another node with id ").concat(t," already exists")))),i.warn("Attempt to rename non existing node ".concat(e))},Nodes.prototype.z=function(e,t){if(this.ids.has(e.id))if(this.nodes[e.id].node.destroyed)i.warn("Can not change z of a destroyed node. Ignored");else{if(this.nodes[e.id]){var r=this.nodes[e.id].connector.parent;r&&this.nodes[r.id].connector.zChild(e,t)}this.nodes[e.id].connector.z=t}},Nodes.prototype.get=function(e){return this.nodes[e].node},Object.defineProperty(Nodes.prototype,"root",{get:function(){return this._root.node},enumerable:!1,configurable:!0}),Nodes.prototype.append=function(e,t,r){if(void 0===r&&(r=!1),e.destroyed)i.warn("Appending to a destroyed group. Ignored");else if(this.ids.has(e.id)&&this.ids.has(t))if(this.nodes[t].node.destroyed)i.warn("Appending destroyed node. Ignored");else if(this.treeViolation(e,this.nodes[t].node))i.warn("Node tree violation. Appending node ".concat(t," to itself or it's child. "));else{if(this.nodes[t].connector.parent){var o=this.nodes[t].connector.parent;this.nodes[o.id].connector.removeChild(this.nodes[t].node,this.nodes[t].connector.z)}this.nodes[e.id].connector.zChild(this.nodes[t].node,this.nodes[t].connector.z,r),this.nodes[t].connector.parent=e,i.positive("Node ".concat(t," appended to ").concat(e.id))}else i.warn("Manipulating non registered node ".concat(t," or ").concat(e.id,"."))},Nodes}(),F=function(){function NdNodeMouseDispatcher(e,t,r){this._disabled=!1,this.test=t,this.transform=r,this.emit=e}return NdNodeMouseDispatcher.prototype.cast=function(e,t){return!this.disabled&&this.emit(e,t)},Object.defineProperty(NdNodeMouseDispatcher.prototype,"disabled",{get:function(){return this._disabled},enumerable:!1,configurable:!0}),NdNodeMouseDispatcher.prototype.disable=function(){this._disabled=!0},NdNodeMouseDispatcher.prototype.enable=function(){this._disabled=!1},NdNodeMouseDispatcher}(),O=function(){function Mouse(e,t,o){var n=this;this.Nodes={},this.currentHover=!1,this.currentFocus=!1,this.mouseDown=!1,this.dragging=!1,this.eventStack=[],this.postponed=[],this.maxEventsPerQueue=5,this.maxEventsResolveTimePerFrame=t.frameTime,e.queue(this.resolveStack.bind(this)),e.on("mouseDown",(function(e){n.mouseDown=!0,n.currentHover&&n.resolveOrPostpone(n.currentHover,"mouseDown",new r(n.currentHover,__assign({},e.data))),n.currentFocus&&n.currentFocus!==n.currentHover&&n.currentFocus!==n.currentHover&&(n.resolveOrPostpone(n.currentFocus,"blur",new r(n.currentFocus,__assign({},e.data))),n.currentHover&&n.resolveOrPostpone(n.currentHover,"focus",new r(n.currentHover,__assign({},e.data))),n.currentFocus=n.currentHover)})),e.on("mouseUp",(function(e){n.mouseDown=!1,n.dragging&&(n.currentFocus&&n.resolveOrPostpone(n.currentFocus,"dragEnd",new r(n.currentFocus,__assign({},e.data))),n.dragging=!1),n.currentHover&&n.resolveOrPostpone(n.currentHover,"mouseUp",new r(n.currentHover,__assign({},e.data)))})),e.on("mouseLeave",(function(e){n.dragging&&(n.currentFocus&&n.resolveOrPostpone(n.currentFocus,"dragEnd",new r(n.currentFocus,__assign({},e.data))),n.dragging=!1),n.currentHover&&n.resolveOrPostpone(n.currentHover,"mouseLeave",new r(n.currentHover,__assign({},e.data))),n.currentFocus=!1,n.currentHover=!1,n.mouseDown=!1})),e.on("mouseMove",(function(e){if(o.root)if(n.dragging)n.mouseDown&&n.currentFocus&&(n.dragging?n.resolveOrPostpone(n.currentFocus,"dragMove",new r(n.currentFocus,__assign({},e.data))):(n.resolveOrPostpone(n.currentFocus,"dragStart",new r(n.currentFocus,__assign({},e.data))),n.dragging=!0));else{var t=n.checkNode(o.root,e.data.cursor);t!==n.currentHover?(n.currentHover&&n.resolveOrPostpone(n.currentHover,"mouseLeave",new r(n.currentHover,__assign({},e.data))),t&&n.resolveOrPostpone(t,"mouseEnter",new r(t,__assign({},e.data))),n.currentHover=t):t&&n.resolveOrPostpone(t,"mouseMove",new r(t,__assign({},e.data)))}}))}return Mouse.prototype.checkNode=function(e,t){if(this.Nodes[e.id])return!this.Nodes[e.id].node.destroyed&&(!this.Nodes[e.id].node.destroyed&&this.Nodes[e.id].handler.test(t));throw new Error("Root swap")},Mouse.prototype.resolveStack=function(){if(this.eventStack.length){for(var e=0,t=(new Date).getTime(),r=0;this.eventStack[0]&&e<this.maxEventsPerQueue&&r<this.maxEventsResolveTimePerFrame;)this.eventStack.shift()(),e++,r=(new Date).getTime()-t;!this.eventStack.length&&this.postponed[0]&&this.eventStack.push(this.postponed.shift())}},Mouse.prototype.getStackCallback=function(e,t,r){var o=this;return function(){if(e&&!e.destroyed){var n=o.Nodes[e.id].handler.cast(t,r);n&&n.propagate&&o.eventStack.push(o.getStackCallback(o.Nodes[e.id].node.parent,t,r))}}},Mouse.prototype.resolveOrPostpone=function(e,t,r){this.eventStack.length?this.postponed.push(this.getStackCallback(e,t,r)):this.eventStack.push(this.getStackCallback(e,t,r))},Mouse.prototype.register=function(e,t,r,o){var n=this;if(this.Nodes[e.id])throw new Error("Another Nodas with id ".concat(e.id," has already been registered as mouse sensitive"));return this.Nodes[e.id]={node:e,handler:new F(t.bind(e),r,o)},e.once("destroy",(function(){return delete n.Nodes[e.id]})),this.Nodes[e.id].handler},Mouse}(),L=function(e){function NdCanvas(){var t=e.call(this)||this;t.size=[0,0],t._element=document.createElement("canvas");var r=t._element.getContext("2d");return t._context=r,t.once("destroyed",(function(){t._element=void 0,t._context=void 0})),t}return __extends(NdCanvas,e),Object.defineProperty(NdCanvas.prototype,"element",{get:function(){return this._element},enumerable:!1,configurable:!0}),Object.defineProperty(NdCanvas.prototype,"context",{get:function(){return this._context},enumerable:!1,configurable:!0}),Object.defineProperty(NdCanvas.prototype,"width",{get:function(){return this.size[0]},set:function(e){this.size[0]=e,this._element.setAttribute("width",e.toString())},enumerable:!1,configurable:!0}),Object.defineProperty(NdCanvas.prototype,"height",{get:function(){return this.size[1]},set:function(e){this._element.setAttribute("height",e.toString())},enumerable:!1,configurable:!0}),__decorate([alive],NdCanvas.prototype,"element",null),__decorate([alive],NdCanvas.prototype,"context",null),__decorate([alive],NdCanvas.prototype,"width",null),__decorate([alive],NdCanvas.prototype,"height",null),NdCanvas}(v),R=function(e){function NdLayer(t){var r=e.call(this)||this;return r.canvas=new L,r.width=0,r.height=0,r.f=void 0,r.ready=!1,r.ordering=0,r.f=t.bind(r),r.once("destroyed",(function(){r.canvas=r.canvas.destroy(),r.f=void 0})),r}return __extends(NdLayer,e),NdLayer.prototype.draw=function(e){this.ready||this.canvas.context&&(this.canvas.context.save(),this.canvas.context.clearRect(0,0,this.width,this.height),this.f&&this.f(this.canvas.context),this.canvas.context.restore(),this.ready=!0),e.drawImage(this.canvas.element,0,0)},Object.defineProperty(NdLayer.prototype,"resolver",{get:function(){return this.f},enumerable:!1,configurable:!0}),Object.defineProperty(NdLayer.prototype,"size",{get:function(){return[this.width,this.height]},set:function(e){var t=e[0],r=e[1];t===this.width&&r===this.height||(this.canvas.width=t,this.canvas.height=r,this.ready=!1,this.width=t,this.height=r)},enumerable:!1,configurable:!0}),Object.defineProperty(NdLayer.prototype,"order",{get:function(){return this.ordering},set:function(e){this.ordering=e},enumerable:!1,configurable:!0}),NdLayer.prototype.update=function(){this.ready=!1},__decorate([alive],NdLayer.prototype,"draw",null),__decorate([alive],NdLayer.prototype,"resolver",null),__decorate([alive],NdLayer.prototype,"size",null),__decorate([alive],NdLayer.prototype,"order",null),__decorate([alive],NdLayer.prototype,"update",null),NdLayer}(v),I=function(e){function NdNodeAssembler(t){var r=e.call(this)||this;return r.output=new L,r.pipe=[],r.layers={},r.w=0,r.h=0,r.resized=!1,r._ready=!1,r.update=function(){},r.layers=Object.fromEntries(t.map((function(e,t){if(r.pipe){var o=new R(e.resolver);return r.pipe.push({order:t,layer:o}),[e.name,o]}throw new Error("How did you get here?")}))),r.pipe.sort((function(e,t){return e.order-t.order})),r.update=function(e){r.destroyed?i.warn("Attempt to update a destroyed Node Assembler. Ignored"):e?r.layers[e]&&(r._ready=!1,r.layers[e].update()):Object.values(r.layers).forEach((function(e){e.update()}))},r.once("destroyed",(function(){r.output=void 0,r.pipe=void 0,Object.values(r.layers).forEach((function(e){return e.destroy()})),r.layers=void 0})),r}return __extends(NdNodeAssembler,e),Object.defineProperty(NdNodeAssembler.prototype,"ready",{get:function(){return this._ready&&!this.destroyed},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeAssembler.prototype,"size",{get:function(){return this.destroyed?(i.warn("Attempt to access size of a destroyed Node Assembler"),[0,0]):[this.w,this.h]},set:function(e){this.pipe&&this.output&&(this.w=e[0],this.h=e[1],this.output.width=e[0],this.output.height=e[1],this.pipe.forEach((function(t){t.layer.size=e})))},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeAssembler.prototype,"width",{get:function(){return this.destroyed?(i.warn("Attempt to access width of a destroyed Node Assembler"),0):this.w},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeAssembler.prototype,"height",{get:function(){return this.destroyed?(i.warn("Attempt to access height of a destroyed Node Assembler"),0):this.h},enumerable:!1,configurable:!0}),NdNodeAssembler.prototype.export=function(e){var t=this;if(!this.resized){this.resized=!0;var r=e.boundingRect;r&&(this.size[0]===r.size[0]&&this.size[1]===r.size[1]||(this.size=[r.size[0],r.size[1]],this.cast("resize",new o(this,null))))}return this._ready||(this.output.context.clearRect(0,0,this.w,this.h),this.pipe.forEach((function(e){t.output&&e.layer.draw(t.output.context)})),this._ready=!0,this.cast("update",new o(this,null))),this.output.element},NdNodeAssembler.prototype.resize=function(){this.resized=!1,this._ready=!1},__decorate([alive],NdNodeAssembler.prototype,"ready",null),__decorate([alive],NdNodeAssembler.prototype,"size",null),__decorate([alive],NdNodeAssembler.prototype,"width",null),__decorate([alive],NdNodeAssembler.prototype,"height",null),__decorate([alive],NdNodeAssembler.prototype,"export",null),__decorate([alive],NdNodeAssembler.prototype,"resize",null),NdNodeAssembler}(v),j=function(e){function NdModFreeStroke(t){void 0===t&&(t=!1);var r=e.call(this)||this;return r.interpolation=new w(0,0,(function(e){return e/.4*100}),(function(e){return e>100&&(e=100),e<0&&(e=0),e=e/100*.4})),r.cap=new w(2,"butt",(function(e){return e}),(function(e){return e})),r.strokeColor=new w(2,[],(function(e){return e.map((function(e){return NdModFreeStroke.colorToArray(e)}))}),(function(e){var t=[];return"string"==typeof e&&(t=r.path.protectedValue.map((function(){return e}))),e instanceof Array&&("string"==typeof e[0]&&(t=r.path.protectedValue.map((function(t,o){return e[o]?e[o]:r.strokeColor.protectedValue[o]?r.strokeColor.protectedValue[o]:r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]?r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]:"rgba(0,0,0,1)"}))),e[0]instanceof Array&&(t=r.path.protectedValue.map((function(t,o){return e[o]?NdModFreeStroke.arrayToColor(e[o]):r.strokeColor.protectedValue[o]?r.strokeColor.protectedValue[o]:r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]?r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]:"rgba(0,0,0,1)"}))),"number"==typeof e[0]&&(t=r.path.protectedValue.map((function(){return NdModFreeStroke.arrayToColor(e)})))),t})),r.strokeWidth=new w(2,[],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?r.path.protectedValue.map((function(){return e})):r.path.protectedValue.map((function(t,o){return"number"==typeof e[o]?e[o]:"number"==typeof r.strokeWidth.protectedValue[o]?r.strokeWidth.protectedValue[o]:"number"==typeof r.strokeWidth.protectedValue[r.strokeWidth.protectedValue.length-1]?r.strokeWidth.protectedValue[r.strokeWidth.protectedValue.length-1]:1}))})),r.strokeStyle=new w(2,[],(function(e){return e.map((function(e){return __spreadArray([],e,!0)}))}),(function(e){return e[0],r.path.protectedValue.map((function(){return __spreadArray([],e,!0)}))})),r.path=new w(1,[],(function(e){return NdModFreeStroke.convertComplexPath(e)}),(function(e){var o=NdModFreeStroke.convertSimplePath(e,t);return r.path.protectedValue.length!==o.length&&(r.strokeStyle.sync(o,[0]),r.strokeWidth.sync(o,1),r.strokeColor.sync(o,"rgba(0,0,0,1")),o})),r}return __extends(NdModFreeStroke,e),NdModFreeStroke}(x),D=function(e){function NdModAnchor(){var t=null!==e&&e.apply(this,arguments)||this;return t.anchor=new w(0,["left","top"],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t}return __extends(NdModAnchor,e),NdModAnchor}(x),H=function(e){function NdNodeEmpiricalMouseChecker(){var t=e.call(this)||this;return t.context=document.createElement("canvas").getContext("2d"),t.once("destroyed",(function(){t.context=void 0})),t}return __extends(NdNodeEmpiricalMouseChecker,e),NdNodeEmpiricalMouseChecker.prototype.resize=function(e){e[0]!==this.context.canvas.width&&e[0]>0&&(this.context.canvas.width=e[0]),e[1]!==this.context.canvas.height&&e[1]>0&&(this.context.canvas.height=e[1])},NdNodeEmpiricalMouseChecker.prototype.redraw=function(e){this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.save(),T.registerPath(e.path.protectedValue,this.context,!!e.interpolation,!!e.fill),e.fill?(this.context.fillStyle="rgba(0,0,0,1)",this.context.fill()):(this.context.strokeStyle="rgba(0,0,0,1)",this.context.stroke()),this.context.restore()},NdNodeEmpiricalMouseChecker.prototype.check=function(e){if(e[0]>0&&e[0]<this.context.canvas.width&&e[1]>0&&e[1]<this.context.canvas.height){var t=this.context.getImageData(e[0],e[1],1,1);if(t)return!!t.data[3]}return!1},__decorate([alive],NdNodeEmpiricalMouseChecker.prototype,"resize",null),__decorate([alive],NdNodeEmpiricalMouseChecker.prototype,"redraw",null),__decorate([alive],NdNodeEmpiricalMouseChecker.prototype,"check",null),NdNodeEmpiricalMouseChecker}(v),W=function(e){function Line(t,r){var o=e.call(this,t,__assign(__assign(__assign({},new j),new D),new z),r)||this;return o.xShift=0,o.yShift=0,o.strokeFix=0,o.interpolationFix=0,o.interpolated=!1,o.mouseTester=new H,o.Assembler=new I([{name:"stroke",resolver:function(e){e.translate(o.Box.value.sprite.margin[3]-o.xShift,o.Box.value.sprite.margin[0]-o.yShift),!o.interpolated&&o.data.interpolation.protectedValue>0&&x.interpolate(o.data.path.protectedValue,o.data.interpolation.protectedValue,!1),Line.drawStroke(o.data,e)}}]),o.Box=new h(o,o.Cache,(function(){var e=__spreadArray([],o.data.position.protectedValue,!0),t=Math.max(o.strokeFix,o.interpolationFix),r=1/0,n=1/0,i=-1/0,a=-1/0;o.data.path.protectedValue.forEach((function(e){e[0]<r&&(r=e[0]),e[2]<r&&(r=e[2]),e[1]<n&&(n=e[1]),e[3]<n&&(n=e[3]),e[0]>i&&(i=e[0]),e[2]>i&&(i=e[2]),e[1]>a&&(a=e[1]),e[3]>a&&(a=e[3])})),r===1/0&&(r=0),n===1/0&&(n=0),i===-1/0&&(i=0),a===-1/0&&(i=0),o.xShift=r,o.yShift=n;var s=Math.abs(i-r),u=Math.abs(a-n);return T.applyBoxAnchor(e,s,u,o.data),[e[0]+o.xShift,e[1]+o.yShift,s,u,t,t,t,t]})),o.once("destroyed",(function(){o.mouseTester=o.mouseTester.destroy()})),o.watch("path",(function(){o.purgeBox(),o.Matrix.purge(),o.Assembler.update("stroke"),o.Assembler.resize(),o.mouseTester.resize(o.Box.value.sprite.size),o.mouseTester.redraw(o.data)})),o.watch("strokeWidth",(function(){o.strokeFix=o.data.strokeWidth.protectedValue.reduce((function(e,t){return t>e?t:e}),0),o.Assembler.update("stroke"),o.Assembler.resize(),o.mouseTester.resize(o.Box.value.sprite.size),o.mouseTester.redraw(o.data)})),o.watch("interpolation",(function(){o.interpolationFix=Math.round(20*o.data.interpolation.protectedValue),o.purgeBox(),o.Matrix.purge(),o.Assembler.resize(),o.Assembler.update("stroke"),o.mouseTester.resize(o.Box.value.sprite.size),o.mouseTester.redraw(o.data)})),o.watch(["strokeStyle","strokeColor"],(function(){o.Assembler&&o.Assembler.update("stroke")})),o}return __extends(Line,e),Line.prototype.export=function(){return this.Assembler.export(this)},Line.prototype.render=function(e){Line.transformContext(this,e);var t=this.Assembler.export(this);return t&&e.drawImage(t,0,0),e},Line.prototype.test=function(e){return!!this.mouseTester.check(this.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),this))&&this},__decorate([alive],Line.prototype,"export",null),__decorate([alive],Line.prototype,"render",null),__decorate([alive],Line.prototype,"test",null),Line}(T),q=function(e){function NdModCirc(){var t=null!==e&&e.apply(this,arguments)||this;return t.radius=new k(0,0,(function(e){return e}),(function(e){return e<0&&(e=0),e}),(function(e,t,r,o){t<0&&(t=0),r(e),o(t)}),(function(e){return e<0&&(e=0),e})),t.strokeWidth=new k(0,1,(function(e){return e}),(function(e){return e<0?0:e}),(function(e,t,r,o){t<0&&(t=0),r(e),o(t)}),(function(e){return e<0&&(e=0),e})),t.strokeColor=new k(0,"rgba(0,0,0,1)",(function(e){return e}),(function(e){return e instanceof Array?NdModCirc.arrayToColor(e):e}),(function(e,t,r,o){r(NdModCirc.colorToArray(e)),o("string"==typeof t?NdModCirc.colorToArray(t):t)}),(function(e){return NdModCirc.normalizeColor(e)})),t.strokeStyle=new w(0,[0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e.map((function(e){return e<0?0:e}))})),t}return __extends(NdModCirc,e),NdModCirc}(x),U=function(e){function Circle(t,r){var o=e.call(this,t,__assign(__assign(__assign(__assign({},new q),new S),new D),new z),r)||this;return o.Box=new h(o,o.Cache,(function(){var e=__spreadArray([],o.data.position.protectedValue,!0),t=2*o.data.radius.protectedValue;return T.applyBoxAnchor(e,t,t,o.data),[e[0],e[1],2*o.data.radius.protectedValue,2*o.data.radius.protectedValue,o.strokeFix,o.strokeFix,o.strokeFix,o.strokeFix]})),o.strokeFix=1,o.test=function(e){var t=o.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),o),r=o.Box.value.sprite,n=o.data.radius.protectedValue;return t[0]>r.size[0]&&t[0]<0&&t[1]>r.size[1]&&t[1]<0&&Math.pow(t[0]+o.strokeFix-n,2)+Math.pow(t[1]+o.strokeFix-n,2)<=Math.pow(n,2)&&o},o.Assembler=new I([{name:"fill",resolver:function(e){e.beginPath(),e.fillStyle=o.data.fill.protectedValue,e.arc(o.Box.value.sprite.size[0]/2,o.Box.value.sprite.size[1]/2,o.data.radius.protectedValue,0,2*Math.PI),e.fill()}},{name:"bg",resolver:function(e){e.beginPath(),e.arc(o.Box.value.sprite.size[0]/2,o.Box.value.sprite.size[1]/2,o.data.radius.protectedValue,0,2*Math.PI),e.clip(),T.drawBg(o.data,e,o.Assembler)}},{name:"stroke",resolver:function(e){e.beginPath(),e.strokeStyle=o.data.strokeColor.protectedValue,e.lineWidth=o.data.strokeWidth.protectedValue,e.setLineDash(o.data.strokeStyle.protectedValue),e.arc(o.Box.value.sprite.size[0]/2,o.Box.value.sprite.size[1]/2,o.data.radius.protectedValue,0,2*Math.PI),e.stroke()}}]),o.watch("radius",(function(){o.Assembler.update(),o.Assembler.resize(),o.Box.purge(),o.Matrix.purge()})),o.watch("fill",(function(){return o.Assembler.update("fill")})),o.watch("strokeWidth",(function(){o.strokeFix=o.data.strokeWidth.protectedValue,o.Box.purge(),o.Assembler.update("stroke"),o.Assembler.resize(),o.Matrix.purge()})),o.watch(["strokeStyle","strokeColor"],(function(){return o.Assembler.update("stroke")})),o.watch(["bg","backgroundSize","backgroundPosition"],(function(){return o.Assembler.update("bg")})),o.once("destroyed",(function(){S.destroyBackground(o.data)})),o}return __extends(Circle,e),Circle.prototype.render=function(e){var t=this.Assembler.export(this);return t&&(T.transformContext(this,e),e.drawImage(t,0,0)),e},Circle.prototype.export=function(){return this.Assembler.export(this)},__decorate([alive],Circle.prototype,"render",null),__decorate([alive],Circle.prototype,"export",null),Circle}(T),G=function(e){function NdSprite(t){var r=this,o=t.match(/(^.+)\[(\d+)]/);return(r=e.call(this,o?o[1]:"invalid-image-src[".concat(t,"]"),(function(){return r.defineImage(t)}))||this).frameCount=0,r.refreshRate=12,r.frameTime=0,r.canvas=[],r.chunkSize=[0,0],r.chunkXYCount=0,r.timeStart=(new Date).getTime(),r.duration=0,r.frozen=!1,r.once("destroyed",(function(){r.canvas=[],r.image=void 0})),r}return __extends(NdSprite,e),NdSprite.prototype.defineImage=function(e){var t=this,r=e.match(/(^.+)\[(\d+)]/);return r&&(this.image=_.image(r[1],(function(){t.setFrameData(),t.status=1,r[2]?t.frameCount=parseInt(r[2]):i.error("No frame group match for url ".concat(e,". How did you even get here?")),t.cast("load",new o(t,null))}),(function(){i.negative("Error loading sprite ".concat(t.url,".")),t.status=0,t.cast("error",new o(t,null))}),(function(){t.defineImage(e)}))),this},NdSprite.prototype.setFrameData=function(){if(this.image){this.chunkXYCount=Math.ceil(Math.sqrt(this.frameCount)),this.chunkSize[0]=this.image.width/this.chunkXYCount,this.chunkSize[1]=this.image.height/this.chunkXYCount,this.frameTime=1e3/this.refreshRate,this.duration=this.frameTime*this.frameCount,this.chunkSize[0]=this.image.width/this.chunkXYCount,this.chunkSize[1]=this.image.height/this.chunkXYCount,this.canvas=[];for(var e=0;e<this.chunkXYCount;e++){this.canvas[e]||this.canvas.push([]);for(var t=0;t<this.chunkXYCount;t++){this.canvas[e][t]||(this.canvas[e].push(document.createElement("canvas")),this.canvas[e][t].width=1,this.canvas[e][t].height=1),this.canvas[e][t].setAttribute("width",this.chunkSize[0].toString()),this.canvas[e][t].setAttribute("height",this.chunkSize[0].toString());var r=this.canvas[e][t].getContext("2d");r&&(r.translate(-this.chunkSize[0]*t,-this.chunkSize[1]*e),r.drawImage(this.image,0,0))}}}else i.error("Unable to set sprite frame data. No image.")},Object.defineProperty(NdSprite.prototype,"paused",{get:function(){return this.frozen},enumerable:!1,configurable:!0}),NdSprite.prototype.pause=function(){this.frozen=!0},NdSprite.prototype.play=function(){this.frozen=!1},Object.defineProperty(NdSprite.prototype,"frames",{get:function(){return this.frameCount},set:function(e){this.frameCount=e,this.setFrameData()},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"width",{get:function(){return this.chunkSize[0]},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"height",{get:function(){return this.chunkSize[1]},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"size",{get:function(){return __spreadArray([],this.chunkSize,!0)},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"fps",{get:function(){return this.refreshRate},set:function(e){this.timeStart=(new Date).getTime(),this.refreshRate=e,this.setFrameData()},enumerable:!1,configurable:!0}),NdSprite.prototype.export=function(e){if(this.frameCount&&this.frameTime&&(this.chunkSize[0]>0||this.chunkSize[1]>0)){var t=e.getTime(),r=t-this.timeStart;this.frozen&&(this.timeStart+=r);var o=Math.floor(r/this.frameTime);o>this.frameCount-1&&(o=0,this.timeStart=t);var n=Math.floor(o/this.chunkXYCount),i=o-n*this.chunkXYCount;if(this.canvas[n]&&this.canvas[n][i])return this.canvas[n][i]}},NdSprite.isNdUrlSpriteStr=function(e){return NdSprite.NdUrlSpriteStrRegex.test(e)},NdSprite.NdUrlSpriteStrRegex=/(^.+)\[([0-9]+)]$/,__decorate([alive],NdSprite.prototype,"defineImage",null),__decorate([alive],NdSprite.prototype,"setFrameData",null),__decorate([alive],NdSprite.prototype,"pause",null),__decorate([alive],NdSprite.prototype,"play",null),__decorate([alive],NdSprite.prototype,"frames",null),__decorate([alive],NdSprite.prototype,"width",null),__decorate([alive],NdSprite.prototype,"height",null),__decorate([alive],NdSprite.prototype,"size",null),__decorate([alive],NdSprite.prototype,"fps",null),__decorate([alive],NdSprite.prototype,"export",null),NdSprite}(N),Q=function(e){function NdModSprite(){var t=null!==e&&e.apply(this,arguments)||this;return t.src=new w(1,!1,(function(e){return e?e.url:e}),(function(e,r){if(!1===e)return t.src.protectedValue&&t.src.protectedValue.destroy(),e;if(t.src.protectedValue){if(t.src.protectedValue.url===e)return t.src.protectedValue;t.src.protectedValue.destroy()}if(G.isNdUrlSpriteStr(e)){var o=new G(e);return o.on("load",(function(){o.fps=t.fps.protectedValue,t.frames.set(o.frames,r)})),o.load(),o}return e?new b(e).load():!!e})),t.frames=new w(0,0,(function(e){return e}),(function(e){return e})),t.fps=new w(0,12,(function(e){return e}),(function(e){return e<0&&(e=0),e})),t.size=new k(1,["auto","auto"],(function(e){return __spreadArray([],e,!0)}),(function(e){return"string"==typeof e||"number"==typeof e?[e,e]:__spreadArray([],e,!0)}),(function(e,r,o,n){o(e.map((function(e,r){if("auto"===e)return t.src.protectedValue?0===r?t.src.protectedValue.width:t.src.protectedValue.height:0}))),n(("number"==typeof r||"auto"===r?[r,r]:r).map((function(e,r){return"auto"===e?t.src.protectedValue?0===r?t.src.protectedValue.width:t.src.protectedValue.height:0:(e<0&&(e=0),e)})))}),(function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e})),t}return __extends(NdModSprite,e),NdModSprite}(x),Y=function(e){function Sprite(t,r){var o=e.call(this,t,__assign(__assign(__assign({},new Q),new z),new D),r)||this;return o.Box=new h(o,o.Cache,(function(){var e=__spreadArray([],o.data.position.protectedValue,!0),t=o.data.size.protectedValue.map((function(e,t){if("auto"===e)return o.data.src.protectedValue?0===t?o.data.src.protectedValue.width:o.data.src.protectedValue.height:0}));return T.applyBoxAnchor(e,t[0],t[1],o.data),[e[0],e[1],t[0],t[1],0,0,0,0]})),o.watch("src",(function(){o.data.src.protectedValue&&(o.data.src.protectedValue.loaded?(o.Box.purge(),o.Matrix.purge()):o.data.src.protectedValue.on("load",(function(){o.Box.purge(),o.Matrix.purge()})))})),o.watch("frames",(function(){o.data.src.protectedValue instanceof G&&(o.data.src.protectedValue.frames=o.data.frames.protectedValue)})),o.watch("fps",(function(){o.data.src.protectedValue instanceof G&&(o.data.src.protectedValue.fps=o.data.fps.protectedValue)})),o.watch("size",(function(){o.Box.purge(),o.Matrix.purge(),o.data.src.protectedValue&&o.data.src.protectedValue.destroy(),o.data.src.set(!1,o)})),o}return __extends(Sprite,e),Sprite.prototype.export=function(e){if(e||(e=new Date),this.data.src.protectedValue)return this.data.src.protectedValue.export(e)},Sprite.prototype.render=function(e,t){if(this.data.src.protectedValue){Sprite.transformContext(this,e);var r=this.data.src.protectedValue.export(t);r&&e.drawImage(r,0,0,"auto"===this.data.size.protectedValue[0]?this.data.src.protectedValue.width:this.data.size.protectedValue[0],"auto"===this.data.size.protectedValue[1]?this.data.src.protectedValue.height:this.data.size.protectedValue[1])}return e},Sprite.prototype.test=function(e){return(e=this.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),this))[0]>0&&e[0]<this.Box.value.sprite.size[0]&&e[1]>0&&e[1]<this.Box.value.sprite.size[1]&&this},Sprite.prototype.pause=function(){this.data.src.protectedValue instanceof G&&this.data.src.protectedValue.pause()},Sprite.prototype.play=function(){this.data.src.protectedValue instanceof G&&this.data.src.protectedValue.play()},__decorate([alive],Sprite.prototype,"export",null),__decorate([alive],Sprite.prototype,"render",null),__decorate([alive],Sprite.prototype,"test",null),__decorate([alive],Sprite.prototype,"pause",null),__decorate([alive],Sprite.prototype,"play",null),Sprite}(T),X=function(e){function Area(t,r){var o=e.call(this,t,__assign(__assign(__assign(__assign({},new z),new j(!0)),new D),new S),r)||this;return o.xShift=0,o.yShift=0,o.strokeFix=1,o.interpolationFix=0,o.interpolated=!1,o.mouseTester=new H,o.Box=new h(o,o.Cache,(function(){var e=__spreadArray([],o.data.position.protectedValue,!0),t=1/0,r=1/0,n=-1/0,i=-1/0;o.data.path.protectedValue.forEach((function(e){e[0]<t&&(t=e[0]),e[2]<t&&(t=e[2]),e[1]<r&&(r=e[1]),e[3]<r&&(r=e[3]),e[0]>n&&(n=e[0]),e[2]>n&&(n=e[2]),e[1]>i&&(i=e[1]),e[3]>i&&(i=e[3])})),t===1/0&&(t=0),r===1/0&&(r=0),n===-1/0&&(n=0),i===-1/0&&(n=0),o.xShift=t,o.yShift=r;var a=o.strokeFix+o.interpolationFix,s=Math.abs(n-t),u=Math.abs(i-r);return T.applyBoxAnchor(e,s,u,o.data),[e[0]+o.xShift,e[1]+o.yShift,s,u,a,a,a,a]})),o.Assembler=new I([{name:"fill",resolver:function(e){e.save(),e.translate(o.Box.value.sprite.margin[3]-o.xShift,o.Box.value.sprite.margin[0]-o.yShift),!o.interpolated&&o.data.interpolation.protectedValue>0&&(x.interpolate(o.data.path.protectedValue,o.data.interpolation.protectedValue,!0),o.interpolated=!0),T.drawFill(o.data,e),e.restore()}},{name:"bg",resolver:function(e){e.translate(o.Box.value.sprite.margin[3]-o.xShift,o.Box.value.sprite.margin[0]-o.yShift),T.drawPathBg(o.data,e,o.Assembler)}},{name:"stroke",resolver:function(e){o.interpolated||(x.interpolate(o.data.path.protectedValue,o.data.interpolation.protectedValue,!0),o.interpolated=!0),e.translate(o.Box.value.sprite.margin[3]-o.xShift,o.Box.value.sprite.margin[0]-o.yShift),T.drawStroke(o.data,e)}}]),o.once("destroyed",(function(){o.mouseTester=o.mouseTester.destroy()})),o.watch("path",(function(){o.interpolated=!1,o.Box.purge(),o.Matrix.purge(),o.Assembler.resize(),o.Assembler.update(),o.interpolated=!1,o.mouseTester.resize(o.Box.value.sprite.size),o.mouseTester.redraw(o.data)})),o.watch("interpolation",(function(){o.interpolated=!1,o.interpolationFix=Math.round(40*o.data.interpolation.protectedValue),o.Assembler.update(),o.Assembler.resize(),o.mouseTester.resize(o.Box.value.sprite.size),o.mouseTester.redraw(o.data),o.interpolated=!1})),o.watch(["strokeStyle","strokeColor"],(function(){o.Assembler&&(o.Assembler.update("stroke"),o.Assembler.resize())})),o.watch("fill",(function(){o.Assembler.update("fill")})),o.watch(["bg","backgroundSize","backgroundPosition"],(function(){o.Assembler.update("bg")})),o.watch("strokeWidth",(function(){o.strokeFix=o.data.strokeWidth.protectedValue.reduce((function(e,t){return e<t?t:e}),0)/2,o.Assembler.update("stroke"),o.mouseTester.resize(o.Box.value.sprite.size),o.mouseTester.redraw(o.data),o.Box.purge(),o.Matrix.purge(),o.Assembler.resize()})),o}return __extends(Area,e),Area.prototype.test=function(e){return!!this.mouseTester.check(this.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),this))&&this},Area.prototype.render=function(e){var t=this.Assembler.export(this);return t&&(T.transformContext(this,e),e.drawImage(t,0,0)),e},Area.prototype.export=function(){return this.Assembler.export(this)},__decorate([alive],Area.prototype,"test",null),__decorate([alive],Area.prototype,"render",null),__decorate([alive],Area.prototype,"export",null),Area}(T),$=function(e){function NdModSize(){var t=null!==e&&e.apply(this,arguments)||this;return t.size=new k(1,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?(e<0&&(e=0),[e,e]):e.map((function(e){return e<0?0:e}))}),(function(e,t,r,o){r(__spreadArray([],e,!0)),"number"==typeof t?(t<0&&(t=0),o([t,t])):o(t.map((function(e){return e<0?0:e})))}),(function(e){return e})),t}return __extends(NdModSize,e),NdModSize}(x),K=function(e){function NdModRect(){var t=null!==e&&e.apply(this,arguments)||this;return t.radius=new k(0,[0,0,0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?e<0?[0,0,0,0]:[e,e,e,e]:e.map((function(e){return e<0?0:e}))}),(function(e,t,r,o){r(__spreadArray([],e,!0)),o("number"==typeof t?t<0?[0,0,0,0]:[t,t,t,t]:t.map((function(e){return e<0?0:e})))}),(function(e){return e})),t.strokeColor=new k(1,["rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)"],(function(e){return __spreadArray([],e,!0)}),(function(e){return"string"==typeof e?[e=NdModRect.arrayToColor(NdModRect.normalizeColor(NdModRect.colorToArray(e))),e,e,e]:"number"==typeof e[0]?[e=NdModRect.arrayToColor(NdModRect.normalizeColor(e)),e,e,e]:"string"==typeof e[0]?e.map((function(e){return NdModRect.arrayToColor(NdModRect.normalizeColor(NdModRect.colorToArray(e)))})):e.map((function(e){return NdModRect.arrayToColor(NdModRect.normalizeColor(e))}))}),(function(e,t,r,o){if(r(e.map((function(e){return NdModRect.colorToArray(e)}))),"string"==typeof t)o([n=NdModRect.normalizeColor(NdModRect.colorToArray(t)),n,n,n]);else if("number"==typeof t[0]){var n;o([n=NdModRect.normalizeColor(t),n,n,n])}else"string"==typeof t[0]?o(t.map((function(e){return NdModRect.normalizeColor(NdModRect.colorToArray(e))}))):o(t.map((function(e){return __spreadArray([],NdModRect.normalizeColor(e),!0)})))}),(function(e){return e})),t.strokeWidth=new k(1,[1,1,1,1],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?e<0?[0,0,0,0]:[e,e,e,e]:e.map((function(e){return e<0?0:e}))}),(function(e,t,r,o){r(__spreadArray([],e,!0)),"number"==typeof t?o(t<0?[0,0,0,0]:[t,t,t,t]):r(t.map((function(e){return e<0?0:e})))}),(function(e){return e})),t.strokeStyle=new w(1,[[0],[0],[0],[0]],(function(e){return e.map((function(e){return __spreadArray([],e,!0)}))}),(function(e){return"number"==typeof e[0]?[e,e,e,e]:e.map((function(e){return __spreadArray([],e,!0)}))})),t}return __extends(NdModRect,e),NdModRect}(x),J=function(e){function Rectangle(t,r){var o=e.call(this,t,__assign(__assign(__assign(__assign(__assign({},new K),new $),new D),new S),new z),r)||this;o.CIRCLECONST=.5522847498,o.Box=new h(o,o.Cache,(function(){var e=__spreadArray([],o.data.position.protectedValue,!0);return T.applyBoxAnchor(e,o.data.size.protectedValue[0],o.data.size.protectedValue[1],o.data),[e[0],e[1],o.data.size.protectedValue[0],o.data.size.protectedValue[1],o.strokeFix[0],o.strokeFix[1],o.strokeFix[2],o.strokeFix[3]]})),o.Assembler=new I([{name:"fill",resolver:function(e){e.translate(o.strokeFix[3],o.strokeFix[0]),Rectangle.registerPath(o.path(),e,!0),e.fillStyle=o.data.fill.protectedValue,e.fill()}},{name:"bg",resolver:function(e){o.Assembler&&(e.translate(o.strokeFix[3],o.strokeFix[0]),Rectangle.clipBezierPath(o.path(),e),Rectangle.drawBg(o.data,e,o.Assembler))}},{name:"stroke",resolver:function(e){e.translate(o.strokeFix[3],o.strokeFix[0]),o.drawRectStroke(e)}}]),o.strokeFix=__spreadArray([],o.data.strokeWidth.protectedValue,!0);var n=o.Cache.register("path",(function(){var e=o.data.size.protectedValue,t=e[0],r=e[1],n=o.data.radius.protectedValue.map((function(e){return e>t/2&&(e=t/2),e>r/2&&(e=r/2),e})),i=n[0],a=n[1],s=n[2],u=n[3];if(t&&r){var c=[];return i?(c.push([0,i,i,0,0,i*o.CIRCLECONST,i-i*o.CIRCLECONST,0]),c.push([c[0][2],c[0][3],t,0,c[0][2],c[0][3],t,0])):c.push([0,0,t,0,0,0,t,0]),a?(c[c.length-1][2]-=a,c[c.length-1][6]-=a,c.push([t-a,0,t,a,t-a+a*o.CIRCLECONST,0,t,a-a*o.CIRCLECONST]),c.push([t,a,t,r,t,a,t,r])):c.push([t,0,t,r,t,0,t,r]),s?(c[c.length-1][3]-=s,c[c.length-1][7]-=s,c.push([t,r-s,t-s,r,t,r-s+s*o.CIRCLECONST,t-s+s*o.CIRCLECONST,r]),c.push([t-s,r,0,r,t-s,r,0,r])):c.push([t,r,0,r,t,r,0,r]),u?(c[c.length-1][2]+=u,c[c.length-1][6]+=u,c.push([u,r,0,r-u,u-u*o.CIRCLECONST,r,0,r-u+u*o.CIRCLECONST]),c.push([0,r-u,c[0][0],c[0][1],0,r-u,c[0][0],c[0][1]])):c.push([0,r-u,c[0][0],c[0][1],0,r-u,c[0][0],c[0][1]]),c}return[]})),i=n.getter,a=n.purge;return o.path=i,o.purgePath=a,o.watch("size",(function(){o.Assembler.resize(),o.Assembler.update("fill"),o.Assembler.update("bg"),o.Assembler.update("stroke"),o.Matrix.purge(),o.Box.purge(),o.purgePath()})),o.watch("radius",(function(){o.Assembler&&(o.Assembler.update("fill"),o.Assembler.update("bg"),o.Assembler.update("stroke"),o.purgePath())})),o.watch("strokeWidth",(function(){o.strokeFix=__spreadArray([],o.data.strokeWidth.protectedValue,!0),o.Box.purge(),o.Assembler.resize(),o.Matrix.purge(),o.Assembler.update("fill"),o.Assembler.update("bg"),o.Assembler.update("stroke")})),o.watch(["bg","backgroundSize","backgroundPosition"],(function(){o.Assembler.update("bg")})),o.watch(["strokeColor","strokeStyle"],(function(){o.Assembler.update("stroke")})),o.watch("fill",(function(){o.Assembler.update("fill")})),o}return __extends(Rectangle,e),Rectangle.prototype.test=function(e){var t=this.Matrix.value.traceCursorToLocalSpace(__spreadArray([],e,!0),this),r=t[0],o=t[1];return r<this.Box.value.sprite.size[0]&&r>0&&o<this.Box.value.sprite.size[1]&&o>0&&this},Rectangle.prototype.render=function(e){var t=this.Assembler.export(this);return t&&(Rectangle.transformContext(this,e),e.drawImage(t,0,0)),e},Rectangle.prototype.export=function(){return this.Assembler.export(this)},Rectangle.drawCorner=function(e,t,r,o,n,i,a){t.save(),t.beginPath(),t.lineWidth=Math.max(i,a);var s=r[0],u=r[1],c=r[2],d=r[3],l=r[4],p=r[5],h=r[6],f=r[7];if(0===e){if(i<a)s+=y=(a-i)/2,l+=y;if(i>a)d+=y=(i-a)/2,f+=y}if(1==e){if(i<a)u+=y=(a-i)/2,p+=y;if(a<i)c-=y=(i-a)/2,h-=y}if(2==e){if(i<a)s-=y=(a-i)/2,l-=y;if(i>a)d-=y=(i-a)/2,f-=y}if(3==e){var y;if(a<i)c+=y=(i-a)/2,h+=y;if(i<a)u-=y=(a-i)/2,p-=y}if(t.moveTo(s,u),o!==n){var v=t.createConicGradient(-Math.PI-1/180+Math.PI/2*e,e%2?s:c,e%2?d:u);v.addColorStop(0,o),v.addColorStop(.25,n),t.strokeStyle=v}else t.strokeStyle=o;t.bezierCurveTo(l,p,h,f,c,d),t.stroke(),t.restore()},Rectangle.drawBridge=function(e,t,r,o){e.beginPath(),e.lineCap="round",e.moveTo(t[0],t[1]),e.strokeStyle=r,e.lineWidth=o,e.lineTo(t[2],t[3]),e.stroke()},Rectangle.prototype.drawRectStroke=function(e){var t=this,r=this.path(),o=[0,1,2,3];if(r.length){var n=0;this.data.radius.protectedValue.forEach((function(e,t){if(e>0)for(var r=t;r<o.length;r++)o[r]+=1})),r.forEach((function(r,i){r[0]!==r[2]&&r[1]!==r[3]?Rectangle.drawCorner(n,e,r,n>0?t.data.strokeColor.protectedValue[n-1]:t.data.strokeColor.protectedValue[3],t.data.strokeColor.protectedValue[n],n>0?t.data.strokeWidth.protectedValue[n-1]:t.data.strokeWidth.protectedValue[3],t.data.strokeWidth.protectedValue[n]):Rectangle.drawBridge(e,r,t.data.strokeColor.protectedValue[n],t.data.strokeWidth.protectedValue[n]),o.indexOf(i)>-1&&n++})),n=0}},__decorate([alive],Rectangle.prototype,"test",null),__decorate([alive],Rectangle.prototype,"render",null),__decorate([alive],Rectangle.prototype,"export",null),Rectangle}(T);!function(e){e["sans-serif"]="sans-serif",e.serif="serif",e.system="system"}(y||(y={}));var Z=function(e){function NdFont(t,r,n){var a=e.call(this,"\\".concat(n?n.name:"default",".font"),(function(){return r&&n?(a.initMeasureBuffer(),a.loadFont((function(){i.positive("Font ".concat(a.name," loaded")),a.cast("load",new o(a,null))}),(function(){i.negative("Unable to load font ".concat(a.name)),a.cast("error",new o(a,null))})),a.styles.innerHTML=a.str.reduce((function(e,t){return e+t}),""),document.head.appendChild(a.styles),a):(i.positive("Font ".concat(a.url," loaded")),a.cast("load",new o(a,null)),a)}))||this;return a.context=document.createElement("canvas").getContext("2d"),a.styles=document.createElement("style"),a.fontMaxLoadTime=1e4,a.fontLoadStart=0,a.fontMeasureBuffer=[],a.formatStr={eot:function(e){return'url("'+e+'.eot?#iefix") format("embedded-opentype")'},woff:function(e){return'url("'+e+'.woff") format("woff")'},ttf:function(e){return'url("'+e+'.ttf") format("truetype")'},svg:function(e,t,r){return'url("'+e+".svg#"+t+"-"+(r.charAt(0).toUpperCase()+r.slice(1))+'") format("svg")'}},a.export=function(){return a.context.canvas},r&&n?(a.scheme=n,a.str=n.weight.map((function(e){return n.style.reduce((function(o,i){return o+'@font-face {\n font-family:"'.concat(n.name,'";\n src:')+r.reduce((function(o,s,u){return o+a.formatStr[s]("".concat(t,"/").concat(n.name,"-").concat(e,"-").concat(i),n.name,i)+(u<r.length-1?",\n":";")}),"")+"\nfont-weight: ".concat(NdFont.extractNumericWeight(e),";\nfont-style: ").concat(i,";\n}\n")}),"")}),"")):(a.str=[],a.scheme={name:"default",weight:[],style:[]}),a}return __extends(NdFont,e),NdFont.prototype.loadFont=function(e,t){for(var r=this,o=this.scheme.weight.map((function(e){return r.scheme.style.map((function(t){return r.measureFont(t,e)}))})),n=!0,a=0;a<this.scheme.weight.length;a++){for(var s=0;s<this.scheme.style.length;s++)if(o[a][s]===this.fontMeasureBuffer[a][s]){n=!1;break}if(!n)break}n?e():(new Date).getTime()-this.fontLoadStart>this.fontMaxLoadTime?(i.negative("Gave up trying to load ".concat(this.name,". Timeout.")),t()):setTimeout((function(){return r.loadFont(e,t)}),500)},NdFont.prototype.measureFont=function(e,t,r){return this.context.font=r?"".concat(e," ").concat(NdFont.extractNumericWeight(t),' 12px/12px "').concat(r,'"'):this.string(e,NdFont.extractNumericWeight(t),12),this.context.measureText(NdFont.CONSTFONTCHECKSTRING).width},NdFont.prototype.initMeasureBuffer=function(){var e=this;this.fontLoadStart=(new Date).getTime(),this.fontMeasureBuffer=this.scheme.weight.map((function(t){return e.scheme.style.map((function(r){return e.measureFont(r,t,"sans-serif")}))}))},Object.defineProperty(NdFont.prototype,"name",{get:function(){return this.scheme.name},enumerable:!1,configurable:!0}),NdFont.prototype.string=function(e,t,r,o){return void 0===o&&(o=r),"".concat(e," ").concat(NdFont.extractNumericWeight(t)," ").concat(r,"px/").concat(o,'px "').concat(this.scheme.name,'"')},NdFont.extractNumericWeight=function(e){return"normal"===e?400:"black"===e?900:"light"===e?300:"bold"===e?600:e},NdFont.CONSTFONTCHECKSTRING='abcdefghijklmnopqrstuvwxyz 1234567890[!?,.<>"£$%^&*()~@#-=]',__decorate([alive],NdFont.prototype,"measureFont",null),__decorate([alive],NdFont.prototype,"initMeasureBuffer",null),__decorate([alive],NdFont.prototype,"string",null),NdFont}(N),ee=new(function(){function NodasFonts(){this.fonts={},this.fontRootPath="./fonts",this.format=["eot","svg","ttf","woff"]}return Object.defineProperty(NodasFonts.prototype,"root",{get:function(){return this.fontRootPath},set:function(e){this.fontRootPath=e},enumerable:!1,configurable:!0}),Object.defineProperty(NodasFonts.prototype,"formats",{get:function(){return __spreadArray([],this.format,!0)},set:function(e){this.format=e},enumerable:!1,configurable:!0}),NodasFonts.prototype.add=function(e){return this.fonts[e.name]?i.positive("Font [".concat(e.name,"] already registered. Skip..")):Object.values(y).includes(e.name)?i.warn("You are not allowed to load fonts with names equal to system values [".concat(Object.values(y),"]. \n                    Ignored.")):(this.fonts[e.name]=new Z(this.root,this.format,e),i.positive("Font ".concat(e.name," registered."))),this.fonts[e.name]},NodasFonts.prototype.get=function(e){return this.fonts[e]?this.fonts[e]:null},NodasFonts}()),te=function(e){function NdTextPartial(){var t=null!==e&&e.apply(this,arguments)||this;return t.textColor="rgba(0,0,0,1)",t.fWeight=400,t.fSize=14,t.lHeight=14,t.fStyle="normal",t.ndFont="system",t.freeze={},t}return __extends(NdTextPartial,e),NdTextPartial.prototype.onPossibleSizeChange=function(e){this.on(["font","fontSize","weight","style","lineHeight"],e)},Object.defineProperty(NdTextPartial.prototype,"font",{get:function(){return this.ndFont},set:function(e){this.freeze.font||this.ndFont!==e&&(this.ndFont=e,this.cast("font",e))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"lineHeight",{get:function(){return this.lHeight},set:function(e){this.freeze.lineHeight||(e<0&&(e=0),e!==this.lHeight&&(this.lHeight=e,this.cast("lineHeight",this.lHeight)))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"weight",{get:function(){return this.fWeight},set:function(e){this.freeze.weight||this.fWeight!==e&&(this.fWeight=e,this.cast("weight",e))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"color",{get:function(){return this.textColor},set:function(e){if(!this.freeze.color){var t=x.arrayToColor(x.normalizeColor(x.colorToArray(e)));t!==this.textColor&&(this.textColor=t,this.cast("color",this.textColor))}},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"style",{get:function(){return this.fStyle},set:function(e){this.freeze.style||this.fStyle!==e&&(this.fStyle=e,this.cast("style",e))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"fontSize",{get:function(){return this.fSize},set:function(e){this.freeze.style||(e<0&&(e=0),this.fSize!==e&&(this.fSize=e,this.cast("fontSize",this.fSize)))},enumerable:!1,configurable:!0}),NdTextPartial.prototype.fontString=function(){if(Object.values(y).includes(this.ndFont))return"system"===this.ndFont?"".concat(this.style," ").concat(this.weight," ").concat(this.fSize,"px serif"):this.fSize+"px "+this.ndFont;var e=ee.get(this.ndFont);return e?e.string(this.fStyle,this.fWeight,this.fSize,this.lineHeight):""},__decorate([alive],NdTextPartial.prototype,"onPossibleSizeChange",null),__decorate([alive],NdTextPartial.prototype,"font",null),__decorate([alive],NdTextPartial.prototype,"lineHeight",null),__decorate([alive],NdTextPartial.prototype,"weight",null),__decorate([alive],NdTextPartial.prototype,"color",null),__decorate([alive],NdTextPartial.prototype,"style",null),__decorate([alive],NdTextPartial.prototype,"fontSize",null),__decorate([alive],NdTextPartial.prototype,"fontString",null),NdTextPartial}(v),re=function(e){function NdTextWord(t){var r=e.call(this)||this;return r.str="",r.context=document.createElement("canvas").getContext("2d"),r.w=0,r.resizeFlag=!0,r.redrawFlag=!0,r.string=t,r.once("destroyed",(function(){return r.context=void 0})),r.on("font",(function(){if(!Object.values(y).includes(r.font)){var e=ee.get(r.font);e&&(e.loaded||e.once("load",(function(){r.resizeFlag=!0,r.redrawFlag=!0})))}})),r.onPossibleSizeChange((function(){r.resizeFlag=!0,r.redrawFlag=!0})),r.on("color",(function(){r.redrawFlag=!0})),r}return __extends(NdTextWord,e),NdTextWord.prototype.resize=function(){this.context.font=this.fontString();var e=Math.ceil(this.context.measureText(this.str).width);e!==this.w&&(this.context.canvas.width=e,this.w=e),this.context.canvas.height!==this.lineHeight&&(this.context.canvas.height=this.lineHeight),this.resizeFlag=!1},NdTextWord.prototype.redraw=function(){this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.textBaseline="middle",this.context.fillStyle=this.color,this.context.font=this.fontString(),this.context.fillText(this.str,0,this.lineHeight/2),this.redrawFlag=!1},Object.defineProperty(NdTextWord.prototype,"width",{get:function(){return this.resizeFlag&&this.resize(),this.w},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextWord.prototype,"length",{get:function(){return this.str.length},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextWord.prototype,"string",{get:function(){return this.str},set:function(e){e=e.trim(),this.str!==e&&(this.resizeFlag=!0,this.redrawFlag=!0,this.str=e)},enumerable:!1,configurable:!0}),NdTextWord.prototype.render=function(e,t,r){this.resizeFlag&&this.resize(),this.redrawFlag&&this.redraw(),e.drawImage(this.context.canvas,t,r)},__decorate([alive],NdTextWord.prototype,"resize",null),__decorate([alive],NdTextWord.prototype,"redraw",null),__decorate([alive],NdTextWord.prototype,"width",null),__decorate([alive],NdTextWord.prototype,"length",null),__decorate([alive],NdTextWord.prototype,"string",null),__decorate([alive],NdTextWord.prototype,"render",null),NdTextWord}(te),oe=function(e){function NdTextSpace(){var t=e.call(this)||this;return t.w=0,t.context=document.createElement("canvas").getContext("2d"),t.measured=!1,t.on("font",(function(){if(!Object.values(y).includes(t.font)){var e=ee.get(t.font);e&&(e.loaded||e.once("load",(function(){t.measured=!1})))}})),t.once("destroyed",(function(){return t.context=void 0})),t}return __extends(NdTextSpace,e),Object.defineProperty(NdTextSpace.prototype,"length",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextSpace.prototype,"string",{get:function(){return" "},enumerable:!1,configurable:!0}),NdTextSpace.prototype.render=function(){},NdTextSpace.prototype.forceRedraw=function(){this.measured=!1},Object.defineProperty(NdTextSpace.prototype,"width",{get:function(){return this.measured||(this.context.font=this.fontString(),this.w=this.context.measureText(" ").width),this.w},enumerable:!1,configurable:!0}),__decorate([alive],NdTextSpace.prototype,"length",null),__decorate([alive],NdTextSpace.prototype,"string",null),__decorate([alive],NdTextSpace.prototype,"render",null),__decorate([alive],NdTextSpace.prototype,"forceRedraw",null),__decorate([alive],NdTextSpace.prototype,"width",null),NdTextSpace}(te),ne=/\[(?<tagname>[cbi])(="(?<value>rgba\(\d*,( )?\d*,( )?\d*(,( )?(\.\d+|1|0))\))")?](?<content>((?!\[\/?\k<tagname>]).)*)\[\/\k<tagname>]/gm,ie=/(\S+)/g,ae=function(e){function NdTextBlock(t){var r=e.call(this)||this;return r.str="",r.l=1/0,r.w=0,r.h=0,r.updated=!0,r.words=[],r.string=t,r.bindWordsStyles(),r.once("destroyed",(function(){r.words.forEach((function(e){return e.destroy()})),r.words=void 0})),r.on("font",(function(){if(!r.destroyed&&!Object.values(y).includes(r.font)){var e=ee.get(r.font);e&&(e.loaded||e.once("load",(function(){r.updated=!0})))}})),r}return __extends(NdTextBlock,e),NdTextBlock.prototype.updateSize=function(){var e=this;this.w=Math.ceil(this.words.reduce((function(e,t){return e+t.width}),0)),this.w=this.l<this.w?this.l:this.w,0===this.w&&(this.w=1);var t=0,r=this.lineHeight,o=[];this.words.forEach((function(n,i){t+n.width>e.w&&(r+=e.lineHeight,o.push(t),t=0),t+=n.width,i==e.words.length-1&&0!==t&&o.push(t)}));var n=Math.max.apply(null,o);n<this.w&&(this.w=n),this.h=Math.ceil(r),0===this.h&&(this.h=1),this.updated=!1},NdTextBlock.prototype.bindWordsStyles=function(){var e=this;["weight","style","color","font","fontSize","lineHeight"].forEach((function(t){e.on(t,(function(){e.words.forEach((function(r){r[t]=e[t]}))}))}))},NdTextBlock.prototype.split=function(e,t,r,o){var n=this;void 0===e&&(e=this.str),void 0===t&&(t={font:this.font,weight:this.weight,fontSize:this.fontSize,lineHeight:this.lineHeight,style:this.style,color:this.color}),void 0===r&&(r={}),void 0===o&&(o=0),ne.lastIndex=0;for(var i=[],a=null,s=o;a=ne.exec(e);){if(a.index===ne.lastIndex&&ne.lastIndex++,ne.lastIndex=0,a.index){var u=e.substring(0,a.index).match(ie);u&&u.forEach((function(e){n.words[s]?(n.words[s].freeze={},i.push(NdTextBlock.applyStylesToText(n.words[s],t)),i[s].string=e):i.push(NdTextBlock.applyStylesToText(new re(e),t)),i[i.length-1].freeze=__assign({},r),s++,n.words[s]?(n.words[s].freeze={},i.push(NdTextBlock.applyStylesToText(n.words[s],t))):i.push(NdTextBlock.applyStylesToText(new oe,t)),i[i.length-1].freeze=__assign({},r),s++}))}a.groups.content&&(i=__spreadArray(__spreadArray([],i,!0),this.split(a.groups.content,__assign(__assign({},t),{weight:"b"===a.groups.tagname?"bold":t.weight,color:"c"===a.groups.tagname&&a.groups.value?a.groups.value:t.color,style:"i"===a.groups.tagname?"italic":t.style}),{weight:"b"===a.groups.tagname||r.weight,color:"c"===a.groups.tagname||r.color,style:"i"===a.groups.tagname||r.style},i.length),!0),s=i.length),e=e.slice(a.index+a[0].length)}if(e.length){var c=e.match(ie);c&&c.forEach((function(e){var o=n.words[s]?n.words[s]:new re(e);o.freeze={},NdTextBlock.applyStylesToText(o,t),o.string=e,o.freeze=__assign({},r),i.push(o),s++;var a=n.words[s]?NdTextBlock.applyStylesToText(n.words[s],t):NdTextBlock.applyStylesToText(new oe,t);a.freeze=__assign({},n.freeze),i.push(a),s++}))}return i},Object.defineProperty(NdTextBlock.prototype,"length",{get:function(){return this.str.length},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"width",{get:function(){return this.updated&&this.updateSize(),this.l<this.w?this.l:this.w},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"limit",{get:function(){return this.l},set:function(e){this.l=e,this.updated=!0},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"height",{get:function(){return this.updated&&this.updateSize(),this.h},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"string",{get:function(){return this.str},set:function(e){if(e!==this.str){this.str=e;var t=this.split();t.pop(),this.words=t,this.updated=!0}},enumerable:!1,configurable:!0}),NdTextBlock.prototype.export=function(){},NdTextBlock.prototype.render=function(e){var t=this,r=0,o=0,n=this.width;this.words.forEach((function(i){i.destroyed||(r+i.width>n&&(o+=t.lineHeight,r=0),i instanceof oe&&0===r||(i.render(e,r,o),r+=i.width))}))},NdTextBlock.applyStylesToText=function(e,t){return Object.assign(e,t),e},__decorate([alive],NdTextBlock.prototype,"updateSize",null),__decorate([alive],NdTextBlock.prototype,"bindWordsStyles",null),__decorate([alive],NdTextBlock.prototype,"split",null),__decorate([alive],NdTextBlock.prototype,"length",null),__decorate([alive],NdTextBlock.prototype,"width",null),__decorate([alive],NdTextBlock.prototype,"limit",null),__decorate([alive],NdTextBlock.prototype,"height",null),__decorate([alive],NdTextBlock.prototype,"string",null),__decorate([alive],NdTextBlock.prototype,"render",null),NdTextBlock}(te),se=function(e){function NdModText(){var t=null!==e&&e.apply(this,arguments)||this;return t.str=new w(0,"",(function(e){return e}),(function(e){return e})),t.width=new w(1,"auto",(function(e){return e}),(function(e){return e})),t.font=new w(1,y.system,(function(e){return e}),(function(e){return Object.values(y).includes(e)||ee.get(e)?e:y.system})),t.color=new w(2,"rgba(0,0,0,1)",(function(e){return e}),(function(e){return e})),t.weight=new w(2,"normal",(function(e){return e}),(function(e){return e})),t.lineHeight=new w(2,14,(function(e){return e}),(function(e){return isFinite(e)?e:14})),t.style=new w(2,"normal",(function(e){return e}),(function(e){return e})),t}return __extends(NdModText,e),NdModText}(x),ue=function(e){function Text(t,r){var o=e.call(this,t,__assign(__assign(__assign({},new se),new D),new z),r)||this;return o.Assembler=new I([{name:"text",resolver:function(e){o.textBlock.render(e)}}]),o.Box=new h(o,o.Cache,(function(){var e=__spreadArray([],o.data.position.protectedValue,!0),t=o.textBlock.width,r=o.textBlock.height;return T.applyBoxAnchor(e,t,r,o.data),[e[0],e[1],t,r,0,0,0,0]})),o.textBlock=new ae(o.data.str.protectedValue),o.syncStylesToBlock(),o.watch(["str","lineHeight","width","weight","style"],(function(){o.Box.purge(),o.Matrix.purge()})),o.watch("width",(function(){"number"==typeof o.data.width.protectedValue?o.textBlock.limit=o.data.width.protectedValue:o.textBlock.limit=1/0})),o.watch(["str","lineHeight","weight","width","style"],(function(){o.Assembler.update(),o.Assembler.resize()})),o.watch("font",(function(){if(!Object.values(y).includes(o.data.font.protectedValue)){var e=ee.get(o.data.font.protectedValue);e&&(e.loaded||(e.once("load",(function(){o.Box.purge(),o.Matrix.purge(),o.Assembler.resize(),o.Assembler.update("text")})),e.load()))}})),o.once("destroyed",(function(){o.textBlock=o.textBlock.destroy()})),o}return __extends(Text,e),Text.prototype.render=function(e){var t=this.Assembler.export(this);return t&&(T.transformContext(this,e),e.drawImage(t,0,0)),e},Text.prototype.test=function(e){return(e=this.Matrix.value.traceCursorToLocalSpace(__spreadArray([],e,!0),this))[0]<this.Box.value.sprite.size[0]&&e[0]>0&&e[1]<this.Box.value.sprite.size[1]&&e[1]>0&&this},Text.prototype.syncStylesToBlock=function(){var e=this;this.textBlock.font=this.data.font.protectedValue,this.textBlock.color=this.data.color.protectedValue,this.textBlock.lineHeight=this.data.lineHeight.protectedValue,this.textBlock.style=this.data.style.protectedValue,this.textBlock.weight=this.data.weight.protectedValue,this.bindProps(["font","style","weight","fontSize","lineHeight","color"]),this.watch("str",(function(){e.textBlock.string=e.data.str.protectedValue}))},Text.prototype.bindProps=function(e){var t=this;e.forEach((function(e){t.watch(e,(function(){t.textBlock[e]=t.data[e].protectedValue}))}))},Text.prototype.export=function(){return this.textBlock.export()},__decorate([alive],Text.prototype,"render",null),__decorate([alive],Text.prototype,"test",null),__decorate([alive],Text.prototype,"syncStylesToBlock",null),__decorate([alive],Text.prototype,"bindProps",null),__decorate([alive],Text.prototype,"export",null),Text}(T),ce=function(e){function NdModField(){var t=null!==e&&e.apply(this,arguments)||this;return t.wind=new w(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.gravity=new w(0,0,(function(e){return e}),(function(e){return isFinite(e)?(e<0&&(e=0),e):t.gravity.protectedValue})),t.viscosity=new w(0,0,(function(e){return e}),(function(e){return isFinite(e)||(e<0&&(e=0),e>1&&(e=1)),e})),t}return __extends(NdModField,e),NdModField}(x),de=function(e){function NdModEmitter(){var t=null!==e&&e.apply(this,arguments)||this;return t.position=new w(0,[0,0],(function(e){return e}),(function(e){return __spreadArray([],e,!0)})),t.limit=new w(0,1e3,(function(e){return e}),(function(e){return e<0&&(e=0),e})),t.intensity=new w(0,1,(function(e){return e}),(function(e){return e<1?1:e})),t.shape=new w(0,0,(function(e){return e instanceof Array?NdModEmitter.convertComplexPath(e):e}),(function(e){return e instanceof Array?NdModEmitter.convertSimplePath(e):e<0?0:e})),t}return __extends(NdModEmitter,e),NdModEmitter}(x),le=new(function(){function NodasRandom(){}return NodasRandom.prototype.number=function(e,t){var r,o,n,i;return"number"==typeof e?(r=0,o=Math.abs(e)):(r=e[0]<e[1]?e[0]:e[1],o=e[0]<e[1]?e[1]:e[0]),r===o||(n=o-r)<0?r:(i=Math.random()*n+r,i=void 0!==t?parseFloat(i.toFixed(t)):i)},NodasRandom.prototype.point=function(e,t){return[this.number(e[0],t),this.number(e[1],t)]},NodasRandom.prototype.pointWithinCircle=function(e,t){var r=this.number(2*Math.PI,4),o=this.number(e);return[parseFloat((o*Math.cos(r)).toFixed(t)),parseFloat((o*Math.sin(r)).toFixed(t))]},NodasRandom.prototype.pointOnCircle=function(e,t){return[e*Math.sin(this.number(2*Math.PI)),e*Math.cos(this.number(2*Math.PI))]},NodasRandom.prototype.pointOnPath=function(e){return x.getPathSegmentTPoint(e,this.number(1))},NodasRandom.prototype.luck=function(e){return!(e<=0)&&(!(e>1)&&Math.random()<=e)},NodasRandom.prototype.setItem=function(e,t){var r,o,n,a=e.length,s=[];if(!t)return e[this.number([0,e.length-1])];if(t.length===e.length){for(a=0,r=0;r<e.length;r++)a+=t[r],s.push({item:e[r],probability:t[r]});for(s.sort((function(e,t){return e.probability-t.probability})),r=0;r<s.length;r++)s[r].min=s[r-1]?s[r-1].max:0,s[r].max=s[r].min+s[r].probability}else i.error("Probability length does not correspond items length");for(o=this.number([1,a]),r=0;r<s.length;r++)if(o>s[r].min&&o<=s[r].max){n=s[r].item;break}return n},NodasRandom}()),pe=function(e){function ParticleEmitter(t){var r=e.call(this,new de)||this;return r.particles=[],r.emitTimeout=0,r.lastEmittedAt=(new Date).getTime(),r._field=null,r.initiator=t,r.emitTimeout=1e3/r.data.intensity.protectedValue,r.watch("intensity",(function(){r.emitTimeout=1e3/r.data.intensity.protectedValue})),r.once("destroyed",(function(){r._field=null,r.particles.forEach((function(e){return e.destroy()})),r.particles=void 0})),r}return __extends(ParticleEmitter,e),ParticleEmitter.prototype.field=function(e){return this._field=e,this},ParticleEmitter.prototype.render=function(e,t){var r=this;if(this._field&&this.particles.length<this.data.limit.protectedValue){var o=t.getTime();if(o-this.lastEmittedAt>=this.emitTimeout){var n,i=this.initiator(t);if("number"==typeof this.data.shape.protectedValue)if(0===this.data.shape.protectedValue)i.style("position",[this.data.position.protectedValue[0],this.data.position.protectedValue[1]]);else(n=le.pointOnCircle(this.data.shape.protectedValue))[0]+=this.data.position.protectedValue[0],n[1]+=this.data.position.protectedValue[1],i.style("position",__spreadArray([],n,!0));else(n=le.pointOnPath(this.data.shape.protectedValue[le.number(this.data.shape.protectedValue.length-1)]))[0]+=this.data.position.protectedValue[0],n[1]+=this.data.position.protectedValue[1],i.style("position",n);i.once("destroyed",(function(){r.destroyed||(r.particles=r.particles.filter((function(e){return e!==i})))})),this._field.add(i),this.lastEmittedAt=o}}},__decorate([alive],ParticleEmitter.prototype,"field",null),__decorate([alive],ParticleEmitter.prototype,"render",null),ParticleEmitter}(M),he=function(e){function Field(t,r){var o=e.call(this,t,__assign(__assign({},new ce),new z),r)||this;o.fps=0,o.active=!0,o.emitters=[],o.particles=[],o.modifiers=[],o.fps=r.Ticker.fps;var fieldFpsCallback=function(){o.fps=r.Ticker.fps};return r.Ticker.on("fps",fieldFpsCallback),o.once("destroyed",(function(){r.Ticker.off("fps",fieldFpsCallback),o.emitters=void 0,o.particles=void 0,o.modifiers=void 0,o.active=!1,o.removeAllListeners()})),o}return __extends(Field,e),Field.prototype.applyFieldVector=function(e){if(this.data.wind.protectedValue[0]>0||this.data.wind.protectedValue[1]>0){var t;if(this.data.wind.protectedValue[0]>0)if((t=this.data.wind.protectedValue[0]-e[0])>.01){var r=t/this.fps*.5;e[0]<this.data.wind.protectedValue[0]&&(e[0]+=r)}if(this.data.wind.protectedValue[1]>0)if((t=this.data.wind.protectedValue[1]-e[1])>.01){r=t/this.fps*.5;e[1]<this.data.wind.protectedValue[1]&&(e[1]+=r)}}if(this.data.gravity.protectedValue>0&&(e[1]+=this.data.gravity.protectedValue/this.fps),this.data.viscosity.protectedValue){var o=1-this.data.viscosity.protectedValue;e[0]*=o,e[1]*=o}this.modifiers.forEach((function(t){return t(e)}))},Field.prototype.export=function(){},Field.prototype.modify=function(e){return e instanceof Array?this.modifiers=__spreadArray(__spreadArray([],this.modifiers,!0),e,!0):this.modifiers.push(e),this},Field.prototype.simplify=function(e){return this.modifiers=this.modifiers.filter((function(t){return t!==e})),this},Field.prototype.render=function(e,t){var r=this;return this.emitters.forEach((function(r){r.destroyed||r.render(e,t)})),this.particles.forEach((function(o){o.destroyed||o.render(r.applyFieldVector.bind(r),e,t)})),e},Field.prototype.test=function(){return!1},Field.prototype.add=function(e){var t=this;return e instanceof Array?e.forEach((function(e){t.particles.push(e),e.once("destroyed",(function(){t.destroyed||(t.particles=t.particles.filter((function(t){return e!==t})))}))})):(e.once("destroyed",(function(){t.destroyed||(t.particles=t.particles.filter((function(t){return t!==e})))})),this.particles.push(e)),this},Field.prototype.emitter=function(e){var t=this,r=new pe(e).field(this);return this.emitters.push(r),r.once("destroyed",(function(){t.destroyed||(t.emitters=t.emitters.filter((function(e){return e!==r})))})),r},Field.prototype.remove=function(e){return this.particles=e instanceof Array?this.particles.filter((function(t){return e.indexOf(t)<0})):this.particles.filter((function(t){return t!==e})),this},Field.prototype.start=function(){return this.active||(this.active=!0),this},Field.prototype.stop=function(){return this.active?this.active=!1:i.message("Attempt to activate active Field. Ignored"),this},__decorate([alive],Field.prototype,"applyFieldVector",null),__decorate([alive],Field.prototype,"export",null),__decorate([alive],Field.prototype,"modify",null),__decorate([alive],Field.prototype,"simplify",null),__decorate([alive],Field.prototype,"render",null),__decorate([alive],Field.prototype,"test",null),__decorate([alive],Field.prototype,"add",null),__decorate([alive],Field.prototype,"emitter",null),__decorate([alive],Field.prototype,"remove",null),__decorate([alive],Field.prototype,"start",null),__decorate([alive],Field.prototype,"stop",null),Field}(T),fe=function(e){function NdModParticle(){var t=null!==e&&e.apply(this,arguments)||this;return t.lifetime=new w(0,1/0,(function(e){return e}),(function(e){return e})),t.blending=new w(0,"source-over",(function(e){return e}),(function(e){return e})),t.opacity=new w(0,1,(function(e){return e}),(function(e){return e<0&&(e=0),e>1&&(e=1),e})),t.origin=new w(0,[.5,.5],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.vector=new w(0,[0,0,0,0,0,0,0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.rotate=new w(0,0,(function(e){return e}),(function(e){return e})),t.scale=new w(0,[1,1],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.skew=new w(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e[0]>360&&(e[0]=360-e[0]),e[0]<-360&&(e[0]+=360),e[1]>360&&(e[1]=360-e[1]),e[1]<-360&&(e[1]+=360),[NdModParticle.degToRad(e[0]),NdModParticle.degToRad(e[1])]})),t.position=new w(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t}return __extends(NdModParticle,e),NdModParticle}(x),ge=function(e){function Particle(t,r,o){var n=e.call(this,new fe)||this;return n.origin=[0,0],n._matrix=new u(!1),n._initialised=!1,n.startTime=0,n._resolver=r,o&&(n._initiator=o),n.watch("origin",(function(){n.updateOrigin()})),n.once("destroy",(function(){n.sprite=null,n._matrix=void 0})),"string"==typeof t?(n.sprite=G.isNdUrlSpriteStr(t)?new G(t):new b(t),n.sprite.loaded?n.updateOrigin():(n.sprite.once("load",(function(){return n.updateOrigin()})),n.sprite.load())):(n.sprite=t,t instanceof G||t instanceof b&&!t.loaded?(t.once("load",(function(){return n.updateOrigin()})),t.load()):n.updateOrigin()),n}return __extends(Particle,e),Particle.prototype.resetMatrix=function(){var e,t,r,o;this._matrix.reset(),(e=this._matrix).translate.apply(e,this.origin),(t=this._matrix).translate.apply(t,this.data.position.protectedValue),this._matrix.rotate(this.data.rotate.protectedValue),(r=this._matrix).skew.apply(r,this.data.skew.protectedValue),(o=this._matrix).scale.apply(o,this.data.scale.protectedValue),this._matrix.translate(-this.origin[0],-this.origin[1])},Particle.prototype.updateOrigin=function(){this.sprite&&(this.origin[0]=this.sprite.width*this.data.origin.protectedValue[0],this.origin[1]=this.sprite.height*this.data.origin.protectedValue[1])},Object.defineProperty(Particle.prototype,"startedAt",{get:function(){return this.startTime},enumerable:!1,configurable:!0}),Particle.prototype.opacify=function(e){this.data.vector.protectedValue[7]+=e},Particle.prototype.push=function(e){return this.data.vector.protectedValue[0]+=e[0],this.data.vector.protectedValue[1]+=e[1],this},Particle.prototype.turn=function(e){return this.data.vector.protectedValue[2]+=e,this},Particle.prototype.explode=function(e){return this.data.vector.protectedValue[5]+=e[0],this.data.vector.protectedValue[6]+=e[1],this},Particle.prototype.jelly=function(e){return this.data.vector.protectedValue[3]+=e[0],this.data.vector.protectedValue[4]+=e[1],this},Particle.prototype.render=function(e,t,r){if(((this.sprite instanceof G||this.sprite instanceof b)&&this.sprite.loaded||this.sprite instanceof HTMLImageElement||this.sprite instanceof HTMLCanvasElement)&&(this._initialised||(this._initiator?this._initialised=this._initiator(this.data.vector.protectedValue,r):this._initialised=!0,this.startTime=r.getTime(),this.cast("mount",new o(this,null))),this._initialised)){e(this.data.vector.protectedValue);var n=isNaN(this.data.lifetime.protectedValue)&&isFinite(this.data.lifetime.protectedValue)?0:(r.getTime()-this.startTime)/this.data.lifetime.protectedValue;if(n>1&&(n=1),n<0&&(n=0),this._resolver(this.data.vector.protectedValue,n,r)){this.data.position.protectedValue[0]+=this.data.vector.protectedValue[0],this.data.position.protectedValue[1]+=this.data.vector.protectedValue[1],this.data.rotate.set(this.data.rotate.protectedValue+this.data.vector.protectedValue[2],this),this.data.skew.protectedValue[0]+=this.data.vector.protectedValue[3],this.data.skew.protectedValue[1]+=this.data.vector.protectedValue[4],this.data.scale.protectedValue[0]+=this.data.vector.protectedValue[5],this.data.scale.protectedValue[1]+=this.data.vector.protectedValue[6],this.data.opacity.set(this.data.opacity.protectedValue+this.data.vector.protectedValue[7],this),this.resetMatrix();var i=this.sprite instanceof G||this.sprite instanceof b?this.sprite.export(r):this.sprite;i&&(t.save(),t.globalCompositeOperation=this.data.blending.protectedValue,t.globalAlpha*=this.data.opacity.protectedValue,t.transform.apply(t,this._matrix.extract()),t.drawImage(i,0,0),t.restore()),1===n&&this.destroy()}else this.destroy()}},Object.defineProperty(Particle.prototype,"initialized",{get:function(){return this._initialised&&!this.destroyed},enumerable:!1,configurable:!0}),Particle.prototype.reset=function(){return this._matrix.reset(),Object.values(this.data).forEach((function(e){return e.reset()})),this._initialised=!1,this},__decorate([alive],Particle.prototype,"startedAt",null),__decorate([alive],Particle.prototype,"opacify",null),__decorate([alive],Particle.prototype,"push",null),__decorate([alive],Particle.prototype,"turn",null),__decorate([alive],Particle.prototype,"explode",null),__decorate([alive],Particle.prototype,"jelly",null),__decorate([alive],Particle.prototype,"render",null),__decorate([alive],Particle.prototype,"reset",null),Particle}(M),ye=function ye(e){this.Ticker=new s,this.Animation=G,this.Image=b;var t=new s,r=new a(t),o=new B(r),n=new O(r,t,o),i=this;r.element(e),this.Ticker=t,this.Canvas=r,this.Mouse=n,this.Tree=o,new E("NODE_TREE_DEFAULT_ROOT",this),this.Text=function(e){function NodasText(t,r){var o=e.call(this,t,i)||this;return r&&o.style("str",r),o}return __extends(NodasText,e),NodasText}(ue),this.Area=function(e){function NodasArea(t,r){var o=e.call(this,t,i)||this;return r&&o.style("path",r),o}return __extends(NodasArea,e),NodasArea}(X),this.Rectangle=function(e){function NodasRectangle(t,r){var o=e.call(this,t,i)||this;return r&&o.style("size",r),o}return __extends(NodasRectangle,e),NodasRectangle}(J),this.Line=function(e){function NodasLine(t,r){var o=e.call(this,t,i)||this;return r&&o.style("path",r),o}return __extends(NodasLine,e),NodasLine}(W),this.Sprite=function(e){function NodasSprite(t,r){var o=e.call(this,t,i)||this;return r&&o.style("src",r),o}return __extends(NodasSprite,e),NodasSprite}(Y),this.Circle=function(e){function NodasCircle(t,r){var o=e.call(this,t,i)||this;return r&&o.style("radius",r),o}return __extends(NodasCircle,e),NodasCircle}(U),this.Group=function(e){function NodasGroup(t,r){var o=e.call(this,t,i)||this;return r&&o.append(r),o}return __extends(NodasGroup,e),NodasGroup}(E),this.Field=function(e){function NodasField(t,r){var o=e.call(this,t,i)||this;return r&&o.style(r),o}return __extends(NodasField,e),NodasField}(he),this.Particle=function(e){function NodasParticle(t,r,o){return e.call(this,t,r,o)||this}return __extends(NodasParticle,e),NodasParticle}(ge)},ve=ee,me=_,Ne=b,_e=G;exports.Fonts=ve,exports.NodasImage=Ne,exports.NodasSprite=_e,exports.Resources=me,exports.default=ye;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
