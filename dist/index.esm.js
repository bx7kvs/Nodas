var extendStatics=function(e,t){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},extendStatics(e,t)};function __extends(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function __(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(__.prototype=t.prototype,new __)}var __assign=function(){return __assign=Object.assign||function __assign(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},__assign.apply(this,arguments)};function __decorate(e,t,r,n){var o,i=arguments.length,a=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,r,a):o(t,r))||a);return i>3&&a&&Object.defineProperty(t,r,a),a}function __spreadArray(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))}var e=function e(t,r){this.order=0,this.callback=t,r&&(this.order=r)},t=function(){function NdEvent(e,t){this.time=new Date,this._type="default",this.propagate=!0,this.target=e,this.data=t}return Object.defineProperty(NdEvent.prototype,"type",{get:function(){return this._type},enumerable:!1,configurable:!0}),NdEvent}(),r=function(e){function NdMouseEvent(t,r){var n=e.call(this,t,r)||this;return n._type="mouse",n}return __extends(NdMouseEvent,e),NdMouseEvent}(t);function EventHandlers(){}function EventEmitter(){EventEmitter.init.call(this)}function $getMaxListeners(e){return void 0===e._maxListeners?EventEmitter.defaultMaxListeners:e._maxListeners}function emitNone(e,t,r){if(t)e.call(r);else for(var n=e.length,o=arrayClone(e,n),i=0;i<n;++i)o[i].call(r)}function emitOne(e,t,r,n){if(t)e.call(r,n);else for(var o=e.length,i=arrayClone(e,o),a=0;a<o;++a)i[a].call(r,n)}function emitTwo(e,t,r,n,o){if(t)e.call(r,n,o);else for(var i=e.length,a=arrayClone(e,i),s=0;s<i;++s)a[s].call(r,n,o)}function emitThree(e,t,r,n,o,i){if(t)e.call(r,n,o,i);else for(var a=e.length,s=arrayClone(e,a),u=0;u<a;++u)s[u].call(r,n,o,i)}function emitMany(e,t,r,n){if(t)e.apply(r,n);else for(var o=e.length,i=arrayClone(e,o),a=0;a<o;++a)i[a].apply(r,n)}function _addListener(e,t,r,n){var o,i,a;if("function"!=typeof r)throw new TypeError('"listener" argument must be a function');if((i=e._events)?(i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),a=i[t]):(i=e._events=new EventHandlers,e._eventsCount=0),a){if("function"==typeof a?a=i[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),!a.warned&&(o=$getMaxListeners(e))&&o>0&&a.length>o){a.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=a.length,function emitWarning(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(s)}}else a=i[t]=r,++e._eventsCount;return e}function _onceWrap(e,t,r){var n=!1;function g(){e.removeListener(t,g),n||(n=!0,r.apply(e,arguments))}return g.listener=r,g}function listenerCount(e){var t=this._events;if(t){var r=t[e];if("function"==typeof r)return 1;if(r)return r.length}return 0}function arrayClone(e,t){for(var r=new Array(t);t--;)r[t]=e[t];return r}EventHandlers.prototype=Object.create(null),EventEmitter.EventEmitter=EventEmitter,EventEmitter.usingDomains=!1,EventEmitter.prototype.domain=void 0,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.init=function(){this.domain=null,EventEmitter.usingDomains&&undefined.active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new EventHandlers,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function setMaxListeners(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return $getMaxListeners(this)},EventEmitter.prototype.emit=function emit(e){var t,r,n,o,i,a,s,u="error"===e;if(a=this._events)u=u&&null==a.error;else if(!u)return!1;if(s=this.domain,u){if(t=arguments[1],!s){if(t instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}return t||(t=new Error('Uncaught, unspecified "error" event')),t.domainEmitter=this,t.domain=s,t.domainThrown=!1,s.emit("error",t),!1}if(!(r=a[e]))return!1;var d="function"==typeof r;switch(n=arguments.length){case 1:emitNone(r,d,this);break;case 2:emitOne(r,d,this,arguments[1]);break;case 3:emitTwo(r,d,this,arguments[1],arguments[2]);break;case 4:emitThree(r,d,this,arguments[1],arguments[2],arguments[3]);break;default:for(o=new Array(n-1),i=1;i<n;i++)o[i-1]=arguments[i];emitMany(r,d,this,o)}return!0},EventEmitter.prototype.addListener=function addListener(e,t){return _addListener(this,e,t,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function prependListener(e,t){return _addListener(this,e,t,!0)},EventEmitter.prototype.once=function once(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.prependOnceListener=function prependOnceListener(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.removeListener=function removeListener(e,t){var r,n,o,i,a;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(n=this._events))return this;if(!(r=n[e]))return this;if(r===t||r.listener&&r.listener===t)0==--this._eventsCount?this._events=new EventHandlers:(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length;i-- >0;)if(r[i]===t||r[i].listener&&r[i].listener===t){a=r[i].listener,o=i;break}if(o<0)return this;if(1===r.length){if(r[0]=void 0,0==--this._eventsCount)return this._events=new EventHandlers,this;delete n[e]}else!function spliceOne(e,t){for(var r=t,n=r+1,o=e.length;n<o;r+=1,n+=1)e[r]=e[n];e.pop()}(r,o);n.removeListener&&this.emit("removeListener",e,a||t)}return this},EventEmitter.prototype.off=function(e,t){return this.removeListener(e,t)},EventEmitter.prototype.removeAllListeners=function removeAllListeners(e){var t,r;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=new EventHandlers,this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=new EventHandlers:delete r[e]),this;if(0===arguments.length){for(var n,o=Object.keys(r),i=0;i<o.length;++i)"removeListener"!==(n=o[i])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=new EventHandlers,this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(t)do{this.removeListener(e,t[t.length-1])}while(t[0]);return this},EventEmitter.prototype.listeners=function listeners(e){var t,r=this._events;return r&&(t=r[e])?"function"==typeof t?[t.listener||t]:function unwrapListeners(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(t):[]},EventEmitter.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):listenerCount.call(e,t)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};var n=function(){function NdEmitter(){this.Emitter=new EventEmitter,this.removeAllListeners=this.Emitter.removeAllListeners}return NdEmitter.prototype.cast=function(e,t){return this.Emitter.emit(e,t),t},NdEmitter.prototype.on=function(e,t){var r=this;e instanceof Array?e.forEach((function(e){return r.Emitter.on(e,t)})):this.Emitter.on(e,t)},NdEmitter.prototype.once=function(e,t){this.Emitter.once(e,t)},NdEmitter.prototype.off=function(e,t){this.Emitter.off(e,t)},NdEmitter}(),o=new(function(e){function NodasDebug(){var t=e.call(this)||this;return t.prefix="⋒",t.warnings=!0,t.groupLevel=0,t.currentLevel=0,t.separatorMessages={},t.verbose=!1,t}return __extends(NodasDebug,e),NodasDebug.prototype.getMessage=function(e){return"".concat(this.prefix,": ").concat(e)},NodasDebug.prototype.error=function(e){throw"string"==typeof e?(e=this.getMessage(e),new Error(e)):e},NodasDebug.prototype.warn=function(e,t){void 0===t&&(t=!0),t&&!this.verbose&&(e=this.getMessage(e),console.log("%c ".concat(e," ⚠"),"border: 1px solid #FFD166; border-radius:2px; background:rgba(255, 209, 102,.01); padding: 4px 6px 4px 4px; color:#B88100"))},NodasDebug.prototype.info=function(e){this.verbose&&(e=this.getMessage(e),this.cast("info",e),console.log("%c ".concat(e," ℹ"),"border: 1px solid #118AB2; border-radius:2px; background:rgba(7, 59, 76,.01); padding: 4px 6px 4px 4px; color:#118AB2"))},NodasDebug.prototype.message=function(e){this.verbose&&(e=this.getMessage(e),this.cast("info",e),console.log("%c"+e,"border: 1px solid #073B4C; border-radius:2px; background:rgba(7, 59, 76,.01); padding: 4px 6px 4px 4px; color:#073B4C"))},NodasDebug.prototype.separator=function(e){this.verbose&&(e=this.getMessage(e),this.currentLevel++,this.separatorMessages[this.currentLevel]=e,this.cast("info",e),console.log("%c"+e+" ⌛","padding: 4px 10px; border-left: 2px solid #10949C; background:rgba(16,148,156,0.1); color: #10949C"))},NodasDebug.prototype.separatorEnd=function(){if(this.verbose){if(!this.warnings)return;this.separatorMessages[this.currentLevel]&&(console.log("%c"+this.separatorMessages[this.currentLevel]+" ✔","padding: 4px 10px; border-left: 2px solid #10949C; background:rgba(16,148,156,0.1); color: #10949C"),this.currentLevel--),0===this.currentLevel&&(this.separatorMessages={})}},NodasDebug.prototype.positive=function(e){if(this.verbose){if(!this.warnings)return;e=this.getMessage(e),this.cast("info",e),console.log("%c ".concat(e," ✅"),"border: 1px solid rgb(6, 214, 160); border-radius:2px; background:rgba(6, 214, 160,.01); padding: 4px 6px 4px 4px; color:#05B384")}},NodasDebug.prototype.negative=function(e){this.warnings&&(e=this.getMessage(e),this.cast("info",e),console.log("%c ".concat(e," ❌"),"border: 1px solid #EF476F; border-radius:2px; background:rgba(239, 71, 111,.01); padding: 4px 6px 4px 4px; color:#EB1E4E"))},NodasDebug.prototype.group=function(e){this.verbose&&(console.group(e),this.groupLevel++)},NodasDebug.prototype.groupEnd=function(){if(this.verbose){if(!this.warnings)return;this.groupLevel--,console.groupEnd()}},NodasDebug}(n)),i=function(n){function Canvas(e){var t=n.call(this)||this;return t.e=null,t.context=null,t.s=[800,600],t.sNumeric=[800,600],t.resizeProcessTimeout=null,t.q=[],t._ready=!1,t._clear=!1,t.args=[t.context,new Date,0],t.scroll=[window.scrollX||document.documentElement.scrollLeft,window.scrollY||document.documentElement.scrollTop],t.offset=[0,0],t.cursor={cursor:[0,0],page:[0,0],screen:[0,0]},t.updateEventData=function(e){return t.cursor.page=[e.pageX,e.pageY],t.cursor.cursor=t.getMouseRelativePosition(e),t.cursor.screen=[e.pageX-t.scroll[0],e.pageY-t.scroll[1]],t.cursor},t.onCanvasMouseMove=function(e){t.cast("mouseMove",new r(t,t.updateEventData(e)))},t.onCanvasMouseLeave=function(e){t.cast("mouseLeave",new r(t,t.updateEventData(e)))},t.onCanvasMouseEnter=function(e){t.cast("mouseEnter",new r(t,t.updateEventData(e)))},t.onCanvasMouseDown=function(e){t.cast("mouseDown",new r(t,t.updateEventData(e)))},t.onCanvasMouseUp=function(e){t.cast("mouseUp",new r(t,t.updateEventData(e)))},t.DrawScene=function(e,r){t._ready&&t.context&&(t._clear&&t.context.clearRect(0,0,t.context.canvas.offsetWidth,t.context.canvas.offsetHeight),t.args[0]=t.context,t.args[1]=e,t.args[2]=r,t.q.forEach((function(e){e.callback.apply(t,t.args)})))},e.queue(0,t.DrawScene),window.addEventListener("scroll",(function(){t.scroll[0]=window.scrollX||document.documentElement.scrollLeft,t.scroll[1]=window.scrollY||document.documentElement.scrollTop})),window.addEventListener("resize",(function(){return t.handleResize()})),t}return __extends(Canvas,n),Canvas.prototype.removeEventListeners=function(){var e,t,r,n,o;null===(e=this.e)||void 0===e||e.removeEventListener("mousemove",this.onCanvasMouseMove),null===(t=this.e)||void 0===t||t.removeEventListener("mouseleave",this.onCanvasMouseLeave),null===(r=this.e)||void 0===r||r.removeEventListener("mouseenter",this.onCanvasMouseEnter),null===(n=this.e)||void 0===n||n.removeEventListener("mousedown",this.onCanvasMouseDown),null===(o=this.e)||void 0===o||o.removeEventListener("mouseup",this.onCanvasMouseUp)},Canvas.prototype.addEventListeners=function(){var e,t,r,n,o;null===(e=this.e)||void 0===e||e.addEventListener("mousemove",this.onCanvasMouseMove),null===(t=this.e)||void 0===t||t.addEventListener("mouseleave",this.onCanvasMouseLeave),null===(r=this.e)||void 0===r||r.addEventListener("mouseenter",this.onCanvasMouseEnter),null===(n=this.e)||void 0===n||n.addEventListener("mousedown",this.onCanvasMouseDown),null===(o=this.e)||void 0===o||o.addEventListener("mouseup",this.onCanvasMouseUp)},Canvas.prototype.recalculateOffset=function(){if(this.e){var e=this.e.getBoundingClientRect();this.offset=[e.x+this.scroll[0],e.y+this.scroll[1]]}},Canvas.prototype.getMouseRelativePosition=function(e){return[e.pageX-this.offset[0]-this.scroll[0],e.pageY-this.offset[1]-this.scroll[1]]},Canvas.prototype.recalculateSize=function(){if(this.e){var e=this.e.parentNode;if(e){var t=e.getBoundingClientRect(),r=t.height,n=t.width;if("string"==typeof this.s[0]){var i=parseInt(this.s[0])/100;this.sNumeric[0]=n*i}else this.sNumeric[0]=this.s[0];if("string"==typeof this.s[1]){var a=parseInt(this.s[1])/100;this.sNumeric[1]=r*a}else this.sNumeric[1]=this.s[1];this.e.setAttribute("width",this.sNumeric[0].toString()),this.e.setAttribute("height",this.sNumeric[1].toString())}else o.warn("Current canvas element is detached from DOM. Size reset skipped");this.recalculateOffset()}else o.warn("No Canvas to operate. Size reset skipped")},Canvas.prototype.handleResize=function(){var e=this;this.e&&("string"==typeof this.s[0]||"string"==typeof this.s[1]?(this.e.setAttribute("width","0"),this.e.setAttribute("height","0"),this.resizeProcessTimeout&&clearTimeout(this.resizeProcessTimeout),this.resizeProcessTimeout=setTimeout((function(){e.recalculateSize(),e.cast("resize",new t(e,null))}),1e3)):(this.resizeProcessTimeout&&clearTimeout(this.resizeProcessTimeout),this.sNumeric[0]=this.s[0],this.sNumeric[1]=this.s[1],this.recalculateSize(),this.cast("resize",new t(this,null))))},Canvas.prototype.element=function(e){if("string"==typeof e){var r=document.querySelector(e);r instanceof HTMLCanvasElement?(r.setAttribute("width",this.sNumeric[0].toString()),r.setAttribute("height",this.sNumeric[1].toString()),this.removeEventListeners(),this.e=r,this.context=r.getContext("2d"),this.addEventListeners(),this._ready=!0,o.positive("Accepted ".concat(e," as rendering root"))):o.error("Element ".concat(e," is not a HTMLCanvasElement or does not exist"))}else e.setAttribute("width",this.sNumeric[0].toString()),e.setAttribute("height",this.sNumeric[1].toString()),this.removeEventListeners(),this.e=e,this.context=e.getContext("2d"),this.addEventListeners(),this._ready=!0,o.positive("Accepted ".concat(e.id?e.id:e.classList.toString()," as rendering root"));this.handleResize(),this.cast("switch",new t(this,null))},Canvas.prototype.queue=function(t,r){return"number"==typeof t&&"function"==typeof r?this.q.push(new e(r,t)):"function"==typeof t&&this.q.push(new e(t)),this.q.sort((function(e,t){return e.order-t.order})),this},Canvas.prototype.unQueue=function(e){this.q=this.q.filter((function(t){return t.callback!==e})),o.warn("Callback removed form canvas queue")},Canvas.prototype.size=function(e,t){if("number"!=typeof e&&"string"!=typeof e)return __spreadArray([],this.sNumeric,!0);"number"==typeof t||"string"==typeof t?(this.s[0]=e,this.s[1]=t,this.handleResize()):o.error("Invalid Canvas size [".concat(e,", ").concat(t,"]"))},Canvas.prototype.forceResize=function(){this.handleResize()},Object.defineProperty(Canvas.prototype,"ready",{get:function(){return this._ready},enumerable:!1,configurable:!0}),Object.defineProperty(Canvas.prototype,"clear",{get:function(){return this._clear},set:function(e){this._clear=e},enumerable:!1,configurable:!0}),Canvas}(n),a=function(e){function Ticker(){var t=e.call(this)||this;return t.frameDuration=1e3/60,t.q=[],t.frame=0,t._fps=60,t.args=[new Date,0],t.init=!1,t.softPause=!1,t.tick=function(){t.args[0]=new Date,t.args[1]=t.frame;try{t.draw()}catch(e){throw t.stop(),e}},t.queue=function(e,r){return"function"==typeof e?t.q.push({order:0,f:e}):"function"==typeof r?t.q.push({order:e,f:r}):o.warn("Ticker callback is not a function. Ignored"),t.q.sort((function(e,t){return e.order-t.order})),t},window.addEventListener("blur",(function(){o.positive("Window blurred. Pause"),t.softPause=!0,t.stop()})),window.addEventListener("focus",(function(){t.softPause&&(o.positive("Window focused. Restart"),t.start())})),t}return __extends(Ticker,e),Ticker.prototype.start=function(){return this.interval?o.warn("Ticker already started. Ignored"):(this.softPause=!1,this.interval=window.setInterval(this.tick,this.frameDuration),this.init||(this.cast("fps",null),this.init=!0),this.cast("start",null),o.positive("Ticker started")),this},Ticker.prototype.stop=function(){return this.interval?(this.frame=0,clearInterval(this.interval),this.interval=void 0,this.cast("stop",null),o.positive("Ticker stopped")):o.warn("Ticker already stopped. Ignored"),this},Ticker.prototype.draw=function(){var e=this;this.q.forEach((function(t,r){try{e.q[r].f.apply(self,e.args)}catch(e){throw e}})),this.frame++},Object.defineProperty(Ticker.prototype,"frameTime",{get:function(){return this.frameDuration},enumerable:!1,configurable:!0}),Object.defineProperty(Ticker.prototype,"fps",{get:function(){return this._fps},set:function(e){e>60&&(e=60),e<=0&&(e=1),this.frameDuration=1e3/e,this.cast("fps",null),o.positive("Ticker FPS set ".concat(e,". Restart Ticker")),this.interval&&(this.stop(),this.start())},enumerable:!1,configurable:!0}),Ticker}(n),s=function(){function NdMatrix(e){void 0===e&&(e=!0),this.history=[],this._value=[1,0,0,1,0,0],this._inversion=[1,0,0,1,0,0],this.traceBack=e}return NdMatrix.prototype.invert=function(){if(!this.traceBack)return this._inversion;for(var e=this.history.length-1;e>=0;e--){if(void 0!==this.history[e].rotate){var t=Math.sin(-this.history[e].rotate),r=Math.cos(-this.history[e].rotate);NdMatrix.multiply(this._inversion,[r,t,-t,r,0,0])}this.history[e].translate&&NdMatrix.multiply(this._inversion,[1,0,0,1,-this.history[e].translate[0],-this.history[e].translate[1]]),this.history[e].skew&&NdMatrix.multiply(this._inversion,[1,Math.tan(-this.history[e].skew[1]),Math.tan(-this.history[e].skew[0]),1,0,0]),this.history[e].scale&&NdMatrix.multiply(this._inversion,[1/this.history[e].scale[0],0,0,1/this.history[e].scale[1],0,0])}},NdMatrix.prototype.rotate=function(e){var t=Math.sin(e),r=Math.cos(e),n=[r,t,-t,r,0,0];return NdMatrix.multiply(this._value,n),this.traceBack&&this.history.push({rotate:e}),this},NdMatrix.prototype.translate=function(e,t){var r=[1,0,0,1,e,t];return 0===e&&0===t||(NdMatrix.multiply(this._value,r),this.traceBack&&this.history.push({translate:[e,t]})),this},NdMatrix.prototype.scale=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1];if(1!==r||1!==n){var o=[r,0,0,n,0,0];NdMatrix.multiply(this._value,o),this.traceBack&&this.history.push({scale:[r,n]})}return this},NdMatrix.prototype.skew=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1];if(0!==r||0!==n){var o=Math.tan(r),i=Math.tan(n),a=[1,i,o,1,0,0];NdMatrix.multiply(this._value,a),this.traceBack&&this.history.push({skew:[r,n]})}return this},NdMatrix.prototype.reset=function(){this._value[0]=1,this._value[1]=0,this._value[2]=0,this._value[3]=1,this._value[4]=0,this._value[5]=0,this._inversion[0]=1,this._inversion[1]=0,this._inversion[2]=0,this._inversion[3]=1,this._inversion[4]=0,this._inversion[5]=0,this.history=[]},NdMatrix.prototype.extract=function(){return __spreadArray([],this._value,!0)},NdMatrix.prototype.extractInversion=function(){return __spreadArray([],this._inversion,!0)},NdMatrix.prototype.tracePoint=function(e){return NdMatrix.applyMatrixToPoint(this._inversion,e)},NdMatrix.multiply=function(e,t){var r=e[0]*t[0]+e[2]*t[1],n=e[1]*t[0]+e[3]*t[1],o=e[0]*t[2]+e[2]*t[3],i=e[1]*t[2]+e[3]*t[3],a=e[0]*t[4]+e[2]*t[5]+e[4],s=e[1]*t[4]+e[3]*t[5]+e[5];e[0]=r,e[1]=n,e[2]=o,e[3]=i,e[4]=a,e[5]=s},NdMatrix.applyMatrixToPoint=function(e,t){var r=t[0]*e[0]+t[1]*e[2]+e[4],n=t[0]*e[1]+t[1]*e[3]+e[5];return t[0]=r,t[1]=n,t},NdMatrix}(),u=function(e){function NdNodeMatrix(){var t=e.call(this)||this;return t._globalInversion=null,t.globalInversion=function(e){if(t._globalInversion)return t._globalInversion;var r=e.parent;return t._globalInversion=__spreadArray([],t._inversion,!0),r&&NdNodeMatrix.multiply(t._globalInversion,r.matrix.globalInversion(r)),__spreadArray([],t._globalInversion,!0)},t.purgeInversion=function(e){t._globalInversion=null,e instanceof L&&e.forEachChild((function(e){return e.matrix.purgeInversion(e)}))},t}return __extends(NdNodeMatrix,e),NdNodeMatrix.prototype.traceCursorToLocalSpace=function(e,t){return s.applyMatrixToPoint(this.globalInversion(t),e)},NdNodeMatrix.prototype.reset=function(){e.prototype.reset.call(this),this._globalInversion=null},NdNodeMatrix}(s),c=function(){function NdNodeMatrixContainer(e,t,r){var n=new u,o=r.register("transformMatrix",(function(){var r=e.boundingRect;if(r){n.reset();var o=t.position.protectedValue,i=[r.size[0]*t.origin.protectedValue[0],r.size[1]*t.origin.protectedValue[1]],a=t.skew.protectedValue,s=t.rotate.protectedValue,u=t.scale.protectedValue,c=t.translate.protectedValue,d=e instanceof L?[o[0]+c[0],o[1]+c[1]]:[r.position[0]+c[0],r.position[1]+c[1]];n.translate(i[0],i[1]),0===d[0]&&0===d[1]||n.translate(d[0],d[1]),s&&n.rotate(s),0===a[0]&&0===a[1]||n.skew(a[0],a[1]),0===u[0]&&0===u[1]||n.scale(u[0],u[1]),n.translate(-i[0],-i[1]),n.invert()}return n})),i=o.getter,a=o.purge;this.purge=a,this.getter=i}return Object.defineProperty(NdNodeMatrixContainer.prototype,"value",{get:function(){return this.getter()},enumerable:!1,configurable:!0}),NdNodeMatrixContainer}(),d=function(){function NdCache(){this.values={}}return NdCache.prototype.register=function(e,t){var r=this;return this.values[e]||(this.values[e]={value:void 0,getter:t,relevant:!1}),{purge:function(){r.values[e].relevant=!1},getter:function(){return r.values[e].relevant||(r.values[e].value=r.values[e].getter(),r.values[e].relevant=!0),r.values[e].value}}},NdCache}(),l=function(){function NdBox(){this.container={size:[0,0],position:[0,0]},this.sprite={margin:[0,0,0,0],position:[0,0],size:[0,0]}}return NdBox.prototype.value=function(e,t,r,n,o,i,a,s){this.container.size[0]=r,this.container.size[1]=n,this.container.position[0]=e,this.container.position[1]=t,this.sprite.margin[0]=o,this.sprite.margin[1]=i,this.sprite.margin[2]=a,this.sprite.margin[3]=s,this.sprite.size[0]=s+r+i,this.sprite.size[1]=o+n+a,this.sprite.position[0]=e-s,this.sprite.position[1]=t-o},NdBox}(),p=function(){function NdNodeBox(e,t,r){var n=this,o=e;this.box=new l,e.once("destroyed",(function(){return o=void 0}));var i=t.register("box",(function(){return o&&n.box.value.apply(n.box,r(o)),n.box})),a=i.getter,s=i.purge;this.getter=a,this.purge=function(){s(),o&&o.parent&&o.parent.purgeBox()}}return Object.defineProperty(NdNodeBox.prototype,"value",{get:function(){return this.getter()},enumerable:!1,configurable:!0}),NdNodeBox}(),h=function(){function NdNodeConnector(e,t){this._parent=null,this.layers={},this.layer=0,this.identifier=e,this.render=t}return NdNodeConnector.prototype.zChild=function(e,t,r){this.layers[t]||(this.layers[t]=[]),r?this.layers[t].unshift(e):this.layers[t].push(e)},NdNodeConnector.prototype.removeChild=function(e,t){this.layers[t]=this.layers[t].filter((function(t){return t!==e})),this.layers[t].length||delete this.layers[t]},NdNodeConnector.prototype.reset=function(){this.layers={},this._parent=null},Object.defineProperty(NdNodeConnector.prototype,"z",{get:function(){return this.layer},set:function(e){this.layer=e},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeConnector.prototype,"parent",{get:function(){return this._parent},set:function(e){this._parent=e},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeConnector.prototype,"id",{get:function(){return this.identifier},set:function(e){this.identifier=e},enumerable:!1,configurable:!0}),NdNodeConnector.prototype.forEachChild=function(e){var _loop_1=function(r){t.layers[r].forEach((function(t,n){e(t,n,parseInt(r))}))},t=this;for(var r in this.layers)_loop_1(r)},NdNodeConnector}(),f=function(){function NdCompiler(e,t,r){var n=this;this.conditions=[],this.drawerPipeBefore={},this.drawerPipeAfter={},this.beforePipeSize=0,this.afterPipeSize=0,this.isRenderAllowed=function(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var o=!0,i=0;i<n.conditions.length&&(o=(e=n.conditions)[i].apply(e,t));i++);return o},this.render=function(e,t,r){if(n.isRenderAllowed(e,t,r)){var o=e;if(e.save(),n.beforePipeSize)for(var i in n.drawerPipeBefore){if(n.drawerPipeBefore.hasOwnProperty(i))for(var a=0;a<n.drawerPipeBefore[i].length;a++){e.save();var s=n.drawerPipeBefore[i][a](o,t,r);if(e.restore(),!(o=s||!1))break}if(!o)break}if(o&&(o.globalCompositeOperation=n.props.blending.protectedValue,o.globalAlpha*=n.props.opacity.protectedValue),o===e?n.resolver(e,t,r):(n.resolver(e,t,r),o&&e.drawImage(o.canvas,0,0,e.canvas.width,e.canvas.height)),o=e,n.afterPipeSize)for(var i in n.drawerPipeAfter){if(n.drawerPipeAfter.hasOwnProperty(i))for(a=0;a<n.drawerPipeAfter[i].length;a++){o.save();s=n.drawerPipeAfter[i][a](o,t,r);if(o.restore(),!(o=s||!1))break}if(!o)break}e.restore()}return e},this.node=e,this.resolver=r,this.props=t}return NdCompiler.prototype.filter=function(e){this.conditions.push(e)},NdCompiler.prototype.pipe=function(e,t){return t||(t=0),t>100?(this.drawerPipeAfter[t]||(this.drawerPipeAfter[t]=[]),this.drawerPipeAfter[t].push(e),this.afterPipeSize++):(this.drawerPipeBefore[t]||(this.drawerPipeBefore[t]=[]),this.drawerPipeBefore[t].push(e),this.beforePipeSize++),this.node},NdCompiler.prototype.unpipe=function(e){var t=this;for(var r in this.drawerPipeBefore)this.drawerPipeBefore.hasOwnProperty(r)&&(this.drawerPipeBefore[r]=this.drawerPipeBefore[r].filter((function(r){return r!==e||(t.beforePipeSize--,!1)})));for(var r in this.drawerPipeAfter)this.drawerPipeAfter.hasOwnProperty(r)&&(this.drawerPipeAfter[r]=this.drawerPipeAfter[r].filter((function(r){return r!==e||(t.afterPipeSize--,!1)})));return this.node},NdCompiler}();function alive(e,t,r){if("function"==typeof r.value){var n=r.value;r.value=function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];if(e.destroyed)throw new Error("Attempt to call [".concat(t,"] of a destroyed Node"));return n.apply(this?this:e,r)}}else{var o=r.get,i=r.set;i&&(r.set=function(r){if(e.destroyed)throw new Error("Attempt to set a property [".concat(t,"] of a destroyed Node"));return i.call(this,r)}),o&&(r.get=function(){if(e.destroyed)throw new Error("Attempt to access property [".concat(t,"] of a destroyed Node"));return o.call(this)})}}var y,v=function(e){function NdDestroyEvent(t){var r=e.call(this,t,null)||this;return r._type="state",r}return __extends(NdDestroyEvent,e),NdDestroyEvent}(t),m=function(e){function NdDestroyableNode(){var t=e.call(this)||this;return t._destroyed=!1,t}return __extends(NdDestroyableNode,e),Object.defineProperty(NdDestroyableNode.prototype,"destroyed",{get:function(){return this._destroyed},enumerable:!1,configurable:!0}),NdDestroyableNode.prototype.destroy=function(){this.cast("destroy",new v(this)),this._destroyed=!0,this.cast("destroyed",new v(this)),this.removeAllListeners()},__decorate([alive],NdDestroyableNode.prototype,"destroy",null),NdDestroyableNode}(n),N=function(e){function NdMouseConnector(t,r){var n=e.call(this)||this;return n._disabled=!1,n.test=r,n.emit=t,n}return __extends(NdMouseConnector,e),NdMouseConnector.prototype.cast=function(e,t){return!this.disabled&&this.emit(e,t)},Object.defineProperty(NdMouseConnector.prototype,"disabled",{get:function(){return this._disabled},enumerable:!1,configurable:!0}),NdMouseConnector.prototype.disable=function(){this._disabled=!0},NdMouseConnector.prototype.enable=function(){this._disabled=!1},NdMouseConnector.prototype.destroy=function(){e.prototype.destroy.call(this),this.test=function(){return!1},this.emit=function(){},this._disabled=!0},NdMouseConnector}(m),b=function(e){function NdBaseNode(){var t=e.call(this)||this;return t.once("destroyed",(function(){t.Box=void 0})),t}return __extends(NdBaseNode,e),Object.defineProperty(NdBaseNode.prototype,"box",{get:function(){if(this.Box)return this.Box.value.container},enumerable:!1,configurable:!0}),Object.defineProperty(NdBaseNode.prototype,"boundingRect",{get:function(){if(this.Box)return this.Box.value.sprite},enumerable:!1,configurable:!0}),__decorate([alive],NdBaseNode.prototype,"box",null),__decorate([alive],NdBaseNode.prototype,"boundingRect",null),NdBaseNode}(m),_=function(e){function NdResource(t,r){var n=e.call(this)||this;return n.status=-1,n.resolved=!1,n.src=t,n.resolve=r,n}return __extends(NdResource,e),Object.defineProperty(NdResource.prototype,"url",{get:function(){return this.src},enumerable:!1,configurable:!0}),Object.defineProperty(NdResource.prototype,"loaded",{get:function(){return this.status>0},enumerable:!1,configurable:!0}),Object.defineProperty(NdResource.prototype,"error",{get:function(){return 0==this.status},enumerable:!1,configurable:!0}),NdResource.prototype.load=function(){return this.resolved?this:(this.resolved=!0,this.resolve())},__decorate([alive],NdResource.prototype,"load",null),NdResource}(m),x=new(function(){function NodasResources(){this.images={}}return NodasResources.prototype.image=function(e,t,r,n){var i=this;return this.images[e]?(this.images[e].loading?(t&&this.images[e].onLoad.push(t),r&&this.images[e].onError.push(r)):setTimeout((function(){i.images[e]&&(i.images[e].loaded&&t&&t(),i.images[e].error&&r&&r())})),n&&this.images[e].onReset.push(n)):(o.info("Loading image ".concat(e)),this.images[e]={loaded:!1,error:!1,loading:!0,onError:r?[r]:[],onLoad:t?[t]:[],onReset:n?[n]:[],src:e,image:new Image},this.images[e].image.addEventListener("load",(function(){o.positive("Image ".concat(e," loaded.")),i.images[e].loaded=!0,i.images[e].loading=!1,i.images[e].error=!1,i.images[e].onLoad.forEach((function(e){return e()})),i.images[e].onError=[],i.images[e].onLoad=[]})),this.images[e].image.addEventListener("error",(function(){o.negative("Image ".concat(e," failed to load")),i.images[e].loaded=!1,i.images[e].error=!0,i.images[e].loading=!1,i.images[e].onError.forEach((function(e){return e()})),i.images[e].onError=[],i.images[e].onLoad=[]})),this.images[e].image.src=e),this.images[e].image},NodasResources.prototype.reset=function(){var e=Object.values(this.images);this.images={},e.forEach((function(e){return e.onReset.forEach((function(e){return e()}))}))},NodasResources.prototype.bulkLoad=function(e){var t=this;e.forEach((function(e){t.image(e)}))},NodasResources}()),w=function(e){function NdImage(t){var r=e.call(this,t,(function(){return r.defineImage(t)}))||this;return r._size=[0,0],r.once("destroy",(function(){return r.image=void 0})),r}return __extends(NdImage,e),NdImage.prototype.defineImage=function(e){var r=this;return this.image=x.image(e,(function(){r.status=1,r.image?(r._size[0]=r.image.width,r._size[1]=r.image.height):o.error("Unable to set size of image that was not yet defined"),r.cast("load",new t(r,null))}),(function(){r.status=0,r.cast("load",new t(r,null)),r.cast("error",new t(r,null))}),(function(){return r.defineImage(e)})),this},NdImage.prototype.export=function(){return this.image},Object.defineProperty(NdImage.prototype,"width",{get:function(){return this._size[0]},enumerable:!1,configurable:!0}),Object.defineProperty(NdImage.prototype,"height",{get:function(){return this._size[1]},enumerable:!1,configurable:!0}),Object.defineProperty(NdImage.prototype,"size",{get:function(){return __spreadArray([],this._size,!0)},enumerable:!1,configurable:!0}),NdImage.isNdUrlStrRegex=function(e){return NdImage.NdUrlStrRegex.test(e)},NdImage.NdUrlStrRegex=/(^.+\.(png)|(jpg)])$/,__decorate([alive],NdImage.prototype,"defineImage",null),__decorate([alive],NdImage.prototype,"export",null),__decorate([alive],NdImage.prototype,"width",null),__decorate([alive],NdImage.prototype,"height",null),__decorate([alive],NdImage.prototype,"size",null),NdImage}(_),k=function(){function NdNodeStylesModel(){}return NdNodeStylesModel.degToRad=function(e){return e>360&&(e-=e*Math.floor(e/360)),e<360&&(e+=e*Math.floor(e/360)),e*Math.PI/180},NdNodeStylesModel.radToDeg=function(e){return e*(180/Math.PI)},NdNodeStylesModel.normalizeColor=function(e){return"string"==typeof e&&(e=NdNodeStylesModel.colorToArray(e)),e.map((function(e,t){return t<3?(e=Math.round(e))>255?255:e<0?0:e:(e<0&&(e=0),e>1&&(e=1),e.toFixed(2))})),e},NdNodeStylesModel.colorToArray=function(e){var t=e.match(/^rgba\(([\d.]+),([\d.]+),([\d.]+),([\d.]+)\)$/);return t?NdNodeStylesModel.normalizeColor([parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]):[0,0,0,1]},NdNodeStylesModel.arrayToColor=function(e){return e=NdNodeStylesModel.normalizeColor(e),"rgba(".concat(e[0],",").concat(e[1],",").concat(e[2],",").concat(e[3],")")},NdNodeStylesModel.getControlPoints=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3],a=e[4],s=e[5],u=e[6],c=Math.sqrt(Math.pow(o-r,2)+Math.pow(i-n,2)),d=Math.sqrt(Math.pow(a-o,2)+Math.pow(s-i,2)),l=u*c/(c+d),p=u*d/(c+d),h=o-l*(a-r),f=i-l*(s-n),y=o+p*(a-r),v=i+p*(s-n);return[h,f,y,v]},NdNodeStylesModel.convertComplexPath=function(e){for(var t=[],r=0;r<e.length;r++)t.push([e[r][0],e[r][1]]);return t},NdNodeStylesModel.interpolate=function(e,t,r){e.forEach((function(n,o){var i,a,s=[n[0],n[1]],u=[n[2],n[3]];i=0===o?r?[e[e.length-1][0],e[e.length-1][1]]:[s[0]-(u[0]-s[0]),s[1]-(u[1]-s[0])]:[e[o-1][0],e[o-1][1]],a=NdNodeStylesModel.getControlPoints(i[0],i[1],s[0],s[1],u[0],u[1],t),0==o?(e[o][4]=a[2],e[o][5]=a[3]):(e[o-1][6]=a[0],e[o-1][7]=a[1],n[4]=a[2],n[5]=a[3]),o==e.length-1&&(i=[e[o][0],e[o][1]],s=[e[o][2],e[o][3]],u=r?[e[0][2],e[0][3]]:[s[0]+(i[0]-s[0]),s[1]+(i[0]-s[0])],a=NdNodeStylesModel.getControlPoints(i[0],i[1],s[0],s[1],u[0],u[1],t),n[6]=a[0],n[7]=a[1])}))},NdNodeStylesModel.getPathSegmentTPoint=function(e,t){var r=e[0],n=e[1],o=e[2],i=e[3],a=e[4],s=e[5],u=e[6],c=e[7];return t>1&&(t=1),t<0&&(t=0),[Math.pow(1-t,3)*r+3*t*Math.pow(1-t,2)*a+3*t*t*(1-t)*u+t*t*t*o,Math.pow(1-t,3)*n+3*t*Math.pow(1-t,2)*s+3*t*t*(1-t)*c+t*t*t*i]},NdNodeStylesModel.comparePaths=function(e,t){if(e.length!==t.length)return!1;for(var r=!0,n=0;n<e.length;n++)for(var o=0;o<e[n].length;o++)if(e[n][o]!==t[n][o]){r=!1;break}return r},NdNodeStylesModel.extractPercentFraction=function(e){return parseFloat(e)/100},NdNodeStylesModel.syncArray=function(e,t,r){if(t.length>e.length&&t.splice(0,e.length),t.length<e.length)for(var _loop_1=function(e){t.push(r.map((function(t,r){return"function"==typeof t?t(e,r):t})))},n=0;n<e.length-t.length;n++)_loop_1(n)},NdNodeStylesModel.convertSimplePath=function(e,t){if(void 0===t&&(t=!1),e.length<2)throw new Error("Invalid path length");var r=[];return e.forEach((function(t,n){var o=t[0],i=t[1],a=[0,0,0,0,0,0,0,0];n<e.length-1&&(a[0]=o,a[1]=i),0!==n&&(r[n-1][2]=o,r[n-1][3]=i,r[n-1][4]=r[n-1][0],r[n-1][5]=r[n-1][1],r[n-1][6]=o,r[n-1][7]=i),r.push(a)})),r.pop(),t&&r[r.length-1][2]!==r[0][0]&&r[r.length-1][3]!==r[0][1]&&r.push([r[r.length-1][2],r[r.length-1][3],r[0][0],r[0][1],r[r.length-1][2],r[r.length-1][3],r[0][0],r[0][1]]),r},NdNodeStylesModel}(),S=function(){function NdStylesProperty(e,t,r,n){var o=this;this.ordering=0,this.set=function(){return o._value},this._value=t,this.default=t,this.ordering=e,this.value=r(this._value),this.reset=function(){o._value=t},this.get=function(){return o.value=r(o._value),o.value},n&&(this.set=function(e,t){return o._value=n(e,t),o.value=r(o._value),o._value})}return Object.defineProperty(NdStylesProperty.prototype,"protectedValue",{get:function(){return this._value},enumerable:!1,configurable:!0}),Object.defineProperty(NdStylesProperty.prototype,"publicValue",{get:function(){return this.get()},enumerable:!1,configurable:!0}),NdStylesProperty.prototype.sync=function(e,t){if(this._value instanceof Array&&(this._value.length>e.length&&this._value.splice(0,e.length),this._value.length<e.length))for(var r=e.length-this._value.length,_loop_1=function(e){"function"==typeof t?n._value.push(t(e)):t instanceof Array?n._value.push(t.map((function(t,r){return"function"==typeof t?t(e,r):t}))):n._value.push(t)},n=this,o=0;o<r;o++)_loop_1(o)},NdStylesProperty}(),C=function(e){function NdNodeStylePropertyAnimated(t,r,n,o,i,a){var s=e.call(this,t,r,n,o)||this;return s._start=!1,s._end=!1,s.starter=i,s.applier=a,s}return __extends(NdNodeStylePropertyAnimated,e),Object.defineProperty(NdNodeStylePropertyAnimated.prototype,"start",{get:function(){return this._start},set:function(e){this._start=e},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeStylePropertyAnimated.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),NdNodeStylePropertyAnimated.prototype.setStartValue=function(e){this.start=e},NdNodeStylePropertyAnimated.prototype.setEndValue=function(e){this._end=e},NdNodeStylePropertyAnimated.prototype.init=function(e){return this.starter(this.get(),e,this.setStartValue.bind(this),this.setEndValue.bind(this)),this},NdNodeStylePropertyAnimated.prototype.apply=function(e,t,r){return r=this.applier(r,e,t),this.set(r,e),this.publicValue},NdNodeStylePropertyAnimated}(S),P=function(e){function NdModBg(){var t=null!==e&&e.apply(this,arguments)||this;return t.fill=new C(0,"rgba(0,0,0,0)",(function(e){return e}),(function(e){return e instanceof Array?k.arrayToColor(e):e}),(function(e,t,r,n){r(k.colorToArray(e)),n("string"==typeof t?k.colorToArray(t):t)}),(function(e){return k.normalizeColor(e)})),t.bg=new S(0,[],(function(e){return e.map((function(e){return e.url}))}),(function(e,r){if(r.box){var n=__spreadArray([],t.bg.protectedValue,!0);if("string"==typeof e){NdModBg.destroyBackground(t);var i=new w(e);i.once("load",(function(){t.bg.protectedValue[0]===i&&r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,0,i)})),i.load(),n=[i]}else if(e instanceof Array)NdModBg.destroyBackground(t),n="string"==typeof e[0]?e.map((function(e,n){var o=new w(e);return o.loaded?r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,n,o):o.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,n,o)})),o})):__spreadArray([],e.map((function(e,n){return e.loaded||e.once("load",(function(){t.bg.protectedValue[n]===e&&r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,n,e)})),r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,n,e),e})),!0);else if(e instanceof w)NdModBg.destroyBackground(t),n=[e],e.loaded?NdModBg.updateSizeAndPosition(t,r.box.size,0,e):e.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,0,e)}));else if("object"==typeof e){var _loop_1=function(o){if(n[o]){if("string"==typeof e[o]&&e[o]!==n[o].url){n[o].destroy();var i=new w(e[o]);i.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,parseInt(o),i)})),n[o]=i}}else{n[o].destroy();var a=e[o];a.loaded?NdModBg.updateSizeAndPosition(t,r.box.size,parseInt(o),a):a.once("load",(function(){r.box&&NdModBg.updateSizeAndPosition(t,r.box.size,parseInt(o),a)})),n.push(e[o])}};for(var a in e)_loop_1(a)}else NdModBg.destroyBackground(t),n=[];return t.backgroundPosition.sync(n,[0,0]),t.backgroundPositionNumeric.sync(n,[0,0]),t.backgroundSize.sync(n,["auto","auto"]),t.backgroundSizeNumeric.sync(n,[function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],0,"auto"):0},function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],1,"auto"):0}]),n}return o.error("Background can be bound only to nodes with box"),[]})),t.backgroundSize=new S(1,[],(function(e){return e.map((function(e){return[e[0],e[1]]}))}),(function(e,r){var n=t.backgroundSize.protectedValue;if("string"==typeof e||"number"==typeof e)e="number"==typeof e&&e<0?0:e,n=t.bg.protectedValue.map((function(){return[e,e]}));else if(e instanceof Array)if("string"==typeof e[0]||"number"==typeof e[0]){var o=e;n=t.bg.protectedValue.map((function(){return[o[0],o[1]]}))}else{var i=e;n=t.bg.protectedValue.map((function(e,r){return i[r]?[i[r][0],i[r][1]]:t.bg.protectedValue[r]?t.bg.protectedValue[r]:["auto","auto"]}))}else for(var a in e)n[a]&&(n[a]=[e[a][0],e[a][1]]);return t.backgroundSizeNumeric.sync(n,[function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],0,n[e][0]):0},function(e){return r.box?NdModBg.readBgSize(r.box.size,t.bg.protectedValue[e],1,n[e][1]):0}]),t.backgroundPosition.sync(n,[0,0]),t.backgroundPositionNumeric.sync(n,[0,0]),n})),t.backgroundSizeNumeric=new S(1,[],(function(e){return __spreadArray([],e,!0)})),t.backgroundPosition=new S(2,[],(function(e){return e.map((function(e){return[e[0],e[1]]}))}),(function(e,r){var n=t.backgroundPosition.protectedValue;if("string"==typeof e)/^[\d.]+%$/.test(e)&&(n=t.bg.protectedValue.map((function(){return[e,e]}))),/^(left|center|right)$/.test(e)&&(n=t.bg.protectedValue.map((function(r,n){return[e,t.backgroundPosition.protectedValue[n]?t.backgroundPosition.protectedValue[n][1]:0]}))),/^(top|middle|bottom)$/.test(e)&&(n=t.bg.protectedValue.map((function(r,n){return[t.backgroundPosition.protectedValue[n]?t.backgroundPosition.protectedValue[n][0]:0,e]})));else if("number"==typeof e)n=t.bg.protectedValue.map((function(){return[e,e]}));else if(e instanceof Array){if(e[0]instanceof Array){var o=e;n=t.bg.protectedValue.map((function(e,r){return o[r]?[o[r][0],o[r][1]]:t.backgroundPosition.protectedValue[r]?t.backgroundPosition.protectedValue[r]:[0,0]}))}if("string"==typeof e[0]||"number"==typeof e[0]){var i=e;n=t.bg.protectedValue.map((function(){return[i[0],i[1]]}))}}else for(var a in e)n[a]&&(n[a]=[e[a][0],e[a][1]]);return t.backgroundPositionNumeric.sync(n,[function(e){return r.box?NdModBg.readBgPosition(r.box.size,t.backgroundSize.protectedValue[e],t.bg.protectedValue[e],0,n[e][0]):0},function(e){return r.box?NdModBg.readBgPosition(r.box.size,t.backgroundSize.protectedValue[e],t.bg.protectedValue[e],0,n[e][1]):0}]),n})),t.backgroundPositionNumeric=new S(2,[],(function(e){return __spreadArray([],e,!0)})),t}return __extends(NdModBg,e),NdModBg.normalizeBgPosition=function(e){return"string"==typeof e?"left"===e||"top"==e?"0%":"bottom"===e||"right"===e?"100%":"center"===e||"middle"===e?"50%":e:e},NdModBg.readBgPosition=function(e,t,r,n,o){var i=this.normalizeBgPosition(o),a=this.readBgSize(e,r,n,t[n]);return"number"==typeof i?i:(e[n]-a)*k.extractPercentFraction(i)},NdModBg.readBgSize=function(e,t,r,n){return"string"==typeof n?"auto"!==n?e[r]*NdModBg.extractPercentFraction(n):t?t.size[r]:0:n},NdModBg.destroyBackground=function(e){e.bg.protectedValue.length&&e.bg.protectedValue.forEach((function(e){return e.destroy()}))},NdModBg.updateSizeAndPosition=function(e,t,r,n){"string"==typeof e.backgroundSize.protectedValue[r][0]&&(e.backgroundSizeNumeric.protectedValue[r][0]=NdModBg.readBgSize(t,n,0,e.backgroundSize.protectedValue[r][0])),"string"==typeof e.backgroundSize.protectedValue[r][1]&&(e.backgroundSizeNumeric.protectedValue[r][1]=NdModBg.readBgSize(t,n,1,e.backgroundSize.protectedValue[r][1])),"string"==typeof e.backgroundPosition.protectedValue[r][0]&&(e.backgroundPositionNumeric.protectedValue[r][0]=NdModBg.readBgPosition(t,e.backgroundSize.protectedValue[r],e.bg.protectedValue[r],0,e.backgroundPosition.protectedValue[r][0])),"string"==typeof e.backgroundPosition.protectedValue[r][1]&&(e.backgroundPositionNumeric.protectedValue[r][1]=NdModBg.readBgPosition(t,e.backgroundSize.protectedValue[r],e.bg.protectedValue[r],1,e.backgroundPosition.protectedValue[r][1]))},NdModBg}(k),M=function(e){function NdStyledNode(t){var r=e.call(this)||this;return r.modelEmitter=new EventEmitter,r.order=[],r.data=t,r.once("destroyed",(function(){r.modelEmitter.removeAllListeners(),r.data.bg&&P.destroyBackground(r.data),r.Box=void 0,r.data=void 0})),r}return __extends(NdStyledNode,e),NdStyledNode.prototype.style=function(e,t){var r=this;return"object"!=typeof e?void 0!==typeof t?(this.data[e].set(t,this),this.modelEmitter.emit(e),this):this.data[e].publicValue:(Object.keys(e).sort((function(e,t){return r.order.indexOf(e)-r.order.indexOf(t)})).forEach((function(t){void 0!==e[t]&&(r.data[t].set(e[t],r),r.modelEmitter.emit(t))})),this)},NdStyledNode.prototype.watch=function(e,t){var r=this;return e instanceof Array?e.forEach((function(e){return r.modelEmitter.on(e,t)})):this.modelEmitter.on(e,t),this},NdStyledNode.prototype.unwatch=function(e,t){var r=this;return e instanceof Array?e.forEach((function(e){return r.modelEmitter.off(e,t)})):this.modelEmitter.off(e,t),this},__decorate([alive],NdStyledNode.prototype,"style",null),__decorate([alive],NdStyledNode.prototype,"watch",null),__decorate([alive],NdStyledNode.prototype,"unwatch",null),NdStyledNode}(b),E={default:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*(r/=i)*r*r+n},linear:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return n+o*(r/=i)},linearSoft:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3],a=(r/=i)*r,s=a*r;return n+o*(4*s*a+-10*a*a+8*s+-2*a+r)},linearSoftOut:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3],a=(r/=i)*r,s=a*r;return n+o*(-3*s*a+11*a*a+-14*s+6*a+r)},linearSoftIn:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3],a=(r/=i)*r,s=a*r;return n+o*(-1*s*a+2*s)},easeInQuad:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*(r/=i)*r+n},easeOutQuad:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return-o*(r/=i)*(r-2)+n},easeInOutQuad:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return(r/=i/2)<1?o/2*r*r+n:-o/2*(--r*(r-2)-1)+n},easeInCubic:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*(r/=i)*r*r+n},easeOutCubic:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*((r=r/i-1)*r*r+1)+n},easeInOutCubic:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return(r/=i/2)<1?o/2*r*r*r+n:o/2*((r-=2)*r*r+2)+n},easeInQuart:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*(r/=i)*r*r*r+n},easeOutQuart:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return-o*((r=r/i-1)*r*r*r-1)+n},easeInOutQuart:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return(r/=i/2)<1?o/2*r*r*r*r+n:-o/2*((r-=2)*r*r*r-2)+n},easeInQuint:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*(r/=i)*r*r*r*r+n},easeOutQuint:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*((r=r/i-1)*r*r*r*r+1)+n},easeInOutQuint:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return(r/=i/2)<1?o/2*r*r*r*r*r+n:o/2*((r-=2)*r*r*r*r+2)+n},easeInSine:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return-o*Math.cos(r/i*(Math.PI/2))+o+n},easeOutSine:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*Math.sin(r/i*(Math.PI/2))+n},easeInOutSine:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return-o/2*(Math.cos(Math.PI*r/i)-1)+n},easeInExpo:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return 0===r?n:o*Math.pow(2,10*(r/i-1))+n},easeOutExpo:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return r===i?n+o:o*(1-Math.pow(2,-10*r/i))+n},easeInOutExpo:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return 0===r?n:r===i?n+o:(r/=i/2)<1?o/2*Math.pow(2,10*(r-1))+n:o/2*(2-Math.pow(2,-10*--r))+n},easeInCirc:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return-o*(Math.sqrt(1-(r/=i)*r)-1)+n},easeOutCirc:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return o*Math.sqrt(1-(r=r/i-1)*r)+n},easeInOutCirc:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return(r/=i/2)<1?-o/2*(Math.sqrt(1-r*r)-1)+n:o/2*(Math.sqrt(1-(r-=2)*r)+1)+n},easeInBack:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3],a=(r/=i)*r,s=a*r;return n+o*(15.26*s*a+-43.56*a*a+39.8*s+-10.6*a+.1*r)},easeOutBack:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3],a=(r/=i)*r,s=a*r;return n+o*(11.24*s*a+-23.96*a*a+12.24*s+1.44*a+.04*r)},easeInOutBack:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3],a=(r/=i)*r,s=a*r;return n+o*(22.92*s*a+-57.78*a*a+45*s+-9.28*a+.14*r)},easeOutBounce:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e[0],n=e[1],o=e[2],i=e[3];return(r/=i)<1/2.75?o*(7.5625*r*r)+n:r<2/2.75?o*(7.5625*(r-=1.5/2.75)*r+.75)+n:r<2.5/2.75?o*(7.5625*(r-=2.25/2.75)*r+.9375)+n:o*(7.5625*(r-=2.625/2.75)*r+.984375)+n}},z=function(){function NdMorphine(e,t,r,n,o,i){this.duration=1,this.repeat=0,this.repeatCount=1,this.start_time=0,this.progress=0,this._paused=!1,this._done=!1,this.start=e,this.end=t,this.duration=r>0?r:0,this.callback=n,this.easing=o,this.repeat=i,this.start_time=(new Date).getTime()}return Object.defineProperty(NdMorphine.prototype,"done",{get:function(){return this._done},enumerable:!1,configurable:!0}),NdMorphine.prototype.stop=function(){this._done=!0},NdMorphine.prototype.pause=function(){this._paused=!0},Object.defineProperty(NdMorphine.prototype,"paused",{get:function(){return this._paused},enumerable:!1,configurable:!0}),NdMorphine.prototype.tick=function(e){this._done||(this._paused?this.start_time=(new Date).getTime()-this.duration*this.progress:(this.progress=(e-this.start_time)/this.duration,this.progress>1&&(this.progress=1),1==this.progress&&(this.repeat&&this.repeatCount>0?(this.repeatCount!==1/0&&this.repeatCount--,this.start_time=(new Date).getTime()):this._done=!0),this.callback(this.progress,this.easing((e-this.start_time)/1e3,this.start,this.end-this.start,this.duration/1e3),this.start_time)))},NdMorphine}(),T=function(e){function NdAnimation(t,r,n,o,i){void 0===n&&(n=1e3),void 0===o&&(o="default"),void 0===i&&(i=!1);var a=e.call(this)||this;return a.stack=[],a.target=null,a._queue=!1,a._active=!1,a._done=!1,a.stack=r,a.easing=o,a.duration=n,a._queue=i,a.node=t,a}return __extends(NdAnimation,e),Object.defineProperty(NdAnimation.prototype,"queue",{get:function(){return this._queue},enumerable:!1,configurable:!0}),Object.defineProperty(NdAnimation.prototype,"active",{get:function(){return this._active},enumerable:!1,configurable:!0}),Object.defineProperty(NdAnimation.prototype,"done",{get:function(){return this._done},enumerable:!1,configurable:!0}),NdAnimation.prototype.indexOf=function(e){return this.stack.findIndex((function(t){return t.name===e}))},Object.defineProperty(NdAnimation.prototype,"props",{get:function(){return this.stack.map((function(e){return e.name}))},enumerable:!1,configurable:!0}),NdAnimation.prototype.stop=function(e){if(e){var t=this.indexOf(e.toString());t>-1&&this.stack.splice(t,1)}else this.stack=[]},NdAnimation.prototype.start=function(){var e=this;this.active||(this._active=!0,this.stack=this.stack.filter((function(e){return e.ani.init(e.value)&&!1!==e.ani.start&&!1!==e.ani.end})),this.morphine=new z(0,1,this.duration,(function(r,n){0===e.stack.length?(e.cast("complete",new t(e.node,{ease:1,progress:1})),e.morphine.stop()):(e.stack.forEach((function(t){t.result=e.tick(n,r,t.ani.start,t.ani.end),e.node.style(t.name,t.result)})),e.cast("step",new t(e.node,{ease:n,progress:r})),1===r&&e.cast("complete",new t(e.node,{progress:1,ease:1})))}),E[this.easing],0))},NdAnimation.prototype.tick=function(e,t,r,n){for(var o=this;"function"==typeof r;)r=r();for(;"function"==typeof n;)n=n();var i=n;if(typeof r!=typeof n)throw new Error("start value and end value are of different types");if("number"==typeof r&&(i=t>=1?n:r+(n-r)*e),"string"==typeof r){var a=parseFloat(r);i=a+(parseFloat(n)-a)*e+"%"}if("object"==typeof r)if(Array.isArray(r)&&Array.isArray(n)){if(r.length!=n.length)throw new Error("Start and end values are of different lengths");i=r.map((function(r,i){return o.tick(e,t,r,n[i])}))}else i=Object.fromEntries(Object.keys(r).map((function(i){return[i,o.tick(e,t,r[i],n[i])]})));return i},NdAnimation}(n),V=function(e){function NdAnimatedNode(t){var r=e.call(this,t)||this;r.animations=[];var callback=function(e,t){return r.tickElementAnimations(t)};return r.on("mount",(function(e){e.data.canvas.queue(-2,callback),r.once("unmount",(function(){e.data.canvas.unQueue(callback),r.animations=void 0}))})),r}return __extends(NdAnimatedNode,e),NdAnimatedNode.prototype.checkQueue=function(){var e=this;this.animations=this.animations.filter((function(t){if(t.active)return!t.done;if(t.queue)return e.findCompetitors(t).length||t.start(),!0;var r=e.findCompetitors(t);return r.length&&r.forEach((function(e){t.props.forEach((function(t){return e.stop(t)}))})),t.start(),!0}))},NdAnimatedNode.prototype.findCompetitors=function(e){for(var t=[],r=0;r<this.animations.length;r++)if(this.animations[r]!==e&&this.animations[r].active&&!this.animations[r].done)for(var n=0;n<e.props.length;n++)this.animations[r].indexOf(e.props[n])>-1&&t.push(this.animations[r]);return t},NdAnimatedNode.prototype.tickElementAnimations=function(e){if(this.animations.length){var t=e.getTime();this.animations.forEach((function(e){e.morphine&&e.morphine.tick(t)}))}},Object.defineProperty(NdAnimatedNode.prototype,"animated",{get:function(){return!!this.animations.length},enumerable:!1,configurable:!0}),NdAnimatedNode.prototype.animate=function(e,t,r){var n=this,i=Object.keys(e).sort((function(e,t){return n.order.indexOf(e)-n.order.indexOf(t)})).map((function(t){return{value:e[t],name:t,ani:n.data[t]}}));if("number"==typeof t||void 0===t)(s=new T(this,i,t,r)).on("complete",(function(){return n.checkQueue})),this.animations.push(s);else if("object"==typeof t){var a=t,s=new T(this,i,null==a?void 0:a.duration,null==a?void 0:a.easing,null==a?void 0:a.queue);a.complete&&s.on("complete",a.complete),a.step&&s.on("step",a.step),s.on("complete",(function(){return n.checkQueue}))}else o.negative("Invalid animation config");return this.checkQueue(),this},NdAnimatedNode.prototype.stop=function(e){return this.animations.forEach((function(t){return t.stop(e)})),this},__decorate([alive],NdAnimatedNode.prototype,"checkQueue",null),__decorate([alive],NdAnimatedNode.prototype,"findCompetitors",null),__decorate([alive],NdAnimatedNode.prototype,"tickElementAnimations",null),__decorate([alive],NdAnimatedNode.prototype,"animated",null),__decorate([alive],NdAnimatedNode.prototype,"animate",null),__decorate([alive],NdAnimatedNode.prototype,"stop",null),NdAnimatedNode}(M),A=function(e){function NdStateEvent(t,r){var n=e.call(this,t,r)||this;return n._type="state",n}return __extends(NdStateEvent,e),NdStateEvent}(t),B=new(function(){function SharedConnectorService(){this.pairs=[]}return SharedConnectorService.prototype.register=function(e,t){this.pairs.find((function(t){return t[0]===e}))||this.pairs.push([e,t])},SharedConnectorService.prototype.unregister=function(e){this.pairs=this.pairs.filter((function(t){return t[0]!==e}))},SharedConnectorService.prototype.connector=function(e){var t=this.pairs.find((function(t){return t[0]===e}));if(t)return t[1]},SharedConnectorService}()),F=function(e){function Node(t,r){var n=e.call(this,r)||this;return n.app=null,n.cache=new d,n.data=r,n.matrixContainer=new c(n,r,n.cache),n.compiler=new f(n,r,(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.render.apply(n,e)})),n.treeConnector=new h(t,n.compiler.render),n.mouseConnector=new N(n.cast.bind(n),(function(e){return n.test(e)})),n.pipe=n.compiler.pipe.bind(n.compiler),n.unpipe=n.compiler.unpipe.bind(n.compiler),n.condition=n.compiler.filter.bind(n.compiler),n.order=Object.keys(r).sort((function(e,t){return r[e].ordering-r[t].ordering})),B.register(n,n.treeConnector),n.on(["unmount","mount"],(function(){n.matrixContainer.purge()})),n.once("destroy",(function(){return B.unregister(n)})),n.watch(["position","rotate","origin","skew","translate","scale"],(function(){n.matrixContainer.purge(),n.treeConnector.forEachChild((function(e){return e.matrix.purgeInversion(e)}))})),n.watch(["position","origin","translate"],(function(){return n.purgeBox()})),n}return __extends(Node,e),Object.defineProperty(Node.prototype,"mounted",{get:function(){return!!this.app},enumerable:!1,configurable:!0}),Node.prototype.detach=function(e){return void 0===e&&(e=!1),this.mounted?(this.treeConnector.forEachChild((function(e){return e.detach(!0)})),this.app.nodes.unregister(this),this.app.mouse.unregister(this),this.cast("unmount",new A(this,this.app)),this.app=null):o.warn("Node ".concat(this.id," is not attached. Ignoring detach")),e||(this.treeConnector.parent=null),this},Node.prototype.attach=function(e){if(e!==this.app)return this.mounted&&this.detach(),this.app=e,e.nodes.register(this,this.treeConnector),e.mouse.register(this,this.mouseConnector),this.cast("mount",new A(this,this.app)),this.treeConnector.forEachChild((function(t){return t.attach(e)})),o.positive("Node ".concat(this.id," has been attached to a new app")),this;o.positive("Node ".concat(this.id," has already been attached to requested app. Ignored"))},Node.prototype.renderTo=function(e,t){return e.save(),this.render(e,t,0),e.restore(),this},Node.prototype.destroy=function(){return this.treeConnector.forEachChild((function(e){return e.destroy()})),this.parent&&this.parent.remove(this),this.assembler&&(this.assembler=this.assembler.destroy()),this.detach(),this.treeConnector.reset(),this.mouseConnector.destroy(),e.prototype.destroy.call(this)},Object.defineProperty(Node.prototype,"z",{get:function(){return this.treeConnector.z},set:function(e){if(this.treeConnector.parent){var t=B.connector(this.treeConnector.parent);t?t.zChild(this,e):o.warn("Warning! Node ".concat(this.id," is a child of an unregistered node ").concat(this.treeConnector.parent.id))}this.treeConnector.z=e},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"id",{get:function(){return this.treeConnector.id},set:function(e){this.mounted&&this.app.nodes.rename(this.id,e),this.treeConnector.id=e},enumerable:!1,configurable:!0}),Node.prototype.appendTo=function(e){return e.append(this),this},Node.prototype.prependTo=function(e){return e.prepend(this),this},Object.defineProperty(Node.prototype,"parent",{get:function(){return this.treeConnector.parent},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"matrix",{get:function(){return this.matrixContainer.value},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"width",{get:function(){return this.Box?this.Box.value.container.size[0]:0},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"height",{get:function(){return this.Box?this.Box.value.container.size[1]:0},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"left",{get:function(){return this.Box?this.Box.value.container.position[0]:0},enumerable:!1,configurable:!0}),Object.defineProperty(Node.prototype,"top",{get:function(){if(this.Box)return this.Box.value.container.position[1]},enumerable:!1,configurable:!0}),Node.prototype.purgeBox=function(){return this.Box instanceof p&&this.Box.purge(),this},Node.transformContext=function(e,t){t.transform.apply(t,e.matrix.extract())},Node.drawLinearPathBg=function(e,t,r){e.path.protectedValue.length>1&&e.bg.protectedValue.length&&(t.save(),Node.clipBezierPath(e.path.protectedValue,t),Node.drawBg(e,t,r))},Node.drawBg=function(e,t,r){e.bg.protectedValue.length&&e.bg.protectedValue.forEach((function(n,o){if(n.loaded){var i=n.export();if(i){t.save();var a=e.backgroundSizeNumeric.protectedValue[o][0],s=e.backgroundSizeNumeric.protectedValue[o][1],u=e.backgroundPositionNumeric.protectedValue[o][0],c=e.backgroundPositionNumeric.protectedValue[o][1];t.translate(u,c),t.drawImage(i,0,0,a,s),t.restore()}}else n.once("load",(function(){r.update("bg")}))}))},Node.drawPathBg=function(e,t,r){e.interpolation?Node.drawBezierPathBg(e,t,r):Node.drawLinearPathBg(e,t,r)},Node.drawBezierPathBg=function(e,t,r){t.save(),Node.clipBezierPath(e.path.protectedValue,t,!0),Node.drawBg(e,t,r),t.restore()},Node.clipBezierPath=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=!0),e.length>1&&(Node.registerPath(e,t,r,n),t.clip())},Node.registerPath=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=!0),e.length>1&&(t.beginPath(),t.moveTo(e[0][0],e[0][1]),r?e.forEach((function(e){e[0]===e[4]&&e[1]===e[5]&&e[2]===e[6]&&e[3]===e[7]?t.lineTo(e[2],e[3]):t.bezierCurveTo(e[4],e[5],e[6],e[7],e[2],e[3])})):e.forEach((function(e){t.lineTo(e[2],e[3])})),n&&t.closePath())},Node.drawFill=function(e,t){t.save(),t.lineCap=e.cap.protectedValue,Node.registerPath(e.path.protectedValue,t,!!e.interpolation,!0),t.fillStyle=e.fill.protectedValue,t.fill(),t.restore()},Node.drawStroke=function(e,t){e.path.protectedValue.forEach((function(r,n){var o=r[0],i=r[1],a=r[2],s=r[3],u=r[4],c=r[5],d=r[6],l=r[7];e.strokeWidth.protectedValue[n]<.1?t.moveTo(a,s):(t.beginPath(),t.moveTo(o,i),t.strokeStyle=e.strokeColor.protectedValue[n],t.lineWidth=e.strokeWidth.protectedValue[n],t.setLineDash(e.strokeStyle.protectedValue[n]),e.interpolation.protectedValue?t.bezierCurveTo(u,c,d,l,a,s):t.lineTo(a,s),t.stroke())}))},Node.applyBoxAnchor=function(e,t,r,n){"center"===n.anchor.protectedValue[0]&&(e[0]-=t/2),"right"===n.anchor.protectedValue[0]&&(e[0]-=t),"middle"===n.anchor.protectedValue[1]&&(e[1]-=r/2),"bottom"==n.anchor.protectedValue[1]&&(e[1]-=r)},__decorate([alive],Node.prototype,"mounted",null),__decorate([alive],Node.prototype,"detach",null),__decorate([alive],Node.prototype,"attach",null),__decorate([alive],Node.prototype,"renderTo",null),__decorate([alive],Node.prototype,"destroy",null),__decorate([alive],Node.prototype,"parent",null),__decorate([alive],Node.prototype,"matrix",null),__decorate([alive],Node.prototype,"width",null),__decorate([alive],Node.prototype,"height",null),__decorate([alive],Node.prototype,"left",null),__decorate([alive],Node.prototype,"top",null),__decorate([alive],Node.prototype,"purgeBox",null),Node}(V),O=function(e){function NdModBase(){var t=null!==e&&e.apply(this,arguments)||this;return t.position=new C(2,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,n){r(e),n("number"==typeof t?[t,t]:[t[0],t[1]])}),(function(e){return[e[0],e[1]]})),t.scale=new C(0,[1,1],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,n){r(e),"number"==typeof t?(t<0&&(t=0),n([t,t])):(t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),n([t[0],t[1]]))}),(function(e){return[e[0],e[1]]})),t.rotate=new C(0,0,(function(e){return k.radToDeg(e)}),(function(e){return k.degToRad(e)}),(function(e,t,r,n){r(e),n(t)}),(function(e){return e})),t.translate=new C(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,n){r(e),n("number"==typeof t?[t,t]:[t[0],t[1]])}),(function(e){return[e[0],e[1]]})),t.skew=new C(0,[0,0],(function(e){return[k.radToDeg(e[0]),k.radToDeg(e[1])]}),(function(e){return e instanceof Array?[k.degToRad(e[0]),k.degToRad(e[1])]:[k.degToRad(e),k.degToRad(e)]}),(function(e,t,r,n){"number"==typeof t&&(t=[t,t]),r(e),n([t[0],t[1]])}),(function(e){return e})),t.opacity=new C(0,1,(function(e){return e}),(function(e){return e>1?1:e<0?0:e}),(function(e,t,r,n){t<0&&(t=0),t>1&&(t=1),r(e),n(t)}),(function(e){return e<0&&(e=0),e>1&&(e=1),e})),t.origin=new C(0,[.5,.5],(function(e){return __spreadArray([],e,!0)}),(function(e){return e instanceof Array?__spreadArray([],e,!0):[e,e]}),(function(e,t,r,n){r(e),n("number"==typeof t?[t,t]:[t[0],t[1]])}),(function(e){return[e[0],e[1]]})),t.blending=new S(0,"source-over",(function(e){return e}),(function(e){return e})),t}return __extends(NdModBase,e),NdModBase}(k),L=function(e){function Group(t){var r=e.call(this,t,new O)||this;r.test=function(){return!1};var n=B.connector(r);return r.Box=new p(r,r.cache,(function(){if(n){var e=1/0,t=1/0,o=-1/0,i=-1/0;return n.forEachChild((function(r){var n=r.box;n&&(e=Math.min(e,n.position[0]),t=Math.min(t,n.position[1]),i=Math.max(i,n.position[0]+n.size[0]),o=Math.max(o,n.position[1]+n.size[1]))})),isFinite(e)||(e=0),isFinite(i)||(i=0),isFinite(t)||(t=0),isFinite(o)||(o=0),[e+r.data.position.get()[0],t+r.data.position.get()[1],i-e,o-t,0,0,0,0]}return[0,0,0,0,0,0,0,0]})),r.render=function(e,t,o){return n&&(F.transformContext(r,e),n.forEachChild((function(n){r.app.nodes.compile(n,e,t,o)}))),e},r.append=function(e){return r.appendChild(e,n,!1),r},r.prepend=function(e){return r.appendChild(e,n,!0),r},r.remove=function(e){if(!n)throw new Error("Removing child ".concat(e.id," from unregistered Group ").concat(r.id));n.removeChild(e,e.z);var t=B.connector(e);return t&&(t.parent=null,o.positive("Child ".concat(e.id," removed from ").concat(r.id))),r},r.forEachChild=function(e){if(!n)throw new Error("Iterating through children of unregistered Group ".concat(r.id));return n.forEachChild(e),r},r.once("destroyed",(function(){return n=void 0})),r}return __extends(Group,e),Group.prototype.appendChild=function(e,t,r){var n=this;if(void 0===r&&(r=!1),e instanceof Array)e.forEach((function(e){n.appendChild(e,t,r)}));else{if(!t)throw new Error("Appending to unregistered Group ".concat(this.id));if(I.treeViolation(this,e))throw new Error("Tree integrity violation. Appending ".concat(e.id," into ").concat(this.id," caused tree shortcut."));var i=B.connector(e);if(!i)throw new Error("Appending unregistered Node ".concat(e.id," into ").concat(this.id,". Possibly ").concat(e.id," has been destroyed previously"));i.parent!==this?(i.parent&&i.parent.remove(e),e.attach(this.app),i.parent=this,t.zChild(e,e.z,r),this.Box.purge(),this.matrixContainer.purge(),o.positive("Child ".concat(e.id," appended to ").concat(this.id))):o.positive("Node ".concat(e.id," already child of Group ").concat(this.id,". Ignored"))}},Group.prototype.export=function(){var e=document.createElement("canvas"),t=e.getContext("2d");return e.width=this.box.size[0],e.height=this.box.size[1],this.render(t,new Date,0),e},__decorate([alive],Group.prototype,"export",null),Group}(F),R=function(){function Nodes(e){var t=this;this._root={},this.clear=!1,this.ids=new Set,this.nodes={},this.drawNodeTree=function(e,r,n){t._root.node&&e&&(t.clear&&e.clearRect(0,0,e.canvas.offsetWidth,e.canvas.offsetHeight),t.compile(t._root.node,e,r,n))},e.queue(0,this.drawNodeTree)}return Nodes.prototype.register=function(e,t){if(!e.destroyed)if(this._root.node){if(this.ids.has(t.id))throw new Error("Node ".concat(t.id," already exists. Ignored."));this.ids.add(t.id),this.nodes[t.id]={node:e,connector:t}}else{if(!(e instanceof L))throw new Error("Root node must be a Group instance");var r={node:e,connector:t};this._root=r,this.ids.add(r.connector.id),this.nodes[t.id]=r,o.positive("Node ".concat(t.id," registered"))}},Nodes.prototype.unregister=function(e){this.ids.has(e.id)&&(delete this.nodes[e.id],this.ids.delete(e.id),this._root&&this._root.node===e&&(o.warn("Unregistering root group"),this._root={}),o.positive("Node ".concat(e.id," unregistered. ID ").concat(e.id," is free to use.")))},Nodes.prototype.compile=function(e,t,r,n){this.nodes[e.id]&&this.nodes[e.id].node===e?this.nodes[e.id].node.destroyed?o.warn("Attempt to compile a destroyed node. Ignored"):(t.save(),this.nodes[e.id].connector.render(t,r,n),t.restore()):o.error("Attempt to render unmounted node ".concat(e.id))},Nodes.prototype.rename=function(e,t){this.ids.has(e)&&(this.nodes[e].node.destroyed?o.warn("Unable to rename destroyed node. Ignored"):(this.ids.has(t)||(this.nodes[t]=this.nodes[e],this.ids.add(t),this.ids.delete(e),delete this.nodes[e]),o.warn("Can not rename node ".concat(e,". Another node with id ").concat(t," already exists")))),o.warn("Attempt to rename non existing node ".concat(e))},Nodes.prototype.get=function(e){return this.nodes[e].node},Object.defineProperty(Nodes.prototype,"root",{get:function(){return this._root.node},enumerable:!1,configurable:!0}),Nodes.treeViolation=function(e,t){return e===t||!!e.parent&&this.treeViolation(e.parent,e)},Nodes}(),I=R,j=function(){function Mouse(e,t,n){var o=this;this.Nodes={},this.currentHover=!1,this.currentFocus=!1,this.mouseDown=!1,this.dragging=!1,this.eventStack=[],this.postponed=[],this.maxEventsPerQueue=5,this.maxEventsResolveTimePerFrame=t.frameTime,e.queue(this.resolveStack.bind(this)),e.on("mouseDown",(function(e){o.mouseDown=!0,o.currentHover&&o.resolveOrPostpone(o.currentHover,"mouseDown",new r(o.currentHover,__assign({},e.data))),o.currentFocus&&o.currentFocus!==o.currentHover&&o.currentFocus!==o.currentHover&&(o.resolveOrPostpone(o.currentFocus,"blur",new r(o.currentFocus,__assign({},e.data))),o.currentHover&&o.resolveOrPostpone(o.currentHover,"focus",new r(o.currentHover,__assign({},e.data))),o.currentFocus=o.currentHover)})),e.on("mouseUp",(function(e){o.mouseDown=!1,o.dragging&&(o.currentFocus&&o.resolveOrPostpone(o.currentFocus,"dragEnd",new r(o.currentFocus,__assign({},e.data))),o.dragging=!1),o.currentHover&&o.resolveOrPostpone(o.currentHover,"mouseUp",new r(o.currentHover,__assign({},e.data)))})),e.on("mouseLeave",(function(e){o.dragging&&(o.currentFocus&&o.resolveOrPostpone(o.currentFocus,"dragEnd",new r(o.currentFocus,__assign({},e.data))),o.dragging=!1),o.currentHover&&o.resolveOrPostpone(o.currentHover,"mouseLeave",new r(o.currentHover,__assign({},e.data))),o.currentFocus=!1,o.currentHover=!1,o.mouseDown=!1})),e.on("mouseMove",(function(e){if(n.root)if(o.dragging)o.mouseDown&&o.currentFocus&&(o.dragging?o.resolveOrPostpone(o.currentFocus,"dragMove",new r(o.currentFocus,__assign({},e.data))):(o.resolveOrPostpone(o.currentFocus,"dragStart",new r(o.currentFocus,__assign({},e.data))),o.dragging=!0));else{var t=o.checkNode(n.root,e.data.cursor);t!==o.currentHover?(o.currentHover&&o.resolveOrPostpone(o.currentHover,"mouseLeave",new r(o.currentHover,__assign({},e.data))),t&&o.resolveOrPostpone(t,"mouseEnter",new r(t,__assign({},e.data))),o.currentHover=t):t&&o.resolveOrPostpone(t,"mouseMove",new r(t,__assign({},e.data)))}}))}return Mouse.prototype.checkNode=function(e,t){var r=this;if(this.Nodes[e.id]){if(this.Nodes[e.id].node.destroyed)return!1;if(e instanceof L){var n=!1;return e.forEachChild((function(e){e.destroyed||(n=r.checkNode(e,t))})),n}return this.Nodes[e.id].handler.test(t)}throw new Error("Root swap")},Mouse.prototype.resolveStack=function(){if(this.eventStack.length){for(var e=0,t=(new Date).getTime(),r=0;this.eventStack[0]&&e<this.maxEventsPerQueue&&r<this.maxEventsResolveTimePerFrame;)this.eventStack.shift()(),e++,r=(new Date).getTime()-t;!this.eventStack.length&&this.postponed[0]&&this.eventStack.push(this.postponed.shift())}},Mouse.prototype.getStackCallback=function(e,t,r){var n=this;return function(){if(e&&!e.destroyed){var o=n.Nodes[e.id].handler.cast(t,r);o&&o.propagate&&n.eventStack.push(n.getStackCallback(n.Nodes[e.id].node.parent,t,r))}}},Mouse.prototype.resolveOrPostpone=function(e,t,r){this.eventStack.length?this.postponed.push(this.getStackCallback(e,t,r)):this.eventStack.push(this.getStackCallback(e,t,r))},Mouse.prototype.register=function(e,t){var r=this;if(this.Nodes[e.id])throw new Error("Another Nodas with id ".concat(e.id," has already been registered as mouse sensitive"));return this.Nodes[e.id]={node:e,handler:t},e.once("destroy",(function(){return r.unregister(e)})),this.Nodes[e.id].handler},Mouse.prototype.unregister=function(e){this.Nodes[e.id]&&(delete this.Nodes[e.id],o.positive("Node ".concat(e.id," has been unregistered as mouse sensitive")))},Mouse}(),D=function(e){function NdCanvas(){var t=e.call(this)||this;t.size=[0,0],t._element=document.createElement("canvas");var r=t._element.getContext("2d");return t._context=r,t.once("destroyed",(function(){t._element=void 0,t._context=void 0})),t}return __extends(NdCanvas,e),Object.defineProperty(NdCanvas.prototype,"element",{get:function(){return this._element},enumerable:!1,configurable:!0}),Object.defineProperty(NdCanvas.prototype,"context",{get:function(){return this._context},enumerable:!1,configurable:!0}),Object.defineProperty(NdCanvas.prototype,"width",{get:function(){return this.size[0]},set:function(e){this.size[0]=e,this._element.setAttribute("width",e.toString())},enumerable:!1,configurable:!0}),Object.defineProperty(NdCanvas.prototype,"height",{get:function(){return this.size[1]},set:function(e){this._element.setAttribute("height",e.toString())},enumerable:!1,configurable:!0}),__decorate([alive],NdCanvas.prototype,"element",null),__decorate([alive],NdCanvas.prototype,"context",null),__decorate([alive],NdCanvas.prototype,"width",null),__decorate([alive],NdCanvas.prototype,"height",null),NdCanvas}(m),W=function(e){function NdLayer(t){var r=e.call(this)||this;return r.canvas=new D,r.width=0,r.height=0,r.f=void 0,r.ready=!1,r.ordering=0,r.f=t.bind(r),r.once("destroyed",(function(){r.canvas=r.canvas.destroy(),r.f=void 0})),r}return __extends(NdLayer,e),NdLayer.prototype.draw=function(e){this.ready||this.canvas.context&&(this.canvas.context.save(),this.canvas.context.clearRect(0,0,this.width,this.height),this.f&&this.f(this.canvas.context),this.canvas.context.restore(),this.ready=!0),e.drawImage(this.canvas.element,0,0)},Object.defineProperty(NdLayer.prototype,"resolver",{get:function(){return this.f},enumerable:!1,configurable:!0}),Object.defineProperty(NdLayer.prototype,"size",{get:function(){return[this.width,this.height]},set:function(e){var t=e[0],r=e[1];t===this.width&&r===this.height||(this.canvas.width=t,this.canvas.height=r,this.ready=!1,this.width=t,this.height=r)},enumerable:!1,configurable:!0}),Object.defineProperty(NdLayer.prototype,"order",{get:function(){return this.ordering},set:function(e){this.ordering=e},enumerable:!1,configurable:!0}),NdLayer.prototype.update=function(){this.ready=!1},__decorate([alive],NdLayer.prototype,"draw",null),__decorate([alive],NdLayer.prototype,"resolver",null),__decorate([alive],NdLayer.prototype,"size",null),__decorate([alive],NdLayer.prototype,"order",null),__decorate([alive],NdLayer.prototype,"update",null),NdLayer}(m),H=function(e){function NdNodeAssembler(t){var r=e.call(this)||this;return r.output=new D,r.pipe=[],r.layers={},r.w=0,r.h=0,r.resized=!1,r._ready=!1,r.update=function(){},r.layers=Object.fromEntries(t.map((function(e,t){if(r.pipe){var n=new W(e.resolver);return r.pipe.push({order:t,layer:n}),[e.name,n]}throw new Error("How did you get here?")}))),r.pipe.sort((function(e,t){return e.order-t.order})),r.update=function(e){r.destroyed?o.warn("Attempt to update a destroyed Node Assembler. Ignored"):e?r.layers[e]&&(r._ready=!1,r.layers[e].update()):Object.values(r.layers).forEach((function(e){e.update()}))},r.once("destroyed",(function(){r.output=void 0,r.pipe=void 0,Object.values(r.layers).forEach((function(e){return e.destroy()})),r.layers=void 0})),r}return __extends(NdNodeAssembler,e),Object.defineProperty(NdNodeAssembler.prototype,"ready",{get:function(){return this._ready&&!this.destroyed},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeAssembler.prototype,"size",{get:function(){return this.destroyed?(o.warn("Attempt to access size of a destroyed Node Assembler"),[0,0]):[this.w,this.h]},set:function(e){this.pipe&&this.output&&(this.w=e[0],this.h=e[1],this.output.width=e[0],this.output.height=e[1],this.pipe.forEach((function(t){t.layer.size=e})))},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeAssembler.prototype,"width",{get:function(){return this.destroyed?(o.warn("Attempt to access width of a destroyed Node Assembler"),0):this.w},enumerable:!1,configurable:!0}),Object.defineProperty(NdNodeAssembler.prototype,"height",{get:function(){return this.destroyed?(o.warn("Attempt to access height of a destroyed Node Assembler"),0):this.h},enumerable:!1,configurable:!0}),NdNodeAssembler.prototype.export=function(e){var r=this;if(!this.resized){this.resized=!0;var n=e.boundingRect;n&&(this.size[0]===n.size[0]&&this.size[1]===n.size[1]||(this.size=[n.size[0],n.size[1]],this.cast("resize",new t(this,null))))}return this._ready||(this.output.context.clearRect(0,0,this.w,this.h),this.pipe.forEach((function(e){r.output&&e.layer.draw(r.output.context)})),this._ready=!0,this.cast("update",new t(this,null))),this.output.element},NdNodeAssembler.prototype.resize=function(){this.resized=!1,this._ready=!1},__decorate([alive],NdNodeAssembler.prototype,"ready",null),__decorate([alive],NdNodeAssembler.prototype,"size",null),__decorate([alive],NdNodeAssembler.prototype,"width",null),__decorate([alive],NdNodeAssembler.prototype,"height",null),__decorate([alive],NdNodeAssembler.prototype,"export",null),__decorate([alive],NdNodeAssembler.prototype,"resize",null),NdNodeAssembler}(m),q=function(e){function NdModFreeStroke(t){void 0===t&&(t=!1);var r=e.call(this)||this;return r.interpolation=new S(0,0,(function(e){return e/.4*100}),(function(e){return e>100&&(e=100),e<0&&(e=0),e=e/100*.4})),r.cap=new S(2,"butt",(function(e){return e}),(function(e){return e})),r.strokeColor=new S(2,[],(function(e){return e.map((function(e){return NdModFreeStroke.colorToArray(e)}))}),(function(e){var t=[];return"string"==typeof e&&(t=r.path.protectedValue.map((function(){return e}))),e instanceof Array&&("string"==typeof e[0]&&(t=r.path.protectedValue.map((function(t,n){return e[n]?e[n]:r.strokeColor.protectedValue[n]?r.strokeColor.protectedValue[n]:r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]?r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]:"rgba(0,0,0,1)"}))),e[0]instanceof Array&&(t=r.path.protectedValue.map((function(t,n){return e[n]?NdModFreeStroke.arrayToColor(e[n]):r.strokeColor.protectedValue[n]?r.strokeColor.protectedValue[n]:r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]?r.strokeColor.protectedValue[r.strokeColor.protectedValue.length-1]:"rgba(0,0,0,1)"}))),"number"==typeof e[0]&&(t=r.path.protectedValue.map((function(){return NdModFreeStroke.arrayToColor(e)})))),t})),r.strokeWidth=new S(2,[],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?r.path.protectedValue.map((function(){return e})):r.path.protectedValue.map((function(t,n){return"number"==typeof e[n]?e[n]:"number"==typeof r.strokeWidth.protectedValue[n]?r.strokeWidth.protectedValue[n]:"number"==typeof r.strokeWidth.protectedValue[r.strokeWidth.protectedValue.length-1]?r.strokeWidth.protectedValue[r.strokeWidth.protectedValue.length-1]:1}))})),r.strokeStyle=new S(2,[],(function(e){return e.map((function(e){return __spreadArray([],e,!0)}))}),(function(e){return e[0],r.path.protectedValue.map((function(){return __spreadArray([],e,!0)}))})),r.path=new S(1,[],(function(e){return NdModFreeStroke.convertComplexPath(e)}),(function(e){var n=NdModFreeStroke.convertSimplePath(e,t);return r.path.protectedValue.length!==n.length&&(r.strokeStyle.sync(n,[0]),r.strokeWidth.sync(n,1),r.strokeColor.sync(n,"rgba(0,0,0,1")),n})),r}return __extends(NdModFreeStroke,e),NdModFreeStroke}(k),U=function(e){function NdModAnchor(){var t=null!==e&&e.apply(this,arguments)||this;return t.anchor=new S(0,["left","top"],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t}return __extends(NdModAnchor,e),NdModAnchor}(k),G=function(e){function NdNodeEmpiricalMouseChecker(){var t=e.call(this)||this;return t.context=document.createElement("canvas").getContext("2d"),t.once("destroyed",(function(){return t.context=void 0})),t}return __extends(NdNodeEmpiricalMouseChecker,e),NdNodeEmpiricalMouseChecker.prototype.resize=function(e){e[0]!==this.context.canvas.width&&e[0]>0&&(this.context.canvas.width=e[0]),e[1]!==this.context.canvas.height&&e[1]>0&&(this.context.canvas.height=e[1])},NdNodeEmpiricalMouseChecker.prototype.redraw=function(e){this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.save(),F.registerPath(e.path.protectedValue,this.context,!!e.interpolation,!!e.fill),e.fill?(this.context.fillStyle="rgba(0,0,0,1)",this.context.fill()):(this.context.strokeStyle="rgba(0,0,0,1)",this.context.stroke()),this.context.restore()},NdNodeEmpiricalMouseChecker.prototype.check=function(e){if(e[0]>0&&e[0]<this.context.canvas.width&&e[1]>0&&e[1]<this.context.canvas.height){var t=this.context.getImageData(e[0],e[1],1,1);if(t)return!!t.data[3]}return!1},__decorate([alive],NdNodeEmpiricalMouseChecker.prototype,"resize",null),__decorate([alive],NdNodeEmpiricalMouseChecker.prototype,"redraw",null),__decorate([alive],NdNodeEmpiricalMouseChecker.prototype,"check",null),NdNodeEmpiricalMouseChecker}(m),Q=function(e){function Line(t){var r=e.call(this,t,__assign(__assign(__assign({},new q),new U),new O))||this;return r.xShift=0,r.yShift=0,r.strokeFix=0,r.interpolationFix=0,r.interpolated=!1,r.mouseTester=new G,r.Box=new p(r,r.cache,(function(){var e=__spreadArray([],r.data.position.protectedValue,!0),t=Math.max(r.strokeFix,r.interpolationFix),n=1/0,o=1/0,i=-1/0,a=-1/0;r.data.path.protectedValue.forEach((function(e){e[0]<n&&(n=e[0]),e[2]<n&&(n=e[2]),e[1]<o&&(o=e[1]),e[3]<o&&(o=e[3]),e[0]>i&&(i=e[0]),e[2]>i&&(i=e[2]),e[1]>a&&(a=e[1]),e[3]>a&&(a=e[3])})),n===1/0&&(n=0),o===1/0&&(o=0),i===-1/0&&(i=0),a===-1/0&&(i=0),r.xShift=n,r.yShift=o;var s=Math.abs(i-n),u=Math.abs(a-o);return F.applyBoxAnchor(e,s,u,r.data),[e[0]+r.xShift,e[1]+r.yShift,s,u,t,t,t,t]})),r.assembler=new H([{name:"stroke",resolver:function(e){e.translate(r.Box.value.sprite.margin[3]-r.xShift,r.Box.value.sprite.margin[0]-r.yShift),!r.interpolated&&r.data.interpolation.protectedValue>0&&k.interpolate(r.data.path.protectedValue,r.data.interpolation.protectedValue,!1),Line.drawStroke(r.data,e)}}]),r.once("destroyed",(function(){r.mouseTester=r.mouseTester.destroy()})),r.watch("path",(function(){r.purgeBox(),r.matrixContainer.purge(),r.assembler.update("stroke"),r.assembler.resize(),r.mouseTester.resize(r.Box.value.sprite.size),r.mouseTester.redraw(r.data)})),r.watch("strokeWidth",(function(){r.strokeFix=r.data.strokeWidth.protectedValue.reduce((function(e,t){return t>e?t:e}),0),r.assembler.update("stroke"),r.assembler.resize(),r.mouseTester.resize(r.Box.value.sprite.size),r.mouseTester.redraw(r.data)})),r.watch("interpolation",(function(){r.interpolationFix=Math.round(20*r.data.interpolation.protectedValue),r.purgeBox(),r.matrixContainer.purge(),r.assembler.resize(),r.assembler.update("stroke"),r.mouseTester.resize(r.Box.value.sprite.size),r.mouseTester.redraw(r.data)})),r.watch(["strokeStyle","strokeColor"],(function(){r.assembler&&r.assembler.update("stroke")})),r}return __extends(Line,e),Line.prototype.export=function(){return this.assembler.export(this)},Line.prototype.test=function(e){return!!this.mouseTester.check(this.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),this))&&this},Line.prototype.render=function(e){Line.transformContext(this,e);var t=this.assembler.export(this);return t&&e.drawImage(t,0,0),e},__decorate([alive],Line.prototype,"export",null),__decorate([alive],Line.prototype,"test",null),__decorate([alive],Line.prototype,"render",null),Line}(F),Y=function(e){function NdModCirc(){var t=null!==e&&e.apply(this,arguments)||this;return t.radius=new C(0,0,(function(e){return e}),(function(e){return e<0&&(e=0),e}),(function(e,t,r,n){t<0&&(t=0),r(e),n(t)}),(function(e){return e<0&&(e=0),e})),t.strokeWidth=new C(0,1,(function(e){return e}),(function(e){return e<0?0:e}),(function(e,t,r,n){t<0&&(t=0),r(e),n(t)}),(function(e){return e<0&&(e=0),e})),t.strokeColor=new C(0,"rgba(0,0,0,1)",(function(e){return e}),(function(e){return e instanceof Array?NdModCirc.arrayToColor(e):e}),(function(e,t,r,n){r(NdModCirc.colorToArray(e)),n("string"==typeof t?NdModCirc.colorToArray(t):t)}),(function(e){return NdModCirc.normalizeColor(e)})),t.strokeStyle=new S(0,[0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e.map((function(e){return e<0?0:e}))})),t}return __extends(NdModCirc,e),NdModCirc}(k),X=function(e){function Circle(t){var r=e.call(this,t,__assign(__assign(__assign(__assign({},new Y),new P),new U),new O))||this;return r.Box=new p(r,r.cache,(function(){var e=__spreadArray([],r.data.position.protectedValue,!0),t=2*r.data.radius.protectedValue;return F.applyBoxAnchor(e,t,t,r.data),[e[0],e[1],2*r.data.radius.protectedValue,2*r.data.radius.protectedValue,r.strokeFix,r.strokeFix,r.strokeFix,r.strokeFix]})),r.strokeFix=1,r.test=function(e){var t=r.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),r),n=r.Box.value.sprite,o=r.data.radius.protectedValue;return t[0]>n.size[0]&&t[0]<0&&t[1]>n.size[1]&&t[1]<0&&Math.pow(t[0]+r.strokeFix-o,2)+Math.pow(t[1]+r.strokeFix-o,2)<=Math.pow(o,2)&&r},r.assembler=new H([{name:"fill",resolver:function(e){e.beginPath(),e.fillStyle=r.data.fill.protectedValue,e.arc(r.Box.value.sprite.size[0]/2,r.Box.value.sprite.size[1]/2,r.data.radius.protectedValue,0,2*Math.PI),e.fill()}},{name:"bg",resolver:function(e){e.beginPath(),e.arc(r.Box.value.sprite.size[0]/2,r.Box.value.sprite.size[1]/2,r.data.radius.protectedValue,0,2*Math.PI),e.clip(),F.drawBg(r.data,e,r.assembler)}},{name:"stroke",resolver:function(e){e.beginPath(),e.strokeStyle=r.data.strokeColor.protectedValue,e.lineWidth=r.data.strokeWidth.protectedValue,e.setLineDash(r.data.strokeStyle.protectedValue),e.arc(r.Box.value.sprite.size[0]/2,r.Box.value.sprite.size[1]/2,r.data.radius.protectedValue,0,2*Math.PI),e.stroke()}}]),r.watch("radius",(function(){r.assembler.update(),r.assembler.resize(),r.Box.purge(),r.matrixContainer.purge()})),r.watch("fill",(function(){return r.assembler.update("fill")})),r.watch("strokeWidth",(function(){r.strokeFix=r.data.strokeWidth.protectedValue,r.Box.purge(),r.assembler.update("stroke"),r.assembler.resize(),r.matrixContainer.purge()})),r.watch(["strokeStyle","strokeColor"],(function(){return r.assembler.update("stroke")})),r.watch(["bg","backgroundSize","backgroundPosition"],(function(){return r.assembler.update("bg")})),r.once("destroyed",(function(){P.destroyBackground(r.data)})),r}return __extends(Circle,e),Circle.prototype.render=function(e){var t=this.assembler.export(this);return t&&(F.transformContext(this,e),e.drawImage(t,0,0)),e},Circle.prototype.export=function(){return this.assembler.export(this)},__decorate([alive],Circle.prototype,"render",null),__decorate([alive],Circle.prototype,"export",null),Circle}(F),$=function(e){function NdSprite(t){var r=this,n=t.match(/(^.+)\[(\d+)]/);return(r=e.call(this,n?n[1]:"invalid-image-src[".concat(t,"]"),(function(){return r.defineImage(t)}))||this).frameCount=0,r.refreshRate=12,r.frameTime=0,r.canvas=[],r.chunkSize=[0,0],r.chunkXYCount=0,r.timeStart=(new Date).getTime(),r.duration=0,r.frozen=!1,r.once("destroyed",(function(){r.canvas=[],r.image=void 0})),r}return __extends(NdSprite,e),NdSprite.prototype.defineImage=function(e){var r=this,n=e.match(/(^.+)\[(\d+)]/);return n&&(this.image=x.image(n[1],(function(){r.setFrameData(),r.status=1,n[2]?r.frameCount=parseInt(n[2]):o.error("No frame group match for url ".concat(e,". How did you even get here?")),r.cast("load",new t(r,null))}),(function(){o.negative("Error loading sprite ".concat(r.url,".")),r.status=0,r.cast("error",new t(r,null))}),(function(){r.defineImage(e)}))),this},NdSprite.prototype.setFrameData=function(){if(this.image){this.chunkXYCount=Math.ceil(Math.sqrt(this.frameCount)),this.chunkSize[0]=this.image.width/this.chunkXYCount,this.chunkSize[1]=this.image.height/this.chunkXYCount,this.frameTime=1e3/this.refreshRate,this.duration=this.frameTime*this.frameCount,this.chunkSize[0]=this.image.width/this.chunkXYCount,this.chunkSize[1]=this.image.height/this.chunkXYCount,this.canvas=[];for(var e=0;e<this.chunkXYCount;e++){this.canvas[e]||this.canvas.push([]);for(var t=0;t<this.chunkXYCount;t++){this.canvas[e][t]||(this.canvas[e].push(document.createElement("canvas")),this.canvas[e][t].width=1,this.canvas[e][t].height=1),this.canvas[e][t].setAttribute("width",this.chunkSize[0].toString()),this.canvas[e][t].setAttribute("height",this.chunkSize[0].toString());var r=this.canvas[e][t].getContext("2d");r&&(r.translate(-this.chunkSize[0]*t,-this.chunkSize[1]*e),r.drawImage(this.image,0,0))}}}else o.error("Unable to set sprite frame data. No image.")},Object.defineProperty(NdSprite.prototype,"paused",{get:function(){return this.frozen},enumerable:!1,configurable:!0}),NdSprite.prototype.pause=function(){this.frozen=!0},NdSprite.prototype.play=function(){this.frozen=!1},Object.defineProperty(NdSprite.prototype,"frames",{get:function(){return this.frameCount},set:function(e){this.frameCount=e,this.setFrameData()},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"width",{get:function(){return this.chunkSize[0]},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"height",{get:function(){return this.chunkSize[1]},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"size",{get:function(){return __spreadArray([],this.chunkSize,!0)},enumerable:!1,configurable:!0}),Object.defineProperty(NdSprite.prototype,"fps",{get:function(){return this.refreshRate},set:function(e){this.timeStart=(new Date).getTime(),this.refreshRate=e,this.setFrameData()},enumerable:!1,configurable:!0}),NdSprite.prototype.export=function(e){if(this.frameCount&&this.frameTime&&(this.chunkSize[0]>0||this.chunkSize[1]>0)){var t=e.getTime(),r=t-this.timeStart;this.frozen&&(this.timeStart+=r);var n=Math.floor(r/this.frameTime);n>this.frameCount-1&&(n=0,this.timeStart=t);var o=Math.floor(n/this.chunkXYCount),i=n-o*this.chunkXYCount;if(this.canvas[o]&&this.canvas[o][i])return this.canvas[o][i]}},NdSprite.isNdUrlSpriteStr=function(e){return NdSprite.NdUrlSpriteStrRegex.test(e)},NdSprite.NdUrlSpriteStrRegex=/(^.+)\[([0-9]+)]$/,__decorate([alive],NdSprite.prototype,"defineImage",null),__decorate([alive],NdSprite.prototype,"setFrameData",null),__decorate([alive],NdSprite.prototype,"pause",null),__decorate([alive],NdSprite.prototype,"play",null),__decorate([alive],NdSprite.prototype,"frames",null),__decorate([alive],NdSprite.prototype,"width",null),__decorate([alive],NdSprite.prototype,"height",null),__decorate([alive],NdSprite.prototype,"size",null),__decorate([alive],NdSprite.prototype,"fps",null),__decorate([alive],NdSprite.prototype,"export",null),NdSprite}(_),K=function(e){function NdModSprite(){var t=null!==e&&e.apply(this,arguments)||this;return t.src=new S(1,!1,(function(e){return e?e.url:e}),(function(e,r){if(!1===e)return t.src.protectedValue&&t.src.protectedValue.destroy(),e;if(t.src.protectedValue){if(t.src.protectedValue.url===e)return t.src.protectedValue;t.src.protectedValue.destroy()}if($.isNdUrlSpriteStr(e)){var n=new $(e);return n.on("load",(function(){n.fps=t.fps.protectedValue,t.frames.set(n.frames,r)})),n.load(),n}return e?new w(e).load():!!e})),t.frames=new S(0,0,(function(e){return e}),(function(e){return e})),t.fps=new S(0,12,(function(e){return e}),(function(e){return e<0&&(e=0),e})),t.size=new C(1,["auto","auto"],(function(e){return __spreadArray([],e,!0)}),(function(e){return"string"==typeof e||"number"==typeof e?[e,e]:__spreadArray([],e,!0)}),(function(e,r,n,o){n(e.map((function(e,r){if("auto"===e)return t.src.protectedValue?0===r?t.src.protectedValue.width:t.src.protectedValue.height:0}))),o(("number"==typeof r||"auto"===r?[r,r]:r).map((function(e,r){return"auto"===e?t.src.protectedValue?0===r?t.src.protectedValue.width:t.src.protectedValue.height:0:(e<0&&(e=0),e)})))}),(function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e})),t}return __extends(NdModSprite,e),NdModSprite}(k),J=function(e){function Sprite(t){var r=e.call(this,t,__assign(__assign(__assign({},new K),new O),new U))||this;return r.Box=new p(r,r.cache,(function(){var e=__spreadArray([],r.data.position.protectedValue,!0),t=r.data.size.protectedValue.map((function(e,t){if("auto"===e)return r.data.src.protectedValue?0===t?r.data.src.protectedValue.width:r.data.src.protectedValue.height:0}));return F.applyBoxAnchor(e,t[0],t[1],r.data),[e[0],e[1],t[0],t[1],0,0,0,0]})),r.watch("src",(function(){r.data.src.protectedValue&&(r.data.src.protectedValue.loaded?(r.Box.purge(),r.matrixContainer.purge()):r.data.src.protectedValue.on("load",(function(){r.Box.purge(),r.matrixContainer.purge()})))})),r.watch("frames",(function(){r.data.src.protectedValue instanceof $&&(r.data.src.protectedValue.frames=r.data.frames.protectedValue)})),r.watch("fps",(function(){r.data.src.protectedValue instanceof $&&(r.data.src.protectedValue.fps=r.data.fps.protectedValue)})),r.watch("size",(function(){r.Box.purge(),r.matrixContainer.purge(),r.data.src.protectedValue&&r.data.src.protectedValue.destroy(),r.data.src.set(!1,r)})),r}return __extends(Sprite,e),Sprite.prototype.export=function(e){if(e||(e=new Date),this.data.src.protectedValue)return this.data.src.protectedValue.export(e)},Sprite.prototype.render=function(e,t){if(this.data.src.protectedValue){Sprite.transformContext(this,e);var r=this.data.src.protectedValue.export(t);r&&e.drawImage(r,0,0,"auto"===this.data.size.protectedValue[0]?this.data.src.protectedValue.width:this.data.size.protectedValue[0],"auto"===this.data.size.protectedValue[1]?this.data.src.protectedValue.height:this.data.size.protectedValue[1])}return e},Sprite.prototype.test=function(e){return(e=this.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),this))[0]>0&&e[0]<this.Box.value.sprite.size[0]&&e[1]>0&&e[1]<this.Box.value.sprite.size[1]&&this},Sprite.prototype.pause=function(){this.data.src.protectedValue instanceof $&&this.data.src.protectedValue.pause()},Sprite.prototype.play=function(){this.data.src.protectedValue instanceof $&&this.data.src.protectedValue.play()},__decorate([alive],Sprite.prototype,"export",null),__decorate([alive],Sprite.prototype,"render",null),__decorate([alive],Sprite.prototype,"test",null),__decorate([alive],Sprite.prototype,"pause",null),__decorate([alive],Sprite.prototype,"play",null),Sprite}(F),Z=function(e){function Area(t){var r=e.call(this,t,__assign(__assign(__assign(__assign({},new O),new q(!0)),new U),new P))||this;return r.xShift=0,r.yShift=0,r.strokeFix=1,r.interpolationFix=0,r.interpolated=!1,r.mouseTester=new G,r.Box=new p(r,r.cache,(function(){var e=__spreadArray([],r.data.position.protectedValue,!0),t=1/0,n=1/0,o=-1/0,i=-1/0;r.data.path.protectedValue.forEach((function(e){e[0]<t&&(t=e[0]),e[2]<t&&(t=e[2]),e[1]<n&&(n=e[1]),e[3]<n&&(n=e[3]),e[0]>o&&(o=e[0]),e[2]>o&&(o=e[2]),e[1]>i&&(i=e[1]),e[3]>i&&(i=e[3])})),t===1/0&&(t=0),n===1/0&&(n=0),o===-1/0&&(o=0),i===-1/0&&(o=0),r.xShift=t,r.yShift=n;var a=r.strokeFix+r.interpolationFix,s=Math.abs(o-t),u=Math.abs(i-n);return F.applyBoxAnchor(e,s,u,r.data),[e[0]+r.xShift,e[1]+r.yShift,s,u,a,a,a,a]})),r.assembler=new H([{name:"fill",resolver:function(e){e.save(),e.translate(r.Box.value.sprite.margin[3]-r.xShift,r.Box.value.sprite.margin[0]-r.yShift),!r.interpolated&&r.data.interpolation.protectedValue>0&&(k.interpolate(r.data.path.protectedValue,r.data.interpolation.protectedValue,!0),r.interpolated=!0),F.drawFill(r.data,e),e.restore()}},{name:"bg",resolver:function(e){e.translate(r.Box.value.sprite.margin[3]-r.xShift,r.Box.value.sprite.margin[0]-r.yShift),F.drawPathBg(r.data,e,r.assembler)}},{name:"stroke",resolver:function(e){r.interpolated||(k.interpolate(r.data.path.protectedValue,r.data.interpolation.protectedValue,!0),r.interpolated=!0),e.translate(r.Box.value.sprite.margin[3]-r.xShift,r.Box.value.sprite.margin[0]-r.yShift),F.drawStroke(r.data,e)}}]),r.once("destroyed",(function(){r.mouseTester=r.mouseTester.destroy()})),r.watch("path",(function(){r.interpolated=!1,r.Box.purge(),r.matrixContainer.purge(),r.assembler.resize(),r.assembler.update(),r.interpolated=!1,r.mouseTester.resize(r.Box.value.sprite.size),r.mouseTester.redraw(r.data)})),r.watch("interpolation",(function(){r.interpolated=!1,r.interpolationFix=Math.round(40*r.data.interpolation.protectedValue),r.assembler.update(),r.assembler.resize(),r.mouseTester.resize(r.Box.value.sprite.size),r.mouseTester.redraw(r.data),r.interpolated=!1})),r.watch(["strokeStyle","strokeColor"],(function(){r.assembler&&(r.assembler.update("stroke"),r.assembler.resize())})),r.watch("fill",(function(){r.assembler.update("fill")})),r.watch(["bg","backgroundSize","backgroundPosition"],(function(){r.assembler.update("bg")})),r.watch("strokeWidth",(function(){r.strokeFix=r.data.strokeWidth.protectedValue.reduce((function(e,t){return e<t?t:e}),0)/2,r.assembler.update("stroke"),r.mouseTester.resize(r.Box.value.sprite.size),r.mouseTester.redraw(r.data),r.Box.purge(),r.matrixContainer.purge(),r.assembler.resize()})),r}return __extends(Area,e),Area.prototype.test=function(e){return!!this.mouseTester.check(this.matrix.traceCursorToLocalSpace(__spreadArray([],e,!0),this))&&this},Area.prototype.export=function(){return this.assembler.export(this)},Area.prototype.render=function(e){var t=this.assembler.export(this);return t&&(F.transformContext(this,e),e.drawImage(t,0,0)),e},__decorate([alive],Area.prototype,"test",null),__decorate([alive],Area.prototype,"export",null),__decorate([alive],Area.prototype,"render",null),Area}(F),ee=function(e){function NdModSize(){var t=null!==e&&e.apply(this,arguments)||this;return t.size=new C(1,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?(e<0&&(e=0),[e,e]):e.map((function(e){return e<0?0:e}))}),(function(e,t,r,n){r(__spreadArray([],e,!0)),"number"==typeof t?(t<0&&(t=0),n([t,t])):n(t.map((function(e){return e<0?0:e})))}),(function(e){return e})),t}return __extends(NdModSize,e),NdModSize}(k),te=/\[(?<tagname>[cbi])(="(?<value>rgba\(\d*,( )?\d*,( )?\d*(,( )?(\.\d+|1|0))\))")?](?<content>((?!\[\/?\k<tagname>]).)*)\[\/\k<tagname>]/gm,re=/(\S+)/g,ne=function(e){function NdModRect(){var t=null!==e&&e.apply(this,arguments)||this;return t.radius=new C(0,[0,0,0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?e<0?[0,0,0,0]:[e,e,e,e]:e.map((function(e){return e<0?0:e}))}),(function(e,t,r,n){r(__spreadArray([],e,!0)),n("number"==typeof t?t<0?[0,0,0,0]:[t,t,t,t]:t.map((function(e){return e<0?0:e})))}),(function(e){return e})),t.strokeColor=new C(1,["rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)"],(function(e){return __spreadArray([],e,!0)}),(function(e){return"string"==typeof e?[e=NdModRect.arrayToColor(NdModRect.normalizeColor(NdModRect.colorToArray(e))),e,e,e]:"number"==typeof e[0]?[e=NdModRect.arrayToColor(NdModRect.normalizeColor(e)),e,e,e]:"string"==typeof e[0]?e.map((function(e){return NdModRect.arrayToColor(NdModRect.normalizeColor(NdModRect.colorToArray(e)))})):e.map((function(e){return NdModRect.arrayToColor(NdModRect.normalizeColor(e))}))}),(function(e,t,r,n){if(r(e.map((function(e){return NdModRect.colorToArray(e)}))),"string"==typeof t)n([o=NdModRect.normalizeColor(NdModRect.colorToArray(t)),o,o,o]);else if("number"==typeof t[0]){var o;n([o=NdModRect.normalizeColor(t),o,o,o])}else"string"==typeof t[0]?n(t.map((function(e){return NdModRect.normalizeColor(NdModRect.colorToArray(e))}))):n(t.map((function(e){return __spreadArray([],NdModRect.normalizeColor(e),!0)})))}),(function(e){return e})),t.strokeWidth=new C(1,[1,1,1,1],(function(e){return __spreadArray([],e,!0)}),(function(e){return"number"==typeof e?e<0?[0,0,0,0]:[e,e,e,e]:e.map((function(e){return e<0?0:e}))}),(function(e,t,r,n){r(__spreadArray([],e,!0)),"number"==typeof t?n(t<0?[0,0,0,0]:[t,t,t,t]):r(t.map((function(e){return e<0?0:e})))}),(function(e){return e})),t.strokeStyle=new S(1,[[0],[0],[0],[0]],(function(e){return e.map((function(e){return __spreadArray([],e,!0)}))}),(function(e){return"number"==typeof e[0]?[e,e,e,e]:e.map((function(e){return __spreadArray([],e,!0)}))})),t}return __extends(NdModRect,e),NdModRect.buildRectPath=function(e,t){var r=t.size.protectedValue,n=r[0],o=r[1],i=t.radius.protectedValue.map((function(e){return e>n/2&&(e=n/2),e>o/2&&(e=o/2),e})),a=i[0],s=i[1],u=i[2],c=i[3];if(n&&o){var d=[];return a?(d.push([0,a,a,0,0,.5522847498*a,a-.5522847498*a,0]),d.push([d[0][2],d[0][3],n,0,d[0][2],d[0][3],n,0])):d.push([0,0,n,0,0,0,n,0]),s?(d[d.length-1][2]-=s,d[d.length-1][6]-=s,d.push([n-s,0,n,s,n-s+.5522847498*s,0,n,s-.5522847498*s]),d.push([n,s,n,o,n,s,n,o])):d.push([n,0,n,o,n,0,n,o]),u?(d[d.length-1][3]-=u,d[d.length-1][7]-=u,d.push([n,o-u,n-u,o,n,o-u+.5522847498*u,n-u+.5522847498*u,o]),d.push([n-u,o,0,o,n-u,o,0,o])):d.push([n,o,0,o,n,o,0,o]),c?(d[d.length-1][2]+=c,d[d.length-1][6]+=c,d.push([c,o,0,o-c,c-.5522847498*c,o,0,o-c+.5522847498*c]),d.push([0,o-c,d[0][0],d[0][1],0,o-c,d[0][0],d[0][1]])):d.push([0,o-c,d[0][0],d[0][1],0,o-c,d[0][0],d[0][1]]),d}return[]},NdModRect}(k),oe=function(e){function Rectangle(t){var r=e.call(this,t,__assign(__assign(__assign(__assign(__assign({},new ne),new ee),new U),new P),new O))||this;r.Box=new p(r,r.cache,(function(){var e=__spreadArray([],r.data.position.protectedValue,!0);return F.applyBoxAnchor(e,r.data.size.protectedValue[0],r.data.size.protectedValue[1],r.data),[e[0],e[1],r.data.size.protectedValue[0],r.data.size.protectedValue[1],r.strokeFix[0],r.strokeFix[1],r.strokeFix[2],r.strokeFix[3]]})),r.assembler=new H([{name:"fill",resolver:function(e){e.translate(r.strokeFix[3],r.strokeFix[0]),Rectangle.registerPath(r.path(),e,!0),e.fillStyle=r.data.fill.protectedValue,e.fill()}},{name:"bg",resolver:function(e){r.assembler&&(e.translate(r.strokeFix[3],r.strokeFix[0]),Rectangle.clipBezierPath(r.path(),e),Rectangle.drawBg(r.data,e,r.assembler))}},{name:"stroke",resolver:function(e){e.translate(r.strokeFix[3],r.strokeFix[0]),r.drawRectStroke(e)}}]),r.strokeFix=__spreadArray([],r.data.strokeWidth.protectedValue,!0);var n=r.cache.register("path",(function(){return ne.buildRectPath(r,r.data)})),o=n.getter,i=n.purge;return r.path=o,r.purgePath=i,r.watch("size",(function(){r.assembler.resize(),r.assembler.update("fill"),r.assembler.update("bg"),r.assembler.update("stroke"),r.matrixContainer.purge(),r.Box.purge(),r.purgePath()})),r.watch("radius",(function(){r.assembler&&(r.assembler.update("fill"),r.assembler.update("bg"),r.assembler.update("stroke"),r.purgePath())})),r.watch("strokeWidth",(function(){r.strokeFix=__spreadArray([],r.data.strokeWidth.protectedValue,!0),r.Box.purge(),r.assembler.resize(),r.matrixContainer.purge(),r.assembler.update("fill"),r.assembler.update("bg"),r.assembler.update("stroke")})),r.watch(["bg","backgroundSize","backgroundPosition"],(function(){r.assembler.update("bg")})),r.watch(["strokeColor","strokeStyle"],(function(){r.assembler.update("stroke")})),r.watch("fill",(function(){r.assembler.update("fill")})),r}return __extends(Rectangle,e),Rectangle.prototype.export=function(){return this.assembler.export(this)},Rectangle.prototype.test=function(e){var t=this.matrixContainer.value.traceCursorToLocalSpace(__spreadArray([],e,!0),this),r=t[0],n=t[1];return r<this.Box.value.sprite.size[0]&&r>0&&n<this.Box.value.sprite.size[1]&&n>0&&this},Rectangle.prototype.render=function(e){var t=this.assembler.export(this);return t&&(Rectangle.transformContext(this,e),e.drawImage(t,0,0)),e},Rectangle.drawCorner=function(e,t,r,n,o,i,a){t.save(),t.beginPath(),t.lineWidth=Math.max(i,a);var s=r[0],u=r[1],c=r[2],d=r[3],l=r[4],p=r[5],h=r[6],f=r[7];if(0===e){if(i<a)s+=y=(a-i)/2,l+=y;if(i>a)d+=y=(i-a)/2,f+=y}if(1==e){if(i<a)u+=y=(a-i)/2,p+=y;if(a<i)c-=y=(i-a)/2,h-=y}if(2==e){if(i<a)s-=y=(a-i)/2,l-=y;if(i>a)d-=y=(i-a)/2,f-=y}if(3==e){var y;if(a<i)c+=y=(i-a)/2,h+=y;if(i<a)u-=y=(a-i)/2,p-=y}if(t.moveTo(s,u),n!==o){var v=t.createConicGradient(-Math.PI-1/180+Math.PI/2*e,e%2?s:c,e%2?d:u);v.addColorStop(0,n),v.addColorStop(.25,o),t.strokeStyle=v}else t.strokeStyle=n;t.bezierCurveTo(l,p,h,f,c,d),t.stroke(),t.restore()},Rectangle.drawBridge=function(e,t,r,n){e.beginPath(),e.lineCap="round",e.moveTo(t[0],t[1]),e.strokeStyle=r,e.lineWidth=n,e.lineTo(t[2],t[3]),e.stroke()},Rectangle.prototype.drawRectStroke=function(e){var t=this,r=this.path(),n=[0,1,2,3];if(r.length){var o=0;this.data.radius.protectedValue.forEach((function(e,t){if(e>0)for(var r=t;r<n.length;r++)n[r]+=1})),r.forEach((function(r,i){r[0]!==r[2]&&r[1]!==r[3]?Rectangle.drawCorner(o,e,r,o>0?t.data.strokeColor.protectedValue[o-1]:t.data.strokeColor.protectedValue[3],t.data.strokeColor.protectedValue[o],o>0?t.data.strokeWidth.protectedValue[o-1]:t.data.strokeWidth.protectedValue[3],t.data.strokeWidth.protectedValue[o]):Rectangle.drawBridge(e,r,t.data.strokeColor.protectedValue[o],t.data.strokeWidth.protectedValue[o]),n.indexOf(i)>-1&&o++})),o=0}},__decorate([alive],Rectangle.prototype,"export",null),__decorate([alive],Rectangle.prototype,"test",null),__decorate([alive],Rectangle.prototype,"render",null),Rectangle}(F),ie=function(e){function NdModEmitter(){var t=null!==e&&e.apply(this,arguments)||this;return t.position=new S(0,[0,0],(function(e){return e}),(function(e){return __spreadArray([],e,!0)})),t.limit=new S(0,1e3,(function(e){return e}),(function(e){return e<0&&(e=0),e})),t.intensity=new S(0,1,(function(e){return e}),(function(e){return e<1?1:e})),t.shape=new S(0,0,(function(e){return e instanceof Array?NdModEmitter.convertComplexPath(e):e}),(function(e){return e instanceof Array?NdModEmitter.convertSimplePath(e):e<0?0:e})),t}return __extends(NdModEmitter,e),NdModEmitter}(k),ae=new(function(){function NodasRandom(){}return NodasRandom.prototype.number=function(e,t){var r,n,o,i;return"number"==typeof e?(r=0,n=Math.abs(e)):(r=e[0]<e[1]?e[0]:e[1],n=e[0]<e[1]?e[1]:e[0]),r===n||(o=n-r)<0?r:(i=Math.random()*o+r,i=void 0!==t?parseFloat(i.toFixed(t)):i)},NodasRandom.prototype.point=function(e,t){return[this.number(e[0],t),this.number(e[1],t)]},NodasRandom.prototype.pointWithinCircle=function(e,t){var r=this.number(2*Math.PI,4),n=this.number(e);return[parseFloat((n*Math.cos(r)).toFixed(t)),parseFloat((n*Math.sin(r)).toFixed(t))]},NodasRandom.prototype.pointOnCircle=function(e,t){return[e*Math.sin(this.number(2*Math.PI)),e*Math.cos(this.number(2*Math.PI))]},NodasRandom.prototype.pointOnPath=function(e){return k.getPathSegmentTPoint(e,this.number(1))},NodasRandom.prototype.luck=function(e){return!(e<=0)&&(!(e>1)&&Math.random()<=e)},NodasRandom.prototype.setItem=function(e,t){var r,n,i,a=e.length,s=[];if(!t)return e[this.number([0,e.length-1])];if(t.length===e.length){for(a=0,r=0;r<e.length;r++)a+=t[r],s.push({item:e[r],probability:t[r]});for(s.sort((function(e,t){return e.probability-t.probability})),r=0;r<s.length;r++)s[r].min=s[r-1]?s[r-1].max:0,s[r].max=s[r].min+s[r].probability}else o.error("Probability length does not correspond items length");for(n=this.number([1,a]),r=0;r<s.length;r++)if(n>s[r].min&&n<=s[r].max){i=s[r].item;break}return i},NodasRandom}()),se=function(e){function ParticleEmitter(t){var r=e.call(this,new ie)||this;return r.particles=[],r.emitTimeout=0,r.lastEmittedAt=(new Date).getTime(),r._field=null,r.initiator=t,r.emitTimeout=1e3/r.data.intensity.protectedValue,r.watch("intensity",(function(){r.emitTimeout=1e3/r.data.intensity.protectedValue})),r.once("destroyed",(function(){r._field=null,r.particles.forEach((function(e){return e.destroy()})),r.particles=void 0})),r}return __extends(ParticleEmitter,e),ParticleEmitter.prototype.field=function(e){return this._field=e,this},ParticleEmitter.prototype.render=function(e,t){var r=this;if(this._field&&this.particles.length<this.data.limit.protectedValue){var n=t.getTime();if(n-this.lastEmittedAt>=this.emitTimeout){var o,i=this.initiator(t);if("number"==typeof this.data.shape.protectedValue)if(0===this.data.shape.protectedValue)i.style("position",[this.data.position.protectedValue[0],this.data.position.protectedValue[1]]);else(o=ae.pointOnCircle(this.data.shape.protectedValue))[0]+=this.data.position.protectedValue[0],o[1]+=this.data.position.protectedValue[1],i.style("position",__spreadArray([],o,!0));else(o=ae.pointOnPath(this.data.shape.protectedValue[ae.number(this.data.shape.protectedValue.length-1)]))[0]+=this.data.position.protectedValue[0],o[1]+=this.data.position.protectedValue[1],i.style("position",o);i.once("destroyed",(function(){r.destroyed||(r.particles=r.particles.filter((function(e){return e!==i})))})),this._field.add(i),this.lastEmittedAt=n}}},__decorate([alive],ParticleEmitter.prototype,"field",null),__decorate([alive],ParticleEmitter.prototype,"render",null),ParticleEmitter}(M),ue=function(e){function NdModParticle(){var t=null!==e&&e.apply(this,arguments)||this;return t.lifetime=new S(0,1/0,(function(e){return e}),(function(e){return e})),t.blending=new S(0,"source-over",(function(e){return e}),(function(e){return e})),t.opacity=new S(0,1,(function(e){return e}),(function(e){return e<0&&(e=0),e>1&&(e=1),e})),t.origin=new S(0,[.5,.5],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.vector=new S(0,[0,0,0,0,0,0,0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.rotate=new S(0,0,(function(e){return e}),(function(e){return e})),t.scale=new S(0,[1,1],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.skew=new S(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return e[0]>360&&(e[0]=360-e[0]),e[0]<-360&&(e[0]+=360),e[1]>360&&(e[1]=360-e[1]),e[1]<-360&&(e[1]+=360),[NdModParticle.degToRad(e[0]),NdModParticle.degToRad(e[1])]})),t.position=new S(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t}return __extends(NdModParticle,e),NdModParticle}(k),ce=function(e){function Particle(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=t[0],o=t[1],i=t[2],a=e.call(this,new ue)||this;return a.origin=[0,0],a._matrix=new s(!1),a._initialised=!1,a.startTime=0,a._resolver=o,i&&(a._initiator=i),a.watch("origin",(function(){a.updateOrigin()})),a.once("destroy",(function(){a.sprite=null,a._matrix=void 0})),"string"==typeof n?(a.sprite=$.isNdUrlSpriteStr(n)?new $(n):new w(n),a.sprite.loaded?a.updateOrigin():(a.sprite.once("load",(function(){return a.updateOrigin()})),a.sprite.load())):(a.sprite=n,n instanceof $||n instanceof w&&!n.loaded?(n.once("load",(function(){return a.updateOrigin()})),n.load()):a.updateOrigin()),a}return __extends(Particle,e),Particle.prototype.resetMatrix=function(){var e,t,r,n;this._matrix.reset(),(e=this._matrix).translate.apply(e,this.origin),(t=this._matrix).translate.apply(t,this.data.position.protectedValue),this._matrix.rotate(this.data.rotate.protectedValue),(r=this._matrix).skew.apply(r,this.data.skew.protectedValue),(n=this._matrix).scale.apply(n,this.data.scale.protectedValue),this._matrix.translate(-this.origin[0],-this.origin[1])},Particle.prototype.updateOrigin=function(){this.sprite&&(this.origin[0]=this.sprite.width*this.data.origin.protectedValue[0],this.origin[1]=this.sprite.height*this.data.origin.protectedValue[1])},Object.defineProperty(Particle.prototype,"startedAt",{get:function(){return this.startTime},enumerable:!1,configurable:!0}),Particle.prototype.opacify=function(e){this.data.vector.protectedValue[7]+=e},Particle.prototype.push=function(e){return this.data.vector.protectedValue[0]+=e[0],this.data.vector.protectedValue[1]+=e[1],this},Particle.prototype.turn=function(e){return this.data.vector.protectedValue[2]+=e,this},Particle.prototype.explode=function(e){return this.data.vector.protectedValue[5]+=e[0],this.data.vector.protectedValue[6]+=e[1],this},Particle.prototype.jelly=function(e){return this.data.vector.protectedValue[3]+=e[0],this.data.vector.protectedValue[4]+=e[1],this},Particle.prototype.render=function(e,r,n){if(((this.sprite instanceof $||this.sprite instanceof w)&&this.sprite.loaded||this.sprite instanceof HTMLImageElement||this.sprite instanceof HTMLCanvasElement)&&(this._initialised||(this._initiator?this._initialised=this._initiator(this.data.vector.protectedValue,n):this._initialised=!0,this.startTime=n.getTime(),this.cast("ready",new t(this,null))),this._initialised)){e(this.data.vector.protectedValue);var o=isNaN(this.data.lifetime.protectedValue)&&isFinite(this.data.lifetime.protectedValue)?0:(n.getTime()-this.startTime)/this.data.lifetime.protectedValue;if(o>1&&(o=1),o<0&&(o=0),this._resolver(this.data.vector.protectedValue,o,n)){this.data.position.protectedValue[0]+=this.data.vector.protectedValue[0],this.data.position.protectedValue[1]+=this.data.vector.protectedValue[1],this.data.rotate.set(this.data.rotate.protectedValue+this.data.vector.protectedValue[2],this),this.data.skew.protectedValue[0]+=this.data.vector.protectedValue[3],this.data.skew.protectedValue[1]+=this.data.vector.protectedValue[4],this.data.scale.protectedValue[0]+=this.data.vector.protectedValue[5],this.data.scale.protectedValue[1]+=this.data.vector.protectedValue[6],this.data.opacity.set(this.data.opacity.protectedValue+this.data.vector.protectedValue[7],this),this.resetMatrix();var i=this.sprite instanceof $||this.sprite instanceof w?this.sprite.export(n):this.sprite;i&&(r.save(),r.globalCompositeOperation=this.data.blending.protectedValue,r.globalAlpha*=this.data.opacity.protectedValue,r.transform.apply(r,this._matrix.extract()),r.drawImage(i,0,0),r.restore()),1===o&&this.destroy()}else this.destroy()}},Object.defineProperty(Particle.prototype,"initialized",{get:function(){return this._initialised&&!this.destroyed},enumerable:!1,configurable:!0}),Particle.prototype.reset=function(){return this._matrix.reset(),Object.values(this.data).forEach((function(e){return e.reset()})),this._initialised=!1,this},__decorate([alive],Particle.prototype,"startedAt",null),__decorate([alive],Particle.prototype,"opacify",null),__decorate([alive],Particle.prototype,"push",null),__decorate([alive],Particle.prototype,"turn",null),__decorate([alive],Particle.prototype,"explode",null),__decorate([alive],Particle.prototype,"jelly",null),__decorate([alive],Particle.prototype,"render",null),__decorate([alive],Particle.prototype,"reset",null),Particle}(M);!function(e){e["sans-serif"]="sans-serif",e.serif="serif",e.system="system"}(y||(y={}));var de=function(e){function NdFont(r,n,i){var a=e.call(this,"\\".concat(i?i.name:"default",".font"),(function(){return n&&i?(a.initMeasureBuffer(),a.loadFont((function(){o.positive("Font ".concat(a.name," loaded")),a.cast("load",new t(a,null))}),(function(){o.negative("Unable to load font ".concat(a.name)),a.cast("error",new t(a,null))})),a.styles.innerHTML=a.str.reduce((function(e,t){return e+t}),""),document.head.appendChild(a.styles),a):(o.positive("Font ".concat(a.url," loaded")),a.cast("load",new t(a,null)),a)}))||this;return a.context=document.createElement("canvas").getContext("2d"),a.styles=document.createElement("style"),a.fontMaxLoadTime=1e4,a.fontLoadStart=0,a.fontMeasureBuffer=[],a.formatStr={eot:function(e){return'url("'+e+'.eot?#iefix") format("embedded-opentype")'},woff:function(e){return'url("'+e+'.woff") format("woff")'},ttf:function(e){return'url("'+e+'.ttf") format("truetype")'},svg:function(e,t,r){return'url("'+e+".svg#"+t+"-"+(r.charAt(0).toUpperCase()+r.slice(1))+'") format("svg")'}},a.export=function(){return a.context.canvas},n&&i?(a.scheme=i,a.str=i.weight.map((function(e){return i.style.reduce((function(t,o){return t+'@font-face {\n font-family:"'.concat(i.name,'";\n src:')+n.reduce((function(t,s,u){return t+a.formatStr[s]("".concat(r,"/").concat(i.name,"-").concat(e,"-").concat(o),i.name,o)+(u<n.length-1?",\n":";")}),"")+"\nfont-weight: ".concat(NdFont.extractNumericWeight(e),";\nfont-style: ").concat(o,";\n}\n")}),"")}),"")):(a.str=[],a.scheme={name:"default",weight:[],style:[]}),a}return __extends(NdFont,e),NdFont.prototype.loadFont=function(e,t){for(var r=this,n=this.scheme.weight.map((function(e){return r.scheme.style.map((function(t){return r.measureFont(t,e)}))})),i=!0,a=0;a<this.scheme.weight.length;a++){for(var s=0;s<this.scheme.style.length;s++)if(n[a][s]===this.fontMeasureBuffer[a][s]){i=!1;break}if(!i)break}i?e():(new Date).getTime()-this.fontLoadStart>this.fontMaxLoadTime?(o.negative("Gave up trying to load ".concat(this.name,". Timeout.")),t()):setTimeout((function(){return r.loadFont(e,t)}),500)},NdFont.prototype.measureFont=function(e,t,r){return this.context.font=r?"".concat(e," ").concat(NdFont.extractNumericWeight(t),' 12px/12px "').concat(r,'"'):this.string(e,NdFont.extractNumericWeight(t),12),this.context.measureText(NdFont.CONSTFONTCHECKSTRING).width},NdFont.prototype.initMeasureBuffer=function(){var e=this;this.fontLoadStart=(new Date).getTime(),this.fontMeasureBuffer=this.scheme.weight.map((function(t){return e.scheme.style.map((function(r){return e.measureFont(r,t,"sans-serif")}))}))},Object.defineProperty(NdFont.prototype,"name",{get:function(){return this.scheme.name},enumerable:!1,configurable:!0}),NdFont.prototype.string=function(e,t,r,n){return void 0===n&&(n=r),"".concat(e," ").concat(NdFont.extractNumericWeight(t)," ").concat(r,"px/").concat(n,'px "').concat(this.scheme.name,'"')},NdFont.extractNumericWeight=function(e){return"normal"===e?400:"black"===e?900:"light"===e?300:"bold"===e?600:e},NdFont.CONSTFONTCHECKSTRING='abcdefghijklmnopqrstuvwxyz 1234567890[!?,.<>"£$%^&*()~@#-=]',__decorate([alive],NdFont.prototype,"measureFont",null),__decorate([alive],NdFont.prototype,"initMeasureBuffer",null),__decorate([alive],NdFont.prototype,"string",null),NdFont}(_),le=new(function(){function NodasFonts(){this.fonts={},this.fontRootPath="./fonts",this.format=["eot","svg","ttf","woff"]}return Object.defineProperty(NodasFonts.prototype,"root",{get:function(){return this.fontRootPath},set:function(e){this.fontRootPath=e},enumerable:!1,configurable:!0}),Object.defineProperty(NodasFonts.prototype,"formats",{get:function(){return __spreadArray([],this.format,!0)},set:function(e){this.format=e},enumerable:!1,configurable:!0}),NodasFonts.prototype.add=function(e){return this.fonts[e.name]?o.positive("Font [".concat(e.name,"] already registered. Skip..")):Object.values(y).includes(e.name)?o.warn("You are not allowed to load fonts with names equal to system values [".concat(Object.values(y),"]. \n                    Ignored.")):(this.fonts[e.name]=new de(this.root,this.format,e),o.positive("Font ".concat(e.name," registered."))),this.fonts[e.name]},NodasFonts.prototype.get=function(e){return this.fonts[e]?this.fonts[e]:null},NodasFonts}()),pe=function(e){function NdTextPartial(){var t=null!==e&&e.apply(this,arguments)||this;return t.textColor="rgba(0,0,0,1)",t.fWeight=400,t.fSize=14,t.lHeight=14,t.fStyle="normal",t.ndFont="system",t.freeze={},t}return __extends(NdTextPartial,e),NdTextPartial.prototype.onPossibleSizeChange=function(e){this.on(["font","fontSize","weight","style","lineHeight"],e)},Object.defineProperty(NdTextPartial.prototype,"font",{get:function(){return this.ndFont},set:function(e){this.freeze.font||this.ndFont!==e&&(this.ndFont=e,this.cast("font",e))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"lineHeight",{get:function(){return this.lHeight},set:function(e){this.freeze.lineHeight||(e<0&&(e=0),e!==this.lHeight&&(this.lHeight=e,this.cast("lineHeight",this.lHeight)))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"weight",{get:function(){return this.fWeight},set:function(e){this.freeze.weight||this.fWeight!==e&&(this.fWeight=e,this.cast("weight",e))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"color",{get:function(){return this.textColor},set:function(e){if(!this.freeze.color){var t=k.arrayToColor(k.normalizeColor(k.colorToArray(e)));t!==this.textColor&&(this.textColor=t,this.cast("color",this.textColor))}},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"style",{get:function(){return this.fStyle},set:function(e){this.freeze.style||this.fStyle!==e&&(this.fStyle=e,this.cast("style",e))},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextPartial.prototype,"fontSize",{get:function(){return this.fSize},set:function(e){this.freeze.style||(e<0&&(e=0),this.fSize!==e&&(this.fSize=e,this.cast("fontSize",this.fSize)))},enumerable:!1,configurable:!0}),NdTextPartial.prototype.fontString=function(){if(Object.values(y).includes(this.ndFont))return"system"===this.ndFont?"".concat(this.style," ").concat(this.weight," ").concat(this.fSize,"px serif"):this.fSize+"px "+this.ndFont;var e=le.get(this.ndFont);return e?e.string(this.fStyle,this.fWeight,this.fSize,this.lineHeight):""},__decorate([alive],NdTextPartial.prototype,"onPossibleSizeChange",null),__decorate([alive],NdTextPartial.prototype,"font",null),__decorate([alive],NdTextPartial.prototype,"lineHeight",null),__decorate([alive],NdTextPartial.prototype,"weight",null),__decorate([alive],NdTextPartial.prototype,"color",null),__decorate([alive],NdTextPartial.prototype,"style",null),__decorate([alive],NdTextPartial.prototype,"fontSize",null),__decorate([alive],NdTextPartial.prototype,"fontString",null),NdTextPartial}(m),he=function(e){function NdTextWord(t){var r=e.call(this)||this;return r.str="",r.context=document.createElement("canvas").getContext("2d"),r.w=0,r.resizeFlag=!0,r.redrawFlag=!0,r.string=t,r.once("destroyed",(function(){return r.context=void 0})),r.on("font",(function(){if(!Object.values(y).includes(r.font)){var e=le.get(r.font);e&&(e.loaded||e.once("load",(function(){r.resizeFlag=!0,r.redrawFlag=!0})))}})),r.onPossibleSizeChange((function(){r.resizeFlag=!0,r.redrawFlag=!0})),r.on("color",(function(){r.redrawFlag=!0})),r}return __extends(NdTextWord,e),NdTextWord.prototype.resize=function(){this.context.font=this.fontString();var e=Math.ceil(this.context.measureText(this.str).width);e!==this.w&&(this.context.canvas.width=e,this.w=e),this.context.canvas.height!==this.lineHeight&&(this.context.canvas.height=this.lineHeight),this.resizeFlag=!1},NdTextWord.prototype.redraw=function(){this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.textBaseline="middle",this.context.fillStyle=this.color,this.context.font=this.fontString(),this.context.fillText(this.str,0,this.lineHeight/2),this.redrawFlag=!1},Object.defineProperty(NdTextWord.prototype,"width",{get:function(){return this.resizeFlag&&this.resize(),this.w},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextWord.prototype,"length",{get:function(){return this.str.length},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextWord.prototype,"string",{get:function(){return this.str},set:function(e){e=e.trim(),this.str!==e&&(this.resizeFlag=!0,this.redrawFlag=!0,this.str=e)},enumerable:!1,configurable:!0}),NdTextWord.prototype.render=function(e,t,r){this.resizeFlag&&this.resize(),this.redrawFlag&&this.redraw(),e.drawImage(this.context.canvas,t,r)},__decorate([alive],NdTextWord.prototype,"resize",null),__decorate([alive],NdTextWord.prototype,"redraw",null),__decorate([alive],NdTextWord.prototype,"width",null),__decorate([alive],NdTextWord.prototype,"length",null),__decorate([alive],NdTextWord.prototype,"string",null),__decorate([alive],NdTextWord.prototype,"render",null),NdTextWord}(pe),fe=function(e){function NdTextSpace(){var t=e.call(this)||this;return t.w=0,t.context=document.createElement("canvas").getContext("2d"),t.measured=!1,t.on("font",(function(){if(!Object.values(y).includes(t.font)){var e=le.get(t.font);e&&(e.loaded||e.once("load",(function(){t.measured=!1})))}})),t.once("destroyed",(function(){return t.context=void 0})),t}return __extends(NdTextSpace,e),Object.defineProperty(NdTextSpace.prototype,"length",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextSpace.prototype,"string",{get:function(){return" "},enumerable:!1,configurable:!0}),NdTextSpace.prototype.render=function(){},NdTextSpace.prototype.forceRedraw=function(){this.measured=!1},Object.defineProperty(NdTextSpace.prototype,"width",{get:function(){return this.measured||(this.context.font=this.fontString(),this.w=this.context.measureText(" ").width),this.w},enumerable:!1,configurable:!0}),__decorate([alive],NdTextSpace.prototype,"length",null),__decorate([alive],NdTextSpace.prototype,"string",null),__decorate([alive],NdTextSpace.prototype,"render",null),__decorate([alive],NdTextSpace.prototype,"forceRedraw",null),__decorate([alive],NdTextSpace.prototype,"width",null),NdTextSpace}(pe),ge=function(e){function NdTextBlock(t){var r=e.call(this)||this;return r.str="",r.l=1/0,r.w=0,r.h=0,r.updated=!0,r.words=[],r.string=t,r.bindWordsStyles(),r.once("destroyed",(function(){r.words.forEach((function(e){return e.destroy()})),r.words=void 0})),r.on("font",(function(){if(!r.destroyed&&!Object.values(y).includes(r.font)){var e=le.get(r.font);e&&(e.loaded||e.once("load",(function(){r.updated=!0})))}})),r}return __extends(NdTextBlock,e),NdTextBlock.prototype.updateSize=function(){var e=this;this.w=Math.ceil(this.words.reduce((function(e,t){return e+t.width}),0)),this.w=this.l<this.w?this.l:this.w,0===this.w&&(this.w=1);var t=0,r=this.lineHeight,n=[];this.words.forEach((function(o,i){t+o.width>e.w&&(r+=e.lineHeight,n.push(t),t=0),t+=o.width,i==e.words.length-1&&0!==t&&n.push(t)}));var o=Math.max.apply(null,n);o<this.w&&(this.w=o),this.h=Math.ceil(r),0===this.h&&(this.h=1),this.updated=!1},NdTextBlock.prototype.bindWordsStyles=function(){var e=this;["weight","style","color","font","fontSize","lineHeight"].forEach((function(t){e.on(t,(function(){e.words.forEach((function(r){r[t]=e[t]}))}))}))},NdTextBlock.prototype.split=function(e,t,r,n){var o=this;void 0===e&&(e=this.str),void 0===t&&(t={font:this.font,weight:this.weight,fontSize:this.fontSize,lineHeight:this.lineHeight,style:this.style,color:this.color}),void 0===r&&(r={}),void 0===n&&(n=0),te.lastIndex=0;for(var i=[],a=null,s=n;a=te.exec(e);){if(a.index===te.lastIndex&&te.lastIndex++,te.lastIndex=0,a.index){var u=e.substring(0,a.index).match(re);u&&u.forEach((function(e){o.words[s]?(o.words[s].freeze={},i.push(NdTextBlock.applyStylesToText(o.words[s],t)),i[s].string=e):i.push(NdTextBlock.applyStylesToText(new he(e),t)),i[i.length-1].freeze=__assign({},r),s++,o.words[s]?(o.words[s].freeze={},i.push(NdTextBlock.applyStylesToText(o.words[s],t))):i.push(NdTextBlock.applyStylesToText(new fe,t)),i[i.length-1].freeze=__assign({},r),s++}))}a.groups.content&&(i=__spreadArray(__spreadArray([],i,!0),this.split(a.groups.content,__assign(__assign({},t),{weight:"b"===a.groups.tagname?"bold":t.weight,color:"c"===a.groups.tagname&&a.groups.value?a.groups.value:t.color,style:"i"===a.groups.tagname?"italic":t.style}),{weight:"b"===a.groups.tagname||r.weight,color:"c"===a.groups.tagname||r.color,style:"i"===a.groups.tagname||r.style},i.length),!0),s=i.length),e=e.slice(a.index+a[0].length)}if(e.length){var c=e.match(re);c&&c.forEach((function(e){var n=o.words[s]?o.words[s]:new he(e);n.freeze={},NdTextBlock.applyStylesToText(n,t),n.string=e,n.freeze=__assign({},r),i.push(n),s++;var a=o.words[s]?NdTextBlock.applyStylesToText(o.words[s],t):NdTextBlock.applyStylesToText(new fe,t);a.freeze=__assign({},o.freeze),i.push(a),s++}))}return i},Object.defineProperty(NdTextBlock.prototype,"length",{get:function(){return this.str.length},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"width",{get:function(){return this.updated&&this.updateSize(),this.l<this.w?this.l:this.w},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"limit",{get:function(){return this.l},set:function(e){this.l=e,this.updated=!0},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"height",{get:function(){return this.updated&&this.updateSize(),this.h},enumerable:!1,configurable:!0}),Object.defineProperty(NdTextBlock.prototype,"string",{get:function(){return this.str},set:function(e){if(e!==this.str){this.str=e;var t=this.split();t.pop(),this.words=t,this.updated=!0}},enumerable:!1,configurable:!0}),NdTextBlock.prototype.export=function(){},NdTextBlock.prototype.render=function(e){var t=this,r=0,n=0,o=this.width;this.words.forEach((function(i){i.destroyed||(r+i.width>o&&(n+=t.lineHeight,r=0),i instanceof fe&&0===r||(i.render(e,r,n),r+=i.width))}))},NdTextBlock.applyStylesToText=function(e,t){return Object.assign(e,t),e},__decorate([alive],NdTextBlock.prototype,"updateSize",null),__decorate([alive],NdTextBlock.prototype,"bindWordsStyles",null),__decorate([alive],NdTextBlock.prototype,"split",null),__decorate([alive],NdTextBlock.prototype,"length",null),__decorate([alive],NdTextBlock.prototype,"width",null),__decorate([alive],NdTextBlock.prototype,"limit",null),__decorate([alive],NdTextBlock.prototype,"height",null),__decorate([alive],NdTextBlock.prototype,"string",null),__decorate([alive],NdTextBlock.prototype,"render",null),NdTextBlock}(pe),ye=function(e){function NdModText(){var t=null!==e&&e.apply(this,arguments)||this;return t.str=new S(0,"",(function(e){return e}),(function(e){return e})),t.width=new S(1,"auto",(function(e){return e}),(function(e){return e})),t.font=new S(1,y.system,(function(e){return e}),(function(e){return Object.values(y).includes(e)||le.get(e)?e:y.system})),t.color=new S(2,"rgba(0,0,0,1)",(function(e){return e}),(function(e){return e})),t.weight=new S(2,"normal",(function(e){return e}),(function(e){return e})),t.lineHeight=new S(2,14,(function(e){return e}),(function(e){return isFinite(e)?e:14})),t.style=new S(2,"normal",(function(e){return e}),(function(e){return e})),t}return __extends(NdModText,e),NdModText}(k),ve=function(e){function Text(t){var r=e.call(this,t,__assign(__assign(__assign({},new ye),new U),new O))||this;return r.assembler=new H([{name:"text",resolver:function(e){r.textBlock.render(e)}}]),r.Box=new p(r,r.cache,(function(){var e=__spreadArray([],r.data.position.protectedValue,!0),t=r.textBlock.width,n=r.textBlock.height;return F.applyBoxAnchor(e,t,n,r.data),[e[0],e[1],t,n,0,0,0,0]})),r.textBlock=new ge(r.data.str.protectedValue),r.syncStylesToBlock(),r.watch(["str","lineHeight","width","weight","style"],(function(){r.Box.purge(),r.matrixContainer.purge()})),r.watch("width",(function(){"number"==typeof r.data.width.protectedValue?r.textBlock.limit=r.data.width.protectedValue:r.textBlock.limit=1/0})),r.watch(["str","lineHeight","weight","width","style"],(function(){r.assembler.update(),r.assembler.resize()})),r.watch("font",(function(){if(!Object.values(y).includes(r.data.font.protectedValue)){var e=le.get(r.data.font.protectedValue);e&&(e.loaded||(e.once("load",(function(){r.Box.purge(),r.matrixContainer.purge(),r.assembler.resize(),r.assembler.update("text")})),e.load()))}})),r.once("destroyed",(function(){r.textBlock=r.textBlock.destroy()})),r}return __extends(Text,e),Text.prototype.render=function(e){var t=this.assembler.export(this);return t&&(F.transformContext(this,e),e.drawImage(t,0,0)),e},Text.prototype.syncStylesToBlock=function(){var e=this;this.textBlock.font=this.data.font.protectedValue,this.textBlock.color=this.data.color.protectedValue,this.textBlock.lineHeight=this.data.lineHeight.protectedValue,this.textBlock.style=this.data.style.protectedValue,this.textBlock.weight=this.data.weight.protectedValue,this.bindProps(["font","style","weight","fontSize","lineHeight","color"]),this.watch("str",(function(){e.textBlock.string=e.data.str.protectedValue}))},Text.prototype.bindProps=function(e){var t=this;e.forEach((function(e){t.watch(e,(function(){t.textBlock[e]=t.data[e].protectedValue}))}))},Text.prototype.export=function(){return this.textBlock.export()},Text.prototype.test=function(e){return(e=this.matrixContainer.value.traceCursorToLocalSpace(__spreadArray([],e,!0),this))[0]<this.Box.value.sprite.size[0]&&e[0]>0&&e[1]<this.Box.value.sprite.size[1]&&e[1]>0&&this},__decorate([alive],Text.prototype,"render",null),__decorate([alive],Text.prototype,"syncStylesToBlock",null),__decorate([alive],Text.prototype,"bindProps",null),__decorate([alive],Text.prototype,"export",null),__decorate([alive],Text.prototype,"test",null),Text}(F),me=function(e){function NdModField(){var t=null!==e&&e.apply(this,arguments)||this;return t.wind=new S(0,[0,0],(function(e){return __spreadArray([],e,!0)}),(function(e){return __spreadArray([],e,!0)})),t.gravity=new S(0,0,(function(e){return e}),(function(e){return isFinite(e)?(e<0&&(e=0),e):t.gravity.protectedValue})),t.viscosity=new S(0,0,(function(e){return e}),(function(e){return isFinite(e)||(e<0&&(e=0),e>1&&(e=1)),e})),t}return __extends(NdModField,e),NdModField}(k),Ne=function(e){function Field(t){var r=e.call(this,t,__assign(__assign({},new me),new O))||this;r.fps=0,r.active=!0,r.emitters=[],r.particles=[],r.modifiers=[],r.self=r,r.Particle=ce;var n=r;return r.ParticleEmitter=function(e){function FieldParticleEmitter(t){var r=e.call(this,t)||this;return n&&r.field(n),n.emitter(r),r}return __extends(FieldParticleEmitter,e),FieldParticleEmitter}(se),r.once("destroyed",(function(){r.emitters=void 0,r.particles=void 0,r.modifiers=void 0,r.active=!1,r.removeAllListeners(),r.self=null})),r}return __extends(Field,e),Field.prototype.fieldFpsCallback=function(){this.fps=this.app.ticker.fps},Field.prototype.attach=function(t){return this.mounted?o.positive("Field ".concat(this.id," has already been attached. Ignore attach")):(this.fps=t.ticker.fps,t.ticker.on("fps",this.fieldFpsCallback.bind(this))),e.prototype.attach.call(this,t)},Field.prototype.detach=function(){return this.mounted?(this.fps=this.app.ticker.fps,this.app.ticker.on("fps",this.fieldFpsCallback.bind(this))):o.positive("Field ".concat(this.id," has already been detached. Ignore detach")),e.prototype.detach.call(this)},Field.prototype.applyFieldVector=function(e){if(this.data.wind.protectedValue[0]>0||this.data.wind.protectedValue[1]>0){var t;if(this.data.wind.protectedValue[0]>0)if((t=this.data.wind.protectedValue[0]-e[0])>.01){var r=t/this.fps*.5;e[0]<this.data.wind.protectedValue[0]&&(e[0]+=r)}if(this.data.wind.protectedValue[1]>0)if((t=this.data.wind.protectedValue[1]-e[1])>.01){r=t/this.fps*.5;e[1]<this.data.wind.protectedValue[1]&&(e[1]+=r)}}if(this.data.gravity.protectedValue>0&&(e[1]+=this.data.gravity.protectedValue/this.fps),this.data.viscosity.protectedValue){var n=1-this.data.viscosity.protectedValue;e[0]*=n,e[1]*=n}this.modifiers.forEach((function(t){return t(e)}))},Field.prototype.export=function(){},Field.prototype.modify=function(e){return e instanceof Array?this.modifiers=__spreadArray(__spreadArray([],this.modifiers,!0),e,!0):this.modifiers.push(e),this},Field.prototype.simplify=function(e){return this.modifiers=this.modifiers.filter((function(t){return t!==e})),this},Field.prototype.render=function(e,t){var r=this;return this.emitters.forEach((function(r){r.destroyed||r.render(e,t)})),this.particles.forEach((function(n){n.destroyed||n.render(r.applyFieldVector.bind(r),e,t)})),e},Field.prototype.test=function(){return!1},Field.prototype.add=function(e){var t=this;return e instanceof Array?e.forEach((function(e){t.particles.push(e),e.once("destroyed",(function(){t.destroyed||(t.particles=t.particles.filter((function(t){return e!==t})))}))})):(e.once("destroyed",(function(){t.destroyed||(t.particles=t.particles.filter((function(t){return t!==e})))})),this.particles.push(e)),this},Field.prototype.emitter=function(e){var t=this,r=e.field(this);return this.emitters.push(r),r.once("destroyed",(function(){t.destroyed||(t.emitters=t.emitters.filter((function(e){return e!==r})))})),r},Field.prototype.remove=function(e){return this.particles=e instanceof Array?this.particles.filter((function(t){return e.indexOf(t)<0})):this.particles.filter((function(t){return t!==e})),this},Field.prototype.start=function(){return this.active||(this.active=!0),this},Field.prototype.stop=function(){return this.active?this.active=!1:o.message("Attempt to activate active Field. Ignored"),this},Field.Particle=ce,__decorate([alive],Field.prototype,"applyFieldVector",null),__decorate([alive],Field.prototype,"export",null),__decorate([alive],Field.prototype,"modify",null),__decorate([alive],Field.prototype,"simplify",null),__decorate([alive],Field.prototype,"render",null),__decorate([alive],Field.prototype,"test",null),__decorate([alive],Field.prototype,"add",null),__decorate([alive],Field.prototype,"emitter",null),__decorate([alive],Field.prototype,"remove",null),__decorate([alive],Field.prototype,"start",null),__decorate([alive],Field.prototype,"stop",null),Field}(F),be=function(){function Nodas(e){var t=this;this.ticker=new a,this.Animation=$,this.Image=w;var r=new a,n=new i(r),o=new I(n),s=new j(n,r,o);n.element(e),this.ticker=r,this.canvas=n,this.mouse=s,this.nodes=o;var u=new L("NODE_TREE_DEFAULT_ROOT");u.attach(this),this.append=function(e){return u.append(e),t},this.Text=function(e){function NodasText(t,r){var n=e.call(this,t)||this;return r&&n.style("str",r),u.append(n),n}return __extends(NodasText,e),NodasText}(ve),this.Area=function(e){function NodasArea(t,r){var n=e.call(this,t)||this;return r&&n.style("path",r),u.append(n),n}return __extends(NodasArea,e),NodasArea}(Z),this.Rectangle=function(e){function NodasRectangle(t,r){var n=e.call(this,t)||this;return r&&n.style("size",r),u.append(n),n}return __extends(NodasRectangle,e),NodasRectangle}(oe),this.Line=function(e){function NodasLine(t,r){var n=e.call(this,t)||this;return r&&n.style("path",r),u.append(n),n}return __extends(NodasLine,e),NodasLine}(Q),this.Sprite=function(e){function NodasSprite(t,r){var n=e.call(this,t)||this;return r&&n.style("src",r),u.append(n),n}return __extends(NodasSprite,e),NodasSprite}(J),this.Circle=function(e){function NodasCircle(t,r){var n=e.call(this,t)||this;return r&&n.style("radius",r),u.append(n),n}return __extends(NodasCircle,e),NodasCircle}(X),this.Group=function(e){function NodasGroup(t,r){var n=e.call(this,t)||this;return r&&n.append(r),u.append(n),n}return __extends(NodasGroup,e),NodasGroup}(L),this.Field=function(e){function NodasField(t,r){var n=e.call(this,t)||this;return r&&n.style(r),u.append(n),n}return __extends(NodasField,e),NodasField}(Ne)}return Nodas.prototype.get=function(e){return this.nodes.get(e)},Nodas.prototype.setRoot=function(e){var t;return null===(t=this.nodes.root)||void 0===t||t.detach(),e.attach(this),this},Nodas}(),_e=le,xe=x,we=w,ke=$,Se=ae;export{Z as Area,X as Circle,Ne as Field,_e as Fonts,L as Group,Q as Line,we as NodasImage,Se as NodasRand,ke as NodasSprite,F as Node,ce as Particle,se as ParticleEmitter,oe as Rectangle,xe as Resources,J as Sprite,ve as Text,be as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
