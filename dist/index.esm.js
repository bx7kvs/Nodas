class NdQueueElement{constructor(t,e){this.order=0,this.callback=t,e&&(this.order=e)}}class NdEvent{constructor(t,e){this.time=new Date,this.propagate=!0,this.target=t,this.data=e}}class NdMouseEvent extends NdEvent{}class NdStateEvent extends NdEvent{}function EventHandlers(){}function EventEmitter(){EventEmitter.init.call(this)}function $getMaxListeners(t){return void 0===t._maxListeners?EventEmitter.defaultMaxListeners:t._maxListeners}function emitNone(t,e,s){if(e)t.call(s);else for(var i=t.length,r=arrayClone(t,i),o=0;o<i;++o)r[o].call(s)}function emitOne(t,e,s,i){if(e)t.call(s,i);else for(var r=t.length,o=arrayClone(t,r),n=0;n<r;++n)o[n].call(s,i)}function emitTwo(t,e,s,i,r){if(e)t.call(s,i,r);else for(var o=t.length,n=arrayClone(t,o),a=0;a<o;++a)n[a].call(s,i,r)}function emitThree(t,e,s,i,r,o){if(e)t.call(s,i,r,o);else for(var n=t.length,a=arrayClone(t,n),h=0;h<n;++h)a[h].call(s,i,r,o)}function emitMany(t,e,s,i){if(e)t.apply(s,i);else for(var r=t.length,o=arrayClone(t,r),n=0;n<r;++n)o[n].apply(s,i)}function _addListener(t,e,s,i){var r,o,n;if("function"!=typeof s)throw new TypeError('"listener" argument must be a function');if((o=t._events)?(o.newListener&&(t.emit("newListener",e,s.listener?s.listener:s),o=t._events),n=o[e]):(o=t._events=new EventHandlers,t._eventsCount=0),n){if("function"==typeof n?n=o[e]=i?[s,n]:[n,s]:i?n.unshift(s):n.push(s),!n.warned&&(r=$getMaxListeners(t))&&r>0&&n.length>r){n.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+n.length+" "+e+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=t,a.type=e,a.count=n.length,function emitWarning(t){"function"==typeof console.warn?console.warn(t):console.log(t)}(a)}}else n=o[e]=s,++t._eventsCount;return t}function _onceWrap(t,e,s){var i=!1;function g(){t.removeListener(e,g),i||(i=!0,s.apply(t,arguments))}return g.listener=s,g}function listenerCount(t){var e=this._events;if(e){var s=e[t];if("function"==typeof s)return 1;if(s)return s.length}return 0}function arrayClone(t,e){for(var s=new Array(e);e--;)s[e]=t[e];return s}EventHandlers.prototype=Object.create(null),EventEmitter.EventEmitter=EventEmitter,EventEmitter.usingDomains=!1,EventEmitter.prototype.domain=void 0,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.init=function(){this.domain=null,EventEmitter.usingDomains&&undefined.active,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new EventHandlers,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function setMaxListeners(t){if("number"!=typeof t||t<0||isNaN(t))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=t,this},EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return $getMaxListeners(this)},EventEmitter.prototype.emit=function emit(t){var e,s,i,r,o,n,a,h="error"===t;if(n=this._events)h=h&&null==n.error;else if(!h)return!1;if(a=this.domain,h){if(e=arguments[1],!a){if(e instanceof Error)throw e;var d=new Error('Uncaught, unspecified "error" event. ('+e+")");throw d.context=e,d}return e||(e=new Error('Uncaught, unspecified "error" event')),e.domainEmitter=this,e.domain=a,e.domainThrown=!1,a.emit("error",e),!1}if(!(s=n[t]))return!1;var l="function"==typeof s;switch(i=arguments.length){case 1:emitNone(s,l,this);break;case 2:emitOne(s,l,this,arguments[1]);break;case 3:emitTwo(s,l,this,arguments[1],arguments[2]);break;case 4:emitThree(s,l,this,arguments[1],arguments[2],arguments[3]);break;default:for(r=new Array(i-1),o=1;o<i;o++)r[o-1]=arguments[o];emitMany(s,l,this,r)}return!0},EventEmitter.prototype.addListener=function addListener(t,e){return _addListener(this,t,e,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function prependListener(t,e){return _addListener(this,t,e,!0)},EventEmitter.prototype.once=function once(t,e){if("function"!=typeof e)throw new TypeError('"listener" argument must be a function');return this.on(t,_onceWrap(this,t,e)),this},EventEmitter.prototype.prependOnceListener=function prependOnceListener(t,e){if("function"!=typeof e)throw new TypeError('"listener" argument must be a function');return this.prependListener(t,_onceWrap(this,t,e)),this},EventEmitter.prototype.removeListener=function removeListener(t,e){var s,i,r,o,n;if("function"!=typeof e)throw new TypeError('"listener" argument must be a function');if(!(i=this._events))return this;if(!(s=i[t]))return this;if(s===e||s.listener&&s.listener===e)0==--this._eventsCount?this._events=new EventHandlers:(delete i[t],i.removeListener&&this.emit("removeListener",t,s.listener||e));else if("function"!=typeof s){for(r=-1,o=s.length;o-- >0;)if(s[o]===e||s[o].listener&&s[o].listener===e){n=s[o].listener,r=o;break}if(r<0)return this;if(1===s.length){if(s[0]=void 0,0==--this._eventsCount)return this._events=new EventHandlers,this;delete i[t]}else!function spliceOne(t,e){for(var s=e,i=s+1,r=t.length;i<r;s+=1,i+=1)t[s]=t[i];t.pop()}(s,r);i.removeListener&&this.emit("removeListener",t,n||e)}return this},EventEmitter.prototype.off=function(t,e){return this.removeListener(t,e)},EventEmitter.prototype.removeAllListeners=function removeAllListeners(t){var e,s;if(!(s=this._events))return this;if(!s.removeListener)return 0===arguments.length?(this._events=new EventHandlers,this._eventsCount=0):s[t]&&(0==--this._eventsCount?this._events=new EventHandlers:delete s[t]),this;if(0===arguments.length){for(var i,r=Object.keys(s),o=0;o<r.length;++o)"removeListener"!==(i=r[o])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=new EventHandlers,this._eventsCount=0,this}if("function"==typeof(e=s[t]))this.removeListener(t,e);else if(e)do{this.removeListener(t,e[e.length-1])}while(e[0]);return this},EventEmitter.prototype.listeners=function listeners(t){var e,s=this._events;return s&&(e=s[t])?"function"==typeof e?[e.listener||e]:function unwrapListeners(t){for(var e=new Array(t.length),s=0;s<e.length;++s)e[s]=t[s].listener||t[s];return e}(e):[]},EventEmitter.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):listenerCount.call(t,e)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};class NdEmitter{constructor(){this.Emitter=new EventEmitter}cast(t,e){return this.Emitter.emit(t,e),e}reset(){this.Emitter.removeAllListeners()}on(t,e){t instanceof Array?t.forEach((t=>this.Emitter.on(t,e))):this.Emitter.on(t,e)}once(t,e){this.Emitter.once(t,e)}off(t,e){this.Emitter.off(t,e)}}const t=new class NodasDebug extends NdEmitter{constructor(){super(),this.prefix="⋒",this.warnings=!0,this.groupLevel=0,this.currentLevel=0,this.separatorMessages={}}getMessage(t,e){return`${this.prefix}${e?`[${"string"==typeof e?e:e.constructor.name}]`:""}: ${t}`}error(t,e){throw t=this.getMessage(t,e),this.cast("error",t),console.trace(),new Error("😵"+t)}warn(t,e){t=this.getMessage(t,e),console.log("🤬%c"+t,"border-left:4px solid rgb(178,137,75); padding :2px 6px; background: rgba(131,138,0,.1); color: rgb(178,137,75)")}info(t,e){t=this.getMessage(t,e),this.cast("info",t),console.log("🧐%c"+t,"border-left:2px solid rgb(149,202,0); padding :2px 6px; background: rgba(255,255,255,.1);")}message(t,e){t=this.getMessage(t,e),this.cast("info",t),console.log("🙂%c"+t,"padding: 1px 10px; border-left:2px solid #10949C; font-weight:bold; background: rgba(0,175,231,.1); color: #10949C")}separator(t,e){t=this.getMessage(t,e),this.currentLevel++,this.separatorMessages[this.currentLevel]=t,this.cast("info",t),console.log("%c"+t+" ⌛","padding: 4px 10px; border-left: 2px solid #10949C; background:rgba(16,148,156,0.1); color: #10949C")}separatorEnd(){this.warnings&&(this.separatorMessages[this.currentLevel]&&(console.log("%c"+this.separatorMessages[this.currentLevel]+" ✔","padding: 4px 10px; border-left: 2px solid #10949C; background:rgba(16,148,156,0.1); color: #10949C"),this.currentLevel--),0===this.currentLevel&&(this.separatorMessages={}))}positive(t,e){this.warnings&&(t=this.getMessage(t,e),this.cast("info",t),console.log("🥳%c"+t,"border-left: 2px solid rgb(149,202,0); background:rgba(149,202,0,.1); padding: 4px 10px; color:rgb(149,202,0)"))}negative(t,e){this.warnings&&(t=this.getMessage(t,e),this.cast("info",t),console.log("☹%c"+t,"border-left: 2px solid rgb(224,14,0); background:rgba(224,14,0,.1); padding: 4px 10px; color: rgb(224,14,0)"))}group(t){this.warnings&&(console.group(t),this.groupLevel++)}groupEnd(){this.warnings&&(this.groupLevel--,console.groupEnd())}};class Canvas extends NdEmitter{constructor(e){super(),this.e=null,this.context=null,this.s=[800,600],this.sNumeric=[800,600],this.resizeProcessTimeout=null,this.q=[],this._ready=!1,this._clear=!1,this.args=[this.context,new Date,0],this.scroll=[window.scrollX||document.documentElement.scrollLeft,window.scrollY||document.documentElement.scrollTop],this.offset=[0,0],this.cursor={cursor:[0,0],page:[0,0],screen:[0,0]},this.updateEventData=t=>(this.cursor.page=[t.pageX,t.pageY],this.cursor.cursor=this.getMouseRelativePosition(t),this.cursor.screen=[t.pageX-this.scroll[0],t.pageY-this.scroll[1]],this.cursor),this.onCanvasMouseMove=t=>{this.cast("mouseMove",new NdMouseEvent(this,this.updateEventData(t)))},this.onCanvasMouseLeave=t=>{this.cast("mouseLeave",new NdMouseEvent(this,this.updateEventData(t)))},this.onCanvasMouseEnter=t=>{this.cast("mouseEnter",new NdMouseEvent(this,this.updateEventData(t)))},this.onCanvasMouseDown=t=>{this.cast("mouseDown",new NdMouseEvent(this,this.updateEventData(t)))},this.onCanvasMouseUp=t=>{this.cast("mouseUp",new NdMouseEvent(this,this.updateEventData(t)))},this.DrawScene=(e,s)=>{this._ready&&this.context&&(this._clear&&this.context.clearRect(0,0,this.context.canvas.offsetWidth,this.context.canvas.offsetHeight),this.args[0]=this.context,this.args[1]=e,this.args[2]=s,this.q.forEach(((e,s)=>{try{e.callback.apply(this,this.args)}catch(i){t.error(`Error emerged while drawing.\n. Queue: ${e.order}\n Queue Order: ${s}\n Member: ${e.callback.name}\n message: ${i.message}`)}})))},e.queue(0,this.DrawScene),window.addEventListener("scroll",(()=>{this.scroll[0]=window.scrollX||document.documentElement.scrollLeft,this.scroll[1]=window.scrollY||document.documentElement.scrollTop})),window.addEventListener("resize",this.handleResize)}removeEventListeners(){var t,e,s,i,r;null===(t=this.e)||void 0===t||t.removeEventListener("mousemove",this.onCanvasMouseMove),null===(e=this.e)||void 0===e||e.removeEventListener("mouseleave",this.onCanvasMouseLeave),null===(s=this.e)||void 0===s||s.removeEventListener("mouseenter",this.onCanvasMouseEnter),null===(i=this.e)||void 0===i||i.removeEventListener("mousedown",this.onCanvasMouseDown),null===(r=this.e)||void 0===r||r.removeEventListener("mouseup",this.onCanvasMouseUp)}addEventListeners(){var t,e,s,i,r;null===(t=this.e)||void 0===t||t.addEventListener("mousemove",this.onCanvasMouseMove),null===(e=this.e)||void 0===e||e.addEventListener("mouseleave",this.onCanvasMouseLeave),null===(s=this.e)||void 0===s||s.addEventListener("mouseenter",this.onCanvasMouseEnter),null===(i=this.e)||void 0===i||i.addEventListener("mousedown",this.onCanvasMouseDown),null===(r=this.e)||void 0===r||r.addEventListener("mouseup",this.onCanvasMouseUp)}recalculateOffset(){if(this.e){const t=this.e.getBoundingClientRect();this.offset=[t.x+this.scroll[0],t.y+this.scroll[1]]}}getMouseRelativePosition(t){return[t.pageX-this.offset[0]-this.scroll[0],t.pageY-this.offset[1]-this.scroll[1]]}recalculateSize(){if(this.e){const t=this.e.parentNode;if(t){const e=window.getComputedStyle(t,null),s=parseInt(e.getPropertyValue("height")),i=parseInt(e.getPropertyValue("width"));if("string"==typeof this.s[0]){const t=parseInt(this.s[0])/100;this.sNumeric[0]=i*t}else this.sNumeric[0]=this.s[0];if("string"==typeof this.s[1]){const t=parseInt(this.s[1])/100;this.sNumeric[1]=s*t}else this.sNumeric[1]=this.s[1];this.e.setAttribute("width",this.sNumeric[0].toString()),this.e.setAttribute("height",this.sNumeric[1].toString())}this.recalculateOffset()}}handleResize(){this.e&&("string"==typeof this.s[0]||"string"==typeof this.s[1]?(this.e.setAttribute("width","0"),this.e.setAttribute("height","0"),this.resizeProcessTimeout&&clearTimeout(this.resizeProcessTimeout),this.resizeProcessTimeout=setTimeout((()=>{this.recalculateSize(),this.cast("resize",new NdStateEvent(this,null))}),100)):(this.resizeProcessTimeout&&clearTimeout(this.resizeProcessTimeout),this.sNumeric[0]=this.s[0],this.sNumeric[1]=this.s[1],this.recalculateSize(),this.cast("resize",new NdStateEvent(this,null))))}element(e){if("string"==typeof e){let s=document.querySelector(e);s instanceof HTMLCanvasElement?(s.setAttribute("width",this.sNumeric[0].toString()),s.setAttribute("height",this.sNumeric[1].toString()),this.removeEventListeners(),this.e=s,this.context=s.getContext("2d"),this.addEventListeners(),this._ready=!0,t.positive(`Accepted ${e} as rendering root`)):t.error(`Element ${e} is not a HTMLCanvasElement or does not exist`)}else e.setAttribute("width",this.sNumeric[0].toString()),e.setAttribute("height",this.sNumeric[1].toString()),this.removeEventListeners(),this.e=e,this.context=e.getContext("2d"),this.addEventListeners(),this._ready=!0,t.positive(`Accepted ${e.id?e.id:e.classList.toString()} as rendering root`);this.handleResize(),this.cast("switch",new NdStateEvent(this,null))}queue(t,e){return"number"==typeof t&&"function"==typeof e?this.q.push(new NdQueueElement(e,t)):"function"==typeof t&&this.q.push(new NdQueueElement(t)),this.q.sort(((t,e)=>t.order-e.order)),this}unQueue(t){this.q=this.q.filter((e=>e.callback!==t))}size(e,s){if("number"!=typeof e&&"string"!=typeof e)return[...this.sNumeric];"number"==typeof s||"string"==typeof s?(this.s[0]=e,this.s[1]=s,this.handleResize()):t.error(`Invalid Canvas size [${e}, ${s}]`)}get ready(){return this._ready}get clear(){return this._clear}set clear(t){this._clear=t}}class NdConfigProperty{constructor(t,e,s){if(this.checkArray=[],this.cb=[],this.check={isNumber:t=>"number"==typeof t,isString:t=>"string"==typeof t,isArray:t=>"object"==typeof t&&t instanceof Array,custom:(t,e)=>"function"==typeof e&&e(t),under:(t,e)=>!("number"!=typeof t||!e)&&t<e,greater:(t,e)=>!("number"!=typeof t||!e)&&t>e,eq:(t,e)=>"number"==typeof t&&t===e,isBool:t=>"boolean"==typeof t},this.val=e,Object.keys(s).forEach((t=>{this.checkArray.push({f:t,value:s[t]})})),!this.checkValue(e))throw new Error("Initial ["+t+"]'s value does not meet config requirements.")}checkValue(t){let e=!0;for(let s=0;s<this.checkArray.length;s++)if(e=this.check[this.checkArray[s].f](t,this.checkArray[s].value),!e)return e;return e}value(){return this.val}define(t){return this.checkValue(t)&&(this.val=t),this.cb.forEach((t=>{t.call(this,this.value())})),this}watch(t){if("function"!=typeof t)throw new Error("Can not set config property watcher. Argument f is not a function.");return this.cb.push(t),this}}class Config{constructor(){this.properties={}}define(t,e,s){if(this.properties[t])console.warn("Config property duplication on property name ["+t+"]");else try{this.properties[t]=new NdConfigProperty(t,e,s)}catch(e){throw console.error("Unable to create config property ["+t+"]"),e}return this.properties[t]}set(t,e){if(!this.properties[t])throw new Error("Unable to set property ["+t+"]. No such property.");return this.properties[t].define(e),this}get(t){if(this.properties[t])return this.properties[t].value();throw new Error("Unable to get property ["+t+"]. No such property.")}watch(t,e){if(this.properties[t])return this.properties[t].watch(e);throw new Error("No such property as ["+t+"] to watch.")}}class Ticker{constructor(){this.frameDuration=1e3/58.8,this.q=[],this.frame=0,this.args=[new Date,0],this.eventsCb={stop:[],start:[],error:[]},this.tick=()=>{this.args[0]=new Date,this.args[1]=this.frame;try{this.draw()}catch(e){window.clearInterval(this.interval),this.resolve("error",e),t.error(`Application ticker collapsed\n Frame: ${this.frame}\n Date: ${this.args[0]}\n Message: ${e.message}`)}},this.queue=(e,s)=>("function"==typeof e?this.q.push({order:0,f:e}):"function"==typeof s?this.q.push({order:e,f:s}):t.warn("Ticker callback is not a function. Ignored"),this.q.sort((function(t,e){return t.order-e.order})),this)}draw(){this.q.forEach(((e,s)=>{try{this.q[s].f.apply(self,this.args)}catch(e){t.error(`Error emerged while running ticker\n Queue: ${this.q[s].order}\n Order: ${s}\n Message: ${e.message}`)}})),this.frame++}resolve(t,e){this.eventsCb[t].forEach((t=>{t.apply(this,[e])}))}on(t,e){this.eventsCb[t].push(e)}stop(){return this.interval?(this.frame=0,clearInterval(this.interval),this.interval=void 0,this.resolve("stop",this),t.positive("Ticker stopped")):t.warn("Ticker already stopped. Ignored"),this}start(){return this.interval?t.warn("Ticker already started. Ignored"):(this.interval=window.setInterval(this.tick,this.frameDuration),this.resolve("start",this),t.positive("Ticker started")),this}get frameTime(){return this.frameDuration}fps(e){return e>60&&(e=60),e<=0&&(e=1),this.frameDuration=1e3/e,t.positive(`Ticker FPS set ${e}. Restart Ticker`),this.interval&&(this.stop(),this.start()),this}}const e={default:(...[t,e,s,i])=>s*(t/=i)*t*t+e,linear:(...[t,e,s,i])=>e+s*(t/=i),linearSoft(...[t,e,s,i]){const r=(t/=i)*t,o=r*t;return e+s*(4*o*r+-10*r*r+8*o+-2*r+t)},linearSoftOut(...[t,e,s,i]){const r=(t/=i)*t,o=r*t;return e+s*(-3*o*r+11*r*r+-14*o+6*r+t)},linearSoftIn(...[t,e,s,i]){const r=(t/=i)*t,o=r*t;return e+s*(-1*o*r+2*o)},easeInQuad:(...[t,e,s,i])=>s*(t/=i)*t+e,easeOutQuad:(...[t,e,s,i])=>-s*(t/=i)*(t-2)+e,easeInOutQuad:(...[t,e,s,i])=>(t/=i/2)<1?s/2*t*t+e:-s/2*(--t*(t-2)-1)+e,easeInCubic:(...[t,e,s,i])=>s*(t/=i)*t*t+e,easeOutCubic:(...[t,e,s,i])=>s*((t=t/i-1)*t*t+1)+e,easeInOutCubic:(...[t,e,s,i])=>(t/=i/2)<1?s/2*t*t*t+e:s/2*((t-=2)*t*t+2)+e,easeInQuart:(...[t,e,s,i])=>s*(t/=i)*t*t*t+e,easeOutQuart:(...[t,e,s,i])=>-s*((t=t/i-1)*t*t*t-1)+e,easeInOutQuart:(...[t,e,s,i])=>(t/=i/2)<1?s/2*t*t*t*t+e:-s/2*((t-=2)*t*t*t-2)+e,easeInQuint:(...[t,e,s,i])=>s*(t/=i)*t*t*t*t+e,easeOutQuint:(...[t,e,s,i])=>s*((t=t/i-1)*t*t*t*t+1)+e,easeInOutQuint:(...[t,e,s,i])=>(t/=i/2)<1?s/2*t*t*t*t*t+e:s/2*((t-=2)*t*t*t*t+2)+e,easeInSine:(...[t,e,s,i])=>-s*Math.cos(t/i*(Math.PI/2))+s+e,easeOutSine:(...[t,e,s,i])=>s*Math.sin(t/i*(Math.PI/2))+e,easeInOutSine:(...[t,e,s,i])=>-s/2*(Math.cos(Math.PI*t/i)-1)+e,easeInExpo:(...[t,e,s,i])=>0===t?e:s*Math.pow(2,10*(t/i-1))+e,easeOutExpo:(...[t,e,s,i])=>t===i?e+s:s*(1-Math.pow(2,-10*t/i))+e,easeInOutExpo:(...[t,e,s,i])=>0===t?e:t===i?e+s:(t/=i/2)<1?s/2*Math.pow(2,10*(t-1))+e:s/2*(2-Math.pow(2,-10*--t))+e,easeInCirc:(...[t,e,s,i])=>-s*(Math.sqrt(1-(t/=i)*t)-1)+e,easeOutCirc:(...[t,e,s,i])=>s*Math.sqrt(1-(t=t/i-1)*t)+e,easeInOutCirc:(...[t,e,s,i])=>(t/=i/2)<1?-s/2*(Math.sqrt(1-t*t)-1)+e:s/2*(Math.sqrt(1-(t-=2)*t)+1)+e,easeInBack(...[t,e,s,i]){const r=(t/=i)*t,o=r*t;return e+s*(15.26*o*r+-43.56*r*r+39.8*o+-10.6*r+.1*t)},easeOutBack(...[t,e,s,i]){const r=(t/=i)*t,o=r*t;return e+s*(11.24*o*r+-23.96*r*r+12.24*o+1.44*r+.04*t)},easeInOutBack(...[t,e,s,i]){const r=(t/=i)*t,o=r*t;return e+s*(22.92*o*r+-57.78*r*r+45*o+-9.28*r+.14*t)},easeOutBounce:(...[t,e,s,i])=>(t/=i)<1/2.75?s*(7.5625*t*t)+e:t<2/2.75?s*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?s*(7.5625*(t-=2.25/2.75)*t+.9375)+e:s*(7.5625*(t-=2.625/2.75)*t+.984375)+e};class NdMorphine{constructor(t,e,s,i,r,o){this.duration=1,this.repeat=0,this.repeatCount=1,this.start_time=0,this.progress=0,this._paused=!1,this._done=!1,this.start=t,this.end=e,this.duration=s>0?s:0,this.callback=i,this.easing=r,this.repeat=o,this.start_time=(new Date).getTime()}get done(){return this._done}stop(){this._done=!0}pause(){this._paused=!0}get paused(){return this._paused}tick(t){this._done||(this._paused?this.start_time=(new Date).getTime()-this.duration*this.progress:(this.progress=(t-this.start_time)/this.duration,this.progress>1&&(this.progress=1),1==this.progress&&(this.repeat&&this.repeatCount>0?(this.repeatCount!==1/0&&this.repeatCount--,this.start_time=(new Date).getTime()):this._done=!0),this.callback(this.progress,this.easing((t-this.start_time)/1e3,this.start,this.end-this.start,this.duration/1e3),this.start_time)))}}class NdAnimation extends NdEmitter{constructor(t,e,s=1e3,i="default",r=!1){super(),this.stack=[],this.target=null,this._queue=!1,this._active=!1,this._done=!1,this.stack=e,this.easing=i,this.duration=s,this._queue=r,this.element=t}get queue(){return this._queue}get active(){return this._active}get done(){return this._done}indexOf(t){return this.stack.findIndex((e=>e.name===t))}get props(){return this.stack.map((t=>t.name))}stop(t){if(t){const e=this.indexOf(t.toString());e>-1&&this.stack.splice(e,1)}else this.stack=[]}start(){this.active||(this._active=!0,this.stack=this.stack.filter((t=>t.ani.init(t.value)&&!1!==t.ani.start&&!1!==t.ani.end)),this.morphine=new NdMorphine(0,1,this.duration,((t,e)=>{0===this.stack.length?(this.cast("complete",new NdEvent(this.element,{ease:1,progress:1})),this.morphine.stop()):(this.stack.forEach((s=>{s.result=this.tick(e,t,s.ani.start,s.ani.end),this.element.style(s.name,s.result)})),this.cast("step",new NdEvent(this.element,{ease:e,progress:t})),1===t&&this.cast("complete",new NdEvent(this.element,{progress:1,ease:1})))}),e[this.easing],0))}tick(t,e,s,i){for(;"function"==typeof s;)s=s();for(;"function"==typeof i;)i=i();let r=i;if(typeof s!=typeof i)throw new Error("start value and end value are of different types");if("number"==typeof s&&(r=e>=1?i:s+(i-s)*t),"string"==typeof s){const e=parseFloat(s);r=e+(parseFloat(i)-e)*t+"%"}if("object"==typeof s)if(Array.isArray(s)&&Array.isArray(i)){if(s.length!=i.length)throw new Error("Start and end values are of different lengths");r=s.map(((s,r)=>this.tick(t,e,s,i[r])))}else r=Object.fromEntries(Object.keys(s).map((r=>[r,this.tick(t,e,s[r],i[r])])));return r}}class NdMatrix{constructor(t){this._value=[1,0,0,1,0,0],this._inversion=[1,0,0,1,0,0],this._globalInversion=null,this.history=[],this._element=t}invert(){for(let t=this.history.length-1;t>=0;t--){if(void 0!==this.history[t].rotate){const e=Math.sin(-this.history[t].rotate),s=Math.cos(-this.history[t].rotate);NdMatrix.multiply(this._inversion,[s,e,-e,s,0,0])}this.history[t].translate&&NdMatrix.multiply(this._inversion,[1,0,0,1,-this.history[t].translate[0],-this.history[t].translate[1]]),this.history[t].skew&&NdMatrix.multiply(this._inversion,[1,Math.tan(-this.history[t].skew[1]),Math.tan(-this.history[t].skew[0]),1,0,0]),this.history[t].scale&&NdMatrix.multiply(this._inversion,[1/this.history[t].scale[0],0,0,1/this.history[t].scale[1],0,0])}}rotate(t){const e=Math.sin(t),s=Math.cos(t),i=[s,e,-e,s,0,0];return NdMatrix.multiply(this._value,i),this.history.push({rotate:t}),this}translate(t,e){const s=[1,0,0,1,t,e];return 0===t&&0===e||(NdMatrix.multiply(this._value,s),this.history.push({translate:[t,e]})),this}scale(...[t,e]){if(1!==t||1!==e){const s=[t,0,0,e,0,0];NdMatrix.multiply(this._value,s),this.history.push({scale:[t,e]})}return this}skew(...[t,e]){if(0!==t||0!==e){const s=Math.tan(t),i=[1,Math.tan(e),s,1,0,0];NdMatrix.multiply(this._value,i),this.history.push({skew:[t,e]})}return this}globalInversion(){if(this._globalInversion)return this._globalInversion;const t=this._element.parent;return this._globalInversion=[...this._inversion],t&&NdMatrix.multiply(this._globalInversion,t.matrix.globalInversion()),[...this._globalInversion]}traceCursorToLocalSpace(t){return NdMatrix.applyMatrixToPoint(this.globalInversion(),t)}reset(){this._value=[1,0,0,1,0,0],this._inversion=[1,0,0,1,0,0],this._globalInversion=null,this.history=[]}purgeInversion(){this._globalInversion=null,this._element instanceof Group&&this._element.forEachChild((t=>{t.matrix.purgeInversion()}))}extract(){return this._value}extractInversion(){return[...this._inversion]}static multiply(t,e){const s=t[0]*e[0]+t[2]*e[1],i=t[1]*e[0]+t[3]*e[1],r=t[0]*e[2]+t[2]*e[3],o=t[1]*e[2]+t[3]*e[3],n=t[0]*e[4]+t[2]*e[5]+t[4],a=t[1]*e[4]+t[3]*e[5]+t[5];t[0]=s,t[1]=i,t[2]=r,t[3]=o,t[4]=n,t[5]=a}static applyMatrixToPoint(t,e){const s=e[0]*t[0]+e[1]*t[2]+t[4],i=e[0]*t[1]+e[1]*t[3]+t[5];return e[0]=s,e[1]=i,e}}class NdNodeMatrix{constructor(t,e,s){const i=new NdMatrix(t),{getter:r,purge:o}=s.register("transformMatrix",(()=>{i.reset();const s=e.position.protectedValue,r=t.boundingRect,o=e.origin.protectedValue.map(((t,e)=>r.size[e]*t)),n=e.skew.protectedValue,a=e.rotate.protectedValue,h=e.scale.protectedValue,d=e.translate.protectedValue,l=t instanceof Group?[s[0]+d[0],s[1]+d[1]]:[r.position[0]+d[0],r.position[1]+d[1]];return i.translate(o[0],o[1]),0===l[0]&&0===l[1]||i.translate(l[0],l[1]),a&&i.rotate(a),0===n[0]&&0===n[1]||i.skew(n[0],n[1]),0===h[0]&&0===h[1]||i.scale(h[0],h[1]),i.translate(-o[0],-o[1]),i.invert(),i}));this.purge=o,this.getter=r}get value(){return this.getter()}}class NdCache{constructor(){this.values={}}register(t,e){return this.values[t]||(this.values[t]={value:void 0,getter:e,relevant:!1}),{purge:()=>{this.values[t].relevant=!1},getter:()=>(this.values[t].relevant||(this.values[t].value=this.values[t].getter(),this.values[t].relevant=!0),this.values[t].value)}}}class NdCompiler{constructor(t,e,s){this.conditions=[],this.drawerPipeBefore={},this.drawerPipeAfter={},this.beforePipeSize=0,this.afterPipeSize=0,this.isRenderAllowed=(...t)=>{let e=!0;for(let s=0;s<this.conditions.length&&(e=this.conditions[s](...t));s++);return e},this.render=(t,e,s)=>{if(this.isRenderAllowed(t,e,s)){let i=t;if(t.save(),this.beforePipeSize)for(let r in this.drawerPipeBefore){if(this.drawerPipeBefore.hasOwnProperty(r))for(let o=0;o<this.drawerPipeBefore[r].length;o++){t.save();const n=this.drawerPipeBefore[r][o](i,e,s);if(t.restore(),i=n||!1,!i)break}if(!i)break}if(i&&(i.globalCompositeOperation=this.props.blending.protectedValue,i.globalAlpha*=this.props.opacity.protectedValue),i===t?this.resolver(t,e,s):(this.resolver(t,e,s),i&&t.drawImage(i.canvas,0,0,t.canvas.width,t.canvas.height)),i=t,this.afterPipeSize)for(let t in this.drawerPipeAfter){if(this.drawerPipeAfter.hasOwnProperty(t))for(let r=0;r<this.drawerPipeAfter[t].length;r++){i.save();const o=this.drawerPipeAfter[t][r](i,e,s);if(i.restore(),i=o||!1,!i)break}if(!i)break}t.restore()}return t},this.element=t,this.resolver=s,this.props=e}filter(t){this.conditions.push(t)}pipe(t,e){return e||(e=0),e>100?(this.drawerPipeAfter[e]||(this.drawerPipeAfter[e]=[]),this.drawerPipeAfter[e].push(t),this.afterPipeSize++):(this.drawerPipeBefore[e]||(this.drawerPipeBefore[e]=[]),this.drawerPipeBefore[e].push(t),this.beforePipeSize++),this.element}unpipe(t){for(let e in this.drawerPipeBefore)this.drawerPipeBefore.hasOwnProperty(e)&&(this.drawerPipeBefore[e]=this.drawerPipeBefore[e].filter((e=>e!==t||(this.beforePipeSize--,!1))));for(let e in this.drawerPipeAfter)this.drawerPipeAfter.hasOwnProperty(e)&&(this.drawerPipeAfter[e]=this.drawerPipeAfter[e].filter((e=>e!==t||(this.afterPipeSize--,!1))));return this.element}}class Node extends NdEmitter{constructor(t,e,s){super(),this.Cache=new NdCache,this.modelEmitter=new EventEmitter,this.order=[],this.animations=[],this.tickElementAnimations=(t,e)=>{const s=e.getTime();this.animations.forEach((t=>{t.morphine&&t.morphine.tick(s)}))},this.data=e,this.Matrix=new NdNodeMatrix(this,e,this.Cache),this.Compiler=new NdCompiler(this,e,((...t)=>this.render(...t))),this.TreeConnector=s.Tree.register(t,this,this.Compiler.render),this.Mouse=s.Mouse.register(this,((...t)=>this.cast(...t)),((...t)=>this.test(...t))),this.pipe=this.Compiler.pipe.bind(this.Compiler),this.unpipe=this.Compiler.unpipe.bind(this.Compiler),this.condition=this.Compiler.filter.bind(this.Compiler),this.order=Object.keys(e).sort(((t,s)=>e[t].ordering-e[s].ordering)),s.Canvas.queue(-2,this.tickElementAnimations),this.once("destroy",(()=>{this.modelEmitter.removeAllListeners(),this.reset(),s.Canvas.unQueue(this.tickElementAnimations)})),this.watch(["position","rotate","origin","skew","translate","scale"],(()=>{this.Matrix.purge(),this.TreeConnector.forEachLayer((t=>t.matrix.purgeInversion()))})),this.watch(["position","origin","translate"],(()=>this.purgeBox()))}checkQueue(){this.animations=this.animations.filter((t=>{if(t.active)return!t.done;if(t.queue)return this.findCompetitors(t).length||t.start(),!0;{const e=this.findCompetitors(t);return e.length&&e.forEach((e=>{t.props.forEach((t=>e.stop(t)))})),t.start(),!0}}))}findCompetitors(t){let e=[];for(let s=0;s<this.animations.length;s++)if(this.animations[s]!==t&&this.animations[s].active&&!this.animations[s].done)for(let i=0;i<t.props.length;i++)this.animations[s].indexOf(t.props[i])>-1&&e.push(this.animations[s]);return e}animate(e,s,i){const r=Object.keys(e).sort(((t,e)=>this.data[t].ordering-this.data[e].ordering)).map((t=>({value:e[t],name:t,ani:this.data[t]})));if("number"==typeof s||void 0===s){const t=new NdAnimation(this,r,s,i);t.on("complete",(()=>this.checkQueue)),this.animations.push(t)}else if("object"==typeof s){const t=s,e=new NdAnimation(this,r,null==t?void 0:t.duration,null==t?void 0:t.easing,null==t?void 0:t.queue);t.complete&&e.on("complete",t.complete),t.step&&e.on("step",t.step),e.on("complete",(()=>this.checkQueue))}else t.negative("Invalid animation config",this);return this.checkQueue(),this}stop(t){return this.animations.forEach((e=>e.stop(t))),this}style(t,e){return"object"!=typeof t?void 0!==typeof e?(this.data[t].set(e,this),this.modelEmitter.emit(t),this):this.data[t].publicValue:(Object.keys(t).sort(((t,e)=>this.order.indexOf(t)-this.order.indexOf(e))).forEach((e=>{void 0!==t[e]&&(this.data[e].set(t[e],this),this.modelEmitter.emit(e))})),this)}watch(t,e){return t instanceof Array?t.forEach((t=>this.modelEmitter.on(t,e))):this.modelEmitter.on(t,e),this}unwatch(t,e){return t instanceof Array?t.forEach((t=>this.modelEmitter.off(t,e))):this.modelEmitter.off(t,e),this}get id(){return this.TreeConnector.id}set id(t){this.TreeConnector.tree.rename(this.id,t)}get z(){return this.TreeConnector.z}set z(t){this.TreeConnector.tree.z(this,t)}get box(){return this.Box.value.container}get boundingRect(){return this.Box.value.sprite}get parent(){return this.TreeConnector.parent}get matrix(){return this.Matrix.value}get width(){return this.Box.value.container.size[0]}get height(){return this.Box.value.container.size[1]}get left(){return this.Box.value.container.position[0]}get top(){return this.Box.value.container.position[1]}get animated(){return!!this.animations.length}purgeBox(){return this.Box.purge(),this}static transformContext(t,e){e.transform.apply(e,t.matrix.extract())}static drawLinearPathBg(t,e,s){t.path.protectedValue.length>1&&t.bg.protectedValue.length&&(e.save(),Node.clipBezierPath(t.path.protectedValue,e),Node.drawBg(t,e,s))}static drawBg(t,e,s){t.bg.protectedValue.length&&t.bg.protectedValue.forEach(((i,r)=>{if(i.loaded){e.save();const s=t.backgroundSizeNumeric.protectedValue[r][0],o=t.backgroundSizeNumeric.protectedValue[r][1],n=t.backgroundPositionNumeric.protectedValue[r][0],a=t.backgroundPositionNumeric.protectedValue[r][1];e.translate(n,a),e.drawImage(i.export(),0,0,s,o),e.restore()}else i.once("load",(()=>{s.update("bg")}))}))}static drawPathBg(t,e,s){t.interpolation?Node.drawBezierPathBg(t,e,s):Node.drawLinearPathBg(t,e,s)}static drawBezierPathBg(t,e,s){e.save(),Node.clipBezierPath(t.path.protectedValue,e,!0),Node.drawBg(t,e,s),e.restore()}static clipBezierPath(t,e,s=!1,i=!0){t.length>1&&(Node.registerPath(t,e,s,i),e.clip())}static registerPath(t,e,s=!1,i=!0){t.length>1&&(e.beginPath(),e.moveTo(t[0][0],t[0][1]),s?t.forEach((t=>{t[0]===t[4]&&t[1]===t[5]&&t[2]===t[6]&&t[3]===t[7]?e.lineTo(t[2],t[3]):e.bezierCurveTo(t[4],t[5],t[6],t[7],t[2],t[3])})):t.forEach((t=>{e.lineTo(t[2],t[3])})),i&&e.closePath())}static drawFill(t,e){e.save(),e.lineCap=t.cap.protectedValue,Node.registerPath(t.path.protectedValue,e,!!t.interpolation,!0),e.fillStyle=t.fill.protectedValue,e.fill(),e.restore()}static drawStroke(t,e){t.path.protectedValue.forEach(((s,i)=>{const[r,o,n,a,h,d,l,c]=s;t.strokeWidth.protectedValue[i]<.1?e.moveTo(n,a):(e.beginPath(),e.moveTo(r,o),e.strokeStyle=t.strokeColor.protectedValue[i],e.lineWidth=t.strokeWidth.protectedValue[i],e.setLineDash(t.strokeStyle.protectedValue[i]),t.interpolation.protectedValue?e.bezierCurveTo(h,d,l,c,n,a):e.lineTo(n,a),e.stroke())}))}static applyBoxAnchor(t,e,s,i){"center"===i.anchor.protectedValue[0]&&(t[0]-=e/2),"right"===i.anchor.protectedValue[0]&&(t[0]-=e),"middle"===i.anchor.protectedValue[1]&&(t[1]-=s/2),"bottom"==i.anchor.protectedValue[1]&&(t[1]-=s)}}class NdNodeStylesModel{static degToRad(t){return t>360&&(t-=t*Math.floor(t/360)),t<360&&(t+=t*Math.floor(t/360)),t*Math.PI/180}static radToDeg(t){return t*(180/Math.PI)}static normalizeColor(t){return"string"==typeof t&&(t=NdNodeStylesModel.colorToArray(t)),t.map(((t,e)=>e<3?(t=Math.round(t))>255?255:t<0?0:t:(t<0&&(t=0),t>1&&(t=1),t.toFixed(2)))),t}static colorToArray(t){const e=t.match(/^rgba\(([\d.]+),([\d.]+),([\d.]+),([\d.]+)\)$/);return e?NdNodeStylesModel.normalizeColor([parseInt(e[1]),parseInt(e[2]),parseInt(e[3]),parseFloat(e[4])]):[0,0,0,1]}static arrayToColor(t){return`rgba(${(t=NdNodeStylesModel.normalizeColor(t))[0]},${t[1]},${t[2]},${t[3]})`}static getControlPoints(...[t,e,s,i,r,o,n]){let a=Math.sqrt(Math.pow(s-t,2)+Math.pow(i-e,2)),h=Math.sqrt(Math.pow(r-s,2)+Math.pow(o-i,2)),d=n*a/(a+h),l=n*h/(a+h);return[s-d*(r-t),i-d*(o-e),s+l*(r-t),i+l*(o-e)]}static convertComplexPath(t){const e=[];for(let s=0;s<t.length;s++)e.push([t[s][0],t[s][1]]);return e}static interpolate(t,e,s){t.forEach(((i,r)=>{let o,n,a=[i[0],i[1]],h=[i[2],i[3]];o=0===r?s?[t[t.length-1][0],t[t.length-1][1]]:[a[0]-(h[0]-a[0]),a[1]-(h[1]-a[0])]:[t[r-1][0],t[r-1][1]],n=NdNodeStylesModel.getControlPoints(o[0],o[1],a[0],a[1],h[0],h[1],e),0==r?(t[r][4]=n[2],t[r][5]=n[3]):(t[r-1][6]=n[0],t[r-1][7]=n[1],i[4]=n[2],i[5]=n[3]),r==t.length-1&&(o=[t[r][0],t[r][1]],a=[t[r][2],t[r][3]],h=s?[t[0][2],t[0][3]]:[a[0]+(o[0]-a[0]),a[1]+(o[0]-a[0])],n=NdNodeStylesModel.getControlPoints(o[0],o[1],a[0],a[1],h[0],h[1],e),i[6]=n[0],i[7]=n[1])}))}static comparePaths(t,e){if(t.length!==e.length)return!1;let s=!0;for(let i=0;i<t.length;i++)for(let r=0;r<t[i].length;r++)if(t[i][r]!==e[i][r]){s=!1;break}return s}static extractPercentFraction(t){return parseFloat(t)/100}static syncArray(t,e,s){if(e.length>t.length&&e.splice(0,t.length),e.length<t.length)for(let i=0;i<t.length-e.length;i++)e.push(s.map(((t,e)=>"function"==typeof t?t(i,e):t)))}}NdNodeStylesModel.convertSimplePath=function(t,e=!1){if(t.length<2)throw new Error("Invalid path length");const s=[];return t.forEach(((e,i)=>{const r=e[0],o=e[1],n=[0,0,0,0,0,0,0,0];i<t.length-1&&(n[0]=r,n[1]=o),0!==i&&(s[i-1][2]=r,s[i-1][3]=o,s[i-1][4]=s[i-1][0],s[i-1][5]=s[i-1][1],s[i-1][6]=r,s[i-1][7]=o),s.push(n)})),s.pop(),e&&s[s.length-1][2]!==s[0][0]&&s[s.length-1][3]!==s[0][1]&&s.push([s[s.length-1][2],s[s.length-1][3],s[0][0],s[0][1],s[s.length-1][2],s[s.length-1][3],s[0][0],s[0][1]]),s};class NdStylesProperty{constructor(t,e,s,i){this.ordering=0,this.set=()=>this._value,this._value=e,this.default=e,this.ordering=t,this.value=s(this._value),this.get=()=>(this.value=s(this._value),this.value),i&&(this.set=(t,e)=>(this._value=i(t,e),this.value=s(this._value),this._value))}get protectedValue(){return this._value}get publicValue(){return this.get()}sync(t,e){if(this._value instanceof Array&&(this._value.length>t.length&&this._value.splice(0,t.length),this._value.length<t.length)){const s=t.length-this._value.length;for(let t=0;t<s;t++)"function"==typeof e?this._value.push(e(t)):e instanceof Array?this._value.push(e.map(((e,s)=>"function"==typeof e?e(t,s):e))):this._value.push(e)}}}class NdNodeStylePropertyAnimated extends NdStylesProperty{constructor(t,e,s,i,r,o){super(t,e,s,i),this._start=!1,this._end=!1,this.starter=r,this.applier=o}get start(){return this._start}set start(t){this._start=t}get end(){return this._end}setStartValue(t){this.start=t}setEndValue(t){this._end=t}init(t){return this.starter(this.get(),t,this.setStartValue.bind(this),this.setEndValue.bind(this)),this}apply(t,e,s){return s=this.applier(s,t,e),this.set(s,t),this.publicValue}}class NdModBase extends NdNodeStylesModel{constructor(){super(...arguments),this.position=new NdNodeStylePropertyAnimated(2,[0,0],(t=>[...t]),(t=>t instanceof Array?[...t]:[t,t]),((t,e,s,i)=>{s(t),i("number"==typeof e?[e,e]:[e[0],e[1]])}),(t=>[t[0],t[1]])),this.scale=new NdNodeStylePropertyAnimated(0,[1,1],(t=>[...t]),(t=>t instanceof Array?[...t]:[t,t]),((t,e,s,i)=>{s(t),"number"==typeof e?(e<0&&(e=0),i([e,e])):(e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),i([e[0],e[1]]))}),(t=>[t[0],t[1]])),this.rotate=new NdNodeStylePropertyAnimated(0,0,(t=>NdNodeStylesModel.radToDeg(t)),(t=>NdNodeStylesModel.degToRad(t)),((t,e,s,i)=>{s(t),i(e)}),(t=>t)),this.translate=new NdNodeStylePropertyAnimated(0,[0,0],(t=>[...t]),(t=>t instanceof Array?[...t]:[t,t]),((t,e,s,i)=>{s(t),i("number"==typeof e?[e,e]:[e[0],e[1]])}),(t=>[t[0],t[1]])),this.skew=new NdNodeStylePropertyAnimated(0,[0,0],(t=>[NdNodeStylesModel.radToDeg(t[0]),NdNodeStylesModel.radToDeg(t[1])]),(t=>t instanceof Array?[NdNodeStylesModel.degToRad(t[0]),NdNodeStylesModel.degToRad(t[1])]:[NdNodeStylesModel.degToRad(t),NdNodeStylesModel.degToRad(t)]),((t,e,s,i)=>{"number"==typeof e&&(e=[e,e]),s(t),i([e[0],e[1]])}),(t=>t)),this.opacity=new NdNodeStylePropertyAnimated(0,1,(t=>t),(t=>t>1?1:t<0?0:t),((t,e,s,i)=>{e<0&&(e=0),e>1&&(e=1),s(t),i(e)}),(t=>(t<0&&(t=0),t>1&&(t=1),t))),this.origin=new NdNodeStylePropertyAnimated(0,[.5,.5],(t=>[...t]),(t=>t instanceof Array?[...t]:[t,t]),((t,e,s,i)=>{s(t),i("number"==typeof e?[e,e]:[e[0],e[1]])}),(t=>[t[0],t[1]])),this.cap=new NdStylesProperty(2,"butt",(t=>t),(t=>t)),this.blending=new NdStylesProperty(0,"source-over",(t=>t),(t=>t))}}class NdBox{constructor(){this.container={size:[0,0],position:[0,0]},this.sprite={margin:[0,0,0,0],position:[0,0],size:[0,0]}}value(t,e,s,i,r,o,n,a){this.container.size[0]=s,this.container.size[1]=i,this.container.position[0]=t,this.container.position[1]=e,this.sprite.margin[0]=r,this.sprite.margin[1]=o,this.sprite.margin[2]=n,this.sprite.margin[3]=a,this.sprite.size[0]=a+s+o,this.sprite.size[1]=r+i+n,this.sprite.position[0]=t-a,this.sprite.position[1]=e-r}}class NdNodeBox{constructor(t,e,s){this.box=new NdBox;const{getter:i,purge:r}=e.register("box",(()=>(this.box.value.apply(this.box,s(t)),this.box)));this.getter=i,this.purge=()=>{r(),t.parent&&t.parent.purgeBox()}}get value(){return this.getter()}}class Group extends Node{constructor(t,e){super(t,new NdModBase,e),this.Box=new NdNodeBox(this,this.Cache,(()=>{let t=1/0,e=1/0,s=-1/0,i=-1/0;return this.TreeConnector.forEachLayer((r=>{const o=r.box;t=Math.min(t,o.position[0]),e=Math.min(e,o.position[1]),i=Math.max(i,o.position[0]+o.size[0]),s=Math.max(s,o.position[1]+o.size[1])})),isFinite(t)||(t=0),isFinite(i)||(i=0),isFinite(e)||(e=0),isFinite(s)||(s=0),[t+this.data.position.get()[0],e+this.data.position.get()[1],i-t,s-e,0,0,0,0]})),this.export=()=>{},this.render=(t,s,i)=>(Node.transformContext(this,t),this.TreeConnector.forEachLayer((r=>{e.Tree.compile(r,t,s,i)})),t),this.test=t=>{let s=!1;return this.TreeConnector.forEachLayer((i=>{e.Mouse.checkNode(i,t)&&(s=i)})),s}}forEachChild(t){this.TreeConnector.forEachLayer(t)}append(t){return t instanceof Array?t.forEach((t=>{this.TreeConnector.tree.append(this,t.id)})):this.TreeConnector.tree.append(this,t.id),this}}class NdNodeConnector{constructor(t,e){this._parent=null,this._layers={},this._layer=0,this._identifier=t,this.tree=e}get z(){return this._layer}set z(t){this._layer=t}get parent(){return this._parent}set parent(t){this._parent=t}set id(t){this._identifier=t}get id(){return this._identifier}forEachLayer(t){for(let e in this._layers)this._layers[e].forEach(((s,i)=>{t(s,i,parseInt(e))}))}zChild(t,e,s){this._layers[e]||(this._layers[e]=[]),s?this._layers[e].unshift(t):this._layers[e].push(t)}removeChild(t,e){this._layers[e]=this._layers[e].filter((e=>e!==t)),this._layers[e].length||delete this._layers[e]}}class Nodes{constructor(t){this._root={},this.clear=!1,this.ids=new Set,this.elements={},this.drawNodeTree=(t,e,s)=>{this._root.element&&t&&(this.clear&&t.clearRect(0,0,t.canvas.offsetWidth,t.canvas.offsetHeight),this.compile(this._root.element,t,e,s))},t.queue(0,this.drawNodeTree)}treeViolation(t,e){return t===e||!!t.parent&&this.treeViolation(t.parent,t)}register(e,s,i){if(this._root.element)this.ids.has(e)?t.warn(`Node ${e} already exists. Ignored.`):(this.ids.add(e),this.elements[e]={element:s,render:i,connector:new NdNodeConnector(e,this)},this._root.element?this.append(this._root.element,e):t.error("Application root lost. Not root group node to append to"));else{if(!(s instanceof Group))throw new Error("Root element must be a Group instance");{const r={element:s,render:i,connector:new NdNodeConnector(e,this)};this._root=r,this.ids.add(r.connector.id),this.elements[e]=r,t.positive(`Element ${e} registered`)}}return this.elements[e].connector}unregister(e){this.ids.has(e.id)&&(t.positive(`Node ${e.id} removed`),this.unmount(e),delete this.elements[e.id],this.ids.delete(e.id))}unmount(e){if(this.elements[e.id].connector.parent){const t=this.elements[e.id].connector.parent;t&&this.elements[t.id].connector.removeChild(e,e.z)}this.elements[e.id].connector.parent=null,e==this._root.element&&(this._root={}),t.positive(`Node ${e.id} unmounted`)}compile(e,s,i,r){this.elements[e.id]&&this.elements[e.id].element===e?(s.save(),this.elements[e.id].render(s,i,r),s.restore()):t.error(`Attempt to render unmounted node ${e.id}`)}rename(e,s){this.ids.has(e)&&(this.ids.has(s)||(this.elements[s]=this.elements[e],this.ids.add(s),this.ids.delete(e),this.elements[s].connector.id=s,delete this.elements[e]),t.warn(`Can not rename node ${e}. Another node with id ${s} already exists`)),t.warn(`Attempt to rename non existing node ${e}`)}z(t,e){if(this.ids.has(t.id)){if(this.elements[t.id]){const s=this.elements[t.id].connector.parent;s&&this.elements[s.id].connector.zChild(t,e)}this.elements[t.id].connector.z=e}}get(t){return this.elements[t].element}get root(){return this._root.element}append(e,s,i=!1){if(this.ids.has(e.id)&&this.ids.has(s))if(this.treeViolation(e,this.elements[s].element))t.warn(`Node tree violation. Appending node ${s} to itself or it's child. `);else{if(this.elements[s].connector.parent){const t=this.elements[s].connector.parent;this.elements[t.id].connector.removeChild(this.elements[s].element,this.elements[s].connector.z)}this.elements[e.id].connector.zChild(this.elements[s].element,this.elements[s].connector.z,i),this.elements[s].connector.parent=e}else t.warn(`Manipulating non registered node ${s} or ${e.id}.`)}}class NdNodeMouseDispatcher{constructor(t,e,s){this._disabled=!1,this.test=e,this.transform=s,this.emit=t}cast(t,e){return!this.disabled&&this.emit(t,e)}get disabled(){return this._disabled}disable(){this._disabled=!0}enable(){this._disabled=!1}}class Mouse{constructor(t,e,s){this.elements={},this.currentHover=!1,this.currentFocus=!1,this.mouseDown=!1,this.dragging=!1,this.eventStack=[],this.postponed=[],this.maxEventsPerQueue=5,this.maxEventsResolveTimePerFrame=e.frameTime,t.queue(this.resolveStack.bind(this)),t.on("mouseDown",(t=>{this.mouseDown=!0,this.currentHover&&this.resolveOrPostpone(this.currentHover,"mouseDown",new NdMouseEvent(this.currentHover,Object.assign({},t.data))),this.currentFocus&&this.currentFocus!==this.currentHover&&this.currentFocus!==this.currentHover&&(this.resolveOrPostpone(this.currentFocus,"blur",new NdMouseEvent(this.currentFocus,Object.assign({},t.data))),this.currentHover&&this.resolveOrPostpone(this.currentHover,"focus",new NdMouseEvent(this.currentHover,Object.assign({},t.data))),this.currentFocus=this.currentHover)})),t.on("mouseUp",(t=>{this.mouseDown=!1,this.dragging&&(this.currentFocus&&this.resolveOrPostpone(this.currentFocus,"dragEnd",new NdMouseEvent(this.currentFocus,Object.assign({},t.data))),this.dragging=!1),this.currentHover&&this.resolveOrPostpone(this.currentHover,"mouseUp",new NdMouseEvent(this.currentHover,Object.assign({},t.data)))})),t.on("mouseLeave",(t=>{this.dragging&&(this.currentFocus&&this.resolveOrPostpone(this.currentFocus,"dragEnd",new NdMouseEvent(this.currentFocus,Object.assign({},t.data))),this.dragging=!1),this.currentHover&&this.resolveOrPostpone(this.currentHover,"mouseLeave",new NdMouseEvent(this.currentHover,Object.assign({},t.data))),this.currentFocus=!1,this.currentHover=!1,this.mouseDown=!1})),t.on("mouseMove",(t=>{if(s.root)if(this.dragging)this.mouseDown&&this.currentFocus&&(this.dragging?this.resolveOrPostpone(this.currentFocus,"dragMove",new NdMouseEvent(this.currentFocus,Object.assign({},t.data))):(this.resolveOrPostpone(this.currentFocus,"dragStart",new NdMouseEvent(this.currentFocus,Object.assign({},t.data))),this.dragging=!0));else{const e=this.checkNode(s.root,t.data.cursor);e!==this.currentHover?(this.currentHover&&this.resolveOrPostpone(this.currentHover,"mouseLeave",new NdMouseEvent(this.currentHover,Object.assign({},t.data))),e&&this.resolveOrPostpone(e,"mouseEnter",new NdMouseEvent(e,Object.assign({},t.data))),this.currentHover=e):e&&this.resolveOrPostpone(e,"mouseMove",new NdMouseEvent(e,Object.assign({},t.data)))}}))}checkNode(t,e){if(this.elements[t.id])return this.elements[t.id].handler.test(e);throw new Error("Root swap")}resolveStack(){if(!this.eventStack.length)return;let t=0;const e=(new Date).getTime();let s=0;for(;this.eventStack[0]&&t<this.maxEventsPerQueue&&s<this.maxEventsResolveTimePerFrame;)this.eventStack.shift()(),t++,s=(new Date).getTime()-e;!this.eventStack.length&&this.postponed[0]&&this.eventStack.push(this.postponed.shift())}getStackCallback(t,e,s){return()=>{if(t){const i=this.elements[t.id].handler.cast(e,s);i&&i.propagate&&this.eventStack.push(this.getStackCallback(this.elements[t.id].element.parent,e,s))}}}resolveOrPostpone(t,e,s){this.eventStack.length?this.postponed.push(this.getStackCallback(t,e,s)):this.eventStack.push(this.getStackCallback(t,e,s))}register(t,e,s,i){if(this.elements[t.id])throw new Error(`Another ReflectElement with id ${t.id} has already been registered as mouse sensitive`);return this.elements[t.id]={element:t,handler:new NdNodeMouseDispatcher(e.bind(t),s,i)},t.on("destroy",(()=>delete this.elements[t.id])),this.elements[t.id].handler}}class NdCanvas{constructor(){this.size=[0,0],this.element=document.createElement("canvas");const t=this.element.getContext("2d");if(!t)throw new Error("Unable to establish Canvas rendering context!");this.context=t}get width(){return this.size[0]}set width(t){this.size[0]=t,this.element.setAttribute("width",t.toString())}get height(){return this.size[1]}set height(t){this.element.setAttribute("height",t.toString())}}class NdLayer{constructor(t){this.canvas=new NdCanvas,this.width=0,this.height=0,this.f=null,this.ready=!1,this.ordering=0,this.f=t.bind(this)}draw(t){this.ready||this.canvas.context&&(this.canvas.context.save(),this.canvas.context.clearRect(0,0,this.width,this.height),this.f&&this.f(this.canvas.context),this.canvas.context.restore(),this.ready=!0),t.drawImage(this.canvas.element,0,0)}get resolver(){return this.f}get size(){return[this.width,this.height]}set size([t,e]){t===this.width&&e===this.height||(this.canvas.width=t,this.canvas.height=e,this.ready=!1,this.width=t,this.height=e)}get order(){return this.ordering}set order(t){this.ordering=t}update(){this.ready=!1}}class NdModeAssembler extends NdEmitter{constructor(t){super(),this.output=new NdCanvas,this.pipe=[],this.w=0,this.h=0,this.resized=!1,this._ready=!1,this.layers=Object.fromEntries(t.map(((t,e)=>{const s=new NdLayer(t.resolver);return this.pipe.push({order:e,layer:s}),[t.name,s]}))),this.pipe.sort(((t,e)=>t.order-e.order)),this.update=t=>{t?this.layers[t]&&(this._ready=!1,this.layers[t].update()):Object.values(this.layers).forEach((t=>{t.update()}))}}get ready(){return this._ready}get size(){return[this.w,this.h]}get width(){return this.w}get height(){return this.h}set size(t){this.w=t[0],this.h=t[1],this.output.width=t[0],this.output.height=t[1],this.pipe.forEach((({layer:e})=>{e.size=t}))}export(t){return this.resized||(this.resized=!0,this.size[0]===t.boundingRect.size[0]&&this.size[1]===t.boundingRect.size[1]||(this.size=[t.boundingRect.size[0],t.boundingRect.size[1]],this.cast("resize",void 0))),this._ready||(this.output.context.clearRect(0,0,this.w,this.h),this.pipe.forEach((t=>{t.layer.draw(this.output.context)})),this._ready=!0,this.cast("update",void 0)),this.output.element}resize(){this.resized=!1,this._ready=!1}}class NdModFreeStroke extends NdNodeStylesModel{constructor(t=!1){super(),this.interpolation=new NdStylesProperty(0,0,(t=>t/.4*100),(t=>(t>100&&(t=100),t<0&&(t=0),t=t/100*.4))),this.strokeColor=new NdStylesProperty(2,[],(t=>t.map((t=>NdModFreeStroke.colorToArray(t)))),(t=>{let e=[];return"string"==typeof t&&(e=this.path.protectedValue.map((()=>t))),t instanceof Array&&("string"==typeof t[0]&&(e=this.path.protectedValue.map(((e,s)=>t[s]?t[s]:this.strokeColor.protectedValue[s]?this.strokeColor.protectedValue[s]:this.strokeColor.protectedValue[this.strokeColor.protectedValue.length-1]?this.strokeColor.protectedValue[this.strokeColor.protectedValue.length-1]:"rgba(0,0,0,1)"))),t[0]instanceof Array&&(e=this.path.protectedValue.map(((e,s)=>t[s]?NdModFreeStroke.arrayToColor(t[s]):this.strokeColor.protectedValue[s]?this.strokeColor.protectedValue[s]:this.strokeColor.protectedValue[this.strokeColor.protectedValue.length-1]?this.strokeColor.protectedValue[this.strokeColor.protectedValue.length-1]:"rgba(0,0,0,1)"))),"number"==typeof t[0]&&(e=this.path.protectedValue.map((()=>NdModFreeStroke.arrayToColor(t))))),e})),this.strokeWidth=new NdStylesProperty(2,[],(t=>[...t]),(t=>"number"==typeof t?this.path.protectedValue.map((()=>t)):this.path.protectedValue.map(((e,s)=>"number"==typeof t[s]?t[s]:"number"==typeof this.strokeWidth.protectedValue[s]?this.strokeWidth.protectedValue[s]:"number"==typeof this.strokeWidth.protectedValue[this.strokeWidth.protectedValue.length-1]?this.strokeWidth.protectedValue[this.strokeWidth.protectedValue.length-1]:1)))),this.strokeStyle=new NdStylesProperty(2,[],(t=>t.map((t=>[...t]))),(t=>(t[0],this.path.protectedValue.map((()=>[...t]))))),this.path=new NdStylesProperty(1,[],(t=>NdModFreeStroke.convertComplexPath(t)),(e=>{const s=NdModFreeStroke.convertSimplePath(e,t);return this.path.protectedValue.length!==s.length&&(this.strokeStyle.sync(s,[0]),this.strokeWidth.sync(s,1),this.strokeColor.sync(s,"rgba(0,0,0,1")),s}))}}class NdModAnchor extends NdNodeStylesModel{constructor(){super(...arguments),this.anchor=new NdStylesProperty(0,["left","top"],(t=>[...t]),(t=>[...t]))}}class NdNodeEmpiricalMouseChecker{constructor(){this.context=document.createElement("canvas").getContext("2d")}resize(t){t[0]!==this.context.canvas.width&&t[0]>0&&(this.context.canvas.width=t[0]),t[1]!==this.context.canvas.height&&t[1]>0&&(this.context.canvas.height=t[1])}redraw(t){this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.save(),Node.registerPath(t.path.protectedValue,this.context,!!t.interpolation,!!t.fill),t.fill?(this.context.fillStyle="rgba(0,0,0,1)",this.context.fill()):(this.context.strokeStyle="rgba(0,0,0,1)",this.context.stroke()),this.context.restore()}check(t){if(t[0]>0&&t[0]<this.context.canvas.width&&t[1]>0&&t[1]<this.context.canvas.height){const e=this.context.getImageData(t[0],t[1],1,1);if(console.log(e),e)return!!e.data[3]}return!1}}class Line extends Node{constructor(t,e){super(t,Object.assign(Object.assign(Object.assign({},new NdModFreeStroke),new NdModAnchor),new NdModBase),e),this.xShift=0,this.yShift=0,this.strokeFix=0,this.interpolationFix=0,this.interpolated=!1,this.mouseTester=new NdNodeEmpiricalMouseChecker,this.Assembler=new NdModeAssembler([{name:"stroke",resolver:t=>{t.translate(this.boundingRect.margin[3]-this.xShift,this.boundingRect.margin[0]-this.yShift),!this.interpolated&&this.data.interpolation.protectedValue>0&&NdNodeStylesModel.interpolate(this.data.path.protectedValue,this.data.interpolation.protectedValue,!1),Line.drawStroke(this.data,t)}}]),this.Box=new NdNodeBox(this,this.Cache,(()=>{let t=[...this.data.position.protectedValue],e=Math.max(this.strokeFix,this.interpolationFix),s=1/0,i=1/0,r=-1/0,o=-1/0;this.data.path.protectedValue.forEach((t=>{t[0]<s&&(s=t[0]),t[2]<s&&(s=t[2]),t[1]<i&&(i=t[1]),t[3]<i&&(i=t[3]),t[0]>r&&(r=t[0]),t[2]>r&&(r=t[2]),t[1]>o&&(o=t[1]),t[3]>o&&(o=t[3])})),s===1/0&&(s=0),i===1/0&&(i=0),r===-1/0&&(r=0),o===-1/0&&(r=0),this.xShift=s,this.yShift=i;let n=Math.abs(r-s),a=Math.abs(o-i);return Node.applyBoxAnchor(t,n,a,this.data),[t[0]+this.xShift,t[1]+this.yShift,n,a,e,e,e,e]})),this.export=()=>this.Assembler.export(this),this.render=t=>(Line.transformContext(this,t),t.drawImage(this.Assembler.export(this),0,0),t),this.test=t=>!!this.mouseTester.check(this.matrix.traceCursorToLocalSpace([...t]))&&this,this.watch("path",(()=>{this.purgeBox(),this.Matrix.purge(),this.Assembler.update("stroke"),this.Assembler.resize(),this.mouseTester.resize(this.boundingRect.size),this.mouseTester.redraw(this.data)})),this.watch("strokeWidth",(()=>{this.strokeFix=this.data.strokeWidth.protectedValue.reduce(((t,e)=>e>t?e:t),0),this.Assembler.update("stroke"),this.Assembler.resize(),this.mouseTester.resize(this.boundingRect.size),this.mouseTester.redraw(this.data)})),this.watch("interpolation",(()=>{this.interpolationFix=Math.round(20*this.data.interpolation.protectedValue),this.purgeBox(),this.Matrix.purge(),this.Assembler.resize(),this.Assembler.update("stroke"),this.mouseTester.resize(this.boundingRect.size),this.mouseTester.redraw(this.data)})),this.watch(["strokeStyle","strokeColor"],(()=>{this.Assembler.update("stroke")}))}}class NdResource extends NdEmitter{constructor(t,e){super(),this._status=-1,this.resolved=!1,this.src=t,this.resolve=e}get url(){return this.src}get loaded(){return this._status>0}get error(){return 0==this._status}load(){return this.resolved?this:(this.resolved=!0,this.resolve())}}class NdImage extends NdResource{constructor(t){super(t,(()=>(this.image.addEventListener("load",(()=>{this._status=1,this._size[0]=this.image.width,this._size[1]=this.image.height,this.cast("load",null)})),this.image.addEventListener("error",(()=>{this._status=0,this.cast("load",null),this.cast("error",null)})),this.image.src=t,this))),this.image=new Image,this._size=[0,0],this.export=()=>this.image}get width(){return this._size[0]}get height(){return this._size[1]}get size(){return[...this._size]}static isNdUrlStrRegex(t){return NdImage.NdUrlStrRegex.test(t)}}NdImage.NdUrlStrRegex=/(^.+\.(png)|(jpg)])$/;class NdModBg extends NdNodeStylesModel{constructor(){super(...arguments),this.fill=new NdNodeStylePropertyAnimated(0,"rgba(0,0,0,0)",(t=>t),(t=>t instanceof Array?NdNodeStylesModel.arrayToColor(t):t),((t,e,s,i)=>{s(NdNodeStylesModel.colorToArray(t)),i("string"==typeof e?NdNodeStylesModel.colorToArray(e):e)}),(t=>NdNodeStylesModel.normalizeColor(t))),this.bg=new NdStylesProperty(0,[],(t=>t.map((t=>t.url))),((t,e)=>{let s=[...this.bg.protectedValue];if("string"==typeof t){const i=new NdImage(t);i.once("load",(()=>{this.bg.protectedValue[0]===i&&NdModBg.updateSizeAndPosition(this,e.box.size,0,i)})),i.load(),s=[i]}else if(t instanceof Array)s="string"==typeof t[0]?t.map(((t,s)=>{const i=new NdImage(t);return i.loaded?NdModBg.updateSizeAndPosition(this,e.box.size,s,i):i.once("load",(()=>{NdModBg.updateSizeAndPosition(this,e.box.size,s,i)})),i})):[...t.map(((t,s)=>(t.loaded||t.once("load",(()=>{this.bg.protectedValue[s]===t&&NdModBg.updateSizeAndPosition(this,e.box.size,s,t)})),NdModBg.updateSizeAndPosition(this,e.box.size,s,t),t)))];else if(t instanceof NdImage)s=[t],t.loaded?NdModBg.updateSizeAndPosition(this,e.box.size,0,t):t.once("load",(()=>{NdModBg.updateSizeAndPosition(this,e.box.size,0,t)}));else for(let i in t)if(s[i]){if("string"==typeof t[i]){const r=new NdImage(t[i]);r.once("load",(()=>{NdModBg.updateSizeAndPosition(this,e.box.size,parseInt(i),r)})),s[i]=r}}else{const r=t[i];r.loaded?NdModBg.updateSizeAndPosition(this,e.box.size,parseInt(i),r):r.once("load",(()=>{NdModBg.updateSizeAndPosition(this,e.box.size,parseInt(i),r)})),s.push(t[i])}return this.backgroundPosition.sync(s,[0,0]),this.backgroundPositionNumeric.sync(s,[0,0]),this.backgroundSize.sync(s,["auto","auto"]),this.backgroundSizeNumeric.sync(s,[t=>NdModBg.readBgSize(e.box.size,this.bg.protectedValue[t],0,"auto"),t=>NdModBg.readBgSize(e.box.size,this.bg.protectedValue[t],1,"auto")]),s})),this.backgroundSize=new NdStylesProperty(1,[],(t=>t.map((t=>[t[0],t[1]]))),((t,e)=>{let s=this.backgroundSize.protectedValue;if("string"==typeof t||"number"==typeof t)t="number"==typeof t&&t<0?0:t,s=this.bg.protectedValue.map((()=>[t,t]));else if(t instanceof Array)if("string"==typeof t[0]||"number"==typeof t[0]){const e=t;s=this.bg.protectedValue.map((()=>[e[0],e[1]]))}else{const e=t;s=this.bg.protectedValue.map(((t,s)=>e[s]?[e[s][0],e[s][1]]:this.bg.protectedValue[s]?this.bg.protectedValue[s]:["auto","auto"]))}else for(let e in t)s[e]&&(s[e]=[t[e][0],t[e][1]]);return this.backgroundSizeNumeric.sync(s,[t=>NdModBg.readBgSize(e.box.size,this.bg.protectedValue[t],0,s[t][0]),t=>NdModBg.readBgSize(e.box.size,this.bg.protectedValue[t],1,s[t][1])]),this.backgroundPosition.sync(s,[0,0]),this.backgroundPositionNumeric.sync(s,[0,0]),s})),this.backgroundSizeNumeric=new NdStylesProperty(1,[],(t=>[...t])),this.backgroundPosition=new NdStylesProperty(2,[],(t=>t.map((t=>[t[0],t[1]]))),((t,e)=>{let s=this.backgroundPosition.protectedValue;if("string"==typeof t)/^[\d.]+%$/.test(t)&&(s=this.bg.protectedValue.map((()=>[t,t]))),/^(left|center|right)$/.test(t)&&(s=this.bg.protectedValue.map(((e,s)=>[t,this.backgroundPosition.protectedValue[s]?this.backgroundPosition.protectedValue[s][1]:0]))),/^(top|middle|bottom)$/.test(t)&&(s=this.bg.protectedValue.map(((e,s)=>[this.backgroundPosition.protectedValue[s]?this.backgroundPosition.protectedValue[s][0]:0,t])));else if("number"==typeof t)s=this.bg.protectedValue.map((()=>[t,t]));else if(t instanceof Array){if(t[0]instanceof Array){const e=t;s=this.bg.protectedValue.map(((t,s)=>e[s]?[e[s][0],e[s][1]]:this.backgroundPosition.protectedValue[s]?this.backgroundPosition.protectedValue[s]:[0,0]))}if("string"==typeof t[0]||"number"==typeof t[0]){const e=t;s=this.bg.protectedValue.map((()=>[e[0],e[1]]))}}else for(let e in t)s[e]&&(s[e]=[t[e][0],t[e][1]]);return this.backgroundPositionNumeric.sync(s,[t=>NdModBg.readBgPosition(e.box.size,this.backgroundSize.protectedValue[t],this.bg.protectedValue[t],0,s[t][0]),t=>NdModBg.readBgPosition(e.box.size,this.backgroundSize.protectedValue[t],this.bg.protectedValue[t],0,s[t][1])]),s})),this.backgroundPositionNumeric=new NdStylesProperty(2,[],(t=>[...t]))}static normalizeBgPosition(t){return"string"==typeof t?"left"===t||"top"==t?"0%":"bottom"===t||"right"===t?"100%":"center"===t||"middle"===t?"50%":t:t}static readBgPosition(t,e,s,i,r){let o=this.normalizeBgPosition(r);const n=this.readBgSize(t,s,i,e[i]);return"number"==typeof o?o:(t[i]-n)*NdNodeStylesModel.extractPercentFraction(o)}static readBgSize(t,e,s,i){return"string"==typeof i?"auto"!==i?t[s]*NdModBg.extractPercentFraction(i):e?e.size[s]:0:i}}NdModBg.updateSizeAndPosition=(t,e,s,i)=>{"string"==typeof t.backgroundSize.protectedValue[s][0]&&(t.backgroundSizeNumeric.protectedValue[s][0]=NdModBg.readBgSize(e,i,0,t.backgroundSize.protectedValue[s][0])),"string"==typeof t.backgroundSize.protectedValue[s][1]&&(t.backgroundSizeNumeric.protectedValue[s][1]=NdModBg.readBgSize(e,i,1,t.backgroundSize.protectedValue[s][1])),"string"==typeof t.backgroundPosition.protectedValue[s][0]&&(t.backgroundPositionNumeric.protectedValue[s][0]=NdModBg.readBgPosition(e,t.backgroundSize.protectedValue[s],t.bg.protectedValue[s],0,t.backgroundPosition.protectedValue[s][0])),"string"==typeof t.backgroundPosition.protectedValue[s][1]&&(t.backgroundPositionNumeric.protectedValue[s][1]=NdModBg.readBgPosition(e,t.backgroundSize.protectedValue[s],t.bg.protectedValue[s],1,t.backgroundPosition.protectedValue[s][1]))};class NdModCirc extends NdNodeStylesModel{constructor(){super(...arguments),this.radius=new NdNodeStylePropertyAnimated(0,0,(t=>t),(t=>(t<0&&(t=0),t)),((t,e,s,i)=>{e<0&&(e=0),s(t),i(e)}),(t=>(t<0&&(t=0),t))),this.strokeWidth=new NdNodeStylePropertyAnimated(0,1,(t=>t),(t=>t<0?0:t),((t,e,s,i)=>{e<0&&(e=0),s(t),i(e)}),(t=>(t<0&&(t=0),t))),this.strokeColor=new NdNodeStylePropertyAnimated(0,"rgba(0,0,0,1)",(t=>t),(t=>t instanceof Array?NdModCirc.arrayToColor(t):t),((t,e,s,i)=>{s(NdModCirc.colorToArray(t)),i("string"==typeof e?NdModCirc.colorToArray(e):e)}),(t=>NdModCirc.normalizeColor(t))),this.strokeStyle=new NdStylesProperty(0,[0],(t=>[...t]),(t=>t.map((t=>t<0?0:t))))}}class Circle extends Node{constructor(t,e){super(t,Object.assign(Object.assign(Object.assign(Object.assign({},new NdModCirc),new NdModBg),new NdModAnchor),new NdModBase),e),this.Box=new NdNodeBox(this,this.Cache,(()=>{const t=[...this.data.position.protectedValue],e=2*this.data.radius.protectedValue;return Node.applyBoxAnchor(t,e,e,this.data),[t[0],t[1],2*this.data.radius.protectedValue,2*this.data.radius.protectedValue,this.strokeFix,this.strokeFix,this.strokeFix,this.strokeFix]})),this.render=t=>(Node.transformContext(this,t),t.drawImage(this.Assembler.export(this),0,0),t),this.export=()=>this.Assembler.export(this),this.strokeFix=1,this.test=t=>{const e=this.matrix.traceCursorToLocalSpace(t),s=this.Box.value.sprite,i=this.data.radius.protectedValue;return e[0]>s.size[0]&&e[0]<0&&e[1]>s.size[1]&&e[1]<0&&Math.pow(e[0]+this.strokeFix-i,2)+Math.pow(e[1]+this.strokeFix-i,2)<=Math.pow(i,2)&&this},this.Assembler=new NdModeAssembler([{name:"fill",resolver:t=>{t.beginPath(),t.fillStyle=this.data.fill.protectedValue,t.arc(this.boundingRect.size[0]/2,this.boundingRect.size[1]/2,this.data.radius.protectedValue,0,2*Math.PI),t.fill()}},{name:"bg",resolver:t=>{t.beginPath(),t.arc(this.boundingRect.size[0]/2,this.boundingRect.size[1]/2,this.data.radius.protectedValue,0,2*Math.PI),t.clip(),Node.drawBg(this.data,t,this.Assembler)}},{name:"stroke",resolver:t=>{t.beginPath(),t.strokeStyle=this.data.strokeColor.protectedValue,t.lineWidth=this.data.strokeWidth.protectedValue,t.setLineDash(this.data.strokeStyle.protectedValue),t.arc(this.boundingRect.size[0]/2,this.boundingRect.size[1]/2,this.data.radius.protectedValue,0,2*Math.PI),t.stroke()}}]),this.watch("radius",(()=>{this.Assembler.update(),this.Assembler.resize(),this.Box.purge(),this.Matrix.purge()})),this.watch("fill",(()=>{this.Assembler.update("fill")})),this.watch("strokeWidth",(()=>{this.strokeFix=this.data.strokeWidth.protectedValue,this.Box.purge(),this.Assembler.update("stroke"),this.Assembler.resize(),this.Matrix.purge()})),this.watch(["strokeStyle","strokeColor"],(()=>{this.Assembler.update("stroke")})),this.watch(["bg","backgroundSize","backgroundPosition"],(()=>{this.Assembler.update("bg")}))}}class NdSprite extends NdResource{constructor(e){const s=e.match(/(^.+)\[(\d+)]/);super(s?s[1]:`invalid-image-src[${e}]`,(()=>{if(this.image.addEventListener("load",(()=>{t.positive(`Loaded sprite ${this.url}.`),this.setFrameData(),this._status=1,this.cast("load",null)})),this.image.addEventListener("error",(()=>{t.negative(`Error loading sprite ${this.url}.`),this._status=0,this.cast("error",null)})),!s)throw new Error("How did you even get here?");return this.image.src=s[1],this})),this.frameCount=0,this.refreshRate=12,this.frameTime=0,this.canvas=[],this.image=new Image,this.chunkSize=[0,0],this.chunkXYCount=0,this.timeStart=(new Date).getTime(),this.duration=0,this.frozen=!1,this.export=t=>{if(this.loaded&&!this.error&&this.frameCount&&this.frameTime&&(this.chunkSize[0]>0||this.chunkSize[1]>0)){let e=t.getTime(),s=e-this.timeStart;this.frozen&&(this.timeStart+=s);let i=Math.floor(s/this.frameTime);i>this.frameCount-1&&(i=0,this.timeStart=e);let r=Math.floor(i/this.chunkXYCount),o=i-r*this.chunkXYCount;if(this.canvas[r]&&this.canvas[r][o])return this.canvas[r][o]}},s&&s[2]&&(this.frameCount=parseInt(s[2]))}setFrameData(){this.chunkXYCount=Math.ceil(Math.sqrt(this.frameCount)),this.chunkSize[0]=this.image.width/this.chunkXYCount,this.chunkSize[1]=this.image.height/this.chunkXYCount,this.frameTime=1e3/this.refreshRate,this.duration=this.frameTime*this.frameCount,this.chunkSize[0]=this.image.width/this.chunkXYCount,this.chunkSize[1]=this.image.height/this.chunkXYCount,this.canvas=[];for(let t=0;t<this.chunkXYCount;t++){this.canvas[t]||this.canvas.push([]);for(let e=0;e<this.chunkXYCount;e++){this.canvas[t][e]||(this.canvas[t].push(document.createElement("canvas")),this.canvas[t][e].width=1,this.canvas[t][e].height=1),this.canvas[t][e].setAttribute("width",this.chunkSize[0].toString()),this.canvas[t][e].setAttribute("height",this.chunkSize[0].toString());const s=this.canvas[t][e].getContext("2d");s&&(s.translate(-this.chunkSize[0]*e,-this.chunkSize[1]*t),s.drawImage(this.image,0,0))}}}get paused(){return this.frozen}pause(){this.frozen=!0}play(){this.frozen=!1}get frames(){return this.frameCount}set frames(t){this.frameCount=t,this.setFrameData()}get width(){return this.chunkSize[0]}get height(){return this.chunkSize[1]}get size(){return[...this.chunkSize]}get fps(){return this.refreshRate}set fps(t){this.timeStart=(new Date).getTime(),this.refreshRate=t,this.setFrameData()}static isNdUrlSpriteStr(t){return NdSprite.NdUrlSpriteStrRegex.test(t)}}NdSprite.NdUrlSpriteStrRegex=/(^.+)\[([0-9]+)]$/;class NdModSprite extends NdNodeStylesModel{constructor(){super(...arguments),this.src=new NdStylesProperty(1,!1,(t=>t?t.url:t),((t,e)=>{if(NdSprite.isNdUrlSpriteStr(t)){const s=new NdSprite(t).load();return s.fps=this.fps.protectedValue,this.frames.set(s.frames,e),s}return this.frames.set(0,e),this.fps.set(0,e),new NdImage(t).load()})),this.frames=new NdStylesProperty(0,0,(t=>t),(t=>t)),this.fps=new NdStylesProperty(0,12,(t=>t),(t=>(t<0&&(t=0),t))),this.size=new NdNodeStylePropertyAnimated(1,["auto","auto"],(t=>[...t]),(t=>"string"==typeof t||"number"==typeof t?[t,t]:[...t]),((t,e,s,i)=>{s(t.map(((t,e)=>{if("auto"===t)return this.src.protectedValue?0===e?this.src.protectedValue.width:this.src.protectedValue.height:0})));i(("number"==typeof e||"auto"===e?[e,e]:e).map(((t,e)=>"auto"===t?this.src.protectedValue?0===e?this.src.protectedValue.width:this.src.protectedValue.height:0:(t<0&&(t=0),t))))}),(t=>(t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),t)))}}class Sprite extends Node{constructor(t,e){super(t,Object.assign(Object.assign(Object.assign({},new NdModSprite),new NdModBase),new NdModAnchor),e),this.export=t=>(t||(t=new Date),this.data.src.protectedValue?this.data.src.protectedValue.export(t):new HTMLCanvasElement),this.render=(t,e)=>{if(this.data.src.protectedValue){Sprite.transformContext(this,t);const s=this.data.src.protectedValue.export(e);s&&t.drawImage(s,0,0,"auto"===this.data.size.protectedValue[0]?this.data.src.protectedValue.width:this.data.size.protectedValue[0],"auto"===this.data.size.protectedValue[1]?this.data.src.protectedValue.height:this.data.size.protectedValue[1])}return t},this.test=t=>(t=this.matrix.traceCursorToLocalSpace([...t]))[0]>0&&t[0]<this.boundingRect.size[0]&&t[1]>0&&t[1]<this.boundingRect.size[1]&&this,this.Box=new NdNodeBox(this,this.Cache,(()=>{const t=[...this.data.position.protectedValue],e=this.data.size.protectedValue.map(((t,e)=>{if("auto"===t)return this.data.src.protectedValue?0===e?this.data.src.protectedValue.width:this.data.src.protectedValue.height:0}));return Node.applyBoxAnchor(t,e[0],e[1],this.data),[t[0],t[1],e[0],e[1],0,0,0,0]})),this.watch("src",(()=>{this.data.src.protectedValue&&(this.data.src.protectedValue.loaded?(this.Box.purge(),this.Matrix.purge()):this.data.src.protectedValue.on("load",(()=>{this.Box.purge(),this.Matrix.purge()})))})),this.watch("frames",(()=>{this.data.src.protectedValue instanceof NdSprite&&(this.data.src.protectedValue.frames=this.data.frames.protectedValue)})),this.watch("fps",(()=>{this.data.src.protectedValue instanceof NdSprite&&(this.data.src.protectedValue.fps=this.data.fps.protectedValue)})),this.watch("size",(()=>{this.Box.purge(),this.Matrix.purge()}))}pause(){this.data.src.protectedValue instanceof NdSprite&&this.data.src.protectedValue.pause()}play(){this.data.src.protectedValue instanceof NdSprite&&this.data.src.protectedValue.play()}}class Area extends Node{constructor(t,e){super(t,Object.assign(Object.assign(Object.assign(Object.assign({},new NdModBase),new NdModFreeStroke(!0)),new NdModAnchor),new NdModBg),e),this.xShift=0,this.yShift=0,this.strokeFix=1,this.interpolationFix=0,this.interpolated=!1,this.mouseTester=new NdNodeEmpiricalMouseChecker,this.Box=new NdNodeBox(this,this.Cache,(()=>{let t=[...this.data.position.protectedValue],e=1/0,s=1/0,i=-1/0,r=-1/0;this.data.path.protectedValue.forEach((t=>{t[0]<e&&(e=t[0]),t[2]<e&&(e=t[2]),t[1]<s&&(s=t[1]),t[3]<s&&(s=t[3]),t[0]>i&&(i=t[0]),t[2]>i&&(i=t[2]),t[1]>r&&(r=t[1]),t[3]>r&&(r=t[3])})),e===1/0&&(e=0),s===1/0&&(s=0),i===-1/0&&(i=0),r===-1/0&&(i=0),this.xShift=e,this.yShift=s;const o=this.strokeFix+this.interpolationFix,n=Math.abs(i-e),a=Math.abs(r-s);return Node.applyBoxAnchor(t,n,a,this.data),[t[0]+this.xShift,t[1]+this.yShift,n,a,o,o,o,o]})),this.Assembler=new NdModeAssembler([{name:"fill",resolver:t=>{t.save(),t.translate(this.boundingRect.margin[3]-this.xShift,this.boundingRect.margin[0]-this.yShift),!this.interpolated&&this.data.interpolation.protectedValue>0&&(NdNodeStylesModel.interpolate(this.data.path.protectedValue,this.data.interpolation.protectedValue,!0),this.interpolated=!0),Node.drawFill(this.data,t),t.restore()}},{name:"bg",resolver:t=>{t.translate(this.boundingRect.margin[3]-this.xShift,this.boundingRect.margin[0]-this.yShift),Node.drawPathBg(this.data,t,this.Assembler)}},{name:"stroke",resolver:t=>{this.interpolated||(NdNodeStylesModel.interpolate(this.data.path.protectedValue,this.data.interpolation.protectedValue,!0),this.interpolated=!0),t.translate(this.boundingRect.margin[3]-this.xShift,this.boundingRect.margin[0]-this.yShift),Node.drawStroke(this.data,t)}}]),this.test=t=>!!this.mouseTester.check(this.matrix.traceCursorToLocalSpace([...t]))&&this,this.render=t=>(Node.transformContext(this,t),t.drawImage(this.Assembler.export(this),0,0),t),this.export=()=>this.Assembler.export(this),this.watch("path",(()=>{this.interpolated=!1,this.Box.purge(),this.Matrix.purge(),this.Assembler.resize(),this.Assembler.update(),this.interpolated=!1,this.mouseTester.resize(this.boundingRect.size),this.mouseTester.redraw(this.data)})),this.watch("interpolation",(()=>{this.interpolated=!1,this.interpolationFix=Math.round(40*this.data.interpolation.protectedValue),this.Assembler.update(),this.Assembler.resize(),this.mouseTester.resize(this.boundingRect.size),this.mouseTester.redraw(this.data),this.interpolated=!1})),this.watch(["strokeStyle","strokeColor"],(()=>{this.Assembler.update("stroke"),this.Assembler.resize()})),this.watch("fill",(()=>{this.Assembler.update("fill")})),this.watch(["bg","backgroundSize","backgroundPosition"],(()=>{this.Assembler.update("bg")})),this.watch("strokeWidth",(()=>{this.strokeFix=this.data.strokeWidth.protectedValue.reduce(((t,e)=>t<e?e:t),0)/2,this.Assembler.update("stroke"),this.mouseTester.resize(this.boundingRect.size),this.mouseTester.redraw(this.data),this.Box.purge(),this.Matrix.purge(),this.Assembler.resize()}))}}class NdModSize extends NdNodeStylesModel{constructor(){super(...arguments),this.size=new NdNodeStylePropertyAnimated(1,[0,0],(t=>[...t]),(t=>"number"==typeof t?(t<0&&(t=0),[t,t]):t.map((t=>t<0?0:t))),((t,e,s,i)=>{s([...t]),"number"==typeof e?(e<0&&(e=0),i([e,e])):i(e.map((t=>t<0?0:t)))}),(t=>t))}}class NdModRect extends NdNodeStylesModel{constructor(){super(...arguments),this.radius=new NdNodeStylePropertyAnimated(0,[0,0,0,0],(t=>[...t]),(t=>"number"==typeof t?t<0?[0,0,0,0]:[t,t,t,t]:t.map((t=>t<0?0:t))),((t,e,s,i)=>{s([...t]),i("number"==typeof e?e<0?[0,0,0,0]:[e,e,e,e]:e.map((t=>t<0?0:t)))}),(t=>t)),this.strokeColor=new NdNodeStylePropertyAnimated(1,["rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)"],(t=>[...t]),(t=>"string"==typeof t?[t=NdModRect.arrayToColor(NdModRect.normalizeColor(NdModRect.colorToArray(t))),t,t,t]:"number"==typeof t[0]?[t=NdModRect.arrayToColor(NdModRect.normalizeColor(t)),t,t,t]:"string"==typeof t[0]?t.map((t=>NdModRect.arrayToColor(NdModRect.normalizeColor(NdModRect.colorToArray(t))))):t.map((t=>NdModRect.arrayToColor(NdModRect.normalizeColor(t))))),((t,e,s,i)=>{if(s(t.map((t=>NdModRect.colorToArray(t)))),"string"==typeof e){let t=NdModRect.normalizeColor(NdModRect.colorToArray(e));i([t,t,t,t])}else if("number"==typeof e[0]){let t=NdModRect.normalizeColor(e);i([t,t,t,t])}else"string"==typeof e[0]?i(e.map((t=>NdModRect.normalizeColor(NdModRect.colorToArray(t))))):i(e.map((t=>[...NdModRect.normalizeColor(t)])))}),(t=>t)),this.strokeWidth=new NdNodeStylePropertyAnimated(1,[1,1,1,1],(t=>[...t]),(t=>"number"==typeof t?t<0?[0,0,0,0]:[t,t,t,t]:t.map((t=>t<0?0:t))),((t,e,s,i)=>{s([...t]),"number"==typeof e?i(e<0?[0,0,0,0]:[e,e,e,e]):s(e.map((t=>t<0?0:t)))}),(t=>t)),this.strokeStyle=new NdStylesProperty(1,[[0],[0],[0],[0]],(t=>t.map((t=>[...t]))),(t=>"number"==typeof t[0]?[t,t,t,t]:t.map((t=>[...t]))))}}class Rectangle extends Node{constructor(t,e){super(t,Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},new NdModRect),new NdModSize),new NdModAnchor),new NdModBg),new NdModBase),e),this.CIRCLECONST=.5522847498,this.Assembler=new NdModeAssembler([{name:"fill",resolver:t=>{t.translate(this.strokeFix[3],this.strokeFix[0]),Rectangle.registerPath(this.path(),t,!0),t.fillStyle=this.data.fill.protectedValue,t.fill()}},{name:"bg",resolver:t=>{t.translate(this.strokeFix[3],this.strokeFix[0]),Rectangle.clipBezierPath(this.path(),t),Rectangle.drawBg(this.data,t,this.Assembler)}},{name:"stroke",resolver:t=>{t.translate(this.strokeFix[3],this.strokeFix[0]),this.drawRectStroke(t)}}]),this.export=()=>this.Assembler.export(this),this.test=t=>{const[e,s]=this.Matrix.value.traceCursorToLocalSpace([...t]);return e<this.Box.value.sprite.size[0]&&e>0&&s<this.Box.value.sprite.size[1]&&s>0&&this},this.render=t=>(Rectangle.transformContext(this,t),t.drawImage(this.Assembler.export(this),0,0),t),this.Box=new NdNodeBox(this,this.Cache,(()=>{const t=[...this.data.position.protectedValue];return Node.applyBoxAnchor(t,this.data.size.protectedValue[0],this.data.size.protectedValue[1],this.data),[t[0],t[1],this.data.size.protectedValue[0],this.data.size.protectedValue[1],this.strokeFix[0],this.strokeFix[1],this.strokeFix[2],this.strokeFix[3]]})),this.strokeFix=[...this.data.strokeWidth.protectedValue];const{getter:s,purge:i}=this.Cache.register("path",(()=>{const[t,e]=this.data.size.protectedValue,[s,i,r,o]=this.data.radius.protectedValue.map((s=>(s>t/2&&(s=t/2),s>e/2&&(s=e/2),s)));if(t&&e){const n=[];return s?(n.push([0,s,s,0,0,s*this.CIRCLECONST,s-s*this.CIRCLECONST,0]),n.push([n[0][2],n[0][3],t,0,n[0][2],n[0][3],t,0])):n.push([0,0,t,0,0,0,t,0]),i?(n[n.length-1][2]-=i,n[n.length-1][6]-=i,n.push([t-i,0,t,i,t-i+i*this.CIRCLECONST,0,t,i-i*this.CIRCLECONST]),n.push([t,i,t,e,t,i,t,e])):n.push([t,0,t,e,t,0,t,e]),r?(n[n.length-1][3]-=r,n[n.length-1][7]-=r,n.push([t,e-r,t-r,e,t,e-r+r*this.CIRCLECONST,t-r+r*this.CIRCLECONST,e]),n.push([t-r,e,0,e,t-r,e,0,e])):n.push([t,e,0,e,t,e,0,e]),o?(n[n.length-1][2]+=o,n[n.length-1][6]+=o,n.push([o,e,0,e-o,o-o*this.CIRCLECONST,e,0,e-o+o*this.CIRCLECONST]),n.push([0,e-o,n[0][0],n[0][1],0,e-o,n[0][0],n[0][1]])):n.push([0,e-o,n[0][0],n[0][1],0,e-o,n[0][0],n[0][1]]),n}return[]}));this.path=s,this.purgePath=i,this.watch("size",(()=>{this.Assembler.resize(),this.Assembler.update("fill"),this.Assembler.update("bg"),this.Assembler.update("stroke"),this.Matrix.purge(),this.Box.purge(),this.purgePath()})),this.watch("radius",(()=>{this.Assembler.update("fill"),this.Assembler.update("bg"),this.Assembler.update("stroke"),this.purgePath()})),this.watch("strokeWidth",(()=>{this.strokeFix=[...this.data.strokeWidth.protectedValue],this.Box.purge(),this.Assembler.resize(),this.Matrix.purge(),this.Assembler.update("fill"),this.Assembler.update("bg"),this.Assembler.update("stroke")})),this.watch(["bg","backgroundSize","backgroundPosition"],(()=>{this.Assembler.update("bg")})),this.watch(["strokeColor","strokeStyle"],(()=>{this.Assembler.update("stroke")})),this.watch("fill",(()=>{this.Assembler.update("fill")}))}static drawCorner(t,e,s,i,r,o,n){e.save(),e.beginPath(),e.lineWidth=Math.max(o,n);let[a,h,d,l,c,u,p,m]=s;if(0===t){if(o<n){const t=(n-o)/2;a+=t,c+=t}if(o>n){const t=(o-n)/2;l+=t,m+=t}}if(1==t){if(o<n){const t=(n-o)/2;h+=t,u+=t}if(n<o){const t=(o-n)/2;d-=t,p-=t}}if(2==t){if(o<n){const t=(n-o)/2;a-=t,c-=t}if(o>n){const t=(o-n)/2;l-=t,m-=t}}if(3==t){if(n<o){const t=(o-n)/2;d+=t,p+=t}if(o<n){const t=(n-o)/2;h-=t,u-=t}}if(e.moveTo(a,h),i!==r){const s=e.createConicGradient(-Math.PI-1/180+Math.PI/2*t,t%2?a:d,t%2?l:h);s.addColorStop(0,i),s.addColorStop(.25,r),e.strokeStyle=s}else e.strokeStyle=i;e.bezierCurveTo(c,u,p,m,d,l),e.stroke(),e.restore()}static drawBridge(t,e,s,i){t.beginPath(),t.lineCap="round",t.moveTo(e[0],e[1]),t.strokeStyle=s,t.lineWidth=i,t.lineTo(e[2],e[3]),t.stroke()}drawRectStroke(t){const e=this.path(),s=[0,1,2,3];if(e.length){let i=0;this.data.radius.protectedValue.forEach(((t,e)=>{if(t>0)for(let t=e;t<s.length;t++)s[t]+=1})),e.forEach(((e,r)=>{e[0]!==e[2]&&e[1]!==e[3]?Rectangle.drawCorner(i,t,e,i>0?this.data.strokeColor.protectedValue[i-1]:this.data.strokeColor.protectedValue[3],this.data.strokeColor.protectedValue[i],i>0?this.data.strokeWidth.protectedValue[i-1]:this.data.strokeWidth.protectedValue[3],this.data.strokeWidth.protectedValue[i]):Rectangle.drawBridge(t,e,this.data.strokeColor.protectedValue[i],this.data.strokeWidth.protectedValue[i]),s.indexOf(r)>-1&&i++})),i=0}}}var s;!function(t){t["sans-serif"]="sans-serif",t.serif="serif",t.system="system"}(s||(s={}));class NdFont extends NdResource{constructor(e,s,i){super(`\\${i?i.name:"default"}.font`,(()=>s&&i?(this.initMeasureBuffer(),this.loadFont((()=>{t.positive(`Font ${this.name} loaded`),this.cast("load",null)}),(()=>{t.negative(`Unable to load font ${this.name}`),this.cast("error",null)})),this.styles.innerHTML=this.str.reduce(((t,e)=>t+e),""),document.head.appendChild(this.styles),this):(t.positive(`Font ${this.url} loaded`),this.cast("load",null),this))),this.context=document.createElement("canvas").getContext("2d"),this.styles=document.createElement("style"),this.fontMaxLoadTime=1e4,this.fontLoadStart=0,this.fontMeasureBuffer=[],this.formatStr={eot:function(t){return'url("'+t+'.eot?#iefix") format("embedded-opentype")'},woff:function(t){return'url("'+t+'.woff") format("woff")'},ttf:function(t){return'url("'+t+'.ttf") format("truetype")'},svg:function(t,e,s){return'url("'+t+".svg#"+e+"-"+(s.charAt(0).toUpperCase()+s.slice(1))+'") format("svg")'}},this.export=this.context.canvas,s&&i?(this.scheme=i,this.str=i.weight.map((t=>i.style.reduce(((r,o)=>r+`@font-face {\n font-family:"${i.name}";\n src:`+s.reduce(((r,n,a)=>r+this.formatStr[n](`${e}/${i.name}-${t}-${o}`,i.name,o)+(a<s.length-1?",\n":";")),"")+`\nfont-weight: ${NdFont.extractNumericWeight(t)};\nfont-style: ${o};\n}\n`),"")),"")):(this.str=[],this.scheme={name:"default",weight:[],style:[]})}loadFont(e,s){const i=this.scheme.weight.map((t=>this.scheme.style.map((e=>this.measureFont(e,t)))));let r=!0;for(let t=0;t<this.scheme.weight.length;t++){for(let e=0;e<this.scheme.style.length;e++)if(i[t][e]===this.fontMeasureBuffer[t][e]){r=!1;break}if(!r)break}r?e():(new Date).getTime()-this.fontLoadStart>this.fontMaxLoadTime?(t.negative(`Gave up trying to load ${this.name}. Timeout.`),s()):setTimeout((()=>this.loadFont(e,s)),500)}measureFont(t,e,s){return this.context.font=s?`${t} ${NdFont.extractNumericWeight(e)} 12px/12px "${s}"`:this.string(t,NdFont.extractNumericWeight(e),12),this.context.measureText(NdFont.CONSTFONTCHECKSTRING).width}initMeasureBuffer(){this.fontLoadStart=(new Date).getTime(),this.fontMeasureBuffer=this.scheme.weight.map((t=>this.scheme.style.map((e=>this.measureFont(e,t,"sans-serif")))))}get name(){return this.scheme.name}string(t,e,s,i=s){return`${t} ${NdFont.extractNumericWeight(e)} ${s}px/${i}px "${this.scheme.name}"`}static extractNumericWeight(t){return"normal"===t?400:"black"===t?900:"light"===t?300:"bold"===t?600:t}}NdFont.CONSTFONTCHECKSTRING='abcdefghijklmnopqrstuvwxyz 1234567890[!?,.<>"£$%^&*()~@#-=]';var i=new class NodasFonts{constructor(){this.fonts={},this.fontRootPath="./fonts",this.format=["eot","svg","ttf","woff"]}get root(){return this.fontRootPath}set root(t){this.fontRootPath=t}get formats(){return[...this.format]}set formats(t){this.format=t}add(e){return this.fonts[e.name]?t.positive(`Font [${e.name}] already registered. Skip..`):Object.values(s).includes(e.name)?t.warn(`You are not allowed to load fonts with names equal to system values [${Object.values(s)}]. \n                    Ignored.`):(this.fonts[e.name]=new NdFont(this.root,this.format,e),t.positive(`Font ${e.name} registered.`)),this.fonts[e.name]}get(t){return this.fonts[t]?this.fonts[t]:null}};class NdTextPartial extends NdEmitter{constructor(){super(...arguments),this.textColor="rgba(0,0,0,1)",this.fWeight=400,this.fSize=14,this.lHeight=14,this.fStyle="normal",this.ndFont="system",this.freeze={},this.onPossibleSizeChange=t=>{this.on(["font","fontSize","weight","style","lineHeight"],t)},this.fontString=()=>{if(Object.values(s).includes(this.ndFont))return"system"===this.ndFont?`${this.style} ${this.weight} ${this.fSize}px serif`:this.fSize+"px "+this.ndFont;{const t=i.get(this.ndFont);return t?t.string(this.fStyle,this.fWeight,this.fSize,this.lineHeight):""}}}get font(){return this.ndFont}set font(t){this.freeze.font||this.ndFont!==t&&(this.ndFont=t,this.cast("font",t))}get lineHeight(){return this.lHeight}set lineHeight(t){this.freeze.lineHeight||(t<0&&(t=0),t!==this.lHeight&&(this.lHeight=t,this.cast("lineHeight",this.lHeight)))}get weight(){return this.fWeight}set weight(t){this.freeze.weight||this.fWeight!==t&&(this.fWeight=t,this.cast("weight",t))}get color(){return this.textColor}set color(t){if(!this.freeze.color){const e=NdNodeStylesModel.arrayToColor(NdNodeStylesModel.normalizeColor(NdNodeStylesModel.colorToArray(t)));e!==this.textColor&&(this.textColor=e,this.cast("color",this.textColor))}}get style(){return this.fStyle}set style(t){this.freeze.style||this.fStyle!==t&&(this.fStyle=t,this.cast("style",t))}get fontSize(){return this.fSize}set fontSize(t){this.freeze.style||(t<0&&(t=0),this.fSize!==t&&(this.fSize=t,this.cast("fontSize",this.fSize)))}}class NdTextWord extends NdTextPartial{constructor(t){super(),this.str="",this.context=document.createElement("canvas").getContext("2d"),this.w=0,this.resizeFlag=!0,this.redrawFlag=!0,this.resize=()=>{this.context.font=this.fontString();const t=Math.ceil(this.context.measureText(this.str).width);t!==this.w&&(this.context.canvas.width=t,this.w=t),this.context.canvas.height!==this.lineHeight&&(this.context.canvas.height=this.lineHeight),this.resizeFlag=!1},this.redraw=()=>{this.context.clearRect(0,0,this.context.canvas.width,this.context.canvas.height),this.context.textBaseline="middle",this.context.fillStyle=this.color,this.context.font=this.fontString(),this.context.fillText(this.str,0,this.lineHeight/2),this.redrawFlag=!1},this.render=(t,e,s)=>{this.resizeFlag&&this.resize(),this.redrawFlag&&this.redraw(),t.drawImage(this.context.canvas,e,s)},this.string=t,this.on("font",(()=>{if(!Object.values(s).includes(this.font)){const t=i.get(this.font);t&&(t.loaded||t.once("load",(()=>{this.resizeFlag=!0,this.redrawFlag=!0})))}})),this.onPossibleSizeChange((()=>{this.resizeFlag=!0,this.redrawFlag=!0})),this.on("color",(()=>{this.redrawFlag=!0}))}get width(){return this.resizeFlag&&this.resize(),this.w}get length(){return this.str.length}get string(){return this.str}set string(t){t=t.trim(),this.str!==t&&(this.resizeFlag=!0,this.redrawFlag=!0,this.str=t)}}class NdTextSpace extends NdTextPartial{constructor(){super(),this.w=0,this.context=document.createElement("canvas").getContext("2d"),this.measured=!1,this.render=()=>{},this.on("font",(()=>{if(!Object.values(s).includes(this.font)){const t=i.get(this.font);t&&(t.loaded||t.once("load",(()=>{this.measured=!1})))}}))}get length(){return 1}get string(){return" "}forceRedraw(){this.measured=!1}get width(){return this.measured||(this.context.font=this.fontString(),this.w=this.context.measureText(" ").width),this.w}}class NdTextBlock extends NdTextPartial{constructor(t){super(),this.str="",this.l=1/0,this.w=0,this.h=0,this.wordsPattern=/(\S+)/g,this.tagPattern=/\[(?<tagname>[cbi])(="(?<value>rgba\(\d*,\d*,\d*(,(\.\d+|1))?\))")?](?<content>((?!\[\/?\k<tagname>]).)*)\[\/\k<tagname>]/gm,this.updated=!0,this.words=[],this.export=()=>{},this.render=t=>{let e=0,s=0,i=this.width;this.words.forEach((r=>{e+r.width>i&&(s+=this.lineHeight,e=0),r instanceof NdTextSpace&&0===e||(r.render(t,e,s),e+=r.width)}))},this.string=t,this.bindWordsStyles(),this.on("font",(()=>{if(!Object.values(s).includes(this.font)){const t=i.get(this.font);t&&(t.loaded||t.once("load",(()=>{this.updated=!0})))}}))}static applyStylesToText(t,e){return Object.assign(t,e),t}updateSize(){this.w=Math.ceil(this.words.reduce(((t,e)=>t+e.width),0)),this.w=this.l<this.w?this.l:this.w,0===this.w&&(this.w=1);let t=0,e=this.lineHeight,s=[];this.words.forEach(((i,r)=>{t+i.width>this.w&&(e+=this.lineHeight,s.push(t),t=0),t+=i.width,r==this.words.length-1&&0!==t&&s.push(t)}));let i=Math.max.apply(null,s);i<this.w&&(this.w=i),this.h=Math.ceil(e),0===this.h&&(this.h=1),this.updated=!1}bindWordsStyles(){["weight","style","color","font","fontSize","lineHeight"].forEach((t=>{this.on(t,(()=>{this.words.forEach((e=>{e[t]=this[t]}))}))}))}split(t=this.str,e={font:this.font,weight:this.weight,fontSize:this.fontSize,lineHeight:this.lineHeight,style:this.style,color:this.color},s={},i=0){let r=[],o=null,n=i;for(;o=this.tagPattern.exec(t);){if(o.index){const i=t.substring(0,o.index).match(this.wordsPattern);i&&i.forEach((t=>{this.words[n]?(this.words[n].freeze={},r.push(NdTextBlock.applyStylesToText(this.words[n],e)),r[n].string=t):r.push(NdTextBlock.applyStylesToText(new NdTextWord(t),e)),r[r.length-1].freeze=Object.assign({},s),n++,this.words[n]?(this.words[n].freeze={},r.push(NdTextBlock.applyStylesToText(this.words[n],e))):r.push(NdTextBlock.applyStylesToText(new NdTextSpace,e)),r[r.length-1].freeze=Object.assign({},s),n++}))}o.groups.content&&(r=[...r,...this.split(o.groups.content,Object.assign(Object.assign({},e),{weight:"b"===o.groups.tagname?"bold":e.weight,color:"c"===o.groups.tagname&&o.groups.value?o.groups.value:e.color,style:"i"===o.groups.tagname?"italic":e.style}),{weight:"b"===o.groups.tagname||s.weight,color:"c"===o.groups.tagname||s.color,style:"i"===o.groups.tagname||s.style},r.length)],n=r.length),t=t.slice(o.index+o[0].length)}if(t.length){const i=t.match(this.wordsPattern);i&&i.forEach((t=>{const i=this.words[n]?this.words[n]:new NdTextWord(t);i.freeze={},NdTextBlock.applyStylesToText(i,e),i.string=t,i.freeze=Object.assign({},s),r.push(i),n++;const o=this.words[n]?NdTextBlock.applyStylesToText(this.words[n],e):NdTextBlock.applyStylesToText(new NdTextSpace,e);o.freeze=Object.assign({},this.freeze),r.push(o),n++}))}return r}get length(){return this.str.length}get width(){return this.updated&&this.updateSize(),this.l<this.w?this.l:this.w}get limit(){return this.l}set limit(t){this.l=t,this.updated=!0}get height(){return this.updated&&this.updateSize(),this.h}get string(){return this.str}set string(t){if(t!==this.str){this.str=t;const e=this.split();e.pop(),this.words=e,this.updated=!0}}}class NdModText extends NdNodeStylesModel{constructor(){super(...arguments),this.str=new NdStylesProperty(0,"",(t=>t),(t=>t)),this.width=new NdStylesProperty(1,"auto",(t=>t),(t=>t)),this.font=new NdStylesProperty(1,s.system,(t=>t),(t=>Object.values(s).includes(t)||i.get(t)?t:s.system)),this.color=new NdStylesProperty(2,"rgba(0,0,0,1)",(t=>t),(t=>t)),this.weight=new NdStylesProperty(2,"normal",(t=>t),(t=>t)),this.lineHeight=new NdStylesProperty(2,14,(t=>t),(t=>isFinite(t)?t:14)),this.style=new NdStylesProperty(2,"normal",(t=>t),(t=>t))}}class Text extends Node{constructor(t,e){super(t,Object.assign(Object.assign(Object.assign({},new NdModText),new NdModAnchor),new NdModBase),e),this.Assembler=new NdModeAssembler([{name:"text",resolver:t=>{this.textBlock.render(t)}}]),this.Box=new NdNodeBox(this,this.Cache,(()=>{let t=[...this.data.position.protectedValue];const e=this.textBlock.width,s=this.textBlock.height;return Node.applyBoxAnchor(t,e,s,this.data),[t[0],t[1],e,s,0,0,0,0]})),this.render=t=>(Node.transformContext(this,t),t.drawImage(this.Assembler.export(this),0,0),t),this.test=t=>(t=this.Matrix.value.traceCursorToLocalSpace([...t]))[0]<this.Box.value.sprite.size[0]&&t[0]>0&&t[1]<this.Box.value.sprite.size[1]&&t[1]>0&&this,this.export=()=>this.textBlock.export(),this.textBlock=new NdTextBlock(this.data.str.protectedValue),this.syncStylesToBlock(),this.watch(["str","lineHeight","width","weight","style"],(()=>{this.Box.purge(),this.Matrix.purge()})),this.watch("width",(()=>{"number"==typeof this.data.width.protectedValue?this.textBlock.limit=this.data.width.protectedValue:this.textBlock.limit=1/0})),this.watch(["str","lineHeight","weight","width","style"],(()=>{this.Assembler.update(),this.Assembler.resize()})),this.watch("font",(()=>{if(!Object.values(s).includes(this.data.font.protectedValue)){const t=i.get(this.data.font.protectedValue);t&&(t.loaded||(t.once("load",(()=>{this.Box.purge(),this.Matrix.purge(),this.Assembler.resize(),this.Assembler.update("text")})),t.load()))}}))}syncStylesToBlock(){this.textBlock.font=this.data.font.protectedValue,this.textBlock.color=this.data.color.protectedValue,this.textBlock.lineHeight=this.data.lineHeight.protectedValue,this.textBlock.style=this.data.style.protectedValue,this.textBlock.weight=this.data.weight.protectedValue,this.bindProps(["font","style","weight","fontSize","lineHeight","color"]),this.watch("str",(()=>{this.textBlock.string=this.data.str.protectedValue}))}bindProps(t){t.forEach((t=>{this.watch(t,(()=>{this.textBlock[t]=this.data[t].protectedValue}))}))}}class Nodas{constructor(t){this.Ticker=new Ticker,this.Config=new Config;const e=new Ticker,s=new Canvas(e),i=new Nodes(s),r=new Mouse(s,e,i);s.element(t),this.Ticker=e,this.Canvas=s,this.Mouse=r,this.Tree=i,new Group("NODE_TREE_DEFAULT_ROOT",this),this.area=t=>new Area(t,this),this.circle=t=>new Circle(t,this),this.rect=t=>new Rectangle(t,this),this.line=t=>new Line(t,this),this.sprite=t=>new Sprite(t,this),this.text=t=>new Text(t,this),this.group=(t,e)=>{const s=new Group(t,this);return e&&s.append(e),s}}}const r=i;export{r as Fonts,Nodas as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
