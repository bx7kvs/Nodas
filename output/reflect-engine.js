(function(){function Reflect(){}function Core(e){new Injection(e);for(var t=!0,n=0;n<expect.length;n++)if(!modules[expect[n]]){t=!1;break}return t&&BuildCore(),Core}function getRouteFunction(e){return function routeFunction(){var t=e.apply(Reflect,arguments);return void 0!==t?Reflect:t}.bind(core)}function BuildCore(){Core.get("Root");for(var e in properties)properties.hasOwnProperty(e)&&(core[e]=properties[e])}function Injection(e){if("function"!=typeof e||!e.name)throw new Error("Unable to createinjection. Constructor is not a named function!");modules[e.name]=this;var t=null;this.create=function(t){var n=[null];if(t&&"object"==typeof t&&t.constructor===Array)for(var r=0;r<t.length;r++)n.push(t[r]);return new(Function.prototype.bind.apply(e,n))},this.get=function(){if(t)return t;var e=this.create.apply(this,arguments[0]);return t=e,e},this.is=function(t){return t.constructor===e},this.extend=function(t,n){return"object"==typeof n&&n.constructor===Array?(e.apply(t,n),t):(e.call(t),t)}}var modules={},properties={},core=new Reflect,expect=["Application","Audio","Canvas","Classes","Config","Container","Fonts","Helpers","Injection","Root","Services","Source","Ticker"];Core.get=function(e,t){if("string"==typeof e){if(modules[e])return modules[e].get.apply(modules[e],t);throw new Error("Module ["+e+"] was not found")}throw new Error("Module name is not a string. Wrong arguments")},Core.is=function(e,t){if("string"==typeof t&&modules[t])return modules[t].is(e)},Core.inject=function(e,t){if("string"==typeof e){if(modules[e])return modules[e].create(t);throw new Error("Nodule ["+e+"] was not found.")}throw new Error("Module name is not a string. Wrong Arguments")},Core.extend=function(e,t,n){if("string"==typeof modules[e]){if("object"==typeof t)return modules[e].extend(t,n);throw new Error("Unable to extend target of tyoe ["+typeof t+"] bu module constructor ["+e+"].")}},Core.define=function(e,t){if(core||(core=new Reflect),"string"==typeof e){if(void 0!==properties[e])throw new Error("Unable to define property ["+e+"]. Already defined!");return"function"==typeof e?properties[e]=getRouteFunction(t):null===e&&"undefined"==typeof e&&"object"==typeof e||(properties[e]=t),core}},window.$R=core,Core(function Application(e,t,n){var r=this;n.define("fps",58.8,{isNumber:!0,greater:0,under:61}).watch(function(e){t.fps(e)}),n.define("canvas",null,{isString:!0}).watch(function(t){e.element(t)}),this.$=function(e,t){if("string"!=typeof e)throw new Error("Unable to set API method. Name is not a string.");if("$"===e.charAt(0))throw new Error("Unable to set API function. Function name starts with $");if(this[e])throw new Error("Application API property ["+e+"] duplication!");if("function"!=typeof t)throw new Error("Application API property ["+e+"] value is not a function");this[e]=function(){var e=t.apply(this,arguments);return void 0!==e?e:r}},this.stop=function(){return t.stop(),this},this.start=function(){return t.start(),this},this.config=function(e,t){if("string"==typeof e)if("undefined"!=typeof t&&"function"!=typeof t)n.set(e,t);else{if("function"!=typeof t)return n.get(e);n.watch(e,t)}else{if("object"!=typeof e||e.constructor===Array)throw new Error("Unable to config application. Config format is invalid");for(var r in e)e.hasOwnProperty(r)&&n.set(r,e[r])}return this}}),Core(function Audio(){var e=new AudioContext;this.context=function(){return e}}),Core(function Canvas(e){function DrawScene(e,t){if(u){for(var r=[n,e,t],o=0;o<s.length;o++)try{s[o].f.apply(a,r)}catch(i){throw console.error(i),new Error("Error emerged while drawing. \nQueue          : ["+s[o].o+"]\nQueue Ordering : ["+o+"]\nQueue Member   : ["+s[o].f.name+"]\nMessage        : "+i.message)}for(var c in s)for(var o=0;o<s[c].length;o++);}}function resolve(e){for(var t=0;t<e.length;t++)e[t].call(a)}var t=null,n=null,r=[800,600],o=[],i=[],a=this,s=[],u=!1;e.queue(0,DrawScene),this.element=function(e){if("string"==typeof e){var o=document.getElementById(e);if(!o||!o.getContext)throw new Error("Element with id [#"+e+"] was not found or not a canvas");var a=o.getContext("2d");if(!a)throw new Error("Element with id [#"+e+"] is not a canvas. Can not get 2d context.");o.setAttribute("width",r[0]),o.setAttribute("height",r[1]),n=a,t=o,u=!0,resolve(i)}else{if(!(e instanceof HTMLElement))return t;if(!e.getContext)throw new Error("Element is not a Canvas");var a=e.getContext("2d");if(!a)throw new Error("Element is not a Canvas. Can not get 2d context.");e.setAttribute("width",r[0]),e.setAttribute("height",r[1]),t=e,n=a,u=!0,resolve(i)}},this.queue=function(e,t){if("function"==typeof e){if(!e.name)throw new Error("Unable to enqueue callback. Provide a named function");s.push({o:0,f:t})}else{if("number"!=typeof e)throw new Error("Unable to enqueue callback. Wrong arguments.");if("function"!=typeof t)throw new Error("Unable to enqueue callback. Provide a named function");if(!t.name)throw new Error("Unable to enqueue callback. Provide a named function.");s.push({o:e,f:t})}return s.sort(function(e,t){return e.o>t.o}),this},this.size=function(e,n){return"number"==typeof e&&"number"==typeof n&&(e<0&&(e=0),n<0&&(n=0),r[0]===e&&r[1]===e||(r[0]=e,r[1]=n,t.setAttribute("width",e),t.setAttribute("height",n),resolve(o))),[r[0],r[1]]},this.resize=function(e){if("function"==typeof e)return o.push(e),this;throw new Error("Unable to set ressize callback. f argument is not a function")},this["switch"]=function(e){if("function"==typeof e)return i.push(e),this;throw new Error("Unable to set switch callback. f argument is not a function")},this.ready=function(){return u}}),Core(function Classes(){function cls(e){try{var r=Core.inject("Injection",[e]);n[r.name()]&&console.warn("Global Class Library class ["+r.name()+"] has been overwritten.");for(var o in t)t.hasOwnProperty(o)&&t[o][r.name()]&&console.warn("Application ["+o+"] Class ["+r.name()+"] overrides global class.");n[r.name()]=r}catch(i){throw new Error("Unable to create class injection.")}}var e={},t={},n={};cls.app=function(e,r){if("string"!=typeof e)throw new Error("Unable to register ApplicationClass injection. App id is not a string.");t[e]||(t[e]={});try{var o=Core.inject("Injection",[r]);n[o.name()]&&console.warn("Application ["+e+"] Class ["+o.name()+"] overrides global class."),t[e][o.name()]=o}catch(i){throw new Error("Unable to create and register ApplicationClass for sources ["+e+"].")}},cls.sys=function(t){try{var n=Core.inject("Injection",[t]);e[n.name()]&&console.warn("System Class ["+n.name()+"] override."),e[n.name()]=n}catch(r){throw new Error("Unable to register SystemClass injection")}},this.getApplicationClasses=function(e){if("string"==typeof e){var r=Core.inject("Container",[n]);return t[e]?(r.source(r,"."),r.merge(t),r):(r.source(r,"."),r)}throw new Error("Unable to get application classes container. App id is not a string.")},this.getSystemClasses=function(){var t=Core.inject("Container",[e]);return t.source(t,"."),t},Core.define("class",cls)}),Core(function Config(){function Property(e,n,r){function checkValue(e){for(var n=!0,r=0;r<o;r++)if(!t[o[r].f](e,o.args)){n=!1;break}return n}var o=[],i=[];this.get=function(){var e=n;if(t.isArray(e)){e=[];for(var r=0;r<n.length;r++)e.push(n[r])}return e},this.name=function(){return e},this.set=function(e){if(checkValue(e))if(t.isArray(e)){n=[];for(var r=0;r<e.length;r++)n.push(e[r])}else n=e;for(var r=0;r<i.length;r++)i[r].call(this,this.get());return this.get()},this.watch=function(e){if("function"!=typeof e)throw new Error("Can not set config property watcher. Argument f is not a function.");return i.push(e),n};for(var a in r)if(r.hasOwnProperty(a)){if(void 0===r[a])throw new Error("Wrong parameter for config property ["+a+"]");if(!t[a])throw new Error("No such config value checker as ["+a+"]");o.push({f:a,args:[r[a]]})}if("object"==typeof n&&null!==n&&!t.isArray(n))throw new Error("Objects are not supported as config property value!");if(!checkValue(n))throw new Error("Initial ["+e+"]'s value does not meet config requirements.")}var e={},t={isNumber:function(e){return"number"==typeof e},isString:function(e){return"string"==typeof e},isArray:function(e){return"object"==typeof e&&e.constructor===Array},custom:function(e,t){if("function"==typeof t[0])return t[0](e)},under:function(e,n){return t.isNumber(e)&&e<n[0]},greater:function(e,n){return t.isNumber(e)&&e>n[0]},eq:function(e,n){return t.isNumber(e)&&e===n[0]},isBool:function(e){return"boolean"==typeof e}};this.define=function(t,n,r){if("string"!=typeof t)throw new Error("Unable to define config property. Property name is not a string.");if(void 0===n)throw new Error("Config property value can not be undefined.");if(e[t])console.warn("Config property duplication on property name ["+t+"]");else try{e[t]=new Property(t,n,r)}catch(o){throw console.error("Unable to create config property ["+t+"]"),o}return e[t]},this.set=function(t,n){if("string"==typeof t&&e[t])return e[t].set(n);throw new Error("Unable to set property ["+t+"]. No such property.")},this.get=function(t){if("string"==typeof t)return e[t].get();throw new Error("Unable to get property ["+t+"]. No such property.")},this.watch=function(t,n){if("string"==typeof t){if("function"==typeof n){if(e[t])return e[t].watch(n);throw new Error("No such property as ["+t+"] to watch.")}throw new Error("Watcher callback is not a function")}throw new Error("Unable to watch config property. Property name is invalid or undefined")}}),Core(function Container(e,t){var n={},r={},o={};if(this.list=function(){return n},this.injection=function(e){var t=null,r=[];if("function"==typeof e){if(!e.name||!e.name.length)throw new Error("Anonymous function can not be injection constructor.");t=e}else{if("object"!=typeof e||e.constructor!==Array)throw new Error("Unknown type of injection config.");for(var o=0;o<e.length;o++){if("string"!=typeof e[o]||!e[o].length){if("function"==typeof e[o]&&e[o].name){t=e[o];break}throw new Error("Unknown type of injection name or constructor.")}r.push(e[o])}}r.push(t),n[t.name]&&console.warn("Injection ["+t.name+"] duplicated and has been overwritten"),n[t.name]=Core.inject("Injection",[r])},this.merge=function(t,r){if(t)try{for(var o in t)t.hasOwnProperty(o)&&Core.is(t[o],"Injection")&&(n[t[o].name()]&&console.warn("Injection ["+o+"] has been merged.s"),r?n[e[o].name()]=e[o].clone():n[e[o].name()]=e[o])}catch(i){throw new Error("Unable to merge libs.")}},this.source=function(e,t){if(e&&"object"==typeof e)if(Core.is(e,"Container")){if(t||(t=!1),"string"==typeof t&&t.length||t===!1){e.$$LOOP=!0;var n=!1;this.$LOOP&&(n=!0),delete e.$$LOOOP,r[t?t:"$$noprefix"]=Core.inject("Source",[t,e,n])}}else if(e.constructor===Array){for(var o=!0,n=[],i=0;i<e.length;i++)"object"==typeof e[i]&&Core.is(e[i],"Container")?(e[i].$$LOOOP=!0,this.$$LOOOP?n.push(!0):n.push(!1),delete e[i].$$LOOOP):o=!1;if(!o)throw new Error("Source container config is not valid. One of the containers provided is not an InjectionContainer instance");t||(t=!1),("string"==typeof t&&t.length||t===!1)&&(r[t?t:"$$noprefix"]=Core.inject("Source",[t,e,n]))}},this.clone=function(){var e={};for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t].clone());var o=Core.inject("Container",[e]);for(var i in r){for(var a=r[i].containers(),s=r[i].loop(),u=r[i].prefix(),c=[],l=0;l<a.length;l++)s[l]?c.push(o):c.push(a[l].clone());o.source(c,u)}return o},this.findSourceByPrefix=function(e){return e===!1?r.$$noprefix:"string"==typeof e?r[e]:null},this.findSourceByInjectionName=function(e){var t=null;if(o[e])return o[e];for(var n in r)if(r.hasOwnProperty(n)&&r[n].prefix()&&r[n].has(e)){t=r[n],o[e]=t;break}if(!t&&r.$$noprefix&&r.$$noprefix.has(e)&&(t=r.$$noprefix,o[e]=t),!t)throw new Error("Unable to find source containing injection ["+e+"]. ");return t},this.resolve=function(e,t){if("extend"===t){if(n[e]){for(var r={dependencies:[],$constructor:n[e].$constructor()},o=n[e].dependencies(),i=0;i<o.length;i++)if("@extend"===o[i])r.dependencies.push(n[e].extend(this));else if("@inject"===o[i])r.dependencies.push(n[e].inject(this));else{var a=this.findSourceByInjectionName(o[i]);if(!a)throw new Error("No source found containing ["+o[i]+"] for ["+e+"].");r.dependencies.push(a.resolve(o[i]))}return r}throw new Error("Unable to inject ["+e+"] no such injection found")}if(this.has(e)){for(var o=n[e].dependencies(),s=[],u=0;u<o.length;u++)if("@extend"===o[u])s.push(n[e].extend(this));else if("@inject"===o[u])s.push(n[e].inject(this));else{var c=this.findSourceByInjectionName(o[u]);if(!c)throw new Error("Injection ["+o[u]+"] for ["+e+"] source was not found.");s.push(c.resolve(o[u]))}return n[e].create(s,t)}throw new Error("Injection ["+e+"] was not found in library!")},this.resolveDirectInjection=function(e){var t=this.findSourceByInjectionName(e);return t?t.resolve(e,!0):t},this.has=function(e){return!!n[e]},this.get=function(e){return n[e]?n[e]:null},Core.is(e,"Injection"))n[e.name()]=e.clone();else if("object"==typeof e)for(var i in e)e.hasOwnProperty(i)&&Core.is(e[i],"Injection")&&(t?n[e[i].name()]=e[i]:n[e[i].name()]=e[i].clone());else if(void 0!==e)throw new Error("Unable to create container. Wrong arguments. Lib is Injection or object")}),Core(function Fonts(e,t){function fontString(t){if(!o)return!1;for(var n="",r=0;r<t.weight.length;r++)for(var u=0;u<t.style.length;u++){for(var c=e.get("fontDir")+"/"+t.name+"-"+t.weight[r]+"-"+t.style[u],l='@font-face {font-family: "'+s.format(t.name)+"-"+t.weight[r]+'";src:',f=0;f<i.length;f++)l+=a[i[f]](c,t.name,t.style[u]),l+=f<i.length-1?",":";";l+="font-weight: "+t.weight[r]+";",l+="font-style:"+t.style[u]+";}",t[t.weight[r]+"-"+t.style[u]]=l,n+=t[t.weight[r]+"-"+t.style[u]]}return n}function update(e){var t="";for(var o in r)r.hasOwnProperty(o)&&(t+=fontString(r[o],e));n.innerHTML=t}function inArray(e,t){for(var n=!1,r=0;r<e.length;r++)if(e[r]===t){n=!0;break}return n}var n=document.createElement("style"),r={},o=!1,i=e.define("fontFormats",["eot","svg","ttf","woff"],{isArray:!0,custom:function(e){for(var t=!0,n=0;n<e.length();n++)if("eot"!==e[n]||"svg"!==e[n]||"ttf"!==e[n]||"woff"!==e[n]){t=!1;break}return t}}).watch(function(e){o=!0,i=e,update()}),a={eot:function(e){return'url("'+e+'.eot?#iefix") format("embedded-opentype")'},woff:function(e){return'url("'+e+'.woff") format("woff")'},ttf:function(e){return'url("'+e+'.ttf") format("truetype")'},svg:function(e,t,n){return'url("'+e+".svg#"+t+"-"+(n.charAt(0).toUpperCase()+n.slice(1))+'") format("svg")'}},s=this;e.define("fontDir","./fonts",{isString:!0}),document.getElementsByTagName("head")[0].appendChild(n),this.font=function(e,t,n,o){r[t]||(r[t]={name:t}),r[t].weight||(r[t].weight=[]),r[t].style||(r[t].style=[]),inArray(r[t].weight,n)||r[t].weight.push(n),inArray(r[t].style,o)||r[t].style.push(o),update(e)},this.format=function(e){return t+"-"+e},this.formats=function(){for(var e=[],t=0;t<i.length;t++)e.push(i[t]);return e}}),Core(function Helpers(){function helper(t){try{var n=Core.inject("Injection",[t]);e[n.name()]&&console.warn("helper ["+n.name()+"] override."),e[n.name()]=n}catch(r){throw new Error("Unable to create Helper.")}}var e={},t={};Core.define("helper",helper),helper.system=function(n,r){try{var o=Core.inject("Injection",[n]);t[o.name()]&&console.warn("System Helper ["+o.name()+"] Duplicate declaration override."),t[o.name()]=o,r&&(e[o.name()]?console.warn("System Helper ["+o.name()+"] overrides user helper. Skipped system helper."):e[o.name()]=o)}catch(i){}},this.getSystemHelpers=function(e){var n=Core.inject("Container",[t]);return n.source(n,"+"),n.source(e,"@"),n},this.getPublicHelpers=function(t){var n=Core.inject("Container",[e]);return n.source(n,"+"),n.source(t,"@"),n}}),Core(function Injection(e,t){var n=e,r=null,o=[],i=this;if(t){if("object"!=typeof e)throw new Error("Unable to create PreResolvedInjection! con argument is not an object!");n=e.constructor,r=e,o=[]}else{if("function"==typeof e&&e.name)n=e;else if("object"==typeof e&&e.constructor===Array)for(var a=0;a<e.length;a++)if("string"==typeof e[a]&&e[a].length)o.push(e[a]);else if("function"==typeof e[a]&&e[a].name){n=e[a];break}if(!n)throw new Error("Injection constructor undefined!")}this.name=function(){return n.name},this.dependencies=function(){for(var e=[],t=0;t<o.length;t++)e.push(o[t]);return e},this.extend=function(e){if(t)throw new Error("You can not extend with ["+n.name+"]!");return function(t,n){if("object"!=typeof t)throw new Error("Extend target should be an object!");if("string"!=typeof n)throw new Error("Extend class name should be a string!");var r=e.findSourceByInjectionName(n);if(!r)throw new Error("Unable to find injection ["+n+"] for ["+i.name()+"]");var o=r.resolveInjectionDependancies(n);o.$constructor.apply(t,o.dependencies)}},this.inject=function(e){if(t)throw new Error("You can not inject ["+n.name+"] directly");return function(t){return e.resolveDirectInjection(t)}},this.create=function(e,o){return t?r:o?(e.unshift(null),new(Function.prototype.bind.apply(n,e))):(r||(e.unshift(null),r=new(Function.prototype.bind.apply(n,e))),r)},this.$constructor=function(){return n},this.clone=function(){return new Injection(e,t)}}),Core(function Root(){function createApplication(o){var i=Core.inject("Container",[e[o]]),a=Core.inject("Ticker"),s=Core.inject("Canvas",[a]),u=Core.inject("Audio",[]),c=Core.inject("Config",[o]),l=Core.inject("Fonts",[c,o]),f=Core.inject("Application",[s,a,c]),h={};h.Ticker=Core.inject("Injection",[a,!0]),h.Canvas=Core.inject("Injection",[s,!0]),h.API=Core.inject("Injection",[f,!0]),h.Fonts=Core.inject("Injection",[l,!0]),h.Config=Core.inject("Injection",[c,!0]),h.Audio=Core.inject("Injection",[u,!0]);var p=Core.inject("Container",[h]),v=r.getSystemHelpers(p),g=r.getPublicHelpers(p),d=n.getApplicationClasses(o),y=n.getSystemClasses(o),m=t.getApplicationServices(v,y,p);i.source(m,!1),i.source(d,"."),i.source(g,"+"),i.source(p,"@");for(var b=0;b<m.length;b++)for(var w=m[b].list(),C=0;C<w.length;C++)m[b].resolve(w[C]);return i.resolve(o),f}var e={},t=Core.get("Services"),n=Core.get("Classes"),r=Core.get("Helpers");Core.define("app",function(t){try{var n=Core.inject("Injection",[t]);e[n.name()]&&console.warn("Application ["+n.name()+"] override. Remove duplicates"),e[n.name()]=n}catch(r){throw console.error("Unable to register Application constructor."),r}}),Core.define("run",function(t){if("string"==typeof t){if(e[t])return createApplication(t);throw new Error("Application ["+t+"] not found.")}throw new Error("Unable to get sources. App Id is not a string")})}),Core(function Services(){function service(t){if("object"==typeof t&&t.constructor===Array){for(var n=null,r=0;r<t.length;r++)if("function"==typeof t[r])n=t[r].name;else if("string"!=typeof t[r])throw new Error("Unable to create service. Invalid config");n&&(e[n]&&console.warn("Duplicate declaration. Service ["+n+"] has been overwritten"),e[n]=Core.inject("Injection",[t]))}else if("function"==typeof t){if(!t.name)throw new Error("Unable to create service. Constructor is not a named function.");e[t.name]&&console.warn("Duplicate declaration. Service ["+n+"] has been overwritten"),e[t.name]=Core.inject("Injection",[t])}}function plugin(e,t){if("string"!=typeof e)throw new Error("Unable to create plugin. Invalid arguments.");if("object"==typeof t&&t.constructor===Array){for(var r=null,o=0;o<t.length;o++)if("function"==typeof t[o])r=t[o].name;else if("string"!=typeof t[o])throw new Error("Unable to create plugin. Invalid constructor arguments");if(!r)throw new Error("Unable to create plugin. Constructor is not a named function");n[e]||(n[e]={}),n[e][r]&&console.warn("Plugin duplicated. ["+r+"] has been overwritten"),n[e][r]=Core.inject("Injection",[t])}}function getPluginManager(e){function Plugins(){for(var t=[],n=0;n<e.length;n++){var r=e[n].list();for(var o in r)r[o].$constructor()!==Plugins&&t.push(o)}this.each=function(e){for(var n=0;n<t.length;n++)e(t[n]);return this},this.list=function(){for(var e=[],n=0;n<t.length;n++)e.push(t[n]);return e}}return Core.inject("Container",[Core.inject("Injection",[Plugins])])}var e={},t={},n={},r={};plugin["class"]=function(e,t,n){if("string"==typeof e){if("string"!=typeof t)throw new Error("Unable to create plugin. Invalid arguments.");if("object"==typeof n&&n.constructor===Array){for(var o=null,i=0;i<n.length;i++)if("function"==typeof n[i])o=n[i].name;else if("string"!=typeof n[i])throw new Error("Unable to create plugin class. Invalid constructor arguments");if(!o)throw new Error("Unable to create plugin. Constructor is not a named function");r[e]||(r[e]={}),r[e][t]||(r[e][t]={}),r[e][t][o]&&console.warn("Plugin class duplicated. ["+o+"] has been overwritten"),r[e][t][o]=Core.inject("Injection",[n])}else{if("function"!=typeof n)throw new Error("Unable to register plugin class. Invalid arguments");n.name&&(r[e]||(r[e]={}),r[e][t]||(r[e][t]={}),r[e][t][n.name]&&console.warn("Plugin class duplicated. ["+n.name+"] has been overwritten"),r[e][t][n.name]=Core.inject("Injection",[n]))}}},service["class"]=function(e,n){var r=null;if("string"!=typeof e)throw new Error("Unable to create class. Invalid arguments");if("function"==typeof n){if(!n.name)throw new Error("Unable to create class for extension ["+e+"]. Constructor is not a named function");t[e]||(t[e]={}),t[e][n.name]=Core.inject("Injection",[n])}else if("object"==typeof n&&n.constructor===Array){for(var o=0;o<n.length;o++)if("function"==typeof n[o])r=n[o].name;else if("string"!=typeof n[o])throw new Error("Unable to create class for service["+e+"]. Invalid config.");r&&(t[e]||(t[e]={}),t[e][r]&&console.warn("Duplicate declaration. Class ["+r+"] for extension ["+e+"] has been overwritten"),t[e][r]=Core.inject("Injection",[n]))}},Core.define("service",service),Core.define("plugin",plugin),this.getApplicationServices=function(o,i,a){var s,u,c={},l={},f={},h={};for(var p in e)if(e.hasOwnProperty(p)){s=Core.inject("Container",[e[p]]);var v=[];if(n[p])for(var g in n[p])if(n[p].hasOwnProperty(g)){if(u=Core.inject("Container",[n[p][g]]),f[p]||(f[p]={}),f[p][g]=u,r[p][g]){var d=Core.inject("Container",[r[p][g]]);h[p]||(h[p]={}),h[p][g]=d,u.source(d,"$"),d.source(d,"$"),d.source(i,"."),d.source(o,"+")}u.source(i,"."),u.source(o,"+"),v.push(u)}if(v.push(getPluginManager(v)),s.source(v,"<"),s.source(i,"."),s.source(o,"+"),s.source(a,"@"),t[p]){var y=Core.inject("Container",[t[p]]);s.source(y,"$"),y.source(y,"$"),y.source(i,"."),y.source(v,"<"),y.source(o,"+"),y.source(a,"@"),l[p]=y}else l[p]=null;c[p]=s}for(var m in c)if(c.hasOwnProperty(m)){var b=[];for(var w in c)c.hasOwnProperty(w)&&m!==w&&b.push(c[w]);if(c[m].source(b,!1),l[m]&&l[m].source(b,!1),f[m])for(var C in f[m])f[m].hasOwnProperty(C)&&f[m][C].source(b,!1);if(h[m])for(var A in h[m])h[m].hasOwnProperty(A)&&h[m][A].source(b,!1)}var x=[];for(var j in c)c.hasOwnProperty(j)&&x.push(c[j]);return o.source(x,!1),x}}),Core(function Source(e,t,n){function stripPrefix(t){if(e){for(var n="",o=0;o<t.length;o++)o>=r.length&&(n+=t[o]);return n}return t}var r=!!e&&e,o=[],i={},a={};if("object"==typeof t)if(Core.is(t,"Container"))o=[t];else{if(t.constructor!==Array)throw new Error("Invalid type if container!");for(var s=!0,u=0;u<t.length;u++){if(!Core.is(t[u],"Container")){s=!1;break}o.push(t[u])}if(0===t.length&&(s=!1),!s)throw new Error("Container array is empty!")}this.check=function(t){if(a[t])return a[t];var n=!0;if(e)for(var r=0;r<e.length;r++)t[r]&&t[r]===e[r]||(n=!1);return a[t]=n,n},this.has=function(e){var t=!1;if(i[e])return!0;if(this.check(e))for(var n=0;n<o.length;n++){var r=stripPrefix(e);if(o[n].has(r)){t=!0,i[e]=o[n];break}}return t},this.loop=function(){return n},this.containers=function(){return o},this.source=function(){for(var e=0;e<o.length;e++)o[e].source.apply(o[e],arguments)},this.prefix=function(e){return void 0!==e?e===r:r},this.resolve=function(e,t){var n=null;if(this.has(e)){var r=null,a=stripPrefix(e);i[e]&&(r=i[e]);for(var s=0;s<o.length;s++)o[s].has(a)&&(r=o[s]);r&&(n=r.resolve(a,t))}return n},this.resolveInjectionDependancies=function(e){var t=null,n=null;if(i[e])return n=stripPrefix(e),i[e].resolve(n,"extend");if(this.has(e)){n=stripPrefix(e);for(var r=0;r<o.length;r++)o[r].has(n)&&(t=o[r],i[e]=o[r]);if(t)return t.resolve(n,"extend")}}}),Core(function Ticker(){function resolve(e,t){var n=[];if("object"==typeof t&&t.constructor===Array?n=t:void 0!==t&&n.push(t),"string"!=typeof e||!e.length)throw new Error("Unable to resolve event. Event parameter is not a string or empty");if(!s[e])throw new Error("Unable to resolve event ["+e+"]. No such event.");for(var r=0;r<s[e].length;r++)s[e][r].apply(u,n)}var e=(1e3/58.8).toFixed(2),t=[],n=0,r=[null,0],o=function(){for(var e=0;e<t.length;e++)try{t[e].f.apply(u,r)}catch(o){throw new Error("Error emerged while resolving callbacks.\nQueue   : ["+t[e].o+"]\nOrder   : ["+e+"]\nName    : ["+t[e].f.name+"].\nMessage : "+o.message)}n++},i=function(){r[0]=new Date,r[1]=n;try{o()}catch(e){throw clearInterval(a),resolve("error",e),new Error("Unable to run ticker anymore. Error emerged during sources ticker progress.\n Frame :"+n+"\nDate  : "+r[0]+"\n"+e.message)}},a=null,s={stop:[],start:[],error:[]},u=this;this.on=function(e,t){if("string"!=typeof e||!e.length)throw new Error("Unable to set event. Event argument is not a string or empty.");if(!s[e])throw new Error("Unable to set event ["+e+"] handler. No such event.");if("function"!=typeof t)throw new Error("Unable to set event ["+e+"]. Callback is not a function.");return s[e].push(t),this},this.stop=function(){return a&&(n=0,clearInterval(a),a=null,resolve("stop",this)),this},this.start=function(){return a||(a=setInterval(i,e),resolve("start",this)),this},this.fps=function(t){return"number"!=typeof t?(1e3/e).toFixed(2):(t>60&&(t=60),t<=0&&(t=1),e=(1e3/t).toFixed(2),a&&(this.stop(),this.start()),this)},this.queue=function(e,n){if("function"==typeof e){if(!e.name)throw new Error("Unable to set callback. Callback is not a named function.");t.push({o:0,f:n})}else{if("number"!=typeof e)throw new Error("Unable to create callback. Wrong arguments passed");if("function"!=typeof n)throw new Error("Unable to queue. callback is not a function");if(!n.name)throw new Error("Unable to set callback. Callback is not a named function.");t.push({o:e,f:n})}return t.sort(function(e,t){return e.o>t.o}),this}}),$R.plugin("Objects",["@inject","Debug",function Animation(e,t){function findCompetitor(e,t){t.$$SELF=!0;for(var r=null,o=0;o<n.length;o++)if(!n[o].$$SELF&&n[o].active()&&!n[o].done()){for(var i=!1,a=0;a<e.length;a++)if(n[o].hasProperty(e[a])){i=!0;break}i&&(r||(r=[]),r.push(n[o]))}return delete t.$$SELF,r}function CheckAnimationQueue(){for(var e=[],t=0;t<n.length;t++)if(n[t].active())n[t].done()||e.push(n[t]);else{var r=n[t].properties();if(n[t].queue())findCompetitor(r,n[t])||n[t].start();else{var o=findCompetitor(r,n[t]);if(o)for(var i=0;i<o.length;i++)for(var a=0;a<r.length;a++)o[i].stop(r[a]);n[t].start()}e.push(n[t])}n=e}function CreateAnimationType1(t,r,i,a){var s=this.extension("Style"),u={};if(u[t]=r,o[t]){var c=[{ordering:s.ordering(t),morph:o[t],value:r}],l={};i&&"number"==typeof i&&(l.duration=i),a&&"string"==typeof a&&(l.easing=a);var f=e("$Animation");f.config(this,c,l,CheckAnimationQueue),n.push(f)}}function CreateAnimationType2(r,i,a){var s=this.extension("Style"),u={};"object"==typeof i?u=i:"number"==typeof i?(u={duration:i},"string"==typeof a&&(u.easing=a)):"string"==typeof i&&(u={easing:i});var c={};for(var l in r)r.hasOwnProperty(l)&&(o[l]?c[l]={ordering:s.ordering(l),morph:o[l],value:r[l]}:t.warn({type:this.type(),property:l},"Property {property} of {type} can not be animated!"));var f=[];for(var h in c)f.push(c[h]);if(f.sort(function(e,t){return e.ordering-t.ordering}),f.length){var p=e("$Animation");p.config(this,f,u,CheckAnimationQueue),n.push(p)}else t.warn("No properties to animate!")}var n=[],r=!1,o={};this.morph=function(t,n,r,i){var a=e("$Morph");a.config(t,this.object(),n,r,i),a.valid()&&(o[t]=a)},this.extractMorph=function(e){return o[e]},this.register("animate",function(e,n,r,o){"string"==typeof e&&n?CreateAnimationType1.apply(this,arguments):"object"==typeof e&&e.constructor!==Array?CreateAnimationType2.apply(this,arguments):t.warn("Unable to create animation. Wrong arguments"),CheckAnimationQueue()}),this.register("animated",function(){return r}),this.register("stop",function(e){for(var t=0;t<n.length;t++)n[t].stop(e)})}]),$R.plugin("Objects",["Debug","@inject",function Box(e,t){function BoxWrapperFunc(){if(n&&o)return n.call(o,r),r}var n=null,r=t("$Box");this.f=function(t){return"function"!=typeof t?void e.error("Box Extension / Box function is not a function!"):(n=t,void delete this.f)};var o=this.object();this.box=function(){return o.extension("Cache").value("box",BoxWrapperFunc)},this.purge=function(){o.extension("Cache").purge("box");var e=o.parent();e&&e.extension("Box").purge()},this.register("box",function(){return this.extension("Cache").value("box",BoxWrapperFunc).get()})}]),$R.plugin("Objects",["Debug",function Cache(e){var t={};this.value=function(n,r){return"string"!=typeof n?void e.error("Object Value Cache / name is not a string!"):"function"!=typeof r?void e.error("Object Value Cache / func is not a function"):(t[n]||(t[n]={value:r(),func:r,relevant:!0}),this.get(n))},this.purge=function(n){return"string"!=typeof n?void e.error("Object Value Cache / Can not purge cache of non string name"):void(t[n]&&(t[n].relevant=!1))},this.get=function(n){return"string"!=typeof n?void e.error("Object Value Cache / Can not get value of non-string name"):t[n]?(t[n].relevant||(t[n].value=t[n].func(),t[n].relevant=!0),t[n].value):void 0}}]),$R.plugin("Objects",["Debug",function Drawer(e){function resolve(e,t){for(var n=0;n<r[e].length;n++)r[e].apply(o,t)}var t=null,n=null,r={before:[],after:[]},o=this.object();this.f=function(n){return"function"!=typeof n?(e.error({},"ObjectDrawer / func is not a function!"),void delete this.f):(t=n,void delete this.f)},this.register("before",function(t){"function"==typeof t?r.before.push(t):e.warn("Unable to set event [before Render]. func is not a Function")}),this.register("after",function(t){"function"==typeof t?r.after.push(t):e.warn("Unable to set event [after Render]. func is not a Function")}),this.matrix=function(){return n},this.draw=function(){resolve("before",arguments),t&&t.apply(this,arguments),resolve("after",arguments)}}]),$R.plugin("Objects",["Debug",function Layers(e){var t={0:[]},n=0;this.register("layer",function(t){if(void 0===t)return n;if("number"!=typeof t||t<0)return e.warn({n:t},"Value {n} is not a number or less than 0"),this;var r=this.parent();if(r){var o=r.extension("Layers");n=t,o.place(t,this)}else e.warn({},"You try to set layer of root group!");return this}),this.place=function(e,n){n.$$LAYERSEARCHVALUE=!0;for(var r in t)if(t.hasOwnProperty(r)){for(var o=!1,i=0;i<t[r].length;i++)if(t[r][i].$$LAYERSEARCHVALUE){t[r].splice(i,1),o=!0;break}if(o)break}delete n.$$LAYERSEARCHVALUE,t[e]||(t[e]=[]),t[e].push(n)},this.remove=function(e){e.$$LAYERSEARCHVALUE=!0;for(var n in t)if(t.hasOwnProperty(n)){for(var r=!1,o=0;o<t[n].length;o++)if(t[n][o].$$LAYERSEARCHVALUE){r=!0,t[n].splice(o,1);break}if(r)break}},this.forEach=function(e){for(var n in t)for(var r=0;r<t[n].length;r++)e.apply(t[n][r],[r,n])},this.layers=function(){return t}}]),$R.plugin("Objects",["Debug",function Matrix(e){function MatrixWrapper(){return t.call(n)}var t=null,n=this.object();this.f=function(e){"function"==typeof e&&(t=e,delete this.f)},this.register("matrix",function(){return this.extension("Cache").value("transformMatrix",MatrixWrapper)}),this.purge=function(){if(n.extension("Cache").purge("transformMatrix"),"Group"===n.type()){var e=n.extension("Layers");e.forEach(function(){this.extension("Cache").purge("transformMatrix")})}}}]),$R.plugin("Objects",["+Mouse","Debug",function Mouse(e,t){function GetEventArray(e){return n[e]}var n={dragmove:[],dragstart:[],dragend:[],mousemove:[],mouseup:[],mousedown:[],mouseenter:[],mouseleave:[]},r=!1,o=function(){return!1};this.register("on",function(e,r){
if(void 0===typeof e&&void 0===typeof r){for(var o in n)n[o].$OFF=!1;return this}if("string"==typeof e&&void 0===r){var i=GetEventArray(e);return i&&(i[o].$OFF=!1),this}if("string"==typeof e&&"function"==typeof r){var i=GetEventArray(e);return i?i.push(r):t.warn({e:e},"There is no event [{e}]"),this}return GetEventArray(e)?"function"!=typeof r?(t.warn({e:e,f:r},"Unable to set event handler for {[e]}. {[f]} is not a function!"),this):this:(t.warn({e:e},"Unable to set event handler for {[e]}. No such event found!"),this)}),this.register("off",function(e,r){if(void 0===e&&void 0===r){for(var o in n)n[o].$$OFF=!0;return this}if("string"==typeof e&&void 0===r){var i=GetEventArray(e);return i&&(i.$$OFF=!0),this}if("string"==typeof e&&"function"==typeof r){var i=GetEventArray(e);if(r.$$MOUSEFUNCSEARCH=!0,i){for(var a=null,o=0;o<i.length;o++)if(i[o].$$MOUSEFUNCSEARCH){a=o;break}return null!==a&&i.splice(a,1),this}}return GetEventArray(e)||t.warn({e:e},"Unable to uset event handler for {[e]}. no such event"),"function"!=typeof r&&t.warn({e:e,f:r},"Unable to unset function {[f]} from event {[e]}. Not a function!"),this}),this.register("mouseCheckFunction",function(n){return"string"==typeof n?(e[n+"CheckFunction"]&&(o=e[n+"UserCheckFunction"]),this):"function"!=typeof n?(t.warn({f:n},"Unable to set check function! {[f]} is not a function!"),this):(o=n,this)}),this.register("disable",function(){return r=!0,this}),this.register("enable",function(){return r=!1,this}),this.register("disabled",function(){return r}),this.check=function(e,t){return!r&&o.call(e,[t[0],t[1]])};var i=null;this.cursorTransformFunction=function(e){"function"==typeof e&&(i=e)},this.applyCursorTransform=function(e){return i?i.call(this,e):e},this.hasEvent=function(e){return n[e]&&n[e].length&&!n[e].$$OFF},this.propagate=function(e,t){var n=e.parent();if(n){var r=n.extension("Mouse");if(r.hasEvent(t.type())){var o=t.type(),i=t.originalTarget.call({$$MOUSEPROPAGATIONSETTER:n});r.resolve(n,o,i)}}},this.resolve=function(e,n,o){if(!r){var i=GetEventArray(n);if(i){if(i.$OFF)return;for(var a=0;a<i.length;a++)i[a].call(e,o);o.propagate()&&this.propagate(e,o)}else t.warn({e:n},"Unable to resolve event [{e}]. No such event!")}};for(var a in n)n[a].$$OFF=!1}]),$R.plugin("Objects",["Debug",function Offset(e){function ObjectOffsetFunction(){var e=n.get("position"),r=[e[0],e[1]],o=t.parent();if(o){var i=o.offset();r[0]+=i[0],r[1]+=i[1]}return r}var t=this.object(),n=null,r=null;this.purge=function(){if(n&&r||(n=t.extension("Style"),r=t.extension("Cache")),r.purge("offset"),"Group"==t.type()){var e=t.extension("Layers");e.forEach(function(){this.extension("Offset").purge()})}},this.register("offset",function(){return n||(n=this.extension("Style"),r=this.extension("Cache")),r.value("offset",ObjectOffsetFunction)})}]),$R.plugin("Objects",["Debug",function Style(e){function GetSetterFunction(r,o){return function(i){var a=o.apply(this,[i,t[r].value]),s=t[r].value;if(a||"boolean"!=typeof a){var u=[s,a];t[r].value=a,n[r]||(n[r]=[]);for(var c=0;c<n[r].length;c++)n[r][c].apply(this,u)}else e.warn("Unable to set property ["+r+"]. Invalid value!")}}function GetGetterFunction(e,n){return function(){return n.call(null,t[e].value)}}function StyleType1(t,n){var o=this;r[t]?r[t].apply(o,[n]):e.warn({property:t,type:o.type()},"Style / Object type {type} has no property {property}")}function StyleType2(n){var o=this,i=[];for(var a in n)n.hasOwnProperty(a)&&r[a]&&(r[a]?i.push({ordering:t[a].ordering,property:a,setter:r[a]}):e.warn({property:a,type:o.type()},"Style / Object type {type} has no property {property}"));if(i.length){i.sort(function(e,t){return e.ordering-t.ordering});for(var s=0;s<i.length;s++)i[s].setter.apply(o,[n[i[s].property]])}else e.warn("Style / No properties to be applied!")}function StyleType3(n){var r=this;return o[n]?o[n].apply(r,[t[n].value]):(e.warn({property:property,type:r.type()},"Style / Object type {type} has no property {property}"),this)}var t={},n=[],r={},o={};this.register("style",function(t,n){if("string"==typeof t&&void 0!==n)StyleType1.apply(this,[t,n]);else if("object"==typeof t)StyleType2.apply(this,[t]);else{if("string"==typeof t&&void 0===n)return StyleType3.apply(this,[t]);e.error("Style / Invalid style function arguments!")}return this}),this.register("watch",function(t,r){if("string"!=typeof t){if("object"!=typeof t||t.constructor!==Array)return void e.error("Style / Property is not an array or string")}else if("function"!=typeof r)return void e.error("Style / Callback is not a function!");if(t.constructor===Array)for(var o=0;o<t.length;o++)"string"==typeof t[o]?(n[t[o]]&&"object"==typeof n[t[o]]&&n[t[o]].constructor===Array||(n[t[o]]=[]),n[t[o]].push(r)):e.error({i:o},"Style / Property {i} is not a string!");else"string"==typeof t?(n[t]&&n[t].constructor===Array||(n[t]=[]),n[t].push(r)):e.error("Style / Property is not an array or string")}),this.define=function(n,i,a,s,u){return t[i]?void e.error({name:i},"Style / Duplicated Property [{name}]"):"string"!=typeof i||0===i.length?void e.error("Style / Property name is not a string!"):"function"!=typeof u||"function"!=typeof s?void e.error("Style / Unable to define property. Getter or setter is undefined!"):("number"!=typeof n&&e.error("Style / Unable to define property setter ordering!"),t[i]={ordering:n,value:a},r[i]=GetSetterFunction(i,s),void(o[i]=GetGetterFunction(i,u)))},this.get=function(n){return t[n]?t[n].value:(e.warn("Getting value of property that does not exist!"),!1)},this.ordering=function(n){return t[n]?t[n].ordering:(e.warn("Getting ordering of property that does not exist!"),!1)}}]),$R.plugin("Objects",["Debug","+Model","@inject",function Text(e,t,n,r){this.applyTo("Text");var o=this.object();if("Text"===o.type()){var a=[],s=/((\S+\s+)|(\S+$))/g,u=o.extension("Style"),c="",l=!1,f=[1/0,1/0],h=0,p=0;this.register("lines",function(){this.update();for(var e=[],t=0;t<a.length;t++)e.push(a[t].string())}),this.register("words",function(){this.update();for(var e=[],t=0;t<a.length;t++)for(var n=a[i].words(),r=0;r<n.length;r++)e.push(n.string());return e}),this.limits=function(e,t){f[0]=e,f[1]=t,l=!0},o.watch("str",function(e,t){t!==c&&(c=t)}),o.watch(["str","fontSize","lineHeight","color","weight","style"],function(){l=!0}),this.update=function(e){if(l||e){var t=c.match(s),r=0,o=0,i=u.get("size"),f=0,v=u.get("systemFont"),g=u.get("fontSize"),d=u.get("lineHeight"),y=u.get("weight"),m=u.get("color"),b=u.get("style");a=[];for(var w=0;w<t.length;w++){var C=t[w].match(/\n/g),A=t[w].match(/\S+/g),x=n("$TextWordClass").string(A[0]);a[o]||(a[o]=n("$TextLineClass").font(v).size(g).height(d).color(m).style(b).weight(y)),a[o].push(x),r=a[o].width(),(r>=i[0]||C)&&o++,r>f&&(f=r+4)}p=a.length*u.get("lineHeight"),g>d?p+=g-d:g<d&&(p-=d-g),h=f,l=!1}return this},this.textBlockHeight=function(){return this.update(),p},this.textBlockWidth=function(){return this.update(),h},this.forEachLine=function(e){this.update();for(var t=0;t<a.length;t++)e.apply(a[t],[t,a[t]])}}}]),$R.plugin("Objects",["Debug",function Tree(e){function checkTree(e){return!!e.$$TREESEARCHVALUE||!!e.parent()&&!!checkTree(e.parent())}function treeViolation(t,n){return"Group"===t.type()?(n.$$TREESEARCHVALUE=!0,checkTree(t)?(t.$$TREESEARCHVALUE?t.parent()&&e.warn({},"You try to append group parent into itself."):e.warn({},"You try to append group parent into it's children."),delete n.$$TREESEARCHVALUE,!0):(delete n.$$TREESEARCHVALUE,!1)):"Group"!==t.type()?(e.warn({target:t.type(),object:n.type()},"Yoy try to append [{object}] into [{target}]."),!0):void 0}var t=null,n=null;this.register("append",function(t){if("Group"!==this.type())e.watch({type:this.type()}," Can not append. type[{type}] of parent is not allowed!");else if(!treeViolation(this,t)){n||(n=this.extension("Layers"));var r=t.parent(),o=t.extension("Tree");if(r){var i=r.extension("Layers"),a=t.layer();i.remove(t),n.place(a,t),o.parent(this)}else{var a=t.layer();n.place(a,t),o.parent(this)}var s=this.extension("Box");s.purge()}return this}),this.register("appendTo",function(e){return e.append(this),this}),this.register("parent",function(){return t}),this.parent=function(n){return n.type&&"Group"===n.type()||e.error("Object Tree Extension / Unable to set object as parent. Not a group!"),n?void(t=n):t}}]),$R.service(["@Canvas","@Config","Debug",function Canvas(Canvas,e,t){function compareOnResize(e){if("%"!==a&&"%"!==s)return i[0]=r,i[1]=o,Canvas.size(i[0],i[1]),!1;var t=h,n=p;Canvas.size(0,0),v&&clearTimeout(v),v=setTimeout(function(){var u=Canvas.element().parentNode,c=window.getComputedStyle(u,null);p=parseInt(c.getPropertyValue("height")),h=parseInt(c.getPropertyValue("width")),t!==h&&"%"===a&&t!==h&&(i[0]=Math.floor(h*(r/100))),n!==p&&"%"===s&&(i[1]=Math.floor(p*(o/100))),Canvas.size(i[0],i[1]),v=null,e()},200)}function GetCanvasOffset(e){var t=e?"offsetLeft":"offsetTop",n=0,r=Canvas.element();do isNaN(r[t])||(n+=r[t]);while(r=r.offsetParent);return n}function WindowResizeCallback(){l&&compareOnResize(function(){u[0]=GetCanvasOffset(0),u[1]=GetCanvasOffset(1);for(var e=0;e<n.length;e++)n[e](i[0],i[1]);ResolveCanvasEventArray("canvasresize",[new RCanvasResizeEvent])})}function CanvasSwitchCallback(){u[0]=GetCanvasOffset(0),u[1]=GetCanvasOffset(1),ResolveCanvasEventArray("canvasswitch",[new RCanvasSwitchEvent]),WindowResizeCallback()}function GetCanvasEventArray(e){return g[e]}function ResolveCanvasEventArray(e,n){if("object"!=typeof n||n.constructor!==Array)return void t.warn({e:e},"Canvas : unable to resolve event array [{e}]. Data is not an array!");var r=GetCanvasEventArray(e);if(!r)return void t.warn({e:e},"Unable to resolve event [{e}] no such event!");for(var o=0;o<r.length;o++)r[o].apply(f,n)}function GetMouseRelativePosition(e){return[e.pageX-u[0]-c[0],e.pageY-u[1]-c[1]]}function RCanvasMouse(e){this.page=[e.pageX,e.pageY],this.sceen=[e.pageX-c[0],e.pageY-c[1]],this.position=GetMouseRelativePosition(e)}function RCanvasMouseEvent(e){this.original=e,this.type=e.type,this.mouse=new RCanvasMouse(e),this.canvas=f}function RCanvasResizeEvent(){this.type="canvasresize",this.canvas=f,this.offset=[u[0],u[1]],this.size=[r,o],this.original=[r,o],this.units=[a,s],"%"===a&&(this.size[0]=h*(r/100)),"%"===s&&(this.size[1]=p*(o/100))}function RCanvasSwitchEvent(){this.type="canvasswitch",this.canvas=f,this.offset=[u[0],u[1]],this.size=[r,o],this.original=[r,o],this.units=[a,s],"%"===a&&(this.size[0]=h*(r/100)),"%"===s&&(this.size[1]=p*(o/100))}var n=[],r=0,o=0,i=[0,0],a="px",s="px",u=[0,0],c=[0,0],l=Canvas.element(),f=this;e.define("size",[0,0],{isArray:!0,custom:function(e){if(!("string"!=typeof e[0]&&typeof e[0]!==Array||"string"!=typeof e[0]&&"number"!=typeof e[1]))return!0}}).watch(function(e){"number"==typeof e[0]?r=e[0]:"string"==typeof e[0]?e[0].match(/^[\d]+%$/)?(r=parseInt(e[0]),a="%"):(r=1e3,a="px",t.warn({width:e[0]},"{width} is not a valid value for canvas.size[0]. Width set as 1000px")):(r=1e3,t.warn({width:e[0]},"{width} is not a valid value for canvas.size[0]. Width set as 1000px")),"number"==typeof e[1]?o=e[1]:"string"==typeof e[1]&&e[1].match(/^[\d]+%$/)?(o=parseInt(e[1]),s="%"):(o=800,t.warn({height:e[1]},"{height} is not a valid value for canvas.size[1]. Width set as 800px")),WindowResizeCallback()});var h=0,p=0,v=null;this.resize=function(e){"function"==typeof e&&n.push(e)},this.width=function(){return"%"===a?h*(r/100):r},this.height=function(){return"%"===a?p*(o/100):o};var g={mousemove:[],mousedown:[],mouseup:[],mouseleave:[],mouseenter:[],canvasresize:[],canvasswitch:[]};this.on=function(e,n){var r=GetCanvasEventArray(e);return r?("function"!=typeof n&&t.warn({f:e},"Canvas : Unable to set event handler [{f}]"),void r.push(n)):void t.warn({e:e},"Canvas : Unable to set event handler for event [{e}]")};var d={mousemove:function(e){ResolveCanvasEventArray("mousemove",[new RCanvasMouseEvent(e)])},mousedown:function(e){ResolveCanvasEventArray("mousedown",[new RCanvasMouseEvent(e)])},mouseup:function(e){ResolveCanvasEventArray("mouseup",[new RCanvasMouseEvent(e)])},mouseleave:function(e){ResolveCanvasEventArray("mouseleave",[new RCanvasMouseEvent(e)])},mouseenter:function(e){ResolveCanvasEventArray("mouseenter",[new RCanvasMouseEvent(e)])}};Canvas["switch"](function(){if(l)for(var e in d)d.hasOwnProperty(e)&&l.removeEventListener(e,d[e]);l=this.element();for(var e in d)d.hasOwnProperty(e)&&l.addEventListener(e,d[e]);CanvasSwitchCallback()}),window.addEventListener("scroll",function(){c[1]=window.pageXOffset||document.documentElement.scrollLeft,c[0]=window.pageYOffset||document.documentElement.scrollTop}),window.addEventListener("resize",WindowResizeCallback)}]),$R.service(["@Config",function Debug(e){function ResolveEvent(e,t){var n=null;"error"===e&&(n=i),"message"===e&&(n=a);for(var r=0;r<n.length;r++)n[r](t)}function GetMessage(e,o,i){o=o.toString();var a=o.match(n),s={};if(a)for(var u=0;u<a.length;u++){var c=a[u].match(r)[0];c&&(s[c]={replace:a[u],data:e[c].toString()})}for(var l in s)s.hasOwnProperty(l)&&(o=o.replace(s[l].replace,s[l].data));return o=t+o,i&&i.constructor&&i.constructor.name&&(o="["+i.constructor.name+"] : "+o),o}var t="$R [Debug] : ",n=/{[a-zA-Z]+}/g,r=/[a-zA-Z]+/g,o=e.define("warnings",!1,{isBool:!0},function(e){o=e}),i=[],a=[];this.on=function(e,t){"function"==typeof t&&("error"===e&&i.push(t),"message"===e&&a.push(t))},this.error=function(e,t,n){throw"string"==typeof e&&(n=t,t=e,e={}),t=GetMessage(e,t,n),ResolveEvent("error",t),new Error(t)},this.warn=function(e,t,n){o&&("string"==typeof e&&(n=t,t=e,e={}),t=GetMessage(e,t,n),ResolveEvent("message",t),console.warn(t))}}]),$R.service(["@sources","@Canvas","@inject","Debug",function Keyboard(e,t,n,r){function OnAppTick(){for(var e=0;e<u.length;e++)u[e]();u=[]}function getQueueFunc(e){return function(){var t=e.keyCode;if(o[t]&&o[t][e.type])for(var r=0;r<o[t][e.type].length;r++){var i=n("$KeyboardEvent").build(e);o[t][e.type][r].apply(i,[t,e.type])}}}var o={},i=!1,a=!0,s=!0,u=[];this.keydown=function(e,t){return this.on(e,"keydown",t)},this.keyup=function(e,t){return this.on(e,"keyup",t)},this.disable=function(){return a=!1,this},this.enable=function(){return a=!0,this},this.on=function(e,t,n){return"number"==typeof e&&"string"==typeof t?"keyup"===t||"keydown"===t?"function"==typeof n?(o[e]||(o[e]={}),o[t]||(o[e][t]=[]),o[e][t].push(n)):r.warn("Event callback is not a function"):r.warn({e:t},"No such type of event as [{e}]"):r.warn({c:e},"Wrong key code [{c}]"),this};var c=!1;t.element().addEventListener("mousedown",function(){c=!0}),window.addEventListener("mousedown",function(){s=!!c,c=!1}),window.addEventListener("keydown",function(e){i&&a&&s&&u.push(getQueueFunc(e))}),window.addEventListener("keyup",function(e){i&&a&&s&&u.push(getQueueFunc(e))}),e.$on("start",function(){i=!0}),e.$on("stop",function(){i=!1}),e.$("tick",OnAppTick)}]),$R.service["class"]("Keyboard",[function KeyboardEvent(){var e=null,t=!1,n=!1,r=!1,o=!1,i=null;this.build=function(a){return e=a.keyCode,t=a.ctrlKey,n=a.altKey,r=a.shiftKey,o=a,i=a.type,delete this.build,this},this.type=function(e){return"string"==typeof e?i===e:i},this.code=function(){return e},this.shift=function(){return r},this.alt=function(){return n},this.ctrl=function(){return t},this.original=function(){return o}}]),$R.service(["@Canvas","Canvas","@Ticker","$Finder",function Dispatcher(e,t,n,r){function DefaultREvent(e,t){var n=e,r=!0,o=t,i=t;this.type=function(){return n},this.date=new Date,this.stopPropagation=function(){r=!1},this.propagate=function(){return r},this.target=function(){return o},this.propagated=function(){o.$$PROPAGATIONSEARCH=!0;var e=i.$$PROPAGATIONSEARCH;return delete o.$$PROPAGATIONSEARCH,!!e&&e},this.originalTarget=function(){if(this.$$MOUSEPROPAGATIONSETTER){var e=getEventByType(n,o);return e.originalTarget.call({$$RESETTARGET:this.$$MOUSEPROPAGATIONSETTER}),e}return this.$$RESETTARGET&&(o=this.$$RESETTARGET),i}}function MouseEvent(e,t){DefaultREvent.apply(this,[e,t]),this.cursor=[a.current[0],a.current[1]]}function DragEvent(e,t){DefaultREvent.apply(this,[e,t]),this.drag={start:[s.start[0],s.start[1]],current:[s.current[0],s.current[1]],delta:[s.delta[0],s.delta[1]]}}function getEventByType(e,t){return"mousemove"===e||"mouseleave"===e||"mouseenter"===e||"mousedown"===e||"mouseup"===e?new MouseEvent(e,t):"dragstart"===e||"dragend"===e||"dragmove"===e?new DragEvent(e,t):void 0}function Dispatch(e,t){var n=t.extension("Mouse");n&&n.hasEvent(e)&&n.resolve(t,e,getEventByType(e))}function resolveEventByType(e){"mouseenter"!==e&&"dragstart"!==e&&"dragend"!==e&&"dragmove"!==e&&"mousemove"!==e&&"mouseup"!==e&&"mousedown"!==e||!o.current||Dispatch(e,o.current),"mouseleave"!==e&&"dragend"!==e||!o.previous||Dispatch(e,o.previous)}function resolveDragStart(){f=!0,s.start[0]=a.current[0],s.start[1]=a.current[1],resolveEventByType("dragstart")}function resolveDragEnd(){s.current[0]=a.current[0],s.current[1]=a.current[1],s.delta[0]=s.start[0]-s.current[0],s.delta[1]=s.start[1]-s.current[1],resolveEventByType("dragend"),f=!1}function DispatchEvents(){if(i.current!==i.old&&i.current&&resolveEventByType("mousedown"),i.current&&i.current!==i.old&&!f&&resolveDragStart(),a.old[0]!==a.current[0]||a.old[1]!==a.current[1]){if(o.current&&!o.previous&&resolveEventByType("mouseenter"),!o.current&&o.previous&&(resolveEventByType("mouseleave"),resolveDragEnd()),o.current&&o.previous){o.current.$$MOUSESEARCH=!0;var e=!1;o.previous.$$MOUSESEARCH||(e=!0),delete o.current.$$MOUSESEARCH,e&&(resolveDragEnd(),resolveEventByType("mouseleave"),resolveEventByType("mouseenter"),resolveDragStart())}i.current&&i.current===i.old&&f&&(s.current[0]=a.current[0],s.current[1]=a.current[1],s.delta[0]=s.start[0]-s.current[0],s.delta[1]=s.start[1]-s.current[1],resolveEventByType("dragmove")),i.current||i.current!==i.old||resolveEventByType("mousemove")}!i.current&&i.current!==i.old&&f&&resolveDragEnd(),i.current||i.current===i.old||(resolveEventByType("mouseup"),f=!1),o.previous=o.current,i.old=i.current,a.old[0]=a.current[0],a.old[1]=a.current[1]}function UpdateTargets(){o.previous=o.current,o.current=r.check(a.current)}function eventDispatcherTick(){if(h=!h){if(u)return;UpdateTargets(),DispatchEvents()}}var o={current:null,previous:null},i={current:!1,previous:!1},a={old:[0,0],current:[0,0]},s={start:[0,0],current:[0,0],delta:[0,0]},u=!0,c=!1,l=!1,f=!1;t.on("mousedown",function(){c&&l&&(i.previous=i.current,i.current=!0,u=!1)}),t.on("mouseup",function(){c&&l&&(i.previous=i.current,i.current=!1,u=!1)}),t.on("mousemove",function(e){c&&l&&(a.current[0]=e.mouse.position[0],a.current[1]=e.mouse.position[1],u=!1)}),t.on("mouseleave",function(){l=!1}),t.on("mouseenter",function(){l=!0});var h=!1;e.queue(-1,eventDispatcherTick),n.on("start",function(){c=!0}),n.on("stop",function(){c=!1}),n.on("error",function(){c=!1})}]),$R.service(["@inject","+Easing","@Canvas","Debug",function Morphine(e,t,n,r){function check(e,n,o,i,a,s){if("number"!=typeof e||"number"!=typeof n)return r.error({},"Morphine / Unable to create. Start value is invalid"),!1;if("function"!=typeof o)return r.error({},"Morphine / Unable to create. End value is invalid"),!1;if("string"!=typeof i)return r.error({},"Morphine / Unable to create. Easing is not a string"),!1;if("number"!=typeof a||a<=0)return r.error({},"Morphine / Unable to create. Duration is less than 0 or not a number"),!1;var u=t.get(i);return u?u:(r.error({easing:i}," Morphine / Unable to create. No such easing {easing}"),!1)}var o=[];this.instance=function(t,n,o,i,a,s){i=check.apply(this,arguments);var u=e("$Morphine"),c=u.config(t,n,o,a,i,s);return c.morphine=u,c&&"function"==typeof c?c:(r.error({},"Unable to config morphine due to some config error."),null)},this.create=function(t,n,i,a,s,u){a=check.apply(this,arguments);var c=e("$Morphine"),l=c.config(t,n,i,s,a,u);return l&&"function"==typeof l?(l.$m=c,o.push(l),c):void r.error({},"Morphine / Unable to config morphine. Due to some error.")},n.queue(-2,function processMorphines(e,t){for(var t=t.getTime(),n=[],r=0;r<o.length;r++)o[r].$m.done()||(o[r](t),n.push(o[r]));o=n})}]),$R.service["class"]("Objects",["@extend","@inject","<Plugins",function Graphics(e,t,n){var r=null,o={};this.extension=function(e){return o[e]},this.type=function(){return r},this.defineType=function(i){if("string"==typeof i){delete this.defineType,r=i;for(var a=n.list(),s=0;s<a.length;s++)o[a[s]]=t("$Plugin"),o[a[s]].defineObject(this),e(o[a[s]],"<"+a[s]),o[a[s]].matchType(r)?o[a[s]].wrap(this):delete o[a[s]];e(this,"$"+i+"ObjectModel"),e(this,"$DefaultObjectDrawer"),e(this,"$"+i+"ObjectDrawer"),e(this,"$DefaultObjectType"),e(this,"$"+i+"ObjectClass")}}}]),$R.service(["@inject","Tree",function Objects(e,t){function InjectByType(t,n){var r=e("$Graphics");return r.defineType(t),n&&n.length&&r.style.apply(r,n),r}this.group=function(){return InjectByType("Group",arguments)},this.line=function(){return InjectByType("Line",arguments)},this.rect=function(){return InjectByType("Rectangle",arguments)},this.circle=function(){return InjectByType("Circle",arguments)},this.image=function(){return InjectByType("Image",arguments)},this.sprite=function(){return InjectByType("Sprite",arguments)},this.text=function(){return InjectByType("Text",arguments)},this.area=function(){return InjectByType("Area",arguments)},t.root(this.group())}]),$R.service(["@Canvas","@inject","Debug",function Resource(e,t,n){function GetResourceByURL(e,t){"font"===e&&(t=t[0]);var n=null,r=o[e+"s"];if(!r)return n;for(var i=0;i<r.length;i++)if(r[i].url()===t){n=r[i];break}return n}function InjectByType(e,n){var a=GetResourceByURL(e,n);if(a)return a;var s=e,u=t("$"+e.charAt(0).toUpperCase()+e.slice(1));return u.on("load",function(){i--,ResolveEvent("load",[this,i,r.length])}),u.on("error",function(){i--,ResolveEvent("error",[this,i,r.length])}),u.url(n),o[s+"s"].push(u),r.push(u),i++,ResolveEvent("add",[u,i,r.length]),u}function preloadRequest(e){if(e.images&&e.images.constructor===Array)for(var t=0;t<e.images.length;t++)"string"==typeof e.images[t]&&(/^([./_\da-zA-Z]+)(\[(\d+)\])$/.test(e.images[t])?a.sprite(e.images[t]):a.image(e.images[t]));if(e.audio&&e.constructor===Array)for(var t=0;t<e.audio.length;t++)"string"==typeof e.audio[t]&&a.audio(e.audio[t]);if(e.fonts&&e.fonts.constructor===Array)for(var t=0;t<e.fonts.length;t++)if(e.fonts[t]&&"object"==typeof e.fonts[t]&&"string"==typeof e.fonts[t].name&&e.fonts[t].name.length){var n=e.fonts[t].weight&&"number"==typeof e.fonts[t].weight?e.fonts[t].weight:400,r="italic"===e.fonts[t].style?e.fonts[t].style:"normal";a.font(e.fonts[t].name,n,r)}}function ResolveEvent(e,t){var n=u[e];if(n)for(var r=0;r<n.length;r++)n[r].apply(a,t)}var r=[],o={images:[],sprites:[],fonts:[],audios:[]},i=0,a=this,s=null;this.image=function(e){return InjectByType("image",e)},this.sprite=function(e){return InjectByType("sprite",e)},this.audio=function(e){return InjectByType("audio",e)},this.preload=function(e){preloadRequest(e)},this.preloadByUrl=function(e){s&&s.abort(),"string"==typeof e&&e.length>0&&(s=new XMLHttpRequest,s.addEventListener("load",function(){var t={};try{t=JSON.parse(response.responseText)}catch(r){n.error({url:e},"Unable to parse JSON from [{url}]. Unknown response format.")}preloadRequest(t)}),s.addEventListener("error",function(){n.error({url:e},"Unable to get resources from [{url}] to preload. Server error."),preloadRequest({})}),s.addEventListener("abort",function(){n.warn({url:e},"Unable to get resources from [{url}] to preload. Request aborted."),preloadRequest({})}),s.open("GET",e,!0),s.setRequestHeader("Content-Type","application/json"),s.send())},this.font=function(e,t,n){return InjectByType("font",[e,t,n])};var u={load:[],error:[],add:[]};this.on=function(e,t){if("string"==typeof e){var r=u[e];r?"function"==typeof t?r.push(t):n.warn({event:e},"Unable to set event [{event}] callback. func is not a function!"):n.warn({event:e},"Unable to set event [{event}]. No such event")}else n.warn("Unable to set event callback. Event name is not a string")},this.off=function(e,t){if("string"==typeof e){var r=u[e];if(r){if("function"==typeof t){var o=[];t.$$SEARCH=!0;for(var i=0;i<r.length;i++)r[i].$$SEARCH||o.push(r[i]);delete t.$$SEARCH,u[e]=o}}else n.warn({event:e},"Unable to unset callback for event [{event}]. No such event")}else n.warn("Unable to unset event. Event is not a string")},this.list=function(){return[].concat(o.images).concat(o.audios).concat(o.fonts).concat(o.sprites)},e.queue(-2,function updateResources(e,t){for(var n=t.getTime(),r=0;r<o.sprites.length;r++)o.sprites[r].ready()&&1===o.sprites[r].loaded()&&o.sprites[r].tick(n)})}]),$R.service(["@inject",function State(e){function ParseAddress(e){var t=e.match(/^([a-zA-Z]+).([a-zA-Z]+)$/),n=t[0],r=t[1];if(n&&r)return{state:n,prop:r}}var t={};this.watch=function(n,r){"function"==typeof r&&(n=ParseAddress(n),n&&(t[n.state]||(t[n.state]=e("$State")),t[n.prop].when(n.prop,r)))},this.define=function(n,r){n=ParseAddress(n),n&&(t[n.state]||(t[n.state]=e("$State")),t[n.state].define(n.prop,r))}}]),$R.service(["Debug","@Canvas","@Config",function Tree(e,t,n){var r=null,o=null,i=null,a=n.define("clear",!1,{isBool:!0}).watch(function(e){a=e});this.root=function(t){if(r)return r;if(!t.type||"function"!=typeof t.type||"Group"!==t.type())return void e.error({},"Tree / Unable to set tree root! Wrong object type!");r=t;var n=r.extension("Drawer");return n?n.draw&&"function"==typeof n.draw?(o=n,i=r.extension("Style"),r):void e.error({},"Tree / Unable to register root Drawer. Drawer.draw is not a function!"):void e.error({},"Tree / Unable to get Drawer extension!")},t.queue(0,function drawGraphicsTree(e,t,n){r&&o&&(a&&e.clearRect(0,0,e.canvas.offsetWidth,e.canvas.offsetHeight),o.draw.apply(r,arguments))})}]),$R.service(["@Audio","@inject","@Config","Debug",function Sound(e,t,n,r){n.define("filters",["Delay","Gain"],{isArray:!0});var o=t("$Audio").build("$$DESTINATION","destination"),i={},a=0,s=0,u={$$DESTINATION:o};this.sample=function(e,n,o){if("string"==typeof e&&e.length>0){if(i[e])return i[e];"string"==typeof o&&0!==o.length||(o="UserSound["+a+"]"),a++;var s=t("$Audio").build(o,e);"string"==typeof n&&0!==n.length||(n="$$DESTINATION");var u=this.channel(n);return s.connect(u),i[s.url()]=s,s}r.warn({url:e},"[{url}] is not valid audio url or empty.")},this.channel=function(e){if("string"==typeof e&&e.length>0){if(u[e])return u[e];var n=t("$Audio").build(e);return n.connect(o),u[e]=n,s++,n}},this.channels=function(e){var t={},e=!!e;for(var n in u)u.hasOwnProperty(n)&&"$$DESTINATION"!==n&&(e?t[n.url()]=n[n]:t[n]=u[n]);return t},this.sounds=function(e){var t={},e=!!e;for(var n in i)i.hasOwnProperty(n)&&(e?t[n]=i[n]:t[i[n].name()]=i[n]);return t},this.destination=function(){return u.$$DESTINATION}}]),$R.plugin["class"]("Objects","Animation",["+Animation","Morphine",function Animation(e,t){function Resolve(e){if(e==p)for(var t=0;t<a.length;t++)c.hasOwnProperty(a[t].morph.property())&&c[a[t].morph.property()].apply(u,[n,a[t].result]);else if(e==v){i=!0;for(var r={},t=0;t<a.length;t++)r[a[t].morph.property()]=a[t].result;g.done(1,r),h()}}var n=0,r=null,o=null,i=!1,a=null,s=null,u=null,c=null,l=!1,f=!1,h=null,p="type",v="complete",g=null;this.target=function(){return u},this.queue=function(){return l},this.active=function(){return f},this.done=function(){return i},this.hasProperty=function(e){for(var t=0,n=0;n<a.length;n++)if(a[n].morph.property()==e){t=n+1;break}return t},this.properties=function(){for(var e=[],t=0;t<a.length;t++)e.push(a[t].morph.property());return e},this.stop=function(e){if(e){var t=this.hasProperty(e);t&&(t-=1,a.splice(t,1))}else a=[]},this.start=function(){if(!f){f=!0;for(var n=[],i=0;i<a.length;i++){var u=a[i].morph.get(a[i].value);void 0!==u&&u.start()!==!1&&u.end()!==!1&&n.push(a[i])}a=n;var c=e.getTickFunction();s=t.create(0,1,function(e,t){if(0===a.length)Resolve(v),s.stop();else{for(var n=0;n<a.length;n++)a[n].result=c(t,e,a[n].morph.start(),a[n].morph.end()),a[n].morph.apply(e,a[n].result);Resolve(p),1===e&&Resolve(v)}},o,r,0)}},this.config=function(t,n,i,s){e.normalizeConfig(i),r=i.duration,o=i.easing,c=i.step,l=i.queue,h=s,a=n,u=t,g=i}}]),$R.plugin["class"]("Objects","Animation",["Debug",function Morph(e){function SetStartValue(e){t=e}function SetEndValue(e){n=e}var t,n,r=null,o=null,i=null,a=null,s=!1,u=0;this.start=function(){return t},this.end=function(){return n},this.property=function(){return r},this.ordering=function(){return u},this.get=function(e){return o.apply(a,[SetStartValue,SetEndValue,e]),this},this.valid=function(){return s},this.apply=function(e,t){a.style(r,i.apply(a,[t,e]))},this.config=function(t,n,c,l,f){return"string"!=typeof t?void e.error({name:t},"Unable to config Morph. arg1 [{name}] is not a string!"):"object"!=typeof n?void e.error({name:t},"Unable to config Morph. arg3 is not an object!"):"function"!=typeof l?void e.error({name:t},"Unable to config Morph. arg4 is not a function!"):"number"!=typeof c?void e.error({name:t},"Unable to config Morph. arg2 is not a number!"):"function"!=typeof f?void e.error({name:t},"Unable to config Morph. arg5 is not a function!"):(r=t,o=l,i=f,u=c,a=n,void(s=!0))}}]),$R.plugin["class"]("Objects","Box",[function Box(){var e={size:[0,0],position:[0,0]},t={margin:[0,0,0,0],position:[0,0],size:[0,0]};this.get=function(){return{size:[e.size[0],e.size[1]],position:[e.position[0],e.position[1]]}},this.set=function(n,r,o,i,a,s,u,c){e.size[0]=o,e.size[1]=i,e.position[0]=n,e.position[1]=r,t.margin[0]=a,t.margin[1]=s,t.margin[2]=u,t.margin[3]=c,t.size[0]=c+o+s,t.size[1]=a+i+u,t.position[0]=n-c,t.position[1]=r-a},this.value=function(){return e},this.sprite=function(){return t}}]),$R.plugin["class"]("Objects","Text",["@extend","@inject","+Drawer",function TextLineClass(e,t,n){function getWidth(){if(s){r=0;for(var e=0;e<o.length;e++)r+=o[e].width();return s=!1,r}return r}e(this,"$TextElementClass");var r=0,o=[],i=t("$TextSpaceClass"),a=0,s=!1;this.width=function(){return n.measureText(getWidth)},this.length=function(){return a},this.words=function(e){if(e&&"object"==typeof e&&e.constructor===Array){for(var t=0;t<e.length;t++)o.push(e[t].size(this.size()).height(this.height()).style(this.style()).weight(this.weight()).color(this.color()).font(this.font()));a=o.length;for(var n=[],t=0;t<o.length;t++)n.push(o[t]);return this.propertyChanged("string",n),this}return s=!0,o},this.push=function(e){return o.length>0&&o.push(i),o.push(e.size(this.size()).height(this.height()).style(this.style()).weight(this.weight()).color(this.color()).font(this.font())),s=!0,this},this.string=function(){for(var e="",t=0;t<o.length;t++)e+=o[t].string();return e},this.onPropertyChange(function(e,t){"string"!==e&&i[e](t)})}]),$R.plugin["class"]("Objects","Text",["@extend","+Drawer",function TextSpaceClass(e,t){function getWidth(e){return e.font=r.extractFontString(),e.measureText(n).width}e(this,"$TextElementClass");var n=" ",r=this;this.string=function(){return n},this.width=function(e){return t.measureText(getWidth)}}]),$R.plugin["class"]("Objects","Text",["+Color",function TextElementClass(e){function resolve(e,t){for(var n=0;n<s.length;n++)s[n].apply(u,[e,t])}var t="rgba(0,0,0,1)",n="sans-serif",r=400,o=14,i=14,a="normal",s=[],u=this;this.size=function(e){return"number"==typeof e?(e<0&&(e=0),o=e,resolve("size",o),this):o},this.height=function(e){return"number"==typeof e?(e<0&&(e=0),i=e,resolve("height",i),this):i},this.weight=function(e){return"number"==typeof e?(e<100&&(e=100),e>900&&(e=900),e%100!==0&&(e-=e%100),r=e,resolve("weight",r),this):r},this.font=function(e){return"string"==typeof e&&e.length>0?(n=e,resolve("font",n),this):n},this.color=function(n){return"string"==typeof n?(e.colorToArray(n)&&(t=n,resolve("color",t)),this):t},this.style=function(e){return"normal"===e||"italic"===e||"oblique"===e?(a=e,resolve("style",a),this):a},this.extractFontString=function(){return a+" "+o+'px "'+n+"-"+r+'"'},this.onPropertyChange=function(e){"function"==typeof e&&s.push(e)},this.propertyChanged=function(e,t){resolve(e,t)}}]),
$R.plugin["class"]("Objects","Text",["+Color","@extend","+Drawer",function TextWordClass(e,t,n){function getWidth(e){return e.font=o.extractFontString(),e.measureText(r).width}t(this,"$TextElementClass");var r="",o=this;this.string=function(e){return"string"==typeof e?(r=e,this.propertyChanged("string",e),this):r},this.width=function(){return n.measureText(getWidth)},this.draw=function(e,t,n){return"number"!=typeof t&&(t=0),"number"!=typeof n&&(n=0),e.save(),e.fillStyle=this.color(),e.font=this.extractFontString(),e.fillText(r,t,n),e.restore(),this}}]),$R.service["class"]("Dispatcher",["Tree","Debug",function Finder(e,t){function CheckElement(e,t){if("Group"===e.type()){var n=null,r=e.extension("Layers");return r.forEach(function(){if(!this.disabled())if("Group"===this.type()){var e=CheckElement(this,t);e&&(n=e)}else{var r=this.extension("Mouse"),e=r.check(this,t);e&&(n=e)}}),n}}this.check=function(n){var r=e.root();return r?"object"!=typeof n||n.constructor!==Array||2!==n.length||"number"!=typeof n[0]||"number"!=typeof n[1]?(t.warn({c:n},"ObjectFinder ; {[c]} is not a valid cursor value."),null):CheckElement(r,n):null}}]),$R.service["class"]("Morphine",[function Morphine(){function Tick(f){if(!l){if(c)return void(o=(new Date).getTime()-t*u);o||(o=(new Date).getTime()),u=(f-o)/t,u>1&&(u=1),1===u&&(n&&r>0?(r!==1/0&&r--,o=(new Date).getTime()):l=!0),i.apply(null,[u,e((f-o)/1e3,a,s-a,t/1e3),o])}}var e=null,t=1,n=!1,r=1,o=null,i=null,a=0,s=0;this.done=function(){return l},this.pause=function(){c=!0},this.paused=function(){return c},this.stop=function(){l=!0};var u=0,c=!1,l=!1;this.config=function(r,o,u,c,l,f){if(!("number"!=typeof r||"number"!=typeof o||"number"!=typeof c||c<0)&&"function"==typeof l&&"function"==typeof u)return"number"==typeof f&&(n=f),a=r,s=o,e=l,i=u,t=c>0?c:1,delete this.config,Tick}}]),$R.service["class"]("Objects",[function Canvas(){var e=document.createElement("canvas"),t=e.getContext("2d"),n=0,r=0;this.context=function(){return t},this.width=function(t){return"number"!=typeof t?n:(n=t,void e.setAttribute("width",n))},this.height=function(t){return"number"!=typeof t?r:(r=t,void e.setAttribute("height",r))},this["export"]=function(){return e}}]),$R.service["class"]("Objects",["@inject","Debug",function GraphicsAssembler(e,t){function SetSize(e,t){for(var r=0;r<o.length;r++)o[r].size(e,t);n.width(e),n.height(t),a=e,s=t}function compose(e){if(!c){if(u){var t=u.box().sprite();t.size[0]===a&&t.size[1]===s||SetSize(t.size[0],t.size[1])}c=!0}if(!l){r.clearRect(0,0,a,s);for(var i=0;i<o.length;i++)o[i].draw(r);l=!0}e.drawImage(n["export"](),0,0)}var n=e("$Canvas"),r=n.context(),o=[],i={},a=0,s=0,u=null,c=!1,l=!1;this.layer=function(n,r,a){return"number"!=typeof n?void t.warn({o:n},"Invalid order argument [{o}] is not a number."):"string"!=typeof r?void t.warn({n:r},"[{n}] is not valid name for layer"):"function"!=typeof a?void t.warn("updateFunc is not a function!"):(i[r]=e("$GraphicsAssemblerLayer"),i[r].f(a),i[r].ordering(n),i[r].update(),o.push(i[r]),o.sort(function(e,t){return e.ordering()-t.ordering()}),void(l=!1))},this.ready=function(){return l},this.box=function(e){u=e},this.size=function(e,t){e===a&&t===s||(SetSize(e,t),l=!1)},this.resize=function(){c=!1,l=!1},this.update=function(e){l=!1,i[e].update()},this.draw=compose}]),$R.service["class"]("Objects",["@inject","Debug",function GraphicsAssemblerLayer(e,t){function updateCanvas(e){s||(r.clearRect(0,0,o,i),r.save(),a&&a(r),s=!0,r.restore()),e.drawImage(n["export"](),0,0)}var n=e("$Canvas"),r=n.context(),o=0,i=0,a=null,s=!1,u=0;this.f=function(e){"function"==typeof e?(a=e,delete this.f):t.warn({f:e},"[{f}] is not a function")},this.size=function(e,t){o===e&&t===t||(n.width(e),n.height(t),o=e,i=t,s=!1)},this.ordering=function(e){return e&&"number"==typeof e&&(u=e),u},this.update=function(){s=!1},this.draw=updateCanvas}]),$R.service["class"]("Objects",function Plugin(){var e={},t={},n=null,r=[];this.defineObject=function(e){n=e,delete this.defineObject},this.object=function(){return n},this.matchType=function(e){if(0==r.length)return!0;for(var t=!1,n=0;n<r.length;n++)if(r[n]===e){t=!0;break}return this.applyTo&&(delete this.applyTo,delete this.matchType),t},this.applyTo=function(e){if("string"==typeof e)r.push(e);else if("object"==typeof e&&e.constructor===Array)for(var t=0;t<e.length;t++)"string"==typeof e[t]&&r.push(e[t]);delete this.applyTo},this.register=function(n,r,o){e[n]||(e[n]=r),o&&(t[n]=!0)},this.wrap=function(t){for(var n in e)e.hasOwnProperty(n)&&(t[n]||(t[n]=e[n]));delete this.wrap,delete this.register,delete this.clear},this.hasProperty=function(t){var n=!1;for(var r in e)if(e.hasOwnProperty(r)&&t==r){n=!0;break}return n},this.clear=function(e){for(var n in t)t.hasOwnProperty(n)&&delete e[n]}}),$R.service["class"]("Objects",[function AreaObjectClass(){}]),$R.service["class"]("Objects",["+Mouse",function CircleObjectClass(e){this.mouseCheckFunction(e.circleCheckFunction)}]),$R.service["class"]("Objects",["Tree",function DefaultObjectType(e){e.root(this).append(this)}]),$R.service["class"]("Objects",function GroupObjectClass(){}),$R.service["class"]("Objects",["+Mouse",function ImageObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction)}]),$R.service["class"]("Objects",function LineObjectClass(){}),$R.service["class"]("Objects",["+Mouse",function RectangleObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction);var t=this.extension("Mouse");t.cursorTransformFunction(e.rectCursorTransformFunction)}]),$R.service["class"]("Objects",["+Mouse",function SpriteObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction)}]),$R.service["class"]("Objects",["+Mouse",function TextObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction)}]),$R.service["class"]("Resource",["@extend","Debug",function Audio(e,t){function createAudio(){var e=new XMLHttpRequest;e.open("GET",o,!0),e.responseType="arraybuffer",e.onload=function(e){r(1),i=this.response,n("load",[i])},e.onerror=function(){r(-2),n("error",[]),t.error({url:o},"Unable to load audio [{url}].")},e.send()}e(this,"$Resource"),this.type="Audio";var n=null,r=null,o=null,i=null;this.on("init",function(e,t,i){n=t,r=i,o=e,createAudio()}),this["export"]=function(){return i}}]),$R.service["class"]("Resource",["@extend","Debug","@Config","@Fonts",function Font(e,t,n,r){function getFont(){r.font(s,a,u,c),document.getElementsByTagName("body")[0].appendChild(f),l=!0;var e=1e3,n=0,p=[f.offsetWidth,f.offsetHeight];f.style.fontFamily='"'+r.format(a)+"-"+u+'", sans-serif',h=setInterval(function(){f.offsetWidth===p[0]&&f.offsetHeight===p[1]||(document.getElementsByTagName("body")[0].removeChild(f),l=!1,clearInterval(h),o(1),i("load",[])),n++,n>e&&(o(-2),i("error",[]),t.warn({font:a+"-"+u},"Unable to load font [{font}]. Font pending timed out..."),document.getElementsByTagName("body")[0].removeChild(f),l=!1,clearInterval(h))},50)}e(this,"$Resource"),this.type="Font";var o=null,i=null,a=null,s=n.watch("fontDir",function(e){s=e,l&&document.getElementsByTagName("body")[0].removeChild(f),h&&window.clearInterval(h),getFont()}),u=(r.formats(),null),c=null,l=!1,f=document.createElement("div");f.setAttribute("class","reflect-font-loader-element"),f.style.fontFamily="sans-serif",f.style.fontSize="12px",f.style.lineHeight="12px",f.style.position="absolute",f.style.left="-9999px",f.style.top="-9999px",f.innerText='abcdefghijklmnopqrstuvwxyz 1234567890[!?,.<>"£$%^&*()~@#-=]',this.on("init",function(e,t,n){i=t,o=n,a=e[0],u=e[1],c=e[2],f.style.fontStyle=c,getFont()});var h=null;this["export"]=function(){return r.format(a)}}]),$R.service["class"]("Resource",["@extend","Debug",function Image(e,t){function CreateImage(){i=document.createElement("img"),i.addEventListener("load",function(){o(1),a=i.width,s=i.height,r("load",[])}),i.addEventListener("error",function(){o(-2),r("error",[]),t.error({url:n},"Unable to load image [{url}].")}),i.setAttribute("src",n)}e(this,"$Resource");var n=null,r=null,o=null,i=null,a=0,s=0;this.type="Image",this.on("init",function(e,t,i){r=t,o=i,n=e,CreateImage()}),this.width=function(){return a},this.height=function(){return s},this["export"]=function(){return i}}]),$R.service["class"]("Resource",["@extend","Debug",function Resource(e,t){function setStatus(e){return"number"!=typeof e?void t.error({val:e},"[{val}] is not valid value for status"):e>1||e<-2?void t.error({val:e},"[{val}] no such status possible!"):void(i=e)}function ResolveEvent(e,n){if(a[e]){n="object"==typeof n&&n.constructor==Array?n:[];for(var o=0;o<a[e].length;o++)a[e][o].apply(r,n)}else t.warn({e:e},"Unable to set event {e}. No such event!")}var n=null,r=this,o=!1,i=-1;this.loaded=function(){return 1==i},this.error=function(){return i==-2},this.loading=function(){return 0==i},this.url=function(e){return void 0==e?n:(void 0==n&&(n=e,i=0,o?ResolveEvent("init",[n]):(ResolveEvent("init",[n,ResolveEvent,setStatus]),o=!0)),n)};var a={init:[],load:[],error:[],loading:[]};this.on=function(e,n){var r=a[e],n="function"==typeof n&&n;return"load"==e&&1==i&&n.call(this),"error"==e&&i==-2&&n.call(this),r&&n?void a[e].push(n):void t.warn({e:e},"Unable to set handler for event [{e}].")}}]),$R.service["class"]("Resource",["@extend","Debug",function Sprite(e,t){function CreateCanvasArray(){for(var e=0,t=0;t<o;t++){g.push([]);for(var n=0;n<o;n++)e++,e<i&&g[t].push(document.createElement("canvas"))}}function SetCanvasSize(){c=Math.round(u/o),l=Math.round(s/o);for(var e=0;e<o;e++)for(var t=0;t<o;t++)if(g[e][t]){g[e][t].setAttribute("width",l),g[e][t].setAttribute("height",c);var n=g[e][t].getContext("2d");n.translate(-l*t,-c*e),n.drawImage(r,0,0)}}e(this,"$Resource");var n=null,r=null,o=0,i=0,a=0,s=0,u=0,c=0,l=0,f=12,h=null,p=null,v=!1,g=[];this.type="Sprite",this.on("init",function(e,t,o){h=o,p=t,n=e,r=document.createElement("img"),r.addEventListener("load",function(){h(1),s=r.width,u=r.height,v&&(CreateCanvasArray(),SetCanvasSize()),p("load",[])}),r.addEventListener("error",function(){h(-2),p("error",[])}),r.setAttribute("src",n)}),this.ready=function(){return v},this.width=function(){return l},this.height=function(){return c},this.spriteWidth=function(){return s},this.spriteHeight=function(){return u},this.fps=function(e){return"number"!=typeof e||e<=0?(t.warn({n:e},"[{n}] is not a correct fps number"),!1):(f=e,void(a=Math.round(i/f*1e3)))};var d=!1;this.pause=function(){d=!0},this.play=function(){d=!1},this.config=function(e){if(!v){if("number"!=typeof e||e<=0)return void t.warn({rows:e},"[{rows}] is not a valid frames number");o=Math.ceil(Math.sqrt(e)),i=e,a=Math.round(i/f*1e3),v=!0,CreateCanvasArray()}},this.frames=function(){return i};var y=0,m=0,b=(new Date).getTime();this.tick=function(e){if(e=e.getTime(),!d){var t=(e-b)/a;t>1&&(t=1,b=(new Date).getTime()),t<0&&(t=0);var n=Math.floor((i-1)*t);m=Math.floor(n/o),y=n-m*o}},this["export"]=function(){if(g[m][y])return g[m][y]}}]),$R.service["class"]("State",function Property(){var e=null,t=[];this.set=function(n){for(var r=0;r<t.length;r++)t[r](n,e);e=n},this.onset=function(e){"function"==typeof e&&t.push(e)}}),$R.service["class"]("State",["@inject",function State(e){function GetPropertyCallback(e){return function(n,r){if(t[e])for(var o=0;o<t.length;o++)t[e][o](n,r)}}var t={},n={};this.define=function(t,r){return n[t]?void n[t].set(r):(n[t]=e("$Property"),n[t].onset(GetPropertyCallback(t)),void n[t].set(r))},this.watch=function(e,r){"string"==typeof e&&"function"==typeof r&&(t[e]||(t[e]=[]),n[e]||this.def(e,null),t[e].push(r))}}]),$R.service["class"]("Sound",["@inject","Debug",function AnimationProvider(e,t){function findCompetitor(e,t){t.$$SELF=!0;for(var r=null,o=0;o<n.length;o++)if(!n[o].$$SELF&&n[o].active()&&!n[o].done()){for(var i=!1,a=0;a<e.length;a++)if(n[o].hasProperty(e[a])){i=!0;break}i&&(r||(r=[]),r.push(n[o]))}return delete t.$$SELF,r}function CheckAnimationQueue(){for(var e=[],t=0;t<n.length;t++)if(n[t].active())n[t].done()||e.push(n[t]);else{var r=n[t].properties();if(n[t].queue())findCompetitor(r,n[t])||n[t].start();else{var o=findCompetitor(r,n[t]);if(o)for(var i=0;i<o.length;i++)for(var a=0;a<r.length;a++)o[i].stop(r[a]);n[t].start()}e.push(n[t])}n=e}function CreateAnimationType1(t,r,i,a){var s={};if(s[t]=r,o[t]){var u=[{ordering:o[t].ordering(),morph:o[t],value:r}],c={};i&&"number"==typeof i&&(c.duration=i),a&&"string"==typeof a&&(c.easing=a);var l=e("$Animation");l.config(this,u,c,CheckAnimationQueue),n.push(l)}}function CreateAnimationType2(r,i,a){var s={};"object"==typeof i?s=i:"number"==typeof i?(s={duration:i},"string"==typeof a&&(s.easing=a)):"string"==typeof i&&(s={easing:i});var u={};for(var c in r)r.hasOwnProperty(c)&&(o[c]?u[c]={ordering:o[c].ordering(),morph:o[c],value:r[c]}:t.warn({type:this.type(),property:c},"Property {property} of {type} can not be animated!"));var l=[];for(var f in u)l.push(u[f]);if(l.length){l.sort(function(e,t){return e.ordering-t.ordering});var h=e("$Animation");h.config(this,l,s,CheckAnimationQueue),n.push(h)}else t.warn("No properties to animate!")}var n=[],r=!1,o={};this.morph=function(t,n,r,i){var a=e("$Morph");a.config(t,this,n,r,i),a.valid()&&(o[t]=a)},this.extractMorph=function(e){return o[e]},this.animate=function(e,n,r,o){"string"==typeof e&&n?CreateAnimationType1.apply(this,arguments):"object"==typeof e&&e.constructor!==Array?CreateAnimationType2.apply(this,arguments):t.warn("Unable to create animation. Wrong arguments"),CheckAnimationQueue()},this.animated=function(){return r},this.stop=function(e){if("string"==typeof e&&0!==e.length)for(var t=0;t<n.length;t++)n[t].stop(e)}}]),$R.service["class"]("Sound",["@inject","Debug",function Audio(e,t){function eventArgs(){return[s,u,r,o]}function createAnimationMorph(e,t){a.morph.apply(this,[t.name,0,function(n,r,o){o=t.normalizer(o),void 0!==o&&(r(o),n(e.get(t.name)))},function(n){return n=t.normalizer(n),e.set(t.name,n)}])}var n=null,r=null,o=null,i=e("$EventProvider"),a=e("$AnimationProvider"),s=this,u=null,c="";i.wrap(this),i.event("ready",eventArgs,!0),i.event("load",eventArgs,!0),i.event("error",eventArgs,!0),i.event("play",eventArgs,!1),i.event("connect",eventArgs,!1),i.event("disconnect",eventArgs,!1),i.event("end",eventArgs,!1),this.build=function(a,s){if("string"==typeof a&&a.length>0){"string"==typeof s&&"destination"!==s&&s.length>0?(r=s,n=e("$UserAudioSource").build(s),o="Sample",n.on("load",function(){i.resolve("load")}),this.play=function(){return n.play(),this},this.terminate=function(){return n.stop(),this}):"destination"===s?(n=e("$UserAudioMixer").build(a,s),this.connect=function(){return arguments[0]&&"object"==typeof arguments[0]&&arguments[0].$$SOURCE?n:this},r="["+a+"]AudioChannel",o="Channel",i.resolve("load")):void 0===s&&(n=e("$UserAudioMixer").build(a),r="["+a+"]AudioChannel",o="Channel",i.resolve("load")),n.on("error",function(){i.resolve("error")}),n.on("play",function(){i.resolve("play")}),n.on("end",function(){i.resolve("end")}),n.on("connect",function(){i.resolve("connect")}),n.on("disconnect",function(){i.resolve("disconnect")});for(var u=n.filters(),l=0;l<u.length;l++)for(var f=u[l].props(),h=0;h<f.length;h++)f[h].animated&&createAnimationMorph.apply(this,[u[l],f[h]]);c=a,i.resolve("ready")}else t.warn("Audio mixer have no name! Should be a string");return this},this.filter=function(e,r){if("string"==typeof e&&e.length>0){for(var o=null,i=n.filters(),a=0;a<i.length;a++)i[a].has(e)&&(o=i[a]);if(o){if(void 0===r)return o.get(e);o.set(e,r)}else t.warn({name:e},"Unable to set filter property [{name}]. No filter with that param!")}return this},this.connect=function(e){if(e&&"object"==typeof e&&e.$$SOURCE)return n;if("object"==typeof e&&e.type&&"function"==typeof e.type){var r=e.type();if("Channel"===o&&"Sample"===r)return t.error("Trying to connect Channel with Sample!"),this;if(e.connect&&"function"==typeof e.connect){var i=e.connect({$$SOURCE:!0});return u=e,n.connect(i),e}t.error("Unknown type of  object passed as output!")}else t.error("Unknown type of  object passed as output!");return this},this.output=function(){return u},this.animate=function(){return a.animate.apply(this,arguments),this},this.type=function(e){return"string"==typeof e?e===o:o},this.url=function(){return r},this.name=function(){return c},this.stop=function(){return a.stop.apply(this,arguments),this}}]),$R.service["class"]("Sound",["@inject","@Config","Debug",function UserAudioMixer(e,t,n){function argF(){return[this]}var r=e("$EventProvider"),o=[],i=null,a="",s=t.watch("filters",function(e){o=e});r.wrap(this),r.event("play",argF,!1),r.event("connect",argF,!1),r.event("ready",argF,!0),r.event("error",argF,!0),this.build=function(t,i){for(var u=0;u<s.length;u++){var c=e("$"+s[u]+"Node");o[o.length-1]&&o[o.length-1].connect(c),o.push(c)}if("string"==typeof t&&t.length>0?a=t:(n.warn({n:t},"[{n}] is not a valid name for channel"),r.resolve("error")),i&&"object"==typeof i&&i.connect&&"function"==typeof i.connect)this.connect(i);else if("destination"===i){var l=e("$DestinationNode");o[o.length-1].connect(l),this.connect=function(e){if(e.$$AUDIONODE)return o[0]}}return delete this.build,this},this.connect=function(e){if(e.$$AUDIONODE)return o[0];var t=e.connect({$$AUDIONODE:!0});return o[o.length-1].connect(t),i=e,this},this.output=function(){return i},this.filters=function(){return o},this.name=function(){return a}}]),$R.service["class"]("Sound",["@extend","@inject",function UserAudioSource(e,t){function cbArgs(){return[this]}function connectCbArgs(){return[this,i]}var n=t("$AudioSource"),r=t("$EventProvider"),o=null,i=null,a="";r.wrap(this),r.event("ready",cbArgs,!0),r.event("load",cbArgs,!0),r.event("error",cbArgs,!0),r.event("connect",connectCbArgs,!1),r.event("play",cbArgs,!1),r.event("stop",cbArgs,!1),n.on("ready",function(){r.resolve("ready")}),n.on("load",function(){r.resolve("load")}),n.on("error",function(){r.resolve("error")}),this.build=function(e){return"string"==typeof e&&e.length>0?(a=e,n.build(e),o=t("$UserAudioMixer").build("source-built-in-filter"),o.on("connect",function(){r.resolve("connect")}),n.connect(o.connect({$$AUDIONODE:!0})),delete this.build,r.resolve("ready")):(delete this.build,r.resolve("error")),this},this.filters=function(){return o?o.filters():[]},this.play=function(){return this.status("error")||this.status("ready")&&(this.status("load")?n.play():this.on("load",function(){n.play()})),this},this.stop=function(){return n.stop(),this},this.output=function(){return i},this.connect=function(e){return e&&e.constructor===o.constructor&&(i=e,o.connect(e)),this}}]),$R.service["class"]("Sound",["@Audio","@extend",function DelayNode(e,t){t(this,"$AudioNode");var n=0,r=0,o=e.context().createGain(),i=e.context().createDelay(),a=e.context().createGain(),s=e.context().createBiquadFilter();o.gain.value=1,s.frequency.value=2e3,a.gain.value=r,i.delayTime.value=n,i.connect(a),a.connect(s),s.connect(i),a.connect(o),this.build("delay",[o,a],o),this.property("delay",[0,0],function(e){if("object"==typeof e&&e.constructor===Array&&2==e.length&&"number"==typeof e[0]&&"number"==typeof e[1]){var t=e[0],o=e[1];return t>1&&(t=1),t<0&&(t=0),o>.8&&(o=.8),o<0&&(o=0),n=t,r=o,i.delayTime.value=n,a.gain.value=r,[o,t]}},function(e){return[e[0],e[1]]},function(e){var t=e[0],n=e[1];return t>1&&(t=1),t<0&&(t=0),n>.8&&(n=.8),n<0&&(n=0),[n,t]})}]),$R.service["class"]("Sound",["@Audio","@extend",function DestinationNode(e,t){t(this,"$AudioNode"),this.build("destination",e.context().destination,!1)}]),$R.service["class"]("Sound",["@Audio","@extend",function GainNode(e,t){t(this,"$AudioNode");var n=1,r=e.context().createGain();r.gain.value=n,this.build("gain",r,r),this.property("volume",1,function(e){if("number"==typeof e)return e<0&&(e=0),e>1&&(e=1),n=e,r.gain.value=n,e},function(e){return e},function(e){return e<0&&(e=0),e>1&&(e=1),e})}]),$R.service["class"]("Sound",["@Audio","@extend",function LowpassNode(e,t){t(this,"$AudioNode");var n=e.context().createBiquadFilter(),r=22050;n.type="lowpass",n.frequency.value=r,this.build("lowpass",n,n),this.property("lowpass",22050,function(e){return e<0&&(e=0),e>22050&&(e=22050),r=e,n.frequency.value=e,e},function(e){return e},function(e){return e<0&&(e=0),e>22050&&(e=22050),e})}]),$R.service["class"]("Sound",["@inject","Debug",function AudioNode(e,t){function args(){return[o]}var n=null,r=null,o=null,i=function(e,t){if(!t)for(var n=this.input(),r=0;r<n.length;r++)e.connect(n[r]);return this.output()},a=[],s=e("$EventProvider"),u="";s.wrap(this),s.event("ready",args,!0),s.event("play",args,!1),s.event("end",args,!1),s.event("connect",args,!1),s.event("disconnect",args,!1),s.event("property",args,!1),this.disconnect=function(){if(o&&n){for(var e=o.input(),t=0;t<n.length;t++)for(var r=0;r<e.length;r++)n[t].disconnect(e[r]);o=null,s.resolve("disconnect")}return this},this.connect=function(e){if(this.disconnect(),o=e,o&&n)for(var t=o.input(),r=0;r<n.length;r++)for(var i=0;i<t.length;i++)n[r].connect(t[r]);return s.resolve("connect"),this},this.build=function(e,t,o,a){return r="object"==typeof t&&t.constructor===Array?t:[t],n="object"==typeof o&&o.constructor===Array?o:[o],u=e,"function"==typeof a&&(i=a),delete this.build,s.resolve("ready"),this},this.input=function(){return r},this.output=function(){return n},this.name=function(){return u},this.play=function(e,t){a.push(e),e.addEventListener("ended",function(){var t=[];e.$$SEARCH=!0;for(var n=0;n<a.length;n++)a.$$SEARCH||t.push(a[n]);delete e.$$SEARCH,a=t}),o&&o.play(e,i.apply(this,arguments))};var c={};this.property=function(e,n,r,o,i){if("string"==typeof e){var a={name:e,value:null,getter:null,setter:null,normalizer:i,animated:"function"==typeof i};"function"==typeof o&&(a.getter=o),"function"==typeof r&&(a.setter=r),a.value=n,n&&a.setter&&(c[a.name]?t.warn({property:a},"Duplicated property [{property}]"):c[a.name]=a)}else t.warn({name:e},"Property name [{name}] is not valid!")},this.set=function(e,n){if("string"==typeof e&&e.length>0){var r=c[e].setter(n);void 0!==r?c[e].value=r:t.warn({prop:e,val:n},"[{val}] is not a valid valuen for [{prop}].")}},this.get=function(e){if("string"==typeof e&&e.length>0){if(c[e])return c[e].value;t.warn({name:e},"Object has no property [{name}]. Unable to get value.")}else t.warn("Property name has to be a string")},this.props=function(){var e=[];for(var t in c)c.hasOwnProperty(t)&&e.push(c[t]);return e},this.has=function(e){return!!c[e]}}]),$R.service["class"]("Sound",function AudioNodeSoundDispatcher(){var e=[];this.register=function(t){t.addEventListener("end",function(){t.$$SEARCH=!0;for(var n=[],r=0;r<e.length;r++)e[r].$$SEARCH||n.push(e[r]);e=n}),e.push(t)},this.reconnect=function(t){for(var n=0;n<e.length;n++)e[n].disconnect(),e[n].connect(t)}}),$R.service["class"]("Sound",["@Audio","@inject","Resource","Debug",function AudioSource(e,t,n,r){function args(){return[o,i,a]}var o=null,i=null,a=null,s=t("$EventProvider"),u=[];s.wrap(this),s.event("ready",args,!0),s.event("load",args,!0),s.event("error",args,!0),s.event("connect",args,!1),s.event("disconnect",args,!1),s.event("play",!1),s.event("end",!1),this.build=function(t){return o=n.audio(t),o.on("load",function(n){e.context().decodeAudioData(n,function(e){i=e,s.resolve("load")},function(){r.error({src:t},"[{src}] audio buffer can not be decoded. Resource not found, or of wrong format"),s.resolve("error")})}),o.on("error",function(){r.error({src:t},"Unable to load audio file"),s.resolve(error)}),delete this.build,this},this.disconnect=function(){return a&&(a=null,s.resolve("disconnect")),this},this.connect=function(e){return this.disconnect(),a=e,s.resolve("connect"),this},this.play=function(){if(a&&this.status("load")){var t=e.context().createBufferSource();t.buffer=i,u.push(t),a.play(t,!1),t.start(0)}return this},this.stop=function(){for(var e=0;e<u.length;e++)u[e].stop(0);return u=[],this}}]),$R.service["class"]("Sound",["Debug",function Event(e){var t=[],n=!1,r="default",o=!1,i=this,a=function(){return[]};this.build=function(e,t,o){return n=!!o,"function"==typeof t&&(a=t),"string"==typeof e&&e.length>0&&(r=e),delete this.build,this},this.name=function(){return r},this.active=function(){return o},this.resolve=function(){n&&(o=!0);var e=a();if("object"!=typeof e||e.constructor!==Array)e=[];else for(var r=0;r<t.length;r++)t[r].apply(this,e);return this},this.callback=function(e){if("function"!=typeof e)return this;if(i.active()){var n=a();return"object"==typeof n&&n.constructor===Array||(n=[]),e.apply(this,n),t.push(arguments[0]),this}return t.push(e),this}}]),$R.service["class"]("Sound",["@inject",function EventProvider(e){var t=[];this.event=function(n,r,o){var i=e("$Event");return i.build.apply(i,arguments),t[n]=i,this},this.resolve=function(e){return t[e]&&t[e].resolve.call(t[e]),this},this.wrap=function(e){return e.on=function(n,r){t[n]&&t[n].callback.call(e,r)},e.status=function(e){return!!t[e]&&t[e].active()},this}}]),$R.service["class"]("Objects",["@inject","+Drawer","+Path","+Model",function AreaObjectDrawer(e,t,n,r){function UpdateFill(e){var r=this.extension("Box").box().sprite(),o=this.extension("Style"),i=o.get("path");e.save(),e.translate(r.margin[3]-h,r.margin[0]-p);var a=o.get("interpolation");c||(n.interpolate(i,a,!0),c=!0),a?t.drawBezierPathFill(e,i,o):t.drawLinePathFill(e,i,o),e.restore()}function UpdateStroke(e){var o=this.extension("Box").box().sprite(),i=this.extension("Style"),a=r.cloneArray(i.get("path")),s=i.get("interpolation");e.translate(o.margin[3]-h,o.margin[0]-p),c||(n.interpolate(a,s,!0),c=!0),s&&t.drawLinePath(e,a,i),t.drawBezierPath(e,a,i)}function UpdateBg(e){var i=this.extension("Style"),a=this.extension("Box").box().sprite(),s=r.cloneArray(i.get("path")),u=i.get("interpolation");e.translate(a.margin[3]-h,a.margin[0]-p),c||(n.interpolate(s,u,!0),c=!0),u?t.drawLineBgClipPath(e,s,i,o,a):t.drawBezierBgClipPath(e,s,i,o,a)}var o=e("$GraphicsAssembler"),i=this.extension("Box"),a=this.extension("Style"),s=this.extension("Matrix"),u=this.extension("Drawer"),c=!1,l=1,f=0,h=0,p=0;o.layer(0,"fill",UpdateFill.bind(this)),o.layer(1,"bg",UpdateBg.bind(this)),o.layer(2,"stroke",UpdateStroke.bind(this)),o.box(i),this.watch("path",function(){a.get("interpolation");c=!1,i.purge(),s.purge(),o.resize(),o.update("fill"),o.update("stroke"),o.update("bg")}),this.watch("interpolation",function(e,t){c=!1,f=Math.round(40*t),o.update("fill"),o.update("stroke"),o.update("bg"),o.resize()}),this.watch("position",function(){i.purge(),s.purge()}),this.watch(["strokeStyle","strokeColor"],function(){o.update("stroke"),o.resize()}),this.watch("fill",function(){o.update("fill")}),this.watch(["bg","bgSize","bgPosition"],function(){o.update("bg")}),this.watch("strokeWidth",function(e,t){for(var n=0,r=0;r<t.length;r++)t[r]>n&&(n=t[r]);l=n/2,o.update("stroke"),i.purge(),s.purge(),o.resize()}),i.f(function(e){for(var t=a.get("position"),n=a.get("path"),r=a.get("anchor"),o=t[0],i=t[1],s=1/0,u=1/0,c=-(1/0),v=-(1/0),g=0;g<n.length;g++)n[g][0]<s&&(s=n[g][0]),n[g][2]<s&&(s=n[g][2]),n[g][1]<u&&(u=n[g][1]),n[g][3]<u&&(u=n[g][3]),n[g][0]>c&&(c=n[g][0]),n[g][2]>c&&(c=n[g][2]),n[g][1]>v&&(v=n[g][1]),n[g][3]>v&&(v=n[g][3]);s===1/0&&(s=0),u===1/0&&(u=0),c===-(1/0)&&(c=0),v===-(1/0)&&(c=0),h=s,p=u;var d=l+f,y=Math.abs(c-s),m=Math.abs(v-u);"center"===r[0]&&(o-=y?y/2:0),"right"===r[0]&&(o-=y?y:0),"middle"===r[1]&&(i-=m?m/2:0),"bottom"===r[1]&&(i-=m?m:0),e.set(o+h,i+p,y,m,d,d,d,d)}),u.f(function(e){t.transform(this,e),o.draw(e)})}]),$R.service["class"]("Objects",["+Drawer","Debug","@inject",function CircleObjectDrawer(e,t,n){function UpdateStroke(e){var t=i.box().sprite();e.beginPath(),e.strokeStyle=a.get("strokeColor"),e.lineWidth=a.get("strokeWidth"),e.setLineDash(a.get("strokeStyle")),e.arc(t.size[0]/2,t.size[1]/2,a.get("radius"),0,2*Math.PI),e.stroke()}function UpdateFill(e){var t=i.box().sprite();e.beginPath(),e.fillStyle=a.get("fill"),e.arc(t.size[0]/2,t.size[1]/2,a.get("radius"),0,2*Math.PI),e.fill()}function UpdateBg(e){var t=i.box().sprite(),n=i.box().value();e.beginPath(),e.arc(t.size[0]/2,t.size[1]/2,a.get("radius"),0,Math.PI/2),e.clip();for(var o=a.get("bgPosition"),s=a.get("bgSize"),u=a.get("bg"),c=0;c<u.length;c++)if(u[c].loaded()){e.save();var l=n.size[0]*s[c][0],f=n.size[1]*s[c][1],h=n.size[0]*o[c][0],p=n.size[1]*o[c][1];e.translate(t.margin[3]+h,t.margin[0]+p),e.drawImage(u[c]["export"](),0,0,l,f),e.restore()}else u[c].on("load",function(){r.update("bg")})}var r=n("$GraphicsAssembler"),o=this.extension("Drawer"),i=this.extension("Box"),a=this.extension("Style"),s=this.extension("Matrix"),u=1;r.layer(0,"fill",UpdateFill.bind(this)),r.layer(1,"bg",UpdateBg.bind(this)),r.layer(2,"stroke",UpdateStroke.bind(this)),r.box(i),i.f(function(e){var t=a.get("radius"),n=a.get("position"),r=a.get("anchor"),o=2*t,i=n[0],s=n[1];"center"===r[0]&&(i-=t),"right"===r[0]&&(i-=o),"middle"===r[1]&&(s-=t),"bottom"===r[1]&&(s-=o),e.set(i,s,o,o,u,u,u,u)}),this.watch("radius",function(){r.update("stroke"),r.update("bg"),r.update("fill"),i.purge(),s.purge(),r.resize()}),this.watch("fill",function(){r.update("fill")}),this.watch("position",function(){i.purge()}),this.watch("strokeWidth",function(e,t){t!==e&&(u=t,i.purge(),r.update("stroke"),s.purge(),r.resize())}),this.watch(["strokeStyle","strokeColor"],function(){r.update("stoke")}),this.watch(["bg","bgPosition","bgSize"],function(){r.update("bg")}),o.f(function(t){e.transform(this,t),r.draw(t)})}]),$R.service["class"]("Objects",["Debug","+Matrix",function DefaultObjectDrawer(e,t){var n=this.extension("Matrix");n.f(function(){return t.objectMatrix(this)}),this.watch(["position","rotate","translate","scale","skew"],function(){n.purge()})}]),$R.service["class"]("Objects",["+Drawer",function GroupObjectDrawer(e){var t=this.extension("Drawer"),n=this.extension("Layers"),r=this.extension("Box"),o=this.extension("Style");r.f(function(e){var t=1/0,r=1/0,i=-(1/0),a=-(1/0);n.forEach(function(){var e=this.extension("Box").box().value();e.position[0]<t&&(t=e.position[0]),e.position[1]<r&&(r=e.position[1]),e.position[0]+e.size[0]>i&&(i=e.position[0]+e.size[0]),e.position[1]+e.size[1]>a&&(a=e.position[1]+e.size[1])});var s=o.get("position");t===1/0&&(t=0),i===-(1/0)&&(i=0),r===1/0&&(r=0),a===-(1/0)&&(a=0),e.set(t+s[0],r+s[1],i-t,a-r,0,0,0,0)});var i=[0,0];this.watch("position",function(e,t){i=t,r.purge()}),t.f(function(t,r,i){var a=arguments;t.save(),t.globalAlpha*=o.get("opacity"),e.transform(this,t),n.forEach(function(){var e=this.extension("Drawer"),n=this.type();if("Group"===n)e.draw.apply(this,a);else{var r=this.extension("Style");t.save(),t.globalCompositeOperation=r.get("blending"),t.globalAlpha*=r.get("opacity"),e.draw.apply(this,a),t.restore()}}),t.restore()})}]),$R.service["class"]("Objects",["+Drawer","Resource",function ImageObjectDrawer(e,t){var n=this.extension("Style"),r=this.extension("Box"),o=this.extension("Drawer"),i=this.extension("Matrix"),a=null,s=null,u=null;this.watch("src",function(e,n){e!==n&&(u=t.image(n),u.on("load",function(){null===a&&(a=u.width()),null===s&&(s=u.height()),i.purge(),r.purge()}))}),this.watch("size",function(e,t){e[0]===t[0]&&e[1]===t[1]||(a=t[0],s=t[1],r.purge())}),this.watch("position",function(e,t){e[0]===t[0]&&e[1]===t[1]||r.purge()}),r.f(function(e){var t=n.get("position"),r=n.get("anchor"),o=t[0],i=t[1];"center"===r[0]&&(o-=a?a/2:0),"right"===r[0]&&(o-=a?a:0),"middle"===r[1]&&(i-=s?s/2:0),"bottom"===r[1]&&(i-=s?s:0),e.set(o,i,a?a:0,s?s:0,0,0,0,0)}),o.f(function(t){u&&u.loaded()&&!u.error()&&null!==a&&null!==s&&a>0&&s>0&&(e.transform(this,t),t.drawImage(u["export"](),0,0,a,s))})}]),$R.service["class"]("Objects",["@inject","Debug","+Drawer","+Path",function LineObjectDrawer(e,t,n,r){function UpdateCanvas(){var e=o.box().sprite(),t=i.get("path"),s=i.get("interpolation");if(a.width()!==e.size[0]||a.height()!==e.size[1]){var l=e.size[0],f=e.size[1];a.width(l),a.height(f)}g.clearRect(0,0,e.size[0],e.size[1]),g.save(),c||(r.interpolate(t,s),c=!0),g.translate(e.margin[3]-p,e.margin[0]-v),s>0?t.length>0&&n.drawBezierPath(g,t,i):t.length>0&&n.drawLinePath(g,t,i),g.restore(),u=!1}var o=this.extension("Box"),i=this.extension("Style"),a=e("$Canvas"),s=this.extension("Matrix"),u=!1,c=!1,l=1,f=0,h=this.extension("Drawer"),p=0,v=0;
o.f(function(e){for(var t=i.get("position"),n=i.get("path"),r=i.get("anchor"),o=t[0],a=t[1],s=1/0,u=1/0,c=-(1/0),h=-(1/0),g=0;g<n.length;g++)n[g][0]<s&&(s=n[g][0]),n[g][2]<s&&(s=n[g][2]),n[g][1]<u&&(u=n[g][1]),n[g][3]<u&&(u=n[g][3]),n[g][0]>c&&(c=n[g][0]),n[g][2]>c&&(c=n[g][2]),n[g][1]>h&&(h=n[g][1]),n[g][3]>h&&(h=n[g][3]);s===1/0&&(s=0),u===1/0&&(u=0),c===-(1/0)&&(c=0),h===-(1/0)&&(c=0),p=s,v=u;var d=l+f,y=Math.abs(c-s),m=Math.abs(h-u);"center"===r[0]&&(o-=y?y/2:0),"right"===r[0]&&(o-=y?y:0),"middle"===r[1]&&(a-=m?m/2:0),"bottom"===r[1]&&(a-=m?m:0),e.set(o+p,a+v,y,m,d,d,d,d)}),this.watch("path",function(){var e=i.get("interpolation");0!==e&&(c=!1),o.purge(),s.purge(),u=!0}),this.watch("position",function(){o.purge()}),this.watch("strokeWidth",function(e,t){for(var n=0,r=0;r<t.length;r++)t[r]>n&&(n=t[r]);l=n/2,u=!0,o.purge(),s.purge()}),this.watch("interpolation",function(e,t){e!==t&&(c=!1),f=Math.round(20*t),o.purge(),s.purge(),u=!0}),this.watch(["strokeStyle","strokeColor"],function(){u=!0});var g=a.context();h.f(function(e){u&&UpdateCanvas.call(this),n.transform(this,e),e.drawImage(a["export"](),0,0)})}]),$R.service["class"]("Objects",["@inject","+Drawer",function RectangleObjectDrawer(e,t){function normalizeRadius(e){for(var t=[e[0],e[1],e[2],e[3]],n=i.box().value(),r=[n.size[0]/2,n.size[1]/2],o=0;o<t.length;o++)t[o]>r[0]&&(t[o]=r[0]),t[o]>r[1]&&(t[o]=r[1]);return t}function drawRectPath(e,t){var n=normalizeRadius(r.get("radius")),o=.5522847498,a=i.box().value(),s=i.box().sprite();if(t){var u=r.get("strokeColor"),c=r.get("strokeWidth"),l=r.get("strokeStyle"),f=r.get("cap");e.lineCap=f}if(e.beginPath(),n[0]>0?e.moveTo(s.margin[3]+n[0],s.margin[0]):e.moveTo(s.margin[3],s.margin[0]),t&&(e.setLineDash(l[0]),e.strokeStyle=u[0],e.lineWidth=c[0]),n[1]>0){e.lineTo(a.size[0]+s.margin[3]-n[1],s.margin[0]);var h=o*n[1];e.bezierCurveTo(a.size[0]+s.margin[3]-n[1]+h,s.margin[0],a.size[0]+s.margin[3],s.margin[0]+n[1]-h,a.size[0]+s.margin[3],s.margin[0]+n[1])}else e.lineTo(a.size[0]+s.margin[3],s.margin[0]);if(t&&e.stroke(),t&&(e.setLineDash(l[1]),e.strokeStyle=u[1],e.lineWidth=c[1]),n[2]>0){var h=o*n[2];e.lineTo(a.size[0]+s.margin[3],a.size[1]+s.margin[0]-n[2]),t&&e.stroke(),t&&(e.setLineDash(l[2]),e.strokeStyle=u[2],e.lineWidth=c[2]),e.bezierCurveTo(a.size[0]+s.margin[3],a.size[1]+s.margin[0]-n[2]+h,a.size[0]+s.margin[3]-n[2]+h,a.size[1]+s.margin[0],a.size[0]+s.margin[3]-n[2],a.size[1]+s.margin[0]),t&&e.stroke()}else e.lineTo(a.size[0]+s.margin[3],a.size[1]+s.margin[0]),t&&e.stroke();if(t&&(e.setLineDash(l[2]),e.strokeStyle=u[2],e.lineWidth=c[2]),n[3]>0){var h=o*n[3];e.lineTo(s.margin[3]+n[3],a.size[1]+s.margin[0]),e.bezierCurveTo(s.margin[3]+n[3]-h,a.size[1]+s.margin[0],s.margin[3],a.size[1]+s.margin[0]-n[3]+h,s.margin[3],a.size[1]+s.margin[0]-n[3])}else e.lineTo(s.margin[3],a.size[1]+s.margin[0]);if(t&&e.stroke(),t&&(e.setLineDash(l[3]),e.strokeStyle=u[3],e.lineWidth=c[3]),n[0]>0){var h=o*n[0];e.lineTo(s.margin[3],s.margin[0]+n[0]),t&&e.stroke(),t&&(e.setLineDash(l[0]),e.strokStyle=u[0],e.lineWidth=c[0]),e.bezierCurveTo(s.margin[3],s.margin[0]+n[0]-h,s.margin[0]+n[0]-h,s.margin[0],s.margin[3]+n[0],s.margin[0]),t&&e.stroke()}else e.lineTo(s.margin[3],s.margin[0]),t&&e.stroke()}function hasRadius(){for(var e=!1,t=r.get("radius"),n=0;n<t.length;n++)if(t[n]>0){e=!0;break}return e}function hasStroke(){for(var e=r.get("strokeWidth"),t=!1,n=0;n<e.length;n++)if(e[n]>0){t=!0;break}return t}function monoStroke(){for(var e=r.get("strokeColor"),t=r.get("strokeWidth"),n=r.get("strokeStyle"),o=e[0],i=t[0],a=n[0],s=!0,u=1;u<4;u++)if(o!==e[u]||i!==t[u]||n[u][0]!==a[0]||n[u][1]!==a[1]){s=!1;break}return s}function UpdateBg(e){var t=i.box(),o=t.value(),a=t.sprite(),s=r.get("bgPosition"),u=r.get("bgSize"),c=r.get("bg");hasRadius()?drawRectPath(e):e.rect(a.margin[3],a.margin[0],o.size[0],o.size[1]),e.clip();for(var l=0;l<c.length;l++)if(c[l].loaded()){e.save();var f=o.size[0]*u[l][0],h=o.size[1]*u[l][1],p=o.size[0]*s[l][0],v=o.size[1]*s[l][1];e.translate(a.margin[3]+p,a.margin[0]+v),e.drawImage(c[l]["export"](),0,0,f,h),e.restore()}else c[l].on("load",function(){n.update("bg")})}function UpdateStroke(e){if(hasStroke()){var t=r.get("strokeColor"),n=r.get("strokeWidth"),o=r.get("strokeStyle"),a=i.box(),s=a.value(),u=a.sprite();if(hasRadius())drawRectPath(e,!0);else if(monoStroke()){var c=r.get("cap");e.lineCap=c,e.setLineDash(o[0]),e.strokeStyle=t[0],e.lineWidth=n[0],e.beginPath(),e.moveTo(u.margin[3],u.margin[0]),e.lineTo(u.margin[3]+s.size[0],u.margin[0]),e.lineTo(u.margin[3]+s.size[0],u.margin[0]+s.size[1]),e.lineTo(u.margin[3],u.margin[0]+s.size[1]),e.lineTo(u.margin[3],u.margin[0]),e.stroke()}}}function UpdateFill(e){var t=r.get("fill"),n=i.box(),o=n.value(),a=n.sprite();hasRadius()?drawRectPath(e):e.rect(a.margin[3],a.margin[0],o.size[0],o.size[1]),e.fillStyle=t,e.fill()}var n=e("$GraphicsAssembler"),r=this.extension("Style"),o=this.extension("Drawer"),i=this.extension("Box"),a=this.extension("Matrix"),s=[2,2,2,2];n.layer(0,"fill",UpdateFill.bind(this)),n.layer(1,"bg",UpdateBg.bind(this)),n.layer(2,"stroke",UpdateStroke.bind(this)),n.box(i),i.f(function(e){var t=r.get("position"),n=r.get("size"),o=r.get("anchor"),i=t[0],a=t[1];"center"===o[0]&&(i-=n[0]/2),"right"===o[0]&&(i-=n[0]),"middle"===o[1]&&(a-=n[1]/2),"bottom"===o[1]&&(a-=n[1]),e.set(i,a,n[0],n[1],s[0],s[1],s[2],s[3])}),o.f(function(e){t.transform(this,e),n.draw(e)}),this.watch("size",function(e,t){n.update("fill"),n.update("stroke"),n.update("bg"),n.resize(),a.purge(),i.purge()}),this.watch("radius",function(e,t){n.update("fill"),n.update("stroke"),n.update("bg")}),this.watch("strokeWidth",function(e,t){s[0]=t[0],s[1]=t[1],s[2]=t[2],s[3]=t[3],i.purge(),n.resize(),a.purge(),n.update("fill"),n.update("stroke"),n.update("bg")}),this.watch(["position","size"],function(){i.purge(),a.purge()}),this.watch(["bg","bgSize","bgPosition"],function(){n.update("bg")}),this.watch(["strokeStyle","strokeColor"],function(){n.update("stroke")}),this.watch(["fill"],function(){n.update("fill")})}]),$R.service["class"]("Objects",["+Drawer","+Model","Resource",function SpriteObjectDrawer(e,t,n){var r=this.extension("Style"),o=this.extension("Box"),i=this.extension("Drawer"),a=this.extension("Matrix"),s=null,u=null,c=null;o.f(function(e){var t=r.get("position"),n=r.get("anchor"),o=t[0],i=t[1];"center"==n[0]&&(o-=s?s/2:0),"right"==n[0]&&(o-=s?s:0),"middle"==n[1]&&(i-=u?u/2:0),"bottom"==n[1]&&(i-=u?u:0),e.set(o,i,s?s:0,u?u:0,0,0,0,0)}),i.f(function(t,n,r){c&&c.loaded()&&!c.error()&&c.ready()&&null!==s&&null!==u&&s>0&&u>0&&(e.transform(this,t),c.tick(n),t.drawImage(c["export"](),0,0,s,u))}),this.watch("src",function(e,r){if(r!==e){var i=t.readSpriteString(r);c=n.sprite(i.url),c.config(i.frames),c.on("load",function(){null==s&&(s=c.width()),null==u&&(u=c.height()),a.purge(),o.purge()})}}),this.watch("size",function(e,t){e[0]===t[0]&&e[1]===t[1]||(s=t[0],u=t[1],o.purge())}),this.watch("position",function(e,t){e[0]===t[0]&&e[1]===t[1]||o.purge()})}]),$R.service["class"]("Objects",["@inject","+Drawer","Resource",function TextObjectDrawer(e,t,n){function UpdateTextLayer(e){r.update();var t=o.get("lineHeight"),n=(o.get("color"),o.get("fontSize")),i=o.get("align");e.beginPath();var a=t-n/5;n<t?a-=t-n:a+=n-t,r.forEachLine(function(n){e.beginPath();var o=a+n*t;e.font=this.extractFontString(),e.fillStyle=this.color(),"center"===i?e.fillText(this.string(),(r.textBlockWidth()-this.width())/2,o):"right"===i?e.fillText(this.string(),r.textBlockWidth()-this.width()-2,o):e.fillText(this.string(),2,o)})}function getFontFile(){var e="oblique"===f?"normal":f,t=n.font(c,l,e);t.on("load",function(){u=!0,i.purge(),s.purge(),r.update(!0)}),t.on("error",function(){u=!0,i.purge(),s.purge(),r.update(!0)})}function drawText(e){u&&(h.size(r.textBlockWidth(),r.textBlockHeight()),h.update("text"),u=!1),t.transform(this,e),h.draw(e)}var r=this.extension("Text"),o=this.extension("Style"),i=this.extension("Box"),a=this.extension("Drawer"),s=this.extension("Matrix"),u=!1,c=o.get("font"),l=o.get("weight"),f=o.get("style"),h=e("$GraphicsAssembler");h.layer(0,"text",UpdateTextLayer),this.watch(["str","style","font","weight","size","color","fontSize","lineHeight"],function(){u=!0,i.purge(),s.purge()}),this.watch("font",function(e,t){c=t,getFontFile()}),this.watch("style",function(e,t){f=t,getFontFile()}),this.watch("weight",function(e,t){l=t,getFontFile()}),this.watch("anchor",function(){i.purge(),s.purge()}),this.watch("position",function(){i.purge()}),i.f(function(e){var t=o.get("position"),n=o.get("anchor"),i=t[0],a=t[1];"center"===n[0]&&(i-=r.textBlockWidth()/2),"right"===n[0]&&(i-=r.textBlockWidth()),"middle"===n[1]&&(a-=r.textBlockHeight()/2),"bottom"===n[1]&&(a-=r.textBlockHeight()),e.set(i,a,r.textBlockWidth(),r.textBlockHeight(),0,0,0,0)}),a.f(drawText)}]),$R.service["class"]("Objects",["@extend","+Model","+Path","Debug",function AreaObjectModel(e,t,n,r){function SyncPathProperty(e,t){for(var n=0;n<e.length;n++)t[n]||t.push(t[t.length-1]);e.length<t.length&&t.splice(e.length-1,t.length-e.length)}e(this,"$DefaultObjectModel"),e(this,"$GlobalBackgroundModel"),e(this,"$DefaultFreeStrokeModel");var o=this.extension("Style");this.extension("Animation");o.define(0,"path",[[0,0,0,0,0,0,0,0]],function(e){if(n.checkSimplePath(e)){var t=o.get("path"),i=n.convertSimplePath(e);return i[0][0]===i[i.length-1][2]&&i[0][1]===i[i.length-1][3]||i.push([i[i.length-1][2],i[i.length-1][3],i[0][0],i[0][1],i[i.length-1][2],i[i.length-1][3],i[0][0],i[0][1]]),t.length!==i.length&&(SyncPathProperty(i,o.get("strokeStyle")),SyncPathProperty(i,o.get("strokeWidth")),SyncPathProperty(i,o.get("strokeColor"))),i}return r.warn("Area Model / Invalid value for area path!"),!1},function(e){return n.convertComplexPath(e)})}]),$R.service["class"]("Objects",["@extend","+Color","+Model","Debug",function CircleObjectModel(e,t,n,r){e(this,"$DefaultObjectModel"),e(this,"$GlobalBackgroundModel");var o=this.extension("Style"),i=this.extension("Animation");o.define(0,"radius",0,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.morph("radius",0,function(e,t,n){"number"==typeof n?(n<0&&(n=0),e(this.style("radius")),t(n)):r.warn({v:n},"[{v}] is not a valid radius value")},function(e){return e<0&&(e=0),e}),o.define(0,"strokeWidth",1,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.morph("strokeWidth",0,function(e,t,n){"number"==typeof n&&(n<0&&(n=0),e(this.style("strokeWidth")),t(n))},function(e){return e<0&&(e=0),e}),o.define(0,"strokeColor","rgba(0,0,0,1)",function(e){return"string"==typeof e?t.colorToArray(e)?e:(r.warn({val:e},"[{val}] is not a valid strokeColor value"),!1):"object"==typeof e&&e.constructor===Array?t.isColor(e)?t.arrayToColor(e):(r.warn({val:e},"[{val}] is not a valid strokeColor value"),!1):void 0},function(e){return t.colorToArray(e)}),i.morph("strokeColor",0,function(e,o,i){if("string"==typeof i){var a=t.colorToArray(i);a?(e(this.style("strokeColor")),o(a)):r.warn({v:i},"[{v}] is not a valid value for strokeColor")}else"object"==typeof i&&i.constructor===Array&&t.isColor(i)?(e(this.style("strokeColor")),o(n.cloneArray(i))):r.warn({v:i},"[{v}] is not a valid value for strokeColor")},function(e){return t.normalize(e),e}),o.define(0,"strokeStyle",[1,0],function(e){if("object"==typeof e&&e.constructor===Array){if(n.validNumericValue(e)){if(2!==e.length)return r.warn({val:e},"[{val}] is not a valid strokeStyle value."),!1;for(var t=0;t<e.length;t++)e[t]<0&&(e[t]=0);return n.cloneArray(e)}return r.warn({val:e},"[{val}] is not a valid strokeStyle value."),!1}return r.warn({val:e},"[{val}] is not a valid strokeStyle value"),!1},function(e){return n.cloneArray(e)}),i.morph("strokeStyle",0,function(e,t,o){"object"==typeof o&&o.constructor===Array&&n.validNumericArray(o)&&2===o.length?(e(this.style("strokeStyle")),t(n.cloneArray(o))):r.warn({v:o},"[{v}] is not a valid value for strokeColor")},function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e})}]),$R.service["class"]("Objects",["+Model","+Path","Debug",function DefaultObjectModel(e,t,n){var r=this.extension("Style"),o=this.extension("Animation");r.define(2,"position",[0,0],function(t){return e.validNumericArray(t)&&2===t.length?e.cloneArray(t):(n.warn("Invalid numeric array for position!"),!1)},function(t){return e.cloneArray(t)}),o.morph("position",2,function(t,r,o){e.validNumericArray(o)&&2===o.length?(t(this.style("position")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for position")},function(e){return e}),r.define(0,"rotate",0,function(e){if("number"==typeof e)return e<-360&&(e+=360),e>360&&(e-=360),e=e*Math.PI/180},function(e){return e*(180/Math.PI)}),o.morph("rotate",0,function(e,t,r){"number"==typeof r?(e(this.style("rotate")),t(r)):n.warn({v:r},"Is not a valid value to animate rotate")},function(e){return e}),r.define(0,"translate",[0,0],function(t){return e.validNumericArray(t)&&2===t.length?e.cloneArray(t):(n.warn("Invalid numeric array for translate!"),!1)},function(t){return e.cloneArray(t)}),o.morph("translate",0,function(t,r,o){e.validNumericArray(o)&&2===o.length?(t(this.style("translate")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for translate")},function(e){return e}),r.define(0,"opacity",1,function(e){return"number"==typeof e?(e<0&&(e=0),e>1&&(e=1),e):(n.warn("Opacity value is not a number"),!1)},function(e){return e}),o.morph("opacity",0,function(e,t,r){"number"==typeof r?(r<0&&(r=0),r>1&&(r=1),e(this.style("opacity")),t(r)):n.warn({v:r},"Invalid value for translate")},function(e){return e<0&&(e=0),e>1&&(e=1),e}),r.define(0,"scale",[1,1],function(t){return"number"==typeof t?t>0?[t,t]:[0,0]:e.validNumericArray(t)&&2===t.length?e.cloneArray(t):(n.warn("Unknown type of value for scale!"),!1)},function(t){return e.cloneArray(t)}),o.morph("scale",0,function(t,r,o){if("number"==typeof o)o<0&&(o=0),t(this.style("scale")),r([o,o]);else if(e.validNumericArray(o)&&2===o.length){t(this.style("scale"));var i=[o[0],o[1]];i[0]<0&&(i[0]=0),i[1]<0&&(i[1]=0),r(i)}else n.warn({v:o},"Invalid value for scale")},function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e}),r.define(0,"skew",[0,0],function(t){if("number"==typeof t){t>360&&(t-=360),t<-360&&(t+=360);var r=t*Math.PI/180;return[r,r]}if(e.validNumericArray(t)&&2===t.length){t[0]>360&&(t[0]=t[1]-360),t[1]<-360&&(t[1]=t[1]+360);var o=t[0]*Math.PI/180,i=t[1]*Math.PI/180;return[o,i]}n.warn({v:t},"Ubknown value format for skew. [{v}]")},function(t){return e.cloneArray(t)}),o.morph("skew",0,function(t,r,o){"number"==typeof o?(t(this.style("skew")),r([o,o])):e.validNumericArray(o)&&2===o.length?(t(this.style("skew")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for skew")},function(e){return e}),r.define(0,"origin",[.5,.5],function(t){return"object"==typeof t&&t.constructor===Array?e.validNumericArray(t)&&2===t.length?[t[0],t[1]]:(n.warn("Unknown format of value for origin. Invalid Array!"),!1):(n.warn("Unknown type of value for origin"),!1)},function(t){e.cloneArray(t)}),o.morph("origin",0,function(t,r,o){e.validNumericArray(o)&&2===o.length?(t(this.style("origin")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for origin")},function(e){return e}),r.define(2,"cap","round",function(e){return"string"==typeof e?"round"===e||"butt"===e||"square"===e?e:(n.error({val:e},"{val} is incorrect value for line cap property!"),!1):void n.error("Cap property is a string!")},function(e){return e}),"Group"!==this.type()&&(r.define(0,"blending","source-over",function(t){return e.validBlending(t)?t:(n.warn({val:t}," [{val}] is not a valid blending!"),!1)},function(e){return e}),r.define(1,"anchor",["left","top"],function(e){return"object"==typeof e&&e.constructor===Array&&2===e.length?"left"!==e[0]&&"center"!==e[0]&&"right"!==e[0]||"top"!==e[1]&&"middle"!==e[1]&&"bottom"!==e[1]?(n.warn({v:e},'[{v}] is not a valid value. Array ["left" || "center" || "right" , "top" || "middle" || "bottom" ] is required format.'),!1):[e[0],e[1]]:(n.warn({v:e},"[{v}] is not a valid anchor value for text element"),!1)},function(e){return[e[0],e[1]]}))}]),$R.service["class"]("Objects",["+Model","+Color","Debug",function DefaultFreeStrokeModel(e,t,n){var r=this.extension("Style");r.define(1,"interpolation",0,function(e){return e>.4&&(e=.4),e<0&&(e=0),e},function(e){return e}),r.define(2,"strokeColor",["rgba(0,0,0,1)"],function(e){if("string"==typeof e){if(t.colorToArray(e)){for(var o=r.get("path"),i=[],a=0;a<o.length;a++)i[a]=e;return i}return n.warn({val:e},"Line Model / {val} is not a color!"),!1}if("object"==typeof e&&e.constructor==Array){for(var o=r.get("path"),s=r.get("strokeColor"),i=[],a=0;a<o.length;a++)e[a]?"string"==typeof e[a]?t.colorToArray(e[a])?i.push(e[a]):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):("object"==typeof e[a]||e[a].constructor==Array)&&t.isColor(e[a])?i.push(t.arrayToColor(e[a])):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!"));return i.length?i:(n.warn({val:e},"Line Model / {val} is not a color!"),!1)}if("object"==typeof e){for(var o=r.get("path"),s=r.get("strokeColor"),i=[],a=0;a<o.length;a++)e[a]?"string"==typeof e[a]?t.colorToArray(e[a])?i.push(e[a]):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):("object"==typeof e[a]||e[a].constructor==Array)&&t.isColor(e[a])?i.push(t.arrayToColor(e[a])):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, no changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, no changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!"));return i.length?i:(n.warn({val:e},"Line Model / {val} is not a color!"),!1)}return n.warn("Line Model / Wrong type of value"),!1},function(e){for(var n=[],r=0;r<e.length;r++)n.push(t.colorToArray(e[r]));return n}),r.define(2,"strokeWidth",[1],function(e){if("number"==typeof e){for(var t=r.get("path"),o=[],i=0;i<t.length;i++)o.push(e);return o}if("object"==typeof e&&e.constructor==Array){for(var t=r.get("path"),a=r.get("strokeWidth"),o=[],i=0;i<t.length;i++)"number"==typeof e[i]?o.push(e[i]):a[i]?(o.push(a[i]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):(o.push(a[a.length-1]),n.warn({val:e[i]},"Line Model / {val} is not a number!"));return o}if("object"==typeof e){for(var t=r.get("path"),a=r.get("strokeWidth"),o=[],i=0;i<t.length;i++)e[i]?"number"==typeof e[i]?o.push(e[i]):a[i]?(o.push(a[i]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):(o.push(a[a.length-1]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):a[i]?(o.push(a[i]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):o.push(a[a.length-1]);return o}n.warn({val:e},"Line Model / {val} is not valid value for strokeWidth!")},function(t){return e.cloneArray(t)}),r.define(2,"strokeStyle",[[1,0]],function(t){if("object"==typeof t&&t.constructor==Array){if(e.validNumericArray(t)){for(var o=[],i=r.get("path"),a=0;a<i.length;a++)o.push(e.cloneArray(t));return o}for(var o=[],i=r.get("path"),s=r.get("strokeStyle"),a=0;a<i.length;a++)t[a]?e.validNumericArray(t[a])?o.push(t[a]):(s[a]?o.push(s[a]):o.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a valid value for strokeStyle!")):s[a]?o.push(s[a]):o.push(s[s.length-1]);return o}if("object"==typeof t){for(var o=[],s=r.get("strokeStyle"),i=r.get("path"),a=0;a<i.length;a++)t[a]?e.validNumericArray(t[a])?o.push(t[a]):(s[a]?o.push(s[a]):o.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a valid value for strokeStyle!")):s[a]?o.push(s[a]):o.push(s[s.length-1]);return o}},function(t){return e.cloneArray(t)})}]),$R.service["class"]("Objects",["+Model","+Color","Debug","Resource",function GlobalBackgroundModel(e,t,n,r){function SyncBgProperty(t,n,r){for(var o=0;o<t.length;o++)n[o]||n.push(e.cloneArray(r));t.length<n.length&&n.splice(t.length-1,n.length-path.length)}var o=this.extension("Style"),i=this.extension("Animation");o.define(0,"fill","rgba(0,0,0,1)",function(e){return"string"==typeof e?t.colorToArray(e)?e:(n.warn({val:e},"[{val}] is not a valid color!"),!1):"object"==typeof e&&e.constructor===Array?t.isColor(e)?t.arrayToColor(e):(n.warn({val:e},"[{val}] is not a valid color"),!1):(n.warn({val:e},"[{val}] is not a valid color!"),!1)},function(e){return t.colorToArray(e)}),i.morph("fill",0,function(r,o,i){if("string"==typeof i){var a=t.colorToArray(i);a?(r(this.style("fill")),o(a)):n.warn({v:i},"[{v}] is not avalid color!")}else"object"==typeof i&&i.constructor===Array?t.isColor(i)&&(r(this.style("fill")),o(e.cloneArray(i))):n.warn({v:i},"[{v}] is not a valid color!")},function(e){return t.normalize(e),e}),o.define(0,"bg",[],function(t){if("string"==typeof t){if(e.isSpriteString(t)){var i=e.readSpriteString(t),a=r.sprite(i.url);return a.config(i.frames),[a]}return[r.image(t)]}if("object"==typeof t||t.constructor===Array){if(2===t.length&&"string"==typeof t[0]&&"number"==typeof t[1]){if(t[1]>0){var a=r.sprite(t[0]);return a.config(t[1]),[a]}return!1}for(var s=[],u=0;u<t.length;u++)if("string"==typeof t[u])if(e.isSpriteString(t[u])){var i=e.readSpriteString(t[u]),a=r.sprite(i.url);a.config(i.frames),s.push(t)}else s.push(r.image(t[u]));else if("object"==typeof t[u]&&t[u].constructor==Array){if(2==t[u].length&&"string"==typeof t[u][0]&&"number"==typeof t[u][1])if(t[u][1]>0){var a=r.sprite(t[u][0]);a.config(t[u][1]),s.push(a)}else n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bg value. Skipped.")}else n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bg value. Skipped");return s}if("object"==typeof t){for(var c=o.get("bg"),s=[],u=0;u<c.length;u++)if(t[u])if("object"==typeof t[u]&&t[u].constructor==Array)if("string"==typeof t[u][0]&&"number"==typeof t[u][1]){var a=r.sprite(t[u][0]);a.config(t[u][1]),s.push(a)}else n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bg array value.");else if("string"==typeof t[u])if(e.isSpriteString(t[u])){var i=e.readSpriteString(t[u]),a=r.sprite(i.url);a.config(i.frames),s.push(t)}else s.push(r.image(t[u]));else s.push(c[u]),n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid value for bg.");else s.push(c[u]);return s}return n.warn({val:t},"[{val}] is not valid value for bg"),!1},function(e){for(var t=[],r=0;r<e.length;r++)"Image"==e[r].type?t.push(e[r].url()):"Sprite"==e[r].type?t.push(e[r].url()+"["+e[r].frames()+"]"):n.error({val:e[r],i:r}+"[{i}][{val}] Unknown type of the background object container. Critical error.");return t});var a=[0,0];o.define(2,"bgPosition",[a],function(t){if("object"==typeof t&&t.constructor==Array){if(e.validNumericArray(t)&&2==t.length){for(var r=o.get("bg"),i=[],s=[t[0],t[1]],u=0;u<r.length;u++)i.push(s);return i}for(var i=[],r=o.get("bg"),c=o.get("bgPosition"),u=0;u<r.length;u++)t[u]?e.validNumericArray(t[u])&&2==t[u].length?i.push([t[0],t[1]]):(c[u]?i.push(c[u]):i.push(e.cloneArray(a)),n.warn({i:u,val:t[u]},"[{i}][{val}] is not a valid bgposition value")):c[u]?i.push(c[u]):i.push(e.cloneArray(a));return i}if("object"==typeof t){for(var i=[],r=o.get("bg"),c=o.get("bgPosition"),u=0;u<r.length;u++)t.hasOwnProperty(u)?c[u]?e.validNumericValue()&&2==t[u].length?i.push([t[0],t[1]]):(i.push(c[u]),n.warn({i:u,val:t[u]},"[{i}][{val}] is not a valid bgposition value")):i.push(e.cloneArray(a)):c[u]?i.push(c[u]):i.push(e.cloneArray(a));return i}n.warn({val:t},"[{val}] is not a valid bgposition value")},function(t){return e.cloneArray(t)});var s=[1,1];o.define(1,"bgSize",[s],function(t){if("object"==typeof t&&t.constructor==Array){if(2==t.length&&e.validNumericArray(t)){for(var r=o.get("bg"),i=[],a=[t[0],t[1]],u=0;u<r.length;u++)i.push(a);return i}for(var r=o.get("bg"),c=o.get("bgSize"),i=[],u=0;u<r.length;u++)2==t[u].length&&e.validNumericArray(t[u])?i.push(t[u][0],t[u][1]):(c[u]?i.push(c[u]):i.push(e.cloneArray(s)),n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bgsize value"));return i}if("object"==typeof t){for(var r=o.get("bg"),c=o.get("bgSize"),i=[],u=0;u<r.length;u++)t.hasOwnProperty(u)?"object"==typeof t[u]&&t[u].constructor==Array&&2==t[u].length&&e.validNumericArray(t[u])?i.push([t[u][0],t[u][1]]):(c[u]?i.push(c[u]):i.push(e.cloneArray(s)),n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bgsize value.")):c[u]?i.push(c[u]):i.push(e.cloneArray(s));return i}},function(t){return e.cloneArray(t)}),this.watch("bg",function(e,t){e.length!==t.length&&(SyncBgProperty(t,o.get("bgPosition"),a),SyncBgProperty(t,o.get("bgSize"),s))})}]),$R.service["class"]("Objects",["+Model",function GlobalSizeModel(e){var t=this.extension("Animation"),n=this.extension("Style");t.morph("size",1,function(t,n,r){"number"==typeof r?(r<0&&(r=0),t(this.style("size")),n([r,r])):"object"==typeof r&&r.constructor==Array&&e.validNumericArray(r)&&2==r.length?(r[0]<0&&(r[0]=0),r[1]<0&&(r[1]=0),t(this.style("size")),n(e.cloneArray(r))):Debug.warn({v:r},"[{v}] is not valid value for size")},function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e}),n.define(1,"size",[0,0],function(t){return"number"==typeof t?(t<0&&(t=0),[t,t]):"object"==typeof t&&t.constructor==Array&&2==t.length&&e.validNumericArray(t)?(t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),[t[0],t[1]]):(Debug.warn({val:t},"[{val}] is not valid value for size!"),!1)},function(t){return e.cloneArray(t)})}]),$R.service["class"]("Objects",["@extend",function GroupObjectModel(e){e(this,"$DefaultObjectModel")}]),$R.service["class"]("Objects",["@extend","Debug",function ImageObjectModel(e,t){e(this,"$DefaultObjectModel"),e(this,"$GlobalSizeModel");var n=this.extension("Style");n.define(0,"src",null,function(e){return"string"==typeof e?e:(t.warn({val:e},"[{val}] is not a valid src value"),!1)},function(e){return e})}]),$R.service["class"]("Objects",["@extend","+Model","+Path","+Color","Debug",function LineObjectModel(e,t,n,r,o){function SyncPathProperty(e,t){for(var n=0;n<e.length;n++)t[n]||t.push(t[t.length-1])}e(this,"$DefaultObjectModel"),e(this,"$DefaultFreeStrokeModel");var i=this.extension("Style");i.define(0,"path",[[0,0,0,0,0,0,0,0]],function(e){if(n.checkSimplePath(e)){var t=i.get("path"),r=n.convertSimplePath(e);return t.length!==r.length&&(SyncPathProperty(r,i.get("strokeStyle")),SyncPathProperty(r,i.get("strokeWidth")),SyncPathProperty(r,i.get("strokeColor"))),r}return o.warn("Line Model / Invalid value for path!"),!1},function(e){return n.convertComplexPath(e)})}]),$R.service["class"]("Objects",["@extend","+Model","+Color","Debug",function RectangleObjectModel(e,t,n,r){e(this,"$DefaultObjectModel"),e(this,"$GlobalBackgroundModel"),e(this,"$GlobalSizeModel");var i=this.extension("Style"),a=this.extension("Animation");i.define(0,"radius",[0,0,0,0],function(e){if("number"==typeof e)return e=Math.round(e),[e,e,e,e];if("object"==typeof e){if(e.constructor!==Array){for(var t=i.get("radius"),n=[],r=0;r<t.length;r++)"number"==typeof e[r]?n.push(Math.round(e[r])):n.push(t[r]);return n}for(var o=[],a=!0,r=0;r<e.length;r++){if("number"!=typeof e[r]){a=!1;break}e[r]<0?o.push(0):o.push(Math.round(e[r]))}if(a){for(var n=[],t=this.style("radius"),r=0;r<t.length;r++)void 0!==o[r]?n.push(o[r]):n.push(t[r]);return n}}},function(e){return t.cloneArray(e)}),a.morph("radius",1,function(e,t,n){if("number"==typeof n)n<0&&(n=0),e(this.style("radius")),t([n,n,n,n]);else if("object"==typeof n){var o=this.style("radius"),i=[];e(o);for(var a=0;a<o.length;a++)"number"==typeof n[a]?n[a]<0?i.push(0):i.push(Math.round(n[a])):i.push(o[a]);t(i)}else r.warn({v:n},"{v} is not a valid radius value for rectangle")},function(e){return e}),i.define(0,"strokeColor",["rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)"],function(e){if("string"==typeof e)return n.colorToArray(e)?[e,e,e,e]:(r.warn({value:val}," [{val} is not a valid stroke string"),!1);if("object"==typeof e&&e.constructor===Array){for(var t=i.get("strokeColor"),o=[],a=0;a<t.length;a++)e[a]?"string"==typeof e[a]?n.colorToArray(e[a])?o.push(e[a]):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid stroke color value!")):"object"==typeof e[a]&&e[a].constructor===Array?n.isColor(e[a])?o.push(n.arrayToColor(e[a])):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid stroke color value")):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid color value")):o.push(t[a]);return o}if("object"==typeof e){for(var t=i.get("strokeColor"),o=[],a=0;a<t.length;a++)e.hasOwnProperty(a)?"string"==typeof e[a]?n.colorToArray(e[a])?o.push(e[a]):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid color value")):"object"==typeof e[a]&&e[a].constructor===Array&&n.isColor(e[a])?o.push(n.arrayToColor(e[a])):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid color value")):o.push(t[a]);return o}return r.warn({val:e},"[{val}] is not a valid value for strokeColor!"),!1},function(e){for(var t=[],r=0;r<e.length;r++)t.push(n.colorToArray(e[r]));return t}),a.morph("strokeColor",0,function(e,o,i){if("string"==typeof i){var a=n.colorToArray(i);a?(o([t.cloneArray(a),t.cloneArray(a),t.cloneArray(a),t.cloneArray(a)]),e(this.style("strokeColor"))):r.warn({v:i},"{v} is not a valid color")}else if("object"==typeof i&&i.constructor===Array)if(n.isColor(i))o([t.cloneArray(i),t.cloneArray(i),t.cloneArray(i),t.cloneArray(i)]),e(this.style("strokeColor"));else{for(var s=this.style("strokeColor"),u=[],c=!1,l=0;l<s.length;l++)if("string"==typeof i[l]){var a=n.colorToArray(i[l]);a?(u.push(a),c=!0):u.push(f[l])}else"object"==typeof i[l]&&i[l].constructor===Array&&i[l]&&n.isColor(i[l])?(u.push(t.cloneArray(i[l])),c=!0):u.push(f[l]);c?(e(s),o(u)):r.warn({v:i},"[{v}] is not a valid value for strokeColor")}else if("object"==typeof i){for(var f=this.style("strokeColor"),u=[],c=!1,l=0;l<f.length;l++)if("string"==typeof i[l]){var a=n.colorToArray(i[l]);a?(u.push(a),c=!0):u.push(f[l])}else"object"==typeof i[l]&&i[l].constructor===Array&&n.isColor(i[l])?(u.push(t.cloneArray(i[l])),c=!0):u.push(f[l]);c?(e(f),o(u)):r.warn({v:i},"[{v}] is not a valid value for strokeColor!")}},function(e){for(var t=0;t<e.length;t++)n.normalize(e[t]);return e}),i.define(0,"strokeWidth",[1,1,1,1],function(e){if("number"==typeof e)return[e,e,e,e];if("object"==typeof e&&e.constructor===Array){for(var t=i.get("strokeWidth"),n=[],o=0;o<t.length;o++)e[o]?"number"==typeof e[o]?n.push(e[o]):(n.push(t[o]),r.warn({val:e}," [{val}] is not a valid stroke width value")):n.push(t[o]);return n}if("object"==typeof e){for(var n=[],t=i.get("strokeWidth"),o=0;o<t.length;o++)e.hasOwnProperty(o)?"number"==typeof e[o]?n.push(e[o]):(r.warn({val:e},"[{val}] is not a valid value for strokeWidth"),n.push(t[o])):n.push(t[o]);return n}return r.warn({val:e}," [{val}] is not a valid strokeWidth value"),!1},function(e){return t.cloneArray(e)}),a.morph("strokeWidth",0,function(e,t,n){if("number"==typeof n)t([n,n,n,n]),e(this.style("strokeWidth"));else if("object"==typeof n&&n.constructor===Array){for(var o=this.style("strokeWidth"),i=[],a=0;a<o.length;a++)n[a]&&"number"==typeof n[a]?i.push(n[a]):i.push(o[a]);t(i),e(o)}else if("object"==typeof n){for(var o=this.style("strokeWidth"),i=[],s=!1,a=0;a<o.length;a++)n[a]&&"number"==typeof n[a]?(i.push(n),s=!0):i.push(o[a]);s?(t(i),e(o)):r.warn({v:n}," [{v}] is not a valid strokeWidth object")}else r.warn({v:n}," [{v}] is not a valid value for strokeWidth")},function(e){return e}),i.define(0,"strokeStyle",[[1,0],[1,0],[1,0],[1,0]],function(e){if("object"!=typeof e)return r.warn({val:e}," [{val}] is not valid strokeStyle value"),
!1;if(e.constructor!==Array){for(var n=[],o=i.get("strokeStyle"),a=0;a<o.length;a++)e.hasOwnProperty(a)?"object"==typeof e[a]&&e[a].constructor===Array?t.validNumericArray(e[a])&&2===e[a].length?n.push(t.cloneArray(e[a])):(n.push(o[a]),r.warn({val:e[a]},"[{val}] is not a valid strokeStyle value")):(n.push(o[a]),r.watch({val:e[a]}," [{val}] is not a valid strokeStyle value")):n.push(o[a]);return n}if(!t.validNumericArray(e)){for(var n=[],o=i.get("strokeStyle"),a=0;a<o.length;a++)e[a]?t.validNumericArray(e[a])&&2===e.length?n.push(t.cloneArray(e[a])):(n.push(o[a]),r.warn({val:e[a]}," [{val}] is not a valid stroke style value")):n.push(o[a]);return n}return 2===e.length?[e,e,e,e]:void r.warn({v:e}," [{v}] is not a valid value for stroke width!")},function(e){return t.cloneArray(e)}),a.morph("strokeStyle",0,function(e,n,i){if("object"==typeof i)if(i.constructor===Array)if(t.validNumericArray(i))2===i.length?(e(this.style("strokeStyle")),n(t.cloneArray(i),t.cloneArray(i),t.cloneArray(i),t.cloneArray(i))):r.warn({v:i}," [{v}] is not a valid strokeStyle value!");else{for(var a=this.style("strokeStylr"),s=[],u=!1,c=0;c<a.length;c++)i[c]&&t.validNumericArray(i[c])&&2===i[c].length?(s.push(t.cloneArray(i[c])),u=!0):s.push(a[c]);u?(e(a),n(s)):r.warn({v:i},"[{v}] is not a valid strokeStyle value")}else{for(var a=this.style("strokeStyle"),s=[],u=!1,c=0;c<a.length;c++)i[c]&&t.validNumericArray(i[c])&&2===i[c].length?(s.push(t.cloneArray(i[o])),u=!0):s.push(a[c]);u?(e(a),n(s)):r.warn({v:i},"[{v}] is not a valid strokeStyleValue")}else r.warn({v:i},"[{v}] is not a valid strokeStyleValue")},function(e){return e})}]),$R.service["class"]("Objects",["@extend","+Model","Debug",function SpriteObjectModel(e,t,n){e(this,"$DefaultObjectModel"),e(this,"$GlobalSizeModel");var r=this.extension("Style");r.define(0,"src",null,function(e){return"string"==typeof e?t.isSpriteString(e)?e:(n.warn({val:e},"[{val}] is not a valid value for sprite src"),!1):"object"==typeof e&&e.constructor==Array?"string"==typeof e[0]&&"number"==typeof e[1]&&e[1]>0?e[0]+"["+e[1]+"]":(n.warn({val:e},"[{val}] is not a valid sprite src"),!1):void n.warn({val:e},"[{val}] is not a valid sprite src")},function(e){return e})}]),$R.service["class"]("Objects",["@extend","+Model","+Color","Debug","@Fonts",function TextObjectModel(e,t,n,r,o){e(this,"$DefaultObjectModel");var i=this.extension("Style"),a=this.extension("Text"),s=this.extension("Animation"),u=this;i.define(1,"size",["auto","auto"],function(e){if("string"==typeof e&&"auto"===e)return a.limits(1/0,1/0),[e,e];if("number"==typeof e)return a.limits(e,e),[e,e];if("object"==typeof e&&e.constructor===Array&&2===e.length){for(var t=!0,n=0;n<e.length;n++)if("string"!=typeof e[n]&&"number"!=typeof e[n]||"string"==typeof e[n]&&"auto"!==e[n]){t=!1;break}return t?("number"==typeof e[0]&&e[0]<0&&(e[0]=0),"number"==typeof e[1]&&e[1]<0&&(e[1]=0),a.limits("auto"===e[0]?1/0:e[0],"auto"===e[1]?1/0:e[1]),[e[0],e[1]]):(r.warn({v:e},"[{v}] is not a valid size array"),!1)}return r.warn({v:e},"[{v}] is not a valid value for size"),!1},function(e){return[e[0],e[1]]}),i.define(1,"str","",function(e){return"string"==typeof e&&e},function(e){return e});var c="sans-serif";i.define(1,"font","sans-serif",function(e){if("string"==typeof e)return c=o.format(e),u.style("systemFont",null),e},function(e){return e}),i.define(1,"systemFont",c,function(){return c},function(){return c}),i.define(1,"weight",400,function(e){return"number"==typeof e&&(e<100&&(e=100),e>900&&(e=900),e%100!==0&&(e-=e%100),e)},function(e){return e}),i.define(1,"style","normal",function(e){return"string"==typeof e&&("normal"===e||"italic"===e||"oblique"===e)&&e},function(e){return e}),i.define(1,"lineHeight",14,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.define(1,"fontSize",14,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.define(1,"color","rgba(0,0,0,1)",function(e){return"string"==typeof e?n.colorToArray(e)?e:(r.warn({val:e},"[{val}] is not a valid color!"),!1):"object"==typeof e&&e.constructor===Array?n.isColor(e)?n.arrayToColor(e):(r.warn({val:e},"[{val}] is not a valid color"),!1):(r.warn({val:e},"[{val}] is not a valid color!"),!1)},function(e){return n.colorToArray(e)}),i.define(1,"align","left",function(e){return"center"===e||"left"===e||"right"===e?e:(r.warn({v:e},"[{v}] is not a proper value for aling text property"),!1)},function(e){return e}),s.morph("color",1,function(e,o,i){if("string"==typeof i){var a=n.colorToArray(i);a?(e(this.style("fill")),o(a)):r.warn({v:i},"[{v}] is not avalid color!")}else"object"==typeof i&&i.constructor===Array?n.isColor(i)&&(e(this.style("fill")),o(t.cloneArray(i))):r.warn({v:i},"[{v}] is not a valid color!")},function(e){return n.normalize(e),e})}]),$R.service["class"]("Sound",["+Animation","Morphine",function Animation(e,t){function Resolve(e){if(e==p)for(var t=0;t<a.length;t++)c.hasOwnProperty(a[t].morph.property())&&c[a[t].morph.property()].apply(u,[n,a[t].result]);else if(e==v){i=!0;for(var r={},t=0;t<a.length;t++)r[a[t].morph.property()]=a[t].result;g.done(1,r),h()}}var n=0,r=null,o=null,i=!1,a=null,s=null,u=null,c=null,l=!1,f=!1,h=null,p="type",v="complete",g=null;this.target=function(){return u},this.queue=function(){return l},this.active=function(){return f},this.done=function(){return i},this.hasProperty=function(e){for(var t=0,n=0;n<a.length;n++)if(a[n].morph.property()==e){t=n+1;break}return t},this.properties=function(){for(var e=[],t=0;t<a.length;t++)e.push(a[t].morph.property());return e},this.stop=function(e){if(e){var t=this.hasProperty(e);t&&(t-=1,a.splice(t,1))}else a=[]},this.start=function(){f=!0;for(var n=[],i=0;i<a.length;i++){var u=a[i].morph.get(a[i].value);void 0!==u&&u.start()!==!1&&u.end()!==!1&&n.push(a[i])}a=n;var c=e.getTickFunction();s=t.create(0,1,function(e,t){if(0==a.length)Resolve(v),s.stop();else{for(var n=0;n<a.length;n++)a[n].result=c(t,a[n].morph.start(),a[n].morph.end()),a[n].morph.apply(e,a[n].result);Resolve(p),1==e&&Resolve(v)}},o,r,0)},this.config=function(t,n,i,s){e.normalizeConfig(i),r=i.duration,o=i.easing,c=i.step,l=i.queue,h=s,a=n,u=t,g=i}}]),$R.service["class"]("Sound",["Debug",function Morph(e){function SetStartValue(e){t=e}function SetEndValue(e){n=e}var t,n,r=null,o=null,i=null,a=null,s=!1,u=0;this.start=function(){return t},this.end=function(){return n},this.property=function(){return r},this.ordering=function(){return u},this.get=function(e){return o.apply(a,[SetStartValue,SetEndValue,e]),this},this.valid=function(){return s},this.apply=function(e,t){a.filter(r,i.apply(a,[t,e]))},this.config=function(t,n,c,l,f){return"string"!=typeof t?void e.error({name:t},"Unable to config Morph. arg1 [{name}] is not a string!"):"object"!=typeof n?void e.error({name:t},"Unable to config Morph. arg3 is not an object!"):"function"!=typeof l?void e.error({name:t},"Unable to config Morph. arg4 is not a function!"):"number"!=typeof c?void e.error({name:t},"Unable to config Morph. arg2 is not a number!"):"function"!=typeof f?void e.error({name:t},"Unable to config Morph. arg5 is not a function!"):(r=t,o=l,i=f,u=c,a=n,void(s=!0))}}]),$R.helper.system(function Animation(){function TickVal(e,t,n,r){var o=!1,i=!1;if("function"==typeof n&&(o=n()),"function"==typeof r&&(i=r()),n.constructor===Array)for(var a=[],s=0;s<n.length;s++)a.push(TickVal(e,t,n[s],r[s]));else if("object"==typeof n){var a={};for(var u in n)a[u]=TickVal(e,t,n[u],r[u])}else if("number"==typeof n||"function"==typeof n){var c=i===!1?r:i,l=o===!1?n:o,f=c-l,a=l+f*e;t>=1&&(a=c)}return a}this.normalizeConfig=function(e){e.duration="number"==typeof e.duration&&e.duration>0?e.duration:1e3,e.queue=!!e.queue,e.step="object"==typeof e.step?e.step:{},e.easing="string"==typeof e.easing?e.easing:"linear",e.done="function"==typeof e.done?e.done:function(){}},this.getTickFunction=function(){return TickVal}}),$R.helper.system(function Color(){function NormalizeColorArray(e){if(e!==!1&&void 0!==e){for(var t=0;t<e.length;t++)e[t]=e[t]<=255?e[t]:255,e[t]=e[t]>=0?e[t]:0,e[t]=3!==t&&0!==e[t]?parseInt(e[t]):e[t],e[t]=(3==t&&e[t])<=1?e[t]:1,e[t]=Math.abs(e[t]);return e}return!1}function ParseColour(e){var t,n=parseInt,e=e.replace(/\s\s*/g,"");if(t=/^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})/.exec(e))t=[n(t[1],16),n(t[2],16),n(t[3],16)];else if(t=/^#([\da-fA-F])([\da-fA-F])([\da-fA-F])/.exec(e))t=[17*n(t[1],16),17*n(t[2],16),17*n(t[3],16)];else if(t=/^rgba\(([\d]+),([\d]+),([\d]+),([\d]+|[\d]*.[\d]+)\)/.exec(e))t=[+t[1],+t[2],+t[3],+t[4]];else{if(!(t=/^rgb\(([\d]+),([\d]+),([\d]+)\)/.exec(e)))return!1;t=[+t[1],+t[2],+t[3]]}return isNaN(t[3])&&(t[3]=1),NormalizeColorArray(t.slice(0,4))}this.colorToArray=ParseColour,this.normalize=NormalizeColorArray,this.isColor=function(e){var t=!1;if(4==e.length)for(var n=0;n<e.length;n++)"number"==typeof e[n]||"string"==typeof e[n]?"string"==typeof e[n]&&isNaN(1*e[n])&&(t=!0):t=!0;else t=!0;return t&&console.warn('Silk : Check for color unsuccessful. "'+e+'" is not a color Array.'),!t},this.arrayToColor=function(e){if(e&&4==e.length){for(var t="rgba(",n=0;n<e.length;n++)t+=3==n?e[n]+")":e[n]+",";return t}return console.warn("Unknown Input array format. Should be [R,G,B,A];"),!1}}),$R.helper.system(function Drawer(e){var t=document.createElement("canvas").getContext("2d");this.measureText=function(e){t.save();var n=e(t);return t.restore(),n},this.transform=function(e,t){t.transform.apply(t,e.matrix().extract())},this.drawLineBgClipPath=function(t,n,r,o,i){var a=r.get("bg"),s=r.get("bgSize"),u=r.get("bgPosition");t.save(),t.beginPath(),t.moveTo(n[0][0],n[0][1]);for(var c=0;c<n.length;c++){var l=n[c][0],f=n[c][1],h=n[c][2],p=n[c][3];if("number"!=typeof l||"number"!=typeof h||"number"!=typeof f||"number"!=typeof p){e.error("Invalid path!");break}t.lineTo(h,p)}t.closePath(),t.clip();for(var v=0;v<a.length;v++)if(a[v].loaded()){t.save();var g=box.size[0]*s[v][0],d=box.size[1]*s[v][1],y=box.size[0]*u[v][0],m=box.size[1]*u[v][1];t.translate(i.margin[3]+y,i.margin[0]+m),t.drawImage(a[c]["export"](),0,0,g,d),t.restore()}else a[v].on("load",function(){o.update("bg")});t.restore()},this.drawBezierBgClipPath=function(t,n,r,o,i){var a=r.get("bg"),s=r.get("bgSize"),u=r.get("bgPosition");t.save(),t.beginPath(),t.moveTo(n[0][0],n[0][1]);for(var c=0;c<n.length;c++){var l=n[c][0],f=n[c][1],h=n[c][2],p=n[c][3],v=n[c][4],g=n[c][5],d=n[c][6],y=n[c][7];if("number"!=typeof l||"number"!=typeof h||"number"!=typeof f||"number"!=typeof p){e.error("Invalid path!");break}if("number"!=typeof v||"number"!=typeof d||"number"!=typeof g||"number"!=typeof y){e.error("Invalid curve!");break}t.bezierCurveTo(v,g,d,y,h,p)}t.closePath(),t.clip();for(var m=0;m<a.length;m++)if(a[m].loaded()){t.save();var b=box.size[0]*s[m][0],w=box.size[1]*s[m][1],C=box.size[0]*u[m][0],A=box.size[1]*u[m][1];t.translate(i.margin[3]+C,i.margin[0]+A),t.drawImage(a[c]["export"](),0,0,b,w),t.restore()}else a[m].on("load",function(){o.update("bg")});t.restore()},this.drawLinePathFill=function(t,n,r){var o=r.get("fill"),i=r.get("cap");t.save(),t.lineCap=i,t.moveTo(n[0][0],n[0][1]),t.beginPath();for(var a=0;a<n.length;a++){var s=n[a][0],u=n[a][1],c=n[a][2],l=n[a][3];if("number"!=typeof s||"number"!=typeof c||"number"!=typeof u||"number"!=typeof l){e.error("Invalid path!");break}t.lineTo(c,l)}t.closePath(),t.fillStyle=o,t.fill(),t.restore()},this.drawBezierPathFill=function(t,n,r){var o=r.get("fill"),i=r.get("cap");t.save(),t.lineCap=i,t.beginPath(),t.moveTo(n[0][0],n[0][1]);for(var a=0;a<n.length;a++){var s=n[a][0],u=n[a][1],c=n[a][2],l=n[a][3],f=n[a][4],h=n[a][5],p=n[a][6],v=n[a][7];if("number"!=typeof s||"number"!=typeof c||"number"!=typeof u||"number"!=typeof l){e.error("Invalid path!");break}if("number"!=typeof f||"number"!=typeof p||"number"!=typeof h||"number"!=typeof v){e.error("Invalid curve!");break}t.bezierCurveTo(f,h,p,v,c,l)}t.closePath(),t.fillStyle=o,t.fill(),t.restore()},this.drawLinePath=function(t,n,r){var o=r.get("strokeColor"),i=r.get("strokeWidth"),a=r.get("strokeStyle"),s=r.get("cap");t.save(),t.lineCap=s;for(var u=0;u<n.length;u++){var c=n[u][0],l=n[u][1],f=n[u][2],h=n[u][3];if("number"!=typeof c||"number"!=typeof f||"number"!=typeof l||"number"!=typeof h){e.error("Invalid path!");break}i[u]<.1?t.moveTo(f,h):(t.beginPath(),t.moveTo(c,l),t.strokeStyle=o[u],t.lineWidth=i[u],t.setLineDash(a[u]),t.lineTo(f,h),t.stroke())}t.restore()},this.drawBezierPath=function(t,n,r){var o=r.get("strokeColor"),i=r.get("strokeWidth"),a=r.get("strokeStyle"),s=r.get("cap");t.save(),t.lineCap=s;for(var u=0;u<n.length;u++){var c=n[u][0],l=n[u][1],f=n[u][2],h=n[u][3],p=n[u][4],v=n[u][5],g=n[u][6],d=n[u][7];if("number"!=typeof c||"number"!=typeof f||"number"!=typeof l||"number"!=typeof h){e.error("Invalid path!");break}if("number"!=typeof p||"number"!=typeof g||"number"!=typeof v||"number"!=typeof d){e.error("Invalid curve!");break}i[u]<.1?t.moveTo(f,h):(t.beginPath(),t.moveTo(c,l),t.strokeStyle=o[u],t.lineWidth=i[u],t.setLineDash(a[u]),t.bezierCurveTo(p,v,g,d,f,h),t.stroke())}t.restore()},this.drawRectFill=function(e,t,n,r,o,i){e.save();var a=t.get("fill");e.fillStyle=a,e.rect(n,r,o,i),e.fill(),e.restore()},this.drawRectStroke=function(e,t,n,r,o,i){var a=t.get("strokeStyle"),s=t.get("strokeColor"),u=t.get("strokeWidth");e.save();for(var c=0,l=0,f=0;f<4;f++)e.beginPath(),e.strokeStyle=s[f],e.strokeWidth=u[f],e.setLineDash(a[f]),0===f&&(c=n+o,l=r),1===f&&(c=n+o,l=r+i),2===f&&(c=n,l=r+i),3===f&&(c=n,l=r),u[f]<.1?e.moveTo(c,l):(e.lineTo(c,l),e.stroke());e.restore()}}),$R.helper.system(["Debug",function Easing(e){var t={_:function(e,t,n,r){return n*(e/=r)*e*e+t},linear:function(e,t,n,r){return e/=r,t+n*e},linearSoft:function(e,t,n,r){var o=(e/=r)*e,i=o*e;return t+n*(4*i*o+-10*o*o+8*i+-2*o+e)},linearSoftOut:function(e,t,n,r){var o=(e/=r)*e,i=o*e;return t+n*(-3*i*o+11*o*o+-14*i+6*o+e)},linearSoftIn:function(e,t,n,r){var o=(e/=r)*e,i=o*e;return t+n*(-1*i*o+2*i)},easeInQuad:function(e,t,n,r){n*(e/=r)*e+t;return n*(e/=r)*e+t},easeOutQuad:function(e,t,n,r){return-n*(e/=r)*(e-2)+t},easeInOutQuad:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},easeInCubic:function(e,t,n,r){return n*(e/=r)*e*e+t},easeOutCubic:function(e,t,n,r){return n*((e=e/r-1)*e*e+1)+t},easeInOutCubic:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t},easeInQuart:function(e,t,n,r){return n*(e/=r)*e*e*e+t},easeOutQuart:function(e,t,n,r){return-n*((e=e/r-1)*e*e*e-1)+t},easeInOutQuart:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e*e+t:-n/2*((e-=2)*e*e*e-2)+t},easeInQuint:function(e,t,n,r){return n*(e/=r)*e*e*e*e+t},easeOutQuint:function(e,t,n,r){return n*((e=e/r-1)*e*e*e*e+1)+t},easeInOutQuint:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e*e*e+t:n/2*((e-=2)*e*e*e*e+2)+t},easeInSine:function(e,t,n,r){return-n*Math.cos(e/r*(Math.PI/2))+n+t},easeOutSine:function(e,t,n,r){return n*Math.sin(e/r*(Math.PI/2))+t},easeInOutSine:function(e,t,n,r){return-n/2*(Math.cos(Math.PI*e/r)-1)+t},easeInExpo:function(e,t,n,r){return 0===e?t:n*Math.pow(2,10*(e/r-1))+t},easeOutExpo:function(e,t,n,r){return e===r?t+n:n*(-Math.pow(2,-10*e/r)+1)+t},easeInOutExpo:function(e,t,n,r){return 0===e?t:e===r?t+n:(e/=r/2)<1?n/2*Math.pow(2,10*(e-1))+t:n/2*(-Math.pow(2,-10*--e)+2)+t},easeInCirc:function(e,t,n,r){return-n*(Math.sqrt(1-(e/=r)*e)-1)+t},easeOutCirc:function(e,t,n,r){return n*Math.sqrt(1-(e=e/r-1)*e)+t},easeInOutCirc:function(e,t,n,r){return(e/=r/2)<1?-n/2*(Math.sqrt(1-e*e)-1)+t:n/2*(Math.sqrt(1-(e-=2)*e)+1)+t},easeInBack:function(e,t,n,r,o){var i=(e/=r)*e,a=i*e;return t+n*(15.26*a*i+-43.56*i*i+39.8*a+-10.6*i+.1*e)},easeOutBack:function(e,t,n,r,o){var i=(e/=r)*e,a=i*e;return t+n*(11.24*a*i+-23.96*i*i+12.24*a+1.44*i+.04*e)},easeInOutBack:function(e,t,n,r,o){var i=(e/=r)*e,a=i*e;return t+n*(22.92*a*i+-57.78*i*i+45*a+-9.28*i+.14*e)},easeOutBounce:function(e,t,n,r){return(e/=r)<1/2.75?n*(7.5625*e*e)+t:e<2/2.75?n*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?n*(7.5625*(e-=2.25/2.75)*e+.9375)+t:n*(7.5625*(e-=2.625/2.75)*e+.984375)+t}};this.get=function(n){return t[n]?t[n]:(e.error({name:n},"Easings / Unable to get undefined easing [{name}]. Linear easing function provided."),t.linear)}}]),$R.helper.system(function Matrix(){function GraphicsTransformMatrix(e){function multiply(e,t){var n=e[0]*t[0]+e[2]*t[1],r=e[1]*t[0]+e[3]*t[1],o=e[0]*t[2]+e[2]*t[3],i=e[1]*t[2]+e[3]*t[3],a=e[0]*t[4]+e[2]*t[5]+e[4],s=e[1]*t[4]+e[3]*t[5]+e[5];e[0]=n,e[1]=r,e[2]=o,e[3]=i,e[4]=a,e[5]=s}function invert(){for(var e=o.length-1;e>=0;e--){if(o[e].rotate){var t=Math.sin(-o[e].rotate),r=Math.cos(-o[e].rotate);multiply(n,[r,t,-t,r,0,0])}o[e].translate&&multiply(n,[1,0,0,1,-o[e].translate[0],-o[e].translate[1]]),o[e].skew&&multiply(n,[1,Math.tan(-o[e].skew[1]),Math.tan(-o[e].skew[0]),1,0,0]),o[e].scale&&multiply(n,[1/o[e].scale[0],0,0,1/o[e].scale[1],0,0])}i=!0,o=null}function invertGlobal(){var t=e.parent();if(i||invert(),t){if(r)return r;r=[n[0],n[1],n[2],n[3],n[4],n[5]],multiply(r,t.matrix().globalInversionMatrix())}else r=n;return r}var t=[1,0,0,1,0,0],n=[1,0,0,1,0,0],r=null,o=[],i=!1;this.rotate=function(e){var n=Math.sin(e),r=Math.cos(e),i=[r,n,-n,r,0,0];return multiply(t,i),o.push({rotate:e}),this},this.translate=function(e,n){var r=[1,0,0,1,e,n];return 0===e&&0===n||(multiply(t,r),o.push({translate:[e,n]})),this},this.scale=function(e,n){if(1!==e||1!==n){var r=[e,0,0,n,0,0];multiply(t,r),o.push({scale:[e,n]})}return this},this.skew=function(e,n){if(0!==e||0!==n){var r=Math.tan(e),i=Math.tan(n),a=[1,i,r,1,0,0];multiply(t,a),o.push({skew:[e,n]})}return this},this.extract=function(){return t},this.globalInversionMatrix=invertGlobal,this.globalCursorProjection=function(e){r||invertGlobal();var t=e[0]*r[0]+e[1]*r[2]+r[4],n=e[0]*r[1]+e[1]*r[3]+r[5];return e[0]=t,e[1]=n,e},this.cursorProjection=function(e){i||invert();var t=e[0]*n[0]+e[1]*n[2]+n[4],r=e[0]*n[1]+e[1]*n[3]+n[5];return e[0]=t,e[1]=r,e}}this.objectMatrix=function(e){var t=new GraphicsTransformMatrix(e),n=e.extension("Style"),r=e.extension("Box").box(),o=r.sprite(),i=n.get("position"),a=n.get("origin"),s=n.get("skew"),u=n.get("rotate"),c=n.get("scale"),l=n.get("translate"),f="Group"===e.type()?[i[0]+l[0]-o.margin[3],i[1]+l[1]-o.margin[0]]:[o.position[0]+l[0],o.position[1]+l[1]],h=[a[0]*o.size[0],a[1]*o.size[1]];return t.translate(h[0],h[1]),0===f[0]&&0===f[1]||t.translate(f[0],f[1]),0!==u&&t.rotate(u),0===s[0]&&0===s[1]||t.skew(s[0],s[1]),1===c[0]&&1===c[1]||t.scale(c[0],c[1]),t.translate(-h[0],-h[1]),t}}),$R.helper.system(["Debug",function Model(Debug){this.cloneHash=function(e){return"object"!=typeof e?void Debug.error("Hash is not an object!"):JSON.parse(JSON.stringify(e))},this.cloneArray=function(array){if("object"!=typeof array||array.constructor!==Array)return void Debug.error("array is not an array!");for(var result=[],i=0;i<array.length;i++)if("object"==typeof array[i])array[i].constructor==Array?result.push(this.cloneArray(array[i])):result.push(this.cloneHash(array[i]));else if("function"==typeof array[i]){var text=array[i].toString();result.push(eval(text)),Debug.warn("You clone functions! It can be slow!")}else result.push(array[i]);return result},this.validNumericArray=function(e){var t=!0;if("object"!=typeof e||e.constructor!==Array)return!1;for(var n=0;n<e.length;n++)if("number"!=typeof e[n]){t=!1;break}return t};var blendings=["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","copy","xor","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"];this.validBlending=function(e){for(var t=!1,n=0;n<blendings.length;n++)if(blendings[n]==e){t=!0;break}return t};var sprite_regexp=/^([./_\da-zA-Z]+)(\[(\d+)\])$/;this.isSpriteString=function(e){return sprite_regexp.test(e)},this.readSpriteString=function(e){var t=e.match(sprite_regexp);return{url:t[1],frames:parseInt(t[3])}}}]),$R.helper.system(function Mouse(){this.circleUserCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]);if(t<[0]||t[1]<0)return!1;var n=this.extension("Box").box().sprite();if(t[0]>n.size[0])return!1;if(t[1]>n.size[1])return!1;var r=n.size[0]/2,o=r,i=n.size[1]/2;return Math.pow(t[0]-o,2)+Math.pow(t[1]-i,2)<=Math.pow(r,2)&&this},this.squareUserCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]),n=this.extension("Box").box().sprite();return t[0]>0&&t[0]<n.size[0]&&(t[1]>0&&t[1]<n.size[1]&&this)},this.circleCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]);if(t<[0]||t[1]<0)return!1;var n=this.extension("Box").box().sprite();if(t[0]>n.size[0])return!1;if(t[1]>n.size[1])return!1;var r=n.size[0]/2,o=this.extension("Style").get("radius");return Math.pow(t[0]-r,2)+Math.pow(t[1]-r,2)<Math.pow(o,2)&&this},this.rectCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]),n=this.extension("Box").box().sprite();return t[0]>0&&t[0]<n.size[0]&&(t[1]>0&&t[1]<n.size[1]&&this)}}),$R.helper.system(["Debug",function Path(e){function getControlPoints(e,t,n,r,o,i,a){var s=Math.sqrt(Math.pow(n-e,2)+Math.pow(r-t,2)),u=Math.sqrt(Math.pow(o-n,2)+Math.pow(i-r,2)),c=a*s/(s+u),l=a*u/(s+u),f=n-c*(o-e),h=r-c*(i-t),p=n+l*(o-e),v=r+l*(i-t);return[f,h,p,v]}this.convertComplexPath=function(e){for(var t=[],n=0;n<e.length;n++)t.push([e[n][0],e[n][1]]);return t},this.convertSimplePath=function(t){if(t.length<2)return void e.error("Path should consist of at least two points!");for(var n=[],r=0;r<t.length;r++){var o=t[r][0],i=t[r][1];if("number"!=typeof o||"number"!=typeof i){e.error("Incorrect Path!"),n=void 0;break}r<t.length-1&&(n[r]||n.push([]),n[r].push(o),n[r].push(i)),0!==r&&(n[r-1].push(o),n[r-1].push(i),n[r-1].push(n[r-1][0]),n[r-1].push(n[r-1][1]),n[r-1].push(o),n[r-1].push(i))}return n},this.interpolate=function(e,t,n){for(var r=0;r<e.length;r++){var o=[],i=[e[r][0],e[r][1]],a=[e[r][2],e[r][3]],s=null;if(o=0==r?i:[e[r-1][0],e[r-1][1]],s=getControlPoints(o[0],o[1],i[0],i[1],a[0],a[1],t),0==r?(e[r][4]=s[2],e[r][5]=s[3]):(e[r-1][6]=s[0],e[r-1][7]=s[1],e[r][4]=s[2],e[r][5]=s[3]),r==e.length-1&&(o=[e[r][0],e[r][1]],i=[e[r][2],e[r][3]],a=i,s=getControlPoints(o[0],o[1],i[0],i[1],a[0],a[1],t),e[r][6]=s[0],e[r][7]=s[1]),n){var u=e[e.length-1],c=e[0],l=[[u[0],u[1],u[2],u[3],u[4],u[5],u[6],u[7]],[c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7]]];this.interpolate(l,t),e[0][4]=l[1][4],e[0][5]=l[1][5],e[e.length-1][6]=l[0][6],e[e.length-1][7]=l[0][7]}}},this.checkSimplePath=function(e){if("object"!=typeof e||e.constructor!==Array)return!1;for(var t=!0,n=0;n<e.length;n++)if("object"!=typeof e[n]||e[n].constructor!==Array||2!==e[n].length||"number"!=typeof e[n][0]||"number"!=typeof e[n][1]){t=!1;break}return t},this.comparePaths=function(e,t){var n=!0;if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)for(var o=0;o<e[r].length;o++)if(e[r][o]!==t[r][o]){n=!1;break}return n}}]); window.$R = $R})()
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvUmVmbGVjdC5qcyIsIm1vZHVsZXMvQXBwbGljYXRpb24uanMiLCJtb2R1bGVzL0F1ZGlvLmpzIiwibW9kdWxlcy9DYW52YXMuanMiLCJtb2R1bGVzL0NsYXNzZXMuanMiLCJtb2R1bGVzL0NvbmZpZy5qcyIsIm1vZHVsZXMvQ29udGFpbmVyLmpzIiwibW9kdWxlcy9Gb250cy5qcyIsIm1vZHVsZXMvSGVscGVycy5qcyIsIm1vZHVsZXMvSW5qZWN0aW9uLmpzIiwibW9kdWxlcy9Sb290LmpzIiwibW9kdWxlcy9TZXJ2aWNlcy5qcyIsIm1vZHVsZXMvU291cmNlLmpzIiwibW9kdWxlcy9UaWNrZXIuanMiLCJwbHVnaW5zL0FuaW1hdGlvbi9BbmltYXRpb24uanMiLCJwbHVnaW5zL0JveC9Cb3guanMiLCJwbHVnaW5zL0NhY2hlL0NhY2hlLmpzIiwicGx1Z2lucy9EcmF3ZXIvRHJhd2VyLmpzIiwicGx1Z2lucy9MYXllcnMvTGF5ZXJzLmpzIiwicGx1Z2lucy9NYXRyaXgvTWF0cml4LmpzIiwicGx1Z2lucy9Nb3VzZS9Nb3VzZS5qcyIsInBsdWdpbnMvT2Zmc2V0L09mZnNldC5qcyIsInBsdWdpbnMvU3R5bGUvU3R5bGUuanMiLCJwbHVnaW5zL1RleHQvVGV4dC5qcyIsInBsdWdpbnMvVHJlZS9UcmVlLmpzIiwic2VydmljZXMvQ2FudmFzL0NhbnZhcy5qcyIsInNlcnZpY2VzL0RlYnVnL0RlYnVnLmpzIiwic2VydmljZXMvS2V5Ym9hcmQvS2V5Ym9hcmQuanMiLCJzZXJ2aWNlcy9LZXlib2FyZC9LZXlib2FyZEV2ZW50LmpzIiwic2VydmljZXMvRGlzcGF0Y2hlci9EaXNwYXRjaGVyLmpzIiwic2VydmljZXMvTW9ycGhpbmUvTW9ycGhpbmUuanMiLCJzZXJ2aWNlcy9PYmplY3RzL0dyYXBoaWNzLmpzIiwic2VydmljZXMvT2JqZWN0cy9PYmplY3RzLmpzIiwic2VydmljZXMvUmVzb3VyY2UvUmVzb3VyY2UuanMiLCJzZXJ2aWNlcy9TdGF0ZS9TdGF0ZS5qcyIsInNlcnZpY2VzL1RyZWUvVHJlZS5qcyIsInNlcnZpY2VzL1NvdW5kL1NvdW5kLmpzIiwicGx1Z2lucy9BbmltYXRpb24vcGFydHMvQW5pbWF0aW9uLmpzIiwicGx1Z2lucy9BbmltYXRpb24vcGFydHMvTW9ycGguanMiLCJwbHVnaW5zL0JveC9wYXJ0L0JveC5qcyIsInBsdWdpbnMvVGV4dC9DbGFzc2VzL0xpbmVDbGFzcy5qcyIsInBsdWdpbnMvVGV4dC9DbGFzc2VzL1NwYWNlQ2xhc3MuanMiLCJwbHVnaW5zL1RleHQvQ2xhc3Nlcy9UZXh0RWxlbWVudENsYXNzLmpzIiwicGx1Z2lucy9UZXh0L0NsYXNzZXMvV29yZENsYXNzLmpzIiwic2VydmljZXMvRGlzcGF0Y2hlci9wYXJ0cy9GaW5kZXIuanMiLCJzZXJ2aWNlcy9Nb3JwaGluZS9wYXJ0cy9Nb3JwaGluZS5qcyIsInNlcnZpY2VzL09iamVjdHMvcGFydHMvQ2FudmFzLmpzIiwic2VydmljZXMvT2JqZWN0cy9wYXJ0cy9HcmFwaGljc0Fzc2VtYmxlci5qcyIsInNlcnZpY2VzL09iamVjdHMvcGFydHMvR3JhcGhpY3NBc3NlbWJsZXJMYXllci5qcyIsInNlcnZpY2VzL09iamVjdHMvcGFydHMvUGx1Z2luLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9BcmVhLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9DaXJjbGUuanMiLCJzZXJ2aWNlcy9PYmplY3RzL3R5cGVzL0RlZmF1bHQuanMiLCJzZXJ2aWNlcy9PYmplY3RzL3R5cGVzL0dyb3VwLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9JbWFnZS5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvTGluZS5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvUmVjdGFuZ2xlLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9TcHJpdGUuanMiLCJzZXJ2aWNlcy9PYmplY3RzL3R5cGVzL1RleHQuanMiLCJzZXJ2aWNlcy9SZXNvdXJjZS9jbGFzc2VzL0F1ZGlvQ2xhc3MuanMiLCJzZXJ2aWNlcy9SZXNvdXJjZS9jbGFzc2VzL0ZvbnRDbGFzcy5qcyIsInNlcnZpY2VzL1Jlc291cmNlL2NsYXNzZXMvSW1hZ2VDbGFzcy5qcyIsInNlcnZpY2VzL1Jlc291cmNlL2NsYXNzZXMvUmVzb3VyY2VDbGFzcy5qcyIsInNlcnZpY2VzL1Jlc291cmNlL2NsYXNzZXMvU3ByaXRlQ2xhc3MuanMiLCJzZXJ2aWNlcy9TdGF0ZS9wYXJ0cy9Qcm9wZXJ0eS5qcyIsInNlcnZpY2VzL1N0YXRlL3BhcnRzL1N0YXRlLmpzIiwic2VydmljZXMvU291bmQvYW5pbWF0aW9uL0FuaW1hdGlvblByb3ZpZGVyLmpzIiwic2VydmljZXMvU291bmQvY2xhc3Nlcy9BdWRpby5qcyIsInNlcnZpY2VzL1NvdW5kL2NsYXNzZXMvVXNlckF1ZGlvTWl4ZXIuanMiLCJzZXJ2aWNlcy9Tb3VuZC9jbGFzc2VzL1VzZXJBdWRpb1NvdXJjZS5qcyIsInNlcnZpY2VzL1NvdW5kL2ZpbHRlcnMvRGVsYXlOb2RlLmpzIiwic2VydmljZXMvU291bmQvZmlsdGVycy9EZXN0aW5hdGlvbk5vZGUuanMiLCJzZXJ2aWNlcy9Tb3VuZC9maWx0ZXJzL0dhaW5Ob2RlLmpzIiwic2VydmljZXMvU291bmQvZmlsdGVycy9Mb3dwYXNzTm9kZS5qcyIsInNlcnZpY2VzL1NvdW5kL3BhcnRzL0F1ZGlvTm9kZS5qcyIsInNlcnZpY2VzL1NvdW5kL3BhcnRzL0F1ZGlvTm9kZVNvdW5kc0Rpc3BhdGNoZXIuanMiLCJzZXJ2aWNlcy9Tb3VuZC9wYXJ0cy9BdWRpb1NvdXJjZS5qcyIsInNlcnZpY2VzL1NvdW5kL3BhcnRzL0V2ZW50LmpzIiwic2VydmljZXMvU291bmQvcGFydHMvRXZlbnRQcm92aWRlci5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvZHJhd2Vycy9BcmVhLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9kcmF3ZXJzL0NpcmNsZS5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvZHJhd2Vycy9EZWZhdWx0LmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9kcmF3ZXJzL0dyb3VwLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9kcmF3ZXJzL0ltYWdlLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9kcmF3ZXJzL0xpbmUuanMiLCJzZXJ2aWNlcy9PYmplY3RzL3R5cGVzL2RyYXdlcnMvUmVjdGFuZ2xlLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9kcmF3ZXJzL1Nwcml0ZS5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvZHJhd2Vycy9UZXh0LmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9tb2RlbHMvQXJlYS5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvbW9kZWxzL0NpcmNsZS5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvbW9kZWxzL0RlZmF1bHQuanMiLCJzZXJ2aWNlcy9PYmplY3RzL3R5cGVzL21vZGVscy9EZWZhdWx0RnJlZVN0cm9rZU1vZGVsLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9tb2RlbHMvR2xvYmFsQmFja2dyb3VuZE1vZGVsLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9tb2RlbHMvR2xvYmFsU2l6ZU1vZGVsLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9tb2RlbHMvR3JvdXAuanMiLCJzZXJ2aWNlcy9PYmplY3RzL3R5cGVzL21vZGVscy9JbWFnZS5qcyIsInNlcnZpY2VzL09iamVjdHMvdHlwZXMvbW9kZWxzL0xpbmUuanMiLCJzZXJ2aWNlcy9PYmplY3RzL3R5cGVzL21vZGVscy9SZWNhdGFuZ2xlLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9tb2RlbHMvU3ByaXRlLmpzIiwic2VydmljZXMvT2JqZWN0cy90eXBlcy9tb2RlbHMvVGV4dC5qcyIsInNlcnZpY2VzL1NvdW5kL2FuaW1hdGlvbi9wYXJ0cy9BbmltYXRpb24uanMiLCJzZXJ2aWNlcy9Tb3VuZC9hbmltYXRpb24vcGFydHMvTW9ycGguanMiLCJoZWxwZXJzL0FuaW1hdGlvbi5qcyIsImhlbHBlcnMvQ29sb3IuanMiLCJoZWxwZXJzL0RyYXdlci5qcyIsImhlbHBlcnMvRWFzaW5nLmpzIiwiaGVscGVycy9NYXRyaXguanMiLCJoZWxwZXJzL01vZGVsLmpzIiwiaGVscGVycy9Nb3VzZS5qcyIsImhlbHBlcnMvUGF0aC5qcyJdLCJuYW1lcyI6WyJSZWZsZWN0IiwiQ29yZSIsImYiLCJJbmplY3Rpb24iLCJyZWFkeSIsImkiLCJleHBlY3QiLCJsZW5ndGgiLCJtb2R1bGVzIiwiQnVpbGRDb3JlIiwiZ2V0Um91dGVGdW5jdGlvbiIsInJvdXRlRnVuY3Rpb24iLCJyZXN1bHQiLCJhcHBseSIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImJpbmQiLCJjb3JlIiwiZ2V0IiwicHJvcGVydHkiLCJwcm9wZXJ0aWVzIiwiaGFzT3duUHJvcGVydHkiLCJuYW1lIiwiRXJyb3IiLCJ0aGlzIiwiY2FjaGUiLCJjcmVhdGUiLCJwYXlsb2FkIiwiYXJncyIsImNvbnN0cnVjdG9yIiwiQXJyYXkiLCJwdXNoIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJpcyIsInRhcmdldCIsImV4dGVuZCIsImNhbGwiLCJtb2R1bGUiLCJpbmplY3QiLCJkZWZpbmUiLCJ2YWx1ZSIsIndpbmRvdyIsIiRSIiwiQXBwbGljYXRpb24iLCJDYW52YXMiLCJUaWNrZXIiLCJDb25maWciLCJzZWxmIiwiaXNOdW1iZXIiLCJncmVhdGVyIiwidW5kZXIiLCJ3YXRjaCIsInYiLCJmcHMiLCJpc1N0cmluZyIsImVsZW1lbnQiLCIkIiwibiIsImNoYXJBdCIsInN0b3AiLCJzdGFydCIsImNvbmZpZyIsImEiLCJiIiwic2V0IiwiQXVkaW8iLCJjb250ZXh0IiwiQXVkaW9Db250ZXh0IiwiRHJhd1NjZW5lIiwiZGF0ZSIsImZyYW1lIiwicXVldWUiLCJlIiwiY29uc29sZSIsImVycm9yIiwibyIsIm1lc3NhZ2UiLCJvcmRlcmluZyIsInJlc29sdmUiLCJhcnJheSIsInNpemUiLCJyZXNpemVDYiIsInN3aXRjaENiIiwiaWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0Q29udGV4dCIsImN0eCIsInNldEF0dHJpYnV0ZSIsIkhUTUxFbGVtZW50Iiwic29ydCIsIndpZHRoIiwiaGVpZ2h0IiwicmVzaXplIiwiQ2xhc3NlcyIsImNscyIsImNmZyIsImluamVjdGlvbiIsImdsb2JhbENsYXNzZXMiLCJ3YXJuIiwiYXBwIiwiYXBwbGljYXRpb25DbGFzc2VzIiwic3lzdGVtQ2xhc3NlcyIsInN5cyIsImdldEFwcGxpY2F0aW9uQ2xhc3NlcyIsImNvbnRhaW5lciIsInNvdXJjZSIsIm1lcmdlIiwiZ2V0U3lzdGVtQ2xhc3NlcyIsIlByb3BlcnR5IiwiY2hlY2tWYWx1ZSIsImNoZWNrQXJyYXkiLCJmdW5jcyIsImNiIiwiYXJnIiwiaXNBcnJheSIsInByb3AiLCJjdXN0b20iLCJlcSIsImlzQm9vbCIsIkNvbnRhaW5lciIsImxpYiIsImRpcmVjdCIsImxpYnJhcnkiLCJzb3VyY2VzIiwibGlzdCIsImRlcGVuZGVuY2llcyIsImNsb25lIiwicHJlZml4a2V5IiwiJCRMT09QIiwibG9vcCIsIiRMT09QIiwiJCRMT09PUCIsInZhbGlkIiwibmV3TGlicmFyeSIsIm5ld0NvbnRhaW5lciIsImNvbnRhaW5lcnMiLCJzb3VyY2Vsb29wIiwic291cmNlcHJlZml4IiwicHJlZml4IiwibmV3Y29udGFpbmVycyIsImZpbmRTb3VyY2VCeVByZWZpeCIsIiQkbm9wcmVmaXgiLCJmaW5kU291cmNlQnlJbmplY3Rpb25OYW1lIiwiaW5qZWN0aW9uTmFtZSIsImhhcyIsIiRjb25zdHJ1Y3RvciIsImQiLCJzcmMiLCJyZXNvbHZlRGlyZWN0SW5qZWN0aW9uIiwiRm9udHMiLCJmb250U3RyaW5nIiwiZm9udCIsImZvbnRzRGVmaW5lZCIsInciLCJ3ZWlnaHQiLCJzIiwic3R5bGUiLCJmaWxlc3RyaW5nIiwic3RyaW5nIiwiZm9ybWF0IiwiZm9ybWF0U3RyIiwidXBkYXRlIiwicGF0aCIsImZhbWlseSIsImZhbWlsaWVzIiwiaW5uZXJIVE1MIiwiaW5BcnJheSIsImNyZWF0ZUVsZW1lbnQiLCJlb3QiLCJ1cmwiLCJ3b2ZmIiwidHRmIiwic3ZnIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJmb3JtYXRzIiwiSGVscGVycyIsImhlbHBlciIsImhlbHBlcnMiLCJzeXNIZWxwZXJzIiwic3lzdGVtIiwiaXNfcHVibGljIiwiZ2V0U3lzdGVtSGVscGVycyIsImRlZmF1bHRzIiwiZ2V0UHVibGljSGVscGVycyIsImNvbiIsInJlc29sdmVkIiwiaW5zdGFuY2UiLCJyZXNvbHZlSW5qZWN0aW9uRGVwZW5kYW5jaWVzIiwidW5zaGlmdCIsIlJvb3QiLCJjcmVhdGVBcHBsaWNhdGlvbiIsImFwcENvbnRhaW5lciIsImFwcHMiLCJhcHBUaWNrZXIiLCJhcHBDYW52YXMiLCJhcHBBdWRpbyIsImFwcENvbmZpZyIsImFwcEZvbnRzIiwiYXBwQXBpIiwiZGVmYXVsdHNMaWJyYXJ5IiwiQVBJIiwiYXBwRGVmYXVsdHMiLCJhcHBTeXNIZWxwZXJzIiwiYXBwUHViSGVscGVycyIsImFwcENsYXNzZXMiLCJjbGFzc2VzIiwiYXBwU3lzQ2xhc3NlcyIsImFwcFNlcnZpY2VzIiwic2VydmljZXMiLCJnZXRBcHBsaWNhdGlvblNlcnZpY2VzIiwibCIsImFwcGxpY2F0aW9uIiwiU2VydmljZXMiLCJzZXJ2aWNlIiwic2VydmljZU5hbWUiLCJwbHVnaW4iLCJwbHVnaW5OYW1lIiwicGx1Z2lucyIsImdldFBsdWdpbk1hbmFnZXIiLCJQbHVnaW5zIiwiZWFjaCIsInNlcnZpY2VDbGFzc2VzIiwicGx1Z2luc0NsYXNzZXMiLCJzdmMiLCJwbHVnaW5DbGFzc05hbWUiLCJjbGFzc05hbWUiLCJfaGVscGVycyIsIl9zeXNDbGFzc2VzIiwiX2VuZ2luZURlZmF1bHRzIiwiX3NlcnZpY2UiLCJfcGx1Z2luIiwiX3NlcnZpY2VzIiwiX3NlcnZpY2VzQ2xhc3NlcyIsIl9zZXJ2aWNlc1BsdWdpbnMiLCJfc2VydmljZXNQbHVnaW5zQ2xhc3NlcyIsIl9wbHVnaW5zIiwiX3BsdWdpbkNsYXNzZXNDb250YWluZXIiLCJzZXJ2aWNlQ2xhc3Nlc0NvbnRhaW5lciIsIl9zZXJ2aWNlc1NlcnZpY2VTb3VyY2UiLCJzMiIsInAiLCJwY2wiLCJTb3VyY2UiLCJzdHJpcFByZWZpeCIsInBmeCIsImNoZWNrQ2FjaGUiLCJjaGVjayIsInN0cmlwTmFtZSIsInN0ciIsImV2ZW50IiwiX2NhbGxfYXJncyIsImV2ZW50Q2IiLCJmcmFtZUR1cmF0aW9uIiwidG9GaXhlZCIsImRyYXciLCJ0aWNrIiwiRGF0ZSIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbCIsIm9uIiwiZnVuYyIsInNldEludGVydmFsIiwibnVtYmVyIiwiQW5pbWF0aW9uIiwiRGVidWciLCJmaW5kQ29tcGV0aXRvciIsImFuaW1hdGlvbiIsIiQkU0VMRiIsImNvbXBldGl0b3IiLCJhbmltYXRpb25zIiwiYWN0aXZlIiwiZG9uZSIsImhhc1Byb3BlcnR5IiwiQ2hlY2tBbmltYXRpb25RdWV1ZSIsIl9hbmltYXRpb25zIiwicHJvcHMiLCJjb21wZXRpdG9ycyIsIkNyZWF0ZUFuaW1hdGlvblR5cGUxIiwiZHVyYXRpb24iLCJlYXNpbmciLCJleHRlbnNpb24iLCJwYWlyIiwibW9ycGhzIiwic3RhY2siLCJtb3JwaCIsIkNyZWF0ZUFuaW1hdGlvblR5cGUyIiwicGFpcnMiLCJhcmcyIiwiYXJnMyIsInR5cGUiLCJtb3JwaF9zdGFjayIsIml0ZW0iLCJhbmltYXRlZCIsInNldHRlciIsImFwcGxpZXIiLCJvYmplY3QiLCJleHRyYWN0TW9ycGgiLCJyZWdpc3RlciIsImFyZzEiLCJhcmc0IiwiQm94IiwiQm94V3JhcHBlckZ1bmMiLCJib3giLCJwdXJnZSIsInBhcmVudCIsIkNhY2hlIiwidmFsdWVzIiwicmVsZXZhbnQiLCJEcmF3ZXIiLCJtYXRyaXgiLCJiZWZvcmUiLCJhZnRlciIsIkxheWVycyIsImxheWVycyIsIjAiLCJsYXllciIsInZhbCIsInBhcmVudF9sYXllcl9leHQiLCJwbGFjZSIsIiQkTEFZRVJTRUFSQ0hWQUxVRSIsInNwbGljZSIsInJlbW92ZSIsImZvckVhY2giLCJNYXRyaXgiLCJNYXRyaXhXcmFwcGVyIiwiTW91c2UiLCJNb3VzZUhlbHBlciIsIkdldEV2ZW50QXJyYXkiLCJjYWxsYmFja3MiLCJkcmFnbW92ZSIsImRyYWdzdGFydCIsImRyYWdlbmQiLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwibW91c2Vkb3duIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJkaXNhYmxlZCIsIm1vdXNlQ2hlY2tGdW5jdGlvbiIsIiRPRkYiLCIkJE9GRiIsIiQkTU9VU0VGVU5DU0VBUkNIIiwiaW5kZXgiLCJjdXJzb3IiLCJjdXJzb3JUcmFuc2Zvcm1GdW5jdGlvbiIsImFwcGx5Q3Vyc29yVHJhbnNmb3JtIiwiaGFzRXZlbnQiLCJwcm9wYWdhdGUiLCJldmVudE9iaiIsIm1vdXNlIiwiX2V2ZW50T2JqIiwib3JpZ2luYWxUYXJnZXQiLCIkJE1PVVNFUFJPUEFHQVRJT05TRVRURVIiLCJPZmZzZXQiLCJPYmplY3RPZmZzZXRGdW5jdGlvbiIsInBvc2l0aW9uIiwicGFyZW50X29mZnNldCIsIm9mZnNldCIsIlN0eWxlIiwiR2V0U2V0dGVyRnVuY3Rpb24iLCJvbGQiLCJHZXRHZXR0ZXJGdW5jdGlvbiIsImdldHRlciIsIlN0eWxlVHlwZTEiLCJzZXR0ZXJzIiwiU3R5bGVUeXBlMiIsInNldHRlcnN0YWNrIiwiU3R5bGVUeXBlMyIsImdldHRlcnMiLCJjYWxsYmFjayIsIlRleHQiLCJNb2RlbEhlbHBlciIsImFwcGx5VG8iLCJsaW5lcyIsIndvcmRCeVdvcmRSZWdFeHAiLCJsaW1pdHMiLCJJbmZpbml0eSIsIndvcmRzIiwiX3ciLCJoIiwiZm9yY2VkIiwicGllY2VzIiwibWF0Y2giLCJsaW5lV2lkdGgiLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiLCJmb250V2VpZ2h0IiwiY29sb3IiLCJmb250U3R5bGUiLCJ1c2VybmV3bGluZSIsIndvcmQiLCJ0ZXh0QmxvY2tIZWlnaHQiLCJ0ZXh0QmxvY2tXaWR0aCIsImZvckVhY2hMaW5lIiwiVHJlZSIsImNoZWNrVHJlZSIsIiQkVFJFRVNFQVJDSFZBTFVFIiwidHJlZVZpb2xhdGlvbiIsIm9iamVjdF9vbGRfcGFyZW50Iiwib2JqZWN0X3RyZWVfZXh0Iiwib2xkX29iamVjdF9wYXJlbnRfbGF5ZXJzIiwib2JqZWN0X2xheWVyIiwiYXBwZW5kIiwiZ3JvdXAiLCJjb21wYXJlT25SZXNpemUiLCJzdWNjZXNzIiwieHVuaXRzIiwieXVuaXRzIiwiZGltbXMiLCJfcFciLCJwVyIsIl9wSCIsInBIIiwicmVzaXplVE8iLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwicGFyZW50Tm9kZSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJwYXJzZUludCIsImdldFByb3BlcnR5VmFsdWUiLCJNYXRoIiwiZmxvb3IiLCJHZXRDYW52YXNPZmZzZXQiLCJ4Iiwib2Zmc2V0UHJvcCIsImlzTmFOIiwib2Zmc2V0UGFyZW50IiwiV2luZG93UmVzaXplQ2FsbGJhY2siLCJvdXRwdXQiLCJSZXNvbHZlQ2FudmFzRXZlbnRBcnJheSIsIlJDYW52YXNSZXNpemVFdmVudCIsIkNhbnZhc1N3aXRjaENhbGxiYWNrIiwiUkNhbnZhc1N3aXRjaEV2ZW50IiwiR2V0Q2FudmFzRXZlbnRBcnJheSIsImNhbnZhc0V2ZW50Q2FsbGJhY2tzIiwiZGF0YSIsIkdldE1vdXNlUmVsYXRpdmVQb3NpdGlvbiIsInBhZ2VYIiwic2Nyb2xsIiwicGFnZVkiLCJSQ2FudmFzTW91c2UiLCJwYWdlIiwic2NlZW4iLCJSQ2FudmFzTW91c2VFdmVudCIsIm9yaWdpbmFsIiwiY2FudmFzIiwidW5pdHMiLCJjYW52YXNyZXNpemUiLCJjYW52YXNzd2l0Y2giLCJsaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhZ2VYT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsTGVmdCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwiUmVzb2x2ZUV2ZW50IiwiZXJyb3JDYiIsIm1lc3NhZ2VDYiIsIkdldE1lc3NhZ2UiLCJ0b1N0cmluZyIsIm1hdGNoZXMiLCJyZWdleHAiLCJtYXRjaG5hbWUiLCJyZWdleHBuYW1lIiwicmVwbGFjZSIsIndhcm5pbmdzIiwiS2V5Ym9hcmQiLCJPbkFwcFRpY2siLCJnZXRRdWV1ZUZ1bmMiLCJrZXljb2RlIiwia2V5Q29kZSIsImJ1aWxkIiwiZW5hYmxlZCIsImZvY3VzZWQiLCJrZXlkb3duIiwiY29kZSIsImtleXVwIiwiZGlzYWJsZSIsImVuYWJsZSIsImMiLCJjYW52YXNDbGlja2VkIiwiJG9uIiwiS2V5Ym9hcmRFdmVudCIsImN0cmxQcmVzc2VkIiwiYWx0UHJlc3NlZCIsInNoaWZ0UHJlc3NlZCIsImN0cmxLZXkiLCJhbHRLZXkiLCJzaGlmdEtleSIsInNoaWZ0IiwiYWx0IiwiY3RybCIsIkRpc3BhdGNoZXIiLCJDYW52YXNSb290IiwiRmluZGVyIiwiRGVmYXVsdFJFdmVudCIsIl90eXBlIiwiX3RhcmdldCIsIl9vcmlnaW5hbFRhcmdldCIsInN0b3BQcm9wYWdhdGlvbiIsInByb3BhZ2F0ZWQiLCIkJFBST1BBR0FUSU9OU0VBUkNIIiwiZ2V0RXZlbnRCeVR5cGUiLCIkJFJFU0VUVEFSR0VUIiwiTW91c2VFdmVudCIsImN1cnJlbnQiLCJEcmFnRXZlbnQiLCJkcmFnIiwiZGVsdGEiLCJEaXNwYXRjaCIsInRhcmdldE1vdXNlIiwicmVzb2x2ZUV2ZW50QnlUeXBlIiwicHJldmlvdXMiLCJyZXNvbHZlRHJhZ1N0YXJ0IiwiZHJhZ2dlZCIsInJlc29sdmVEcmFnRW5kIiwiRGlzcGF0Y2hFdmVudHMiLCIkJE1PVVNFU0VBUkNIIiwiVXBkYXRlVGFyZ2V0cyIsImV2ZW50RGlzcGF0Y2hlclRpY2siLCJjaGVja2VkIiwiTW9ycGhpbmUiLCJFYXNpbmdzIiwiZW5kIiwicnB0IiwiZWZ1bmMiLCJtb3JwaGluZXMiLCJtb3JwaGluZSIsInRpY2tGIiwiJG0iLCJwcm9jZXNzTW9ycGhpbmVzIiwiZ2V0VGltZSIsIl9tb3JwaGluZXMiLCJHcmFwaGljcyIsInJlc29sdmVkX3BsdWdpbnMiLCJkZWZpbmVUeXBlIiwidCIsImRlZmluZU9iamVjdCIsIm1hdGNoVHlwZSIsIndyYXAiLCJPYmplY3RzIiwiSW5qZWN0QnlUeXBlIiwibGluZSIsInJlY3QiLCJjaXJjbGUiLCJpbWFnZSIsInNwcml0ZSIsInRleHQiLCJhcmVhIiwicm9vdCIsIlJlc291cmNlIiwiR2V0UmVzb3VyY2VCeVVSTCIsInNlYXJjaCIsImV4aXN0ZWQiLCJsb2FkQ291bnRlciIsImFsbCIsInByZWxvYWRSZXF1ZXN0IiwiaW1hZ2VzIiwidGVzdCIsImF1ZGlvIiwiZm9udHMiLCJjQkNvbnRhaW5lciIsInNwcml0ZXMiLCJhdWRpb3MiLCJyZXF1ZXN0IiwicHJlbG9hZCIsInByZWxvYWRCeVVybCIsImFib3J0IiwiWE1MSHR0cFJlcXVlc3QiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsImxvYWQiLCJhZGQiLCJvZmYiLCJuYXJyYXkiLCIkJFNFQVJDSCIsImNvbmNhdCIsInVwZGF0ZVJlc291cmNlcyIsInRpbWUiLCJsb2FkZWQiLCJTdGF0ZSIsIlBhcnNlQWRkcmVzcyIsImFkZHJlc3MiLCJzdGF0ZSIsInN0YXRlcyIsIndoZW4iLCJyb290RHJhd2VyIiwicm9vdFN0eWxlIiwiY2xlYXIiLCJkcmF3ZXIiLCJkcmF3R3JhcGhpY3NUcmVlIiwiY2xlYXJSZWN0Iiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJTb3VuZCIsImRlc3RpbmF0aW9uIiwic291bmRzIiwic291bmRjb3VudCIsImNoYW5uZWxjb3VudCIsImNoYW5uZWxzIiwiJCRERVNUSU5BVElPTiIsInNhbXBsZSIsImNoYW5uZWwiLCJvdXQiLCJjb25uZWN0IiwiYnl1cmwiLCJBbmltYXRpb25IZWxwZXIiLCJSZXNvbHZlIiwic3RlcFR5cGVTdHIiLCJzdGVwc0NiIiwicHJvZ3Jlc3MiLCJjb21wbGV0ZVR5cGVTdHIiLCJyZXN1bHRzIiwiX3N0YWNrIiwidGlja19mdW5jdGlvbiIsImdldFRpY2tGdW5jdGlvbiIsImNvbXBsZXRlIiwibSIsIm5vcm1hbGl6ZUNvbmZpZyIsInN0ZXAiLCJNb3JwaCIsIlNldFN0YXJ0VmFsdWUiLCJTZXRFbmRWYWx1ZSIsIm9iaiIsIm9yZCIsImFwbCIsIm1hcmdpbiIsInkiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJUZXh0TGluZUNsYXNzIiwiRHJhd2VySGVscGVyIiwiZ2V0V2lkdGgiLCJ3aWR0aFVwZGF0ZWQiLCJzcGFjZSIsIm1lYXN1cmVUZXh0IiwiX2FyciIsInByb3BlcnR5Q2hhbmdlZCIsIm9uUHJvcGVydHlDaGFuZ2UiLCJUZXh0U3BhY2VDbGFzcyIsImV4dHJhY3RGb250U3RyaW5nIiwiVGV4dEVsZW1lbnRDbGFzcyIsIkNvbG9ySGVscGVyIiwiY29sb3JUb0FycmF5IiwiVGV4dFdvcmRDbGFzcyIsInNhdmUiLCJmaWxsU3R5bGUiLCJmaWxsVGV4dCIsInJlc3RvcmUiLCJDaGVja0VsZW1lbnQiLCJfcmVzdWx0IiwibW91c2VleHQiLCJUaWNrIiwicGF1c2VkIiwic3RhcnRfdGltZSIsInJlcGVhdCIsInJlcGVhdENvdW50IiwicGF1c2UiLCJkdXIiLCJlYXNlIiwiR3JhcGhpY3NBc3NlbWJsZXIiLCJTZXRTaXplIiwicGlwZSIsImNvbXBvc2UiLCJyZXNpemVkIiwiYm94RXh0IiwiZHJhd0ltYWdlIiwib3JkZXIiLCJ1cGRhdGVGdW5jIiwiYm94UHJvdmlkZXIiLCJHcmFwaGljc0Fzc2VtYmxlckxheWVyIiwidXBkYXRlQ2FudmFzIiwiUGx1Z2luIiwiYXBwbGllcyIsInR5cGVzIiwidGVtcCIsIkFyZWFPYmplY3RDbGFzcyIsIkNpcmNsZU9iamVjdENsYXNzIiwiY2lyY2xlQ2hlY2tGdW5jdGlvbiIsIkRlZmF1bHRPYmplY3RUeXBlIiwiR3JvdXBPYmplY3RDbGFzcyIsIkltYWdlT2JqZWN0Q2xhc3MiLCJyZWN0Q2hlY2tGdW5jdGlvbiIsIkxpbmVPYmplY3RDbGFzcyIsIlJlY3RhbmdsZU9iamVjdENsYXNzIiwicmVjdEN1cnNvclRyYW5zZm9ybUZ1bmN0aW9uIiwiU3ByaXRlT2JqZWN0Q2xhc3MiLCJUZXh0T2JqZWN0Q2xhc3MiLCJjcmVhdGVBdWRpbyIsInhociIsInJlc3BvbnNlVHlwZSIsIm9ubG9hZCIsInN0YXRlRnVuYyIsInJlc29sdmVFdmVudEZ1bmMiLCJvbmVycm9yIiwiX3VybCIsInJlc29sdmVGdW5jIiwic2V0U3RhdGVGdW5jIiwiRm9udCIsImdldEZvbnQiLCJmb250TG9hZGVyRWxlbWVudCIsImFwcGVuZGVkIiwicmVwZWF0VGlsbEVycm9yIiwiaW5pdGlhbCIsImZvbnRGYW1pbHkiLCJjaGVja0ludGVydmFsIiwicmVtb3ZlQ2hpbGQiLCJpbm5lclRleHQiLCJyIiwiSW1hZ2UiLCJDcmVhdGVJbWFnZSIsInNldFN0YXR1cyIsInN0YXR1cyIsImNiQ29udGFpbmVyIiwicmVzb2x2ZUZ1bmN0aW9uUGFzc2VkIiwibG9hZGluZyIsImluaXQiLCJTcHJpdGUiLCJDcmVhdGVDYW52YXNBcnJheSIsImVsZW1zIiwiZnJhbWVzIiwiU2V0Q2FudmFzU2l6ZSIsImZyYW1lSGVpZ2h0Iiwicm91bmQiLCJmcmFtZVdpZHRoIiwiX2N0eCIsInRyYW5zbGF0ZSIsInNldFN0YXVzRnVuYyIsInUiLCJldmVudEYiLCJzdGF0dXNGIiwic3ByaXRlV2lkdGgiLCJzcHJpdGVIZWlnaHQiLCJwbGF5Iiwicm93cyIsImNlaWwiLCJzcXJ0IiwiY3VycmVudFgiLCJjdXJyZW50WSIsIl90aW1lIiwib25zZXQiLCJHZXRQcm9wZXJ0eUNhbGxiYWNrIiwiZGVmIiwiQW5pbWF0aW9uUHJvdmlkZXIiLCJhbmltYXRlIiwiZXZlbnRBcmdzIiwiY3JlYXRlQW5pbWF0aW9uTW9ycGgiLCJmaWx0ZXIiLCJub3JtYWxpemVyIiwiZXZlbnRzIiwibm9kZW5hbWUiLCJ0ZXJtaW5hdGUiLCIkJFNPVVJDRSIsImZpbHRlcnMiLCJjdHlwZSIsIm91dHNvdXJjZSIsIlVzZXJBdWRpb01peGVyIiwiYXJnRiIsImZpbHRlcnNDZmciLCJub2RlIiwiJCRBVURJT05PREUiLCJpbnB1dCIsIlVzZXJBdWRpb1NvdXJjZSIsImNiQXJncyIsImNvbm5lY3RDYkFyZ3MiLCJtaXhlciIsIkRlbGF5Tm9kZSIsInRpbWVDRkciLCJmb3JjZUNGRyIsImdsb2JhbEdhaW4iLCJjcmVhdGVHYWluIiwiZGVsYXkiLCJjcmVhdGVEZWxheSIsImZlZWRiYWNrIiwiYnEiLCJjcmVhdGVCaXF1YWRGaWx0ZXIiLCJnYWluIiwiZnJlcXVlbmN5IiwiZGVsYXlUaW1lIiwiZm9yY2UiLCJEZXN0aW5hdGlvbk5vZGUiLCJHYWluTm9kZSIsInZvbHVtZSIsIkxvd3Bhc3NOb2RlIiwiYnFmIiwiQXVkaW9Ob2RlIiwibmV4dE5vZGUiLCJidWlsZEYiLCJzb3VuZCIsImRpc2Nvbm5lY3QiLCJfaW5wQXJyYXkiLCJfaW5wQXJyIiwiaW5wIiwibW9kZWwiLCJkZWZWYWwiLCJub3JtbGl6ZXIiLCJBdWRpb05vZGVTb3VuZERpc3BhdGNoZXIiLCJyZWNvbm5lY3QiLCJBdWRpb1NvdXJjZSIsInJlc291cmNlIiwiYnVmZmVyIiwiZGVjb2RlQXVkaW9EYXRhIiwiY3JlYXRlQnVmZmVyU291cmNlIiwiRXZlbnQiLCJzdGF0ZXZhbCIsImFyZ0Z1bmN0IiwiZXZlbnROYW1lIiwiaXNTdGF0ZUV2ZW50IiwiRXZlbnRQcm92aWRlciIsIkFyZWFPYmplY3REcmF3ZXIiLCJQYXRoSGVscGVyIiwiVXBkYXRlRmlsbCIsInhzaGlmdCIsInlzaGlmdCIsImludGVycG9sYXRpb24iLCJpbnRlcnBvbGF0ZWQiLCJpbnRlcnBvbGF0ZSIsImRyYXdCZXppZXJQYXRoRmlsbCIsImRyYXdMaW5lUGF0aEZpbGwiLCJVcGRhdGVTdHJva2UiLCJjbG9uZUFycmF5IiwiZHJhd0xpbmVQYXRoIiwiZHJhd0JlemllclBhdGgiLCJVcGRhdGVCZyIsImRyYXdMaW5lQmdDbGlwUGF0aCIsImFzc2VtYmxlciIsImRyYXdCZXppZXJCZ0NsaXBQYXRoIiwic3Ryb2tlZml4IiwiaW50ZXJwb2xhdGlvbmZpeCIsImZpeCIsImJveENvbnRhaW5lciIsImFuY2hvciIsIm1pbngiLCJtaW55IiwibWF4eCIsIm1heHkiLCJhYnMiLCJ0cmFuc2Zvcm0iLCJDaXJjbGVPYmplY3REcmF3ZXIiLCJiZWdpblBhdGgiLCJzdHJva2VTdHlsZSIsInNldExpbmVEYXNoIiwiYXJjIiwiUEkiLCJzdHJva2UiLCJmaWxsIiwiY2xpcCIsImJncG9zaXRpb24iLCJiZ3NpemUiLCJiZyIsImJnd2lkdGgiLCJiZ2hlaWdodCIsImJncG9zaXRpb254IiwiYmdwb3NpdGlvbnkiLCJyYWRpdXMiLCJEZWZhdWx0T2JqZWN0RHJhd2VyIiwib2JqZWN0TWF0cml4IiwiR3JvdXBPYmplY3REcmF3ZXIiLCJvYm94IiwiZ2xvYmFsQWxwaGEiLCJvZHJhd2VyIiwib3N0eWxlIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiSW1hZ2VPYmplY3REcmF3ZXIiLCJMaW5lT2JqZWN0RHJhd2VyIiwiVXBkYXRlQ2FudmFzIiwicmVxdWlyZV91cGRhdGUiLCJSZWN0YW5nbGVPYmplY3REcmF3ZXIiLCJub3JtYWxpemVSYWRpdXMiLCJib3hFeHRlbnNpb24iLCJoYWxmYm94IiwiZHJhd1JlY3RQYXRoIiwiayIsInN0cm9rZUNvbG9yIiwic3Ryb2tlV2lkdGgiLCJjYXAiLCJsaW5lQ2FwIiwibW92ZVRvIiwibGluZVRvIiwiY3VydmVNb2RpZmllciIsImJlemllckN1cnZlVG8iLCJzdHJva1N0eWxlIiwiaGFzUmFkaXVzIiwiaGFzU3Ryb2tlIiwibW9ub1N0cm9rZSIsImRDb2xvciIsImRXaWR0aCIsImRTdHlsZSIsIlNwcml0ZU9iamVjdERyYXdlciIsInJlYWRTcHJpdGVTdHJpbmciLCJUZXh0T2JqZWN0RHJhd2VyIiwiVXBkYXRlVGV4dExheWVyIiwiYWxpZ24iLCJ0b3BTcGFuIiwiZ2V0Rm9udEZpbGUiLCJfc3R5bGUiLCJmc3R5bGUiLCJkcmF3VGV4dCIsIkFyZWFPYmplY3RNb2RlbCIsIlN5bmNQYXRoUHJvcGVydHkiLCJjaGVja1NpbXBsZVBhdGgiLCJjb252ZXJ0U2ltcGxlUGF0aCIsImNvbnZlcnRDb21wbGV4UGF0aCIsIkNpcmNsZU9iamVjdE1vZGVsIiwiaXNDb2xvciIsImFycmF5VG9Db2xvciIsIm5vcm1hbGl6ZSIsInZhbGlkTnVtZXJpY1ZhbHVlIiwidmFsaWROdW1lcmljQXJyYXkiLCJEZWZhdWx0T2JqZWN0TW9kZWwiLCJlbmRBcnJheSIsInJhZCIsInJhZDEiLCJyYWQyIiwidmFsaWRCbGVuZGluZyIsIkRlZmF1bHRGcmVlU3Ryb2tlTW9kZWwiLCJHbG9iYWxCYWNrZ3JvdW5kTW9kZWwiLCJTeW5jQmdQcm9wZXJ0eSIsImlzU3ByaXRlU3RyaW5nIiwiZGVmQmdQb3N2YWwiLCJfcmVzIiwiZGVmQmdTaXplVmFsIiwiR2xvYmFsU2l6ZU1vZGVsIiwiR3JvdXBPYmplY3RNb2RlbCIsIkltYWdlT2JqZWN0TW9kZWwiLCJMaW5lT2JqZWN0TW9kZWwiLCJSZWN0YW5nbGVPYmplY3RNb2RlbCIsImN1dXJlbnQiLCJTcHJpdGVPYmplY3RNb2RlbCIsIlRleHRPYmplY3RNb2RlbCIsInN5c3RlbUZvbnQiLCJUaWNrVmFsIiwibG9jcyIsImxvY2UiLCJlbmR2YWwiLCJzdGFydHZhbCIsImRpZmZlcmVuY2UiLCJDb2xvciIsIk5vcm1hbGl6ZUNvbG9yQXJyYXkiLCJQYXJzZUNvbG91ciIsImV4ZWMiLCJ0ZXh0RHJhd2VyQ29udGV4dCIsImV4dHJhY3QiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImNsb3NlUGF0aCIsImF4MSIsImF5MSIsImF4MiIsImF5MiIsInN0cm9rZUNhcCIsImRyYXdSZWN0RmlsbCIsImRyYXdSZWN0U3Ryb2tlIiwiX3giLCJfeSIsIkVhc2luZyIsImVhc2luZ3MiLCJfIiwibGluZWFyIiwibGluZWFyU29mdCIsInRzIiwidGMiLCJsaW5lYXJTb2Z0T3V0IiwibGluZWFyU29mdEluIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJjb3MiLCJlYXNlT3V0U2luZSIsInNpbiIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwicG93IiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlT3V0Qm91bmNlIiwiR3JhcGhpY3NUcmFuc2Zvcm1NYXRyaXgiLCJtdWx0aXBseSIsIm0xIiwibTIiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwiYTYiLCJpbnZlcnQiLCJoaXN0b3J5Iiwicm90YXRlIiwic2luQSIsImNvc0EiLCJpbnZlcnNpb24iLCJza2V3IiwidGFuIiwic2NhbGUiLCJpbnZlcnRlZCIsImludmVydEdsb2JhbCIsImdsb2JhbEludmVyc2lvbiIsImdsb2JhbEludmVyc2lvbk1hdHJpeCIsImFuZ2xlIiwidGFuQSIsInRhbkIiLCJnbG9iYWxDdXJzb3JQcm9qZWN0aW9uIiwiY3Vyc29yUHJvamVjdGlvbiIsIm9yaWdpbiIsIl90cmFuc2xhdGUiLCJfb3JpZ2luIiwiTW9kZWwiLCJjbG9uZUhhc2giLCJoYXNoIiwic3RyaW5naWZ5IiwiZXZhbCIsImJsZW5kaW5ncyIsInNwcml0ZV9yZWdleHAiLCJjaXJjbGVVc2VyQ2hlY2tGdW5jdGlvbiIsImNvb3JkcyIsImN4IiwiY3kiLCJzcXVhcmVVc2VyQ2hlY2tGdW5jdGlvbiIsImNlbnRlciIsIlBhdGgiLCJnZXRDb250cm9sUG9pbnRzIiwieDAiLCJ5MCIsImQwMSIsImQxMiIsImZhIiwiZmIiLCJwMXgiLCJwMXkiLCJwMngiLCJwMnkiLCJzbW9vdGhpbmciLCJjbG9zZWQiLCJwcmV2IiwibWlkIiwibmV4dCIsInB0cyIsInMxIiwiX3NlZ21lbnQiLCJkZWVwY2hlY2siLCJjb21wYXJlUGF0aHMiLCJwYXRoMSIsInBhdGgyIl0sIm1hcHBpbmdzIjoiQUFHQSxRQUFBQSxZQWNBLFFBQUFDLE1BQUFDLEdBQ0EsR0FBQUMsV0FBQUQsRUFFQSxLQUFBLEdBREFFLElBQUEsRUFDQUMsRUFBQSxFQUFBQSxFQUFBQyxPQUFBQyxPQUFBRixJQUNBLElBQUFHLFFBQUFGLE9BQUFELElBQUEsQ0FDQUQsR0FBQSxDQUNBLE9BTUEsTUFIQUEsSUFDQUssWUFFQVIsS0FHQSxRQUFBUyxrQkFBQVIsR0FDQSxNQUFBLFNBQUFTLGlCQUNBLEdBQUFDLEdBQUFWLEVBQUFXLE1BQUFiLFFBQUFjLFVBQ0EsT0FBQUMsVUFBQUgsRUFBQVosUUFDQVksR0FDQUksS0FBQUMsTUE2Q0EsUUFBQVIsYUFDQVIsS0FBQWlCLElBQUEsT0FDQSxLQUFBLEdBQUFDLEtBQUFDLFlBQ0FBLFdBQUFDLGVBQUFGLEtBQ0FGLEtBQUFFLEdBQUFDLFdBQUFELElBS0EsUUFBQWhCLFdBQUFELEdBQ0EsR0FBQSxrQkFBQUEsS0FBQUEsRUFBQW9CLEtBQUEsS0FBQSxJQUFBQyxPQUFBLGtFQUNBZixTQUFBTixFQUFBb0IsTUFBQUUsSUFDQSxJQUFBQyxHQUFBLElBRUFELE1BQUFFLE9BQUEsU0FBQUMsR0FDQSxHQUFBQyxJQUFBLEtBQ0EsSUFBQUQsR0FBQSxnQkFBQUEsSUFBQUEsRUFBQUUsY0FBQUMsTUFDQSxJQUFBLEdBQUF6QixHQUFBLEVBQUFBLEVBQUFzQixFQUFBcEIsT0FBQUYsSUFDQXVCLEVBQUFHLEtBQUFKLEVBQUF0QixHQUdBLE9BQUEsS0FBQTJCLFNBQUFDLFVBQUFqQixLQUFBSCxNQUFBWCxFQUFBMEIsS0FHQUosS0FBQU4sSUFBQSxXQUNBLEdBQUFPLEVBQUEsTUFBQUEsRUFFQSxJQUFBYixHQUFBWSxLQUFBRSxPQUFBYixNQUFBVyxLQUFBVixVQUFBLEdBRUEsT0FEQVcs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QUE5aUMsR0FBQUUsT0FBQW1ELElBQ0EsR0FBQXkvQixFQUFBOWlDLEdBQUFxRCxLQUFBMC9CLEVBQUEvaUMsR0FBQXFELEdBQUEsQ0FDQTlDLEdBQUEsQ0FDQSxPQUtBLE1BQUFBIiwiZmlsZSI6InJlZmxlY3QtZW5naW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDE0LzA4LzIwMTcuXHJcbiAqL1xyXG5mdW5jdGlvbiBSZWZsZWN0KCkge1xyXG59XHJcblxyXG52YXIgbW9kdWxlcyA9IHt9LFxyXG4gICAgcHJvcGVydGllcyA9IHt9LFxyXG4gICAgY29yZSA9IG5ldyBSZWZsZWN0KCksXHJcbiAgICBleHBlY3QgPVxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgJ0FwcGxpY2F0aW9uJywgJ0F1ZGlvJywgJ0NhbnZhcycsICdDbGFzc2VzJyxcclxuICAgICAgICAgICAgJ0NvbmZpZycsICdDb250YWluZXInLCAnRm9udHMnLCAnSGVscGVycycsXHJcbiAgICAgICAgICAgICdJbmplY3Rpb24nLCAnUm9vdCcsICdTZXJ2aWNlcycsICdTb3VyY2UnLFxyXG4gICAgICAgICAgICAnVGlja2VyJ1xyXG4gICAgICAgIF07XHJcblxyXG5mdW5jdGlvbiBDb3JlKGYpIHtcclxuICAgIG5ldyBJbmplY3Rpb24oZik7XHJcbiAgICB2YXIgcmVhZHkgPSB0cnVlO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoIW1vZHVsZXNbZXhwZWN0W2ldXSkge1xyXG4gICAgICAgICAgICByZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocmVhZHkpIHtcclxuICAgICAgICBCdWlsZENvcmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBDb3JlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSb3V0ZUZ1bmN0aW9uKGYpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiByb3V0ZUZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBmLmFwcGx5KFJlZmxlY3QsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gUmVmbGVjdDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfS5iaW5kKGNvcmUpO1xyXG59XHJcblxyXG5Db3JlLmdldCA9IGZ1bmN0aW9uIChtb2R1bGUsIHBheWxvYWQpIHtcclxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKG1vZHVsZXNbbW9kdWxlXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlc1ttb2R1bGVdLmdldC5hcHBseShtb2R1bGVzW21vZHVsZV0sIHBheWxvYWQpO1xyXG4gICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ01vZHVsZSBbJyArIG1vZHVsZSArICddIHdhcyBub3QgZm91bmQnKTtcclxuICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ01vZHVsZSBuYW1lIGlzIG5vdCBhIHN0cmluZy4gV3JvbmcgYXJndW1lbnRzJyk7XHJcbn07XHJcblxyXG5Db3JlLmlzID0gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSkge1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKG1vZHVsZXNbbmFtZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZXNbbmFtZV0uaXModGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5Db3JlLmluamVjdCA9IGZ1bmN0aW9uIChtb2R1bGUsIHBheWxvYWQpIHtcclxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKG1vZHVsZXNbbW9kdWxlXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlc1ttb2R1bGVdLmNyZWF0ZShwYXlsb2FkKTtcclxuICAgICAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKCdOb2R1bGUgWycgKyBtb2R1bGUgKyAnXSB3YXMgbm90IGZvdW5kLicpO1xyXG4gICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcignTW9kdWxlIG5hbWUgaXMgbm90IGEgc3RyaW5nLiBXcm9uZyBBcmd1bWVudHMnKTtcclxufTtcclxuXHJcbkNvcmUuZXh0ZW5kID0gZnVuY3Rpb24gKG1vZHVsZSwgdGFyZ2V0LCBwYXlsb2FkKSB7XHJcbiAgICBpZiAodHlwZW9mIG1vZHVsZXNbbW9kdWxlXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVzW21vZHVsZV0uZXh0ZW5kKHRhcmdldCwgcGF5bG9hZCk7XHJcbiAgICAgICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGV4dGVuZCB0YXJnZXQgb2YgdHlvZSBbJyArICh0eXBlb2YgdGFyZ2V0KSArICddIGJ1IG1vZHVsZSBjb25zdHJ1Y3RvciBbJyArIG1vZHVsZSArICddLicpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuQ29yZS5kZWZpbmUgPSBmdW5jdGlvbiAocHJvcGVydHksIHZhbHVlKSB7XHJcbiAgICBpZiAoIWNvcmUpIGNvcmUgPSBuZXcgUmVmbGVjdCgpO1xyXG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzW3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBkZWZpbmUgcHJvcGVydHkgWycgKyBwcm9wZXJ0eSArICddLiBBbHJlYWR5IGRlZmluZWQhJyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gXCJmdW5jdGlvblwiKSBwcm9wZXJ0aWVzW3Byb3BlcnR5XSA9IGdldFJvdXRlRnVuY3Rpb24odmFsdWUpO1xyXG4gICAgICAgIGVsc2UgaWYgKHByb3BlcnR5ICE9PSBudWxsIHx8IHR5cGVvZiBwcm9wZXJ0eSAhPT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgcHJvcGVydHkgIT09IFwib2JqZWN0XCIpIHByb3BlcnRpZXNbcHJvcGVydHldID0gdmFsdWVcclxuICAgICAgICByZXR1cm4gY29yZTtcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIEJ1aWxkQ29yZSgpIHtcclxuICAgIENvcmUuZ2V0KCdSb290Jyk7XHJcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgIGNvcmVbcHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBJbmplY3Rpb24oZikge1xyXG4gICAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIgfHwgIWYubmFtZSkgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlaW5qZWN0aW9uLiBDb25zdHJ1Y3RvciBpcyBub3QgYSBuYW1lZCBmdW5jdGlvbiEnKTtcclxuICAgIG1vZHVsZXNbZi5uYW1lXSA9IHRoaXM7XHJcbiAgICB2YXIgY2FjaGUgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtudWxsXTtcclxuICAgICAgICBpZiAocGF5bG9hZCAmJiB0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIiAmJiBwYXlsb2FkLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBheWxvYWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChwYXlsb2FkW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShmLCBhcmdzKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjYWNoZSkgcmV0dXJuIGNhY2hlO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzWzBdKTtcclxuICAgICAgICAgICAgY2FjaGUgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmlzID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQuY29uc3RydWN0b3IgPT09IGY7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZXh0ZW5kID0gZnVuY3Rpb24gKHRhcmdldCwgcGF5bG9hZCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIiAmJiBwYXlsb2FkLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICBmLmFwcGx5KHRhcmdldCwgcGF5bG9hZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZi5jYWxsKHRhcmdldCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuJFIgPSBjb3JlOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAxNC8wOC8yMDE3LlxyXG4gKi9cclxuQ29yZShmdW5jdGlvbiBBcHBsaWNhdGlvbihDYW52YXMsIFRpY2tlciwgQ29uZmlnKSB7XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIENvbmZpZy5kZWZpbmUoJ2ZwcycsIDU4LjgsIHtpc051bWJlcjogdHJ1ZSwgZ3JlYXRlcjogMCwgdW5kZXI6IDYxfSkud2F0Y2goZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICBUaWNrZXIuZnBzKHYpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgQ29uZmlnLmRlZmluZSgnY2FudmFzJywgbnVsbCwge2lzU3RyaW5nOiB0cnVlfSkud2F0Y2goZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICBDYW52YXMuZWxlbWVudCh2KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJCA9IGZ1bmN0aW9uIChuLCBmKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyQnKSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgQVBJIGZ1bmN0aW9uLiBGdW5jdGlvbiBuYW1lIHN0YXJ0cyB3aXRoICQnKTtcclxuICAgICAgICAgICAgaWYgKHRoaXNbbl0pIHRocm93IG5ldyBFcnJvcignQXBwbGljYXRpb24gQVBJIHByb3BlcnR5IFsnICsgbiArICddIGR1cGxpY2F0aW9uIScpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKCdBcHBsaWNhdGlvbiBBUEkgcHJvcGVydHkgWycgKyBuICsgJ10gdmFsdWUgaXMgbm90IGEgZnVuY3Rpb24nKTtcclxuICAgICAgICAgICAgdGhpc1tuXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gc2V0IEFQSSBtZXRob2QuIE5hbWUgaXMgbm90IGEgc3RyaW5nLicpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgVGlja2VyLnN0b3AoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFRpY2tlci5zdGFydCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBDb25maWcuc2V0KGEsIGIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBiID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIENvbmZpZy53YXRjaChhLCBiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb25maWcuZ2V0KGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhID09PSBcIm9iamVjdFwiICYmIGEuY29uc3RydWN0b3IgIT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIENvbmZpZy5zZXQocHJvcGVydHksIGFbcHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY29uZmlnIGFwcGxpY2F0aW9uLiBDb25maWcgZm9ybWF0IGlzIGludmFsaWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG59KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMTQvMDgvMjAxNy5cclxuICovXHJcbkNvcmUoZnVuY3Rpb24gQXVkaW8gKCkge1xyXG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgICB9XHJcbn0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAxNC8wOC8yMDE3LlxyXG4gKi9cclxuQ29yZShmdW5jdGlvbiBDYW52YXMoVGlja2VyKSB7XHJcblxyXG4gICAgdmFyIGVsZW1lbnQgPSBudWxsLFxyXG4gICAgICAgIGNvbnRleHQgPSBudWxsLFxyXG4gICAgICAgIHNpemUgPSBbODAwLCA2MDBdLFxyXG4gICAgICAgIHJlc2l6ZUNiID0gW10sXHJcbiAgICAgICAgc3dpdGNoQ2IgPSBbXSxcclxuICAgICAgICBzZWxmID0gdGhpcyxcclxuICAgICAgICBxdWV1ZSA9IFtdLFxyXG4gICAgICAgIHJlYWR5ID0gZmFsc2U7XHJcblxyXG4gICAgVGlja2VyLnF1ZXVlKDAsIERyYXdTY2VuZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gRHJhd1NjZW5lKGRhdGUsIGZyYW1lKSB7XHJcbiAgICAgICAgaWYgKHJlYWR5KSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gW2NvbnRleHQsIGRhdGUsIGZyYW1lXTtcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMCA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVtpXS5mLmFwcGx5KHNlbGYsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgZW1lcmdlZCB3aGlsZSBkcmF3aW5nLiBcXG4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1F1ZXVlICAgICAgICAgIDogWycgKyBxdWV1ZVtpXS5vICsgJ11cXG4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1F1ZXVlIE9yZGVyaW5nIDogWycgKyBpICsgJ11cXG4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1F1ZXVlIE1lbWJlciAgIDogWycgKyBxdWV1ZVtpXS5mLm5hbWUgKyAnXVxcbicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnTWVzc2FnZSAgICAgICAgOiAnICsgZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBvcmRlcmluZyBpbiBxdWV1ZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZVtvcmRlcmluZ10ubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzb2x2ZShhcnJheSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYXJyYXlbaV0uY2FsbChzZWxmKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuICAgICAgICAgICAgaWYgKGUgJiYgZS5nZXRDb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3R4ID0gZS5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN0eCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHNpemVbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBzaXplWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gY3R4O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN3aXRjaENiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdFbGVtZW50IHdpdGggaWQgWyMnICsgaWQgKyAnXSBpcyBub3QgYSBjYW52YXMuIENhbiBub3QgZ2V0IDJkIGNvbnRleHQuJylcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnQgd2l0aCBpZCBbIycgKyBpZCArICddIHdhcyBub3QgZm91bmQgb3Igbm90IGEgY2FudmFzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlkIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKGlkLmdldENvbnRleHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3R4ID0gaWQuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdHgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgc2l6ZVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBzaXplWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGN0eDtcclxuICAgICAgICAgICAgICAgICAgICByZWFkeSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzd2l0Y2hDYik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignRWxlbWVudCBpcyBub3QgYSBDYW52YXMuIENhbiBub3QgZ2V0IDJkIGNvbnRleHQuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnQgaXMgbm90IGEgQ2FudmFzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucXVldWUgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGlmICghYS5uYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBlbnF1ZXVlIGNhbGxiYWNrLiBQcm92aWRlIGEgbmFtZWQgZnVuY3Rpb24nKTtcclxuICAgICAgICAgICAgcXVldWUucHVzaCh7bzogMCwgZjogYn0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFiLm5hbWUpIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGVucXVldWUgY2FsbGJhY2suIFByb3ZpZGUgYSBuYW1lZCBmdW5jdGlvbi4nKTtcclxuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goe286IGEsIGY6IGJ9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGVucXVldWUgY2FsbGJhY2suIFByb3ZpZGUgYSBuYW1lZCBmdW5jdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGVucXVldWUgY2FsbGJhY2suIFdyb25nIGFyZ3VtZW50cy4nKTtcclxuXHJcbiAgICAgICAgcXVldWUuc29ydChmdW5jdGlvbiAoYSxiKSB7XHJcbiAgICAgICAgICAgcmV0dXJuIGEubyA+IGIubztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgaGVpZ2h0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGlmICh3aWR0aCA8IDApIHdpZHRoID0gMDtcclxuICAgICAgICAgICAgaWYgKGhlaWdodCA8IDApIGhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIGlmIChzaXplWzBdICE9PSB3aWR0aCB8fCBzaXplWzFdICE9PSB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgc2l6ZVswXSA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgc2l6ZVsxXSA9IGhlaWdodDtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHdpZHRoKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNpemVDYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtzaXplWzBdLCBzaXplWzFdXTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZXNpemUgPSBmdW5jdGlvbiAoZikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHJlc2l6ZUNiLnB1c2goZik7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHNldCByZXNzaXplIGNhbGxiYWNrLiBmIGFyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc3dpdGNoID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGYgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBzd2l0Y2hDYi5wdXNoKGYpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgc3dpdGNoIGNhbGxiYWNrLiBmIGFyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucmVhZHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlYWR5O1xyXG4gICAgfTtcclxuXHJcbn0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAyNS8wOC8yMDE3LlxyXG4gKi9cclxuQ29yZShmdW5jdGlvbiBDbGFzc2VzKCkge1xyXG4gICAgdmFyIHN5c3RlbUNsYXNzZXMgPSB7fSxcclxuICAgICAgICBhcHBsaWNhdGlvbkNsYXNzZXMgPSB7fSxcclxuICAgICAgICBnbG9iYWxDbGFzc2VzID0ge307XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGNscyhjZmcpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgaW5qZWN0aW9uID0gQ29yZS5pbmplY3QoJ0luamVjdGlvbicsIFtjZmddKTtcclxuICAgICAgICAgICAgaWYgKGdsb2JhbENsYXNzZXNbaW5qZWN0aW9uLm5hbWUoKV0pIGNvbnNvbGUud2FybignR2xvYmFsIENsYXNzIExpYnJhcnkgY2xhc3MgWycgKyBpbmplY3Rpb24ubmFtZSgpICsgJ10gaGFzIGJlZW4gb3ZlcndyaXR0ZW4uJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGFwcCBpbiBhcHBsaWNhdGlvbkNsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkNsYXNzZXMuaGFzT3duUHJvcGVydHkoYXBwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkNsYXNzZXNbYXBwXVtpbmplY3Rpb24ubmFtZSgpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0FwcGxpY2F0aW9uIFsnICsgYXBwICsgJ10gQ2xhc3MgWycgKyBpbmplY3Rpb24ubmFtZSgpICsgJ10gb3ZlcnJpZGVzIGdsb2JhbCBjbGFzcy4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ2xvYmFsQ2xhc3Nlc1tpbmplY3Rpb24ubmFtZSgpXSA9IGluamVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIGNsYXNzIGluamVjdGlvbi4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xzLmFwcCA9IGZ1bmN0aW9uIChhcHAsIGNmZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXBwID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmICghYXBwbGljYXRpb25DbGFzc2VzW2FwcF0pIGFwcGxpY2F0aW9uQ2xhc3Nlc1thcHBdID0ge307XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5qZWN0aW9uID0gQ29yZS5pbmplY3QoJ0luamVjdGlvbicsIFtjZmddKTtcclxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWxDbGFzc2VzW2luamVjdGlvbi5uYW1lKCldKSBjb25zb2xlLndhcm4oJ0FwcGxpY2F0aW9uIFsnICsgYXBwICsgJ10gQ2xhc3MgWycgKyBpbmplY3Rpb24ubmFtZSgpICsgJ10gb3ZlcnJpZGVzIGdsb2JhbCBjbGFzcy4nKTtcclxuICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uQ2xhc3Nlc1thcHBdW2luamVjdGlvbi5uYW1lKCldID0gaW5qZWN0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgYW5kIHJlZ2lzdGVyIEFwcGxpY2F0aW9uQ2xhc3MgZm9yIGFwcCBbJyArIGFwcCArICddLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byByZWdpc3RlciBBcHBsaWNhdGlvbkNsYXNzIGluamVjdGlvbi4gQXBwIGlkIGlzIG5vdCBhIHN0cmluZy4nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNscy5zeXMgPSBmdW5jdGlvbiAoY2ZnKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGluamVjdGlvbiA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbY2ZnXSk7XHJcbiAgICAgICAgICAgIGlmIChzeXN0ZW1DbGFzc2VzW2luamVjdGlvbi5uYW1lKCldKSBjb25zb2xlLndhcm4oJ1N5c3RlbSBDbGFzcyBbJyArIGluamVjdGlvbi5uYW1lKCkgKyAnXSBvdmVycmlkZS4nKTtcclxuICAgICAgICAgICAgc3lzdGVtQ2xhc3Nlc1tpbmplY3Rpb24ubmFtZSgpXSA9IGluamVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmVnaXN0ZXIgU3lzdGVtQ2xhc3MgaW5qZWN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgdGhpcy5nZXRBcHBsaWNhdGlvbkNsYXNzZXMgPSBmdW5jdGlvbiAoYXBwKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcHAgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IENvcmUuaW5qZWN0KCdDb250YWluZXInLCBbZ2xvYmFsQ2xhc3Nlc10pO1xyXG4gICAgICAgICAgICBpZiAoYXBwbGljYXRpb25DbGFzc2VzW2FwcF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zb3VyY2UoY29udGFpbmVyLCAnLicpO1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLm1lcmdlKGFwcGxpY2F0aW9uQ2xhc3Nlcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNvdXJjZShjb250YWluZXIsICcuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBnZXQgYXBwbGljYXRpb24gY2xhc3NlcyBjb250YWluZXIuIEFwcCBpZCBpcyBub3QgYSBzdHJpbmcuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdldFN5c3RlbUNsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IENvcmUuaW5qZWN0KCdDb250YWluZXInLCBbc3lzdGVtQ2xhc3Nlc10pO1xyXG4gICAgICAgIGNvbnRhaW5lci5zb3VyY2UoY29udGFpbmVyLCAnLicpO1xyXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIENvcmUuZGVmaW5lKCdjbGFzcycsIGNscyk7XHJcblxyXG59KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMTQvMDgvMjAxNy5cclxuICovXHJcbkNvcmUoZnVuY3Rpb24gQ29uZmlnKCkge1xyXG5cclxuICAgIHZhciBwcm9wZXJ0aWVzID0ge30sXHJcbiAgICAgICAgZnVuY3MgPSB7XHJcbiAgICAgICAgICAgIGlzTnVtYmVyOiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2ID09PSBcIm51bWJlclwiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpc1N0cmluZzogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNBcnJheTogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2LmNvbnN0cnVjdG9yID09PSBBcnJheTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY3VzdG9tOiBmdW5jdGlvbiAodiwgYXJncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXSh2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5kZXI6IGZ1bmN0aW9uICh2LCBhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3MuaXNOdW1iZXIodikgJiYgdiA8IGFyZ3NbMF07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdyZWF0ZXI6IGZ1bmN0aW9uICh2LCBhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3MuaXNOdW1iZXIodikgJiYgdiA+IGFyZ3NbMF07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVxOiBmdW5jdGlvbiAodiwgYXJncykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmNzLmlzTnVtYmVyKHYpICYmIHYgPT09IGFyZ3NbMF07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlzQm9vbDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgIHYgPT09IFwiYm9vbGVhblwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIFByb3BlcnR5KG5hbWUsIHZhbHVlLCBjZmcpIHtcclxuXHJcbiAgICAgICAgdmFyIGNoZWNrQXJyYXkgPSBbXSxcclxuICAgICAgICAgICAgY2IgPSBbXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tWYWx1ZSh2KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoZWNrQXJyYXk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmdW5jc1tjaGVja0FycmF5W2ldLmZdKHYsIGNoZWNrQXJyYXkuYXJncykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKGZ1bmNzLmlzQXJyYXkoYXJnKSkge1xyXG4gICAgICAgICAgICAgICAgYXJnID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJnLnB1c2godmFsdWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhcmc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5uYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnNldCA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGVja1ZhbHVlKG4pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnVuY3MuaXNBcnJheShuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2gobltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2IubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNiW2ldLmNhbGwodGhpcywgdGhpcy5nZXQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy53YXRjaCA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZiA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBjYi5wdXNoKGYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IHNldCBjb25maWcgcHJvcGVydHkgd2F0Y2hlci4gQXJndW1lbnQgZiBpcyBub3QgYSBmdW5jdGlvbi4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBjZmcpIHtcclxuICAgICAgICAgICAgaWYgKGNmZy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNmZ1twcm9wXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bmNzW3Byb3BdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrQXJyYXkucHVzaCh7ZjogcHJvcCwgYXJnczogW2NmZ1twcm9wXV19KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1Y2ggY29uZmlnIHZhbHVlIGNoZWNrZXIgYXMgWycgKyBwcm9wICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBwYXJhbWV0ZXIgZm9yIGNvbmZpZyBwcm9wZXJ0eSBbJyArIHByb3AgKyAnXScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmICFmdW5jcy5pc0FycmF5KHZhbHVlKSkgdGhyb3cgbmV3IEVycm9yKCdPYmplY3RzIGFyZSBub3Qgc3VwcG9ydGVkIGFzIGNvbmZpZyBwcm9wZXJ0eSB2YWx1ZSEnKTtcclxuICAgICAgICBpZiAoIWNoZWNrVmFsdWUodmFsdWUpKSB0aHJvdyBuZXcgRXJyb3IoJ0luaXRpYWwgWycgKyBuYW1lICsgJ11cXCdzIHZhbHVlIGRvZXMgbm90IG1lZXQgY29uZmlnIHJlcXVpcmVtZW50cy4nKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmRlZmluZSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdmFsdWUsIGNmZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcGVydGllc1twcm9wZXJ0eV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW3Byb3BlcnR5XSA9IG5ldyBQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUsIGNmZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgY29uZmlnIHByb3BlcnR5IFsnICsgcHJvcGVydHkgKyAnXScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb25maWcgcHJvcGVydHkgZHVwbGljYXRpb24gb24gcHJvcGVydHkgbmFtZSBbJyArIHByb3BlcnR5ICsgJ10nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignQ29uZmlnIHByb3BlcnR5IHZhbHVlIGNhbiBub3QgYmUgdW5kZWZpbmVkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGRlZmluZSBjb25maWcgcHJvcGVydHkuIFByb3BlcnR5IG5hbWUgaXMgbm90IGEgc3RyaW5nLicpO1xyXG5cclxuICAgICAgICByZXR1cm4gcHJvcGVydGllc1twcm9wZXJ0eV07XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2V0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmIHByb3BlcnRpZXNbbmFtZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnRpZXNbbmFtZV0uc2V0KHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgcHJvcGVydHkgWycgKyBuYW1lICsgJ10uIE5vIHN1Y2ggcHJvcGVydHkuJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnRpZXNbbmFtZV0uZ2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZ2V0IHByb3BlcnR5IFsnICsgbmFtZSArICddLiBObyBzdWNoIHByb3BlcnR5LicpXHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLndhdGNoID0gZnVuY3Rpb24gKG5hbWUsIGYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnRpZXNbbmFtZV0ud2F0Y2goZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignTm8gc3VjaCBwcm9wZXJ0eSBhcyBbJyArIG5hbWUgKyAnXSB0byB3YXRjaC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignV2F0Y2hlciBjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHdhdGNoIGNvbmZpZyBwcm9wZXJ0eS4gUHJvcGVydHkgbmFtZSBpcyBpbnZhbGlkIG9yIHVuZGVmaW5lZCcpXHJcbiAgICB9XHJcbn0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAxNC8wOC8yMDE3LlxyXG4gKi9cclxuQ29yZShmdW5jdGlvbiBDb250YWluZXIobGliLCBkaXJlY3QpIHtcclxuICAgIHZhciBsaWJyYXJ5ID0ge30sXHJcbiAgICAgICAgc291cmNlcyA9IHt9LFxyXG4gICAgICAgIGNhY2hlID0ge307XHJcblxyXG4gICAgdGhpcy5saXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBsaWJyYXJ5O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmluamVjdGlvbiA9IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBudWxsLFxyXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnLm5hbWUgJiYgY29uZmlnLm5hbWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvciA9IGNvbmZpZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW5vbnltb3VzIGZ1bmN0aW9uIGNhbiBub3QgYmUgaW5qZWN0aW9uIGNvbnN0cnVjdG9yLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjb25maWcgPT09IFwib2JqZWN0XCIgJiYgY29uZmlnLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25maWdbaV0gPT09IFwic3RyaW5nXCIgJiYgY29uZmlnW2ldLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKGNvbmZpZ1tpXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjb25maWdbaV0gPT09IFwiZnVuY3Rpb25cIiAmJiBjb25maWdbaV0ubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yID0gY29uZmlnW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGUgb2YgaW5qZWN0aW9uIG5hbWUgb3IgY29uc3RydWN0b3IuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlIG9mIGluamVjdGlvbiBjb25maWcuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXBlbmRlbmNpZXMucHVzaChjb25zdHJ1Y3Rvcik7XHJcblxyXG4gICAgICAgIGlmIChsaWJyYXJ5W2NvbnN0cnVjdG9yLm5hbWVdKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignSW5qZWN0aW9uIFsnICsgY29uc3RydWN0b3IubmFtZSArICddIGR1cGxpY2F0ZWQgYW5kIGhhcyBiZWVuIG92ZXJ3cml0dGVuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxpYnJhcnlbY29uc3RydWN0b3IubmFtZV0gPSBDb3JlLmluamVjdCgnSW5qZWN0aW9uJywgW2RlcGVuZGVuY2llc10pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLm1lcmdlID0gZnVuY3Rpb24gKGNmZywgY2xvbmUpIHtcclxuICAgICAgICBpZiAoY2ZnKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjZmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2ZnLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29yZS5pcyhjZmdbcHJvcGVydHldLCAnSW5qZWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaWJyYXJ5W2NmZ1twcm9wZXJ0eV0ubmFtZSgpXSkgY29uc29sZS53YXJuKCdJbmplY3Rpb24gWycgKyBwcm9wZXJ0eSArICddIGhhcyBiZWVuIG1lcmdlZC5zJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWJyYXJ5W2xpYltwcm9wZXJ0eV0ubmFtZSgpXSA9IGxpYltwcm9wZXJ0eV0uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpYnJhcnlbbGliW3Byb3BlcnR5XS5uYW1lKCldID0gbGliW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gbWVyZ2UgbGlicy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zb3VyY2UgPSBmdW5jdGlvbiAoY29udGFpbmVyLCBwcmVmaXhrZXkpIHtcclxuICAgICAgICBpZiAoY29udGFpbmVyICYmIHR5cGVvZiBjb250YWluZXIgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgaWYgKENvcmUuaXMoY29udGFpbmVyLCAnQ29udGFpbmVyJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJlZml4a2V5KSBwcmVmaXhrZXkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIHByZWZpeGtleSA9PT0gXCJzdHJpbmdcIiAmJiBwcmVmaXhrZXkubGVuZ3RoKSB8fCBwcmVmaXhrZXkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLiQkTE9PUCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvb3AgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kTE9PUCkgbG9vcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNvbnRhaW5lci4kJExPT09QO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbcHJlZml4a2V5ID8gcHJlZml4a2V5IDogJyQkbm9wcmVmaXgnXSA9IENvcmUuaW5qZWN0KCdTb3VyY2UnLCBbcHJlZml4a2V5LCBjb250YWluZXIsIGxvb3BdKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29udGFpbmVyLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkID0gdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsb29wID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRhaW5lcltpXSA9PT0gXCJvYmplY3RcIiAmJiBDb3JlLmlzKGNvbnRhaW5lcltpXSwgJ0NvbnRhaW5lcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcltpXS4kJExPT09QID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuJCRMT09PUCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcC5wdXNoKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcC5wdXNoKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgIGNvbnRhaW5lcltpXS4kJExPT09QO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByZWZpeGtleSkgcHJlZml4a2V5ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIHByZWZpeGtleSA9PT0gXCJzdHJpbmdcIiAmJiBwcmVmaXhrZXkubGVuZ3RoKSB8fCBwcmVmaXhrZXkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNbcHJlZml4a2V5ID8gcHJlZml4a2V5IDogJyQkbm9wcmVmaXgnXSA9IENvcmUuaW5qZWN0KCdTb3VyY2UnLCBbcHJlZml4a2V5LCBjb250YWluZXIsIGxvb3BdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvdXJjZSBjb250YWluZXIgY29uZmlnIGlzIG5vdCB2YWxpZC4gT25lIG9mIHRoZSBjb250YWluZXJzIHByb3ZpZGVkIGlzIG5vdCBhbiBJbmplY3Rpb25Db250YWluZXIgaW5zdGFuY2UnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbmV3TGlicmFyeSA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGluamVjdGlvbiBpbiBsaWJyYXJ5KSB7XHJcbiAgICAgICAgICAgIGlmIChsaWJyYXJ5Lmhhc093blByb3BlcnR5KGluamVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIG5ld0xpYnJhcnlbaW5qZWN0aW9uXSA9IGxpYnJhcnlbaW5qZWN0aW9uXS5jbG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuZXdDb250YWluZXIgPSBDb3JlLmluamVjdCgnQ29udGFpbmVyJywgW25ld0xpYnJhcnldKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgc291cmNlIGluIHNvdXJjZXMpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSBzb3VyY2VzW3NvdXJjZV0uY29udGFpbmVycygpLFxyXG4gICAgICAgICAgICAgICAgc291cmNlbG9vcCA9IHNvdXJjZXNbc291cmNlXS5sb29wKCksXHJcbiAgICAgICAgICAgICAgICBzb3VyY2VwcmVmaXggPSBzb3VyY2VzW3NvdXJjZV0ucHJlZml4KCksXHJcbiAgICAgICAgICAgICAgICBuZXdjb250YWluZXJzID0gW107XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2Vsb29wW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Y29udGFpbmVycy5wdXNoKG5ld0NvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdjb250YWluZXJzLnB1c2goY29udGFpbmVyc1tpXS5jbG9uZSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmV3Q29udGFpbmVyLnNvdXJjZShuZXdjb250YWluZXJzLCBzb3VyY2VwcmVmaXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3Q29udGFpbmVyO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmZpbmRTb3VyY2VCeVByZWZpeCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcclxuICAgICAgICBpZiAocHJlZml4ID09PSBmYWxzZSkgcmV0dXJuIHNvdXJjZXMuJCRub3ByZWZpeDtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBwcmVmaXggPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZXNbcHJlZml4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmZpbmRTb3VyY2VCeUluamVjdGlvbk5hbWUgPSBmdW5jdGlvbiAoaW5qZWN0aW9uTmFtZSkge1xyXG4gICAgICAgIHZhciBzb3VyY2UgPSBudWxsO1xyXG4gICAgICAgIGlmKGNhY2hlW2luamVjdGlvbk5hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZVtpbmplY3Rpb25OYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHByZWZpeCBpbiBzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNbcHJlZml4XS5wcmVmaXgoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlc1twcmVmaXhdLmhhcyhpbmplY3Rpb25OYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlID0gc291cmNlc1twcmVmaXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbaW5qZWN0aW9uTmFtZV0gPSBzb3VyY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXNvdXJjZSAmJiBzb3VyY2VzLiQkbm9wcmVmaXggJiYgc291cmNlcy4kJG5vcHJlZml4LmhhcyhpbmplY3Rpb25OYW1lKSkge1xyXG4gICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzLiQkbm9wcmVmaXg7XHJcbiAgICAgICAgICAgIGNhY2hlW2luamVjdGlvbk5hbWVdID0gc291cmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighc291cmNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgc291cmNlIGNvbnRhaW5pbmcgaW5qZWN0aW9uIFsnICsgaW5qZWN0aW9uTmFtZSsnXS4gJylcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZXNvbHZlID0gZnVuY3Rpb24gKG5hbWUsIGRpcmVjdCkge1xyXG4gICAgICAgIGlmIChkaXJlY3QgPT09ICdleHRlbmQnKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAobGlicmFyeVtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnN0cnVjdG9yOiBsaWJyYXJ5W25hbWVdLiRjb25zdHJ1Y3RvcigpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBsaWJyYXJ5W25hbWVdLmRlcGVuZGVuY2llcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVuY2llc1tkXSA9PT0gJ0BleHRlbmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kZXBlbmRlbmNpZXMucHVzaChsaWJyYXJ5W25hbWVdLmV4dGVuZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRlcGVuZGVuY2llc1tkXSA9PT0gJ0BpbmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kZXBlbmRlbmNpZXMucHVzaChsaWJyYXJ5W25hbWVdLmluamVjdCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gdGhpcy5maW5kU291cmNlQnlJbmplY3Rpb25OYW1lKGRlcGVuZGVuY2llc1tkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kZXBlbmRlbmNpZXMucHVzaChzcmMucmVzb2x2ZShkZXBlbmRlbmNpZXNbZF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc291cmNlIGZvdW5kIGNvbnRhaW5pbmcgWycgKyBkZXBlbmRlbmNpZXNbZF0gKyAnXSBmb3IgWycrbmFtZSsnXS4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gaW5qZWN0IFsnICsgbmFtZSArICddIG5vIHN1Y2ggaW5qZWN0aW9uIGZvdW5kJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhuYW1lKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBsaWJyYXJ5W25hbWVdLmRlcGVuZGVuY2llcygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jaWVzW2ldID09PSAnQGV4dGVuZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGxpYnJhcnlbbmFtZV0uZXh0ZW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZGVwZW5kZW5jaWVzW2ldID09PSAnQGluamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGxpYnJhcnlbbmFtZV0uaW5qZWN0KHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmZpbmRTb3VyY2VCeUluamVjdGlvbk5hbWUoZGVwZW5kZW5jaWVzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKHNvdXJjZS5yZXNvbHZlKGRlcGVuZGVuY2llc1tpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmplY3Rpb24gWycgKyBkZXBlbmRlbmNpZXNbaV0gKyAnXSBmb3IgWycgKyBuYW1lICsgJ10gc291cmNlIHdhcyBub3QgZm91bmQuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpYnJhcnlbbmFtZV0uY3JlYXRlKGFyZ3MsIGRpcmVjdCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmplY3Rpb24gWycgKyBuYW1lICsgJ10gd2FzIG5vdCBmb3VuZCBpbiBsaWJyYXJ5IScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJlc29sdmVEaXJlY3RJbmplY3Rpb24gPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmZpbmRTb3VyY2VCeUluamVjdGlvbk5hbWUobmFtZSk7XHJcbiAgICAgICAgaWYgKHNvdXJjZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc291cmNlLnJlc29sdmUobmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5oYXMgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiAhIWxpYnJhcnlbbmFtZV07XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAobGlicmFyeVtuYW1lXSkgcmV0dXJuIGxpYnJhcnlbbmFtZV07XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBpZiAoQ29yZS5pcyhsaWIsICdJbmplY3Rpb24nKSkge1xyXG4gICAgICAgIGxpYnJhcnlbbGliLm5hbWUoKV0gPSBsaWIuY2xvbmUoKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBsaWIgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBsaWIpIHtcclxuICAgICAgICAgICAgaWYgKGxpYi5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChDb3JlLmlzKGxpYltwcm9wZXJ0eV0sICdJbmplY3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlicmFyeVtsaWJbcHJvcGVydHldLm5hbWUoKV0gPSBsaWJbcHJvcGVydHldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlicmFyeVtsaWJbcHJvcGVydHldLm5hbWUoKV0gPSBsaWJbcHJvcGVydHldLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxpYiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIGNvbnRhaW5lci4gV3JvbmcgYXJndW1lbnRzLiBMaWIgaXMgSW5qZWN0aW9uIG9yIG9iamVjdCcpXHJcbiAgICB9XHJcbn0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAxNC8wOC8yMDE3LlxyXG4gKi9cclxuQ29yZShmdW5jdGlvbiBGb250cyhDb25maWcsIGFwcCkge1xyXG5cclxuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuXHJcbiAgICB2YXIgZmFtaWxpZXMgPSB7fSxcclxuICAgICAgICBmb250c0RlZmluZWQgPSBmYWxzZSxcclxuICAgICAgICBmb3JtYXQgPSBDb25maWcuZGVmaW5lKCdmb250Rm9ybWF0cycsIFsnZW90JywgJ3N2ZycsICd0dGYnLCAnd29mZiddLCB7XHJcbiAgICAgICAgICAgIGlzQXJyYXk6IHRydWUsIGN1c3RvbTogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aCgpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodltpXSAhPT0gJ2VvdCcgfHwgdltpXSAhPT0gJ3N2ZycgfHwgdltpXSAhPT0gJ3R0ZicgfHwgdltpXSAhPT0gJ3dvZmYnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkud2F0Y2goZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgZm9udHNEZWZpbmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZm9ybWF0ID0gdjtcclxuICAgICAgICAgICAgdXBkYXRlKCk7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgZm9ybWF0U3RyID0ge1xyXG4gICAgICAgICAgICBlb3Q6IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAndXJsKFwiJyArIHVybCArICcuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSc7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdvZmY6IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAndXJsKFwiJyArIHVybCArICcud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpJztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdHRmOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3VybChcIicgKyB1cmwgKyAnLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSc7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN2ZzogZnVuY3Rpb24gKHVybCwgZm9udCwgc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAndXJsKFwiJyArIHVybCArICcuc3ZnIycgKyBmb250ICsgJy0nICsgKHN0eWxlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3R5bGUuc2xpY2UoMSkpICsgJ1wiKSBmb3JtYXQoXCJzdmdcIiknO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWxmID0gdGhpcztcclxuXHJcbiAgICBDb25maWcuZGVmaW5lKCdmb250RGlyJywgJy4vZm9udHMnLCB7aXNTdHJpbmc6IHRydWV9KTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGZvbnRTdHJpbmcoZm9udCkge1xyXG5cclxuICAgICAgICBpZighZm9udHNEZWZpbmVkKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xyXG5cclxuICAgICAgICBmb3IgKHZhciB3ID0gMDsgdyA8IGZvbnQud2VpZ2h0Lmxlbmd0aDsgdysrKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgZm9udC5zdHlsZS5sZW5ndGg7IHMrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVzdHJpbmcgPSBDb25maWcuZ2V0KCdmb250RGlyJykgKyAnLycgKyBmb250Lm5hbWUgKyAnLScgKyBmb250LndlaWdodFt3XSArICctJyArIGZvbnQuc3R5bGVbc107XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyaW5nID0gJ0Bmb250LWZhY2UgeycgK1xyXG4gICAgICAgICAgICAgICAgICAgICdmb250LWZhbWlseTogXCInICsgc2VsZi5mb3JtYXQoZm9udC5uYW1lKSArICctJyArIGZvbnQud2VpZ2h0W3ddICsgJ1wiOycgK1xyXG4gICAgICAgICAgICAgICAgICAgICdzcmM6JztcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBmID0gMDsgZiA8IGZvcm1hdC5sZW5ndGg7IGYrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBmb3JtYXRTdHJbZm9ybWF0W2ZdXShmaWxlc3RyaW5nLCBmb250Lm5hbWUsIGZvbnQuc3R5bGVbc10pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmIDwgZm9ybWF0Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9ICcsJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9ICc7J1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0cmluZyArPSAnZm9udC13ZWlnaHQ6ICcgKyBmb250LndlaWdodFt3XSArICc7JztcclxuICAgICAgICAgICAgICAgIHN0cmluZyArPSAnZm9udC1zdHlsZTonICsgZm9udC5zdHlsZVtzXSArICc7fSc7XHJcbiAgICAgICAgICAgICAgICBmb250W2ZvbnQud2VpZ2h0W3ddICsgJy0nICsgZm9udC5zdHlsZVtzXV0gPSBzdHJpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGZvbnRbZm9udC53ZWlnaHRbd10gKyAnLScgKyBmb250LnN0eWxlW3NdXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGUocGF0aCkge1xyXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBmYW1pbHkgaW4gZmFtaWxpZXMpIHtcclxuICAgICAgICAgICAgaWYgKGZhbWlsaWVzLmhhc093blByb3BlcnR5KGZhbWlseSkpIHtcclxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBmb250U3RyaW5nKGZhbWlsaWVzW2ZhbWlseV0sIHBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluQXJyYXkoYXJyYXksIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFycmF5W2ldID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5mb250ID0gZnVuY3Rpb24gKHBhdGgsIGZvbnQsIHdlaWdodCwgc3R5bGUpIHtcclxuICAgICAgICBpZiAoIWZhbWlsaWVzW2ZvbnRdKSB7XHJcbiAgICAgICAgICAgIGZhbWlsaWVzW2ZvbnRdID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZm9udFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWZhbWlsaWVzW2ZvbnRdLndlaWdodCkgZmFtaWxpZXNbZm9udF0ud2VpZ2h0ID0gW107XHJcbiAgICAgICAgaWYgKCFmYW1pbGllc1tmb250XS5zdHlsZSkgZmFtaWxpZXNbZm9udF0uc3R5bGUgPSBbXTtcclxuICAgICAgICBpZiAoIWluQXJyYXkoZmFtaWxpZXNbZm9udF0ud2VpZ2h0LCB3ZWlnaHQpKSBmYW1pbGllc1tmb250XS53ZWlnaHQucHVzaCh3ZWlnaHQpO1xyXG4gICAgICAgIGlmICghaW5BcnJheShmYW1pbGllc1tmb250XS5zdHlsZSwgc3R5bGUpKSBmYW1pbGllc1tmb250XS5zdHlsZS5wdXNoKHN0eWxlKTtcclxuICAgICAgICB1cGRhdGUocGF0aCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZm9ybWF0ID0gZnVuY3Rpb24gKGZvbnQpIHtcclxuICAgICAgICByZXR1cm4gYXBwICsgJy0nICsgZm9udDtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5mb3JtYXRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcm1hdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChmb3JtYXRbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxufSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDI1LzA4LzIwMTcuXHJcbiAqL1xyXG5Db3JlKGZ1bmN0aW9uIEhlbHBlcnMoKSB7XHJcblxyXG4gICAgdmFyIGhlbHBlcnMgPSB7fSxcclxuICAgICAgICBzeXNIZWxwZXJzID0ge307XHJcblxyXG4gICAgZnVuY3Rpb24gaGVscGVyKGNmZykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBoZWxwZXIgPSBDb3JlLmluamVjdCgnSW5qZWN0aW9uJywgW2NmZ10pO1xyXG4gICAgICAgICAgICBpZiAoaGVscGVyc1toZWxwZXIubmFtZSgpXSkgY29uc29sZS53YXJuKCdoZWxwZXIgWycgKyBoZWxwZXIubmFtZSgpICsgJ10gb3ZlcnJpZGUuJyk7XHJcbiAgICAgICAgICAgIGhlbHBlcnNbaGVscGVyLm5hbWUoKV0gPSBoZWxwZXI7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgSGVscGVyLicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBDb3JlLmRlZmluZSgnaGVscGVyJywgaGVscGVyKTtcclxuXHJcbiAgICBoZWxwZXIuc3lzdGVtID0gZnVuY3Rpb24gKGNmZywgaXNfcHVibGljKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGhlbHBlciA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbY2ZnXSk7XHJcbiAgICAgICAgICAgIGlmIChzeXNIZWxwZXJzW2hlbHBlci5uYW1lKCldKSBjb25zb2xlLndhcm4oJ1N5c3RlbSBIZWxwZXIgWycgKyBoZWxwZXIubmFtZSgpICsgJ10gRHVwbGljYXRlIGRlY2xhcmF0aW9uIG92ZXJyaWRlLicpO1xyXG4gICAgICAgICAgICBzeXNIZWxwZXJzW2hlbHBlci5uYW1lKCldID0gaGVscGVyO1xyXG4gICAgICAgICAgICBpZiAoaXNfcHVibGljKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGVscGVyc1toZWxwZXIubmFtZSgpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignU3lzdGVtIEhlbHBlciBbJyArIGhlbHBlci5uYW1lKCkgKyAnXSBvdmVycmlkZXMgdXNlciBoZWxwZXIuIFNraXBwZWQgc3lzdGVtIGhlbHBlci4nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVscGVyc1toZWxwZXIubmFtZSgpXSA9IGhlbHBlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ2V0U3lzdGVtSGVscGVycyA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBDb3JlLmluamVjdCgnQ29udGFpbmVyJywgW3N5c0hlbHBlcnNdKTtcclxuICAgICAgICBjb250YWluZXIuc291cmNlKGNvbnRhaW5lciwgJysnKTtcclxuICAgICAgICBjb250YWluZXIuc291cmNlKGRlZmF1bHRzLCAnQCcpO1xyXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0UHVibGljSGVscGVycyA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBDb3JlLmluamVjdCgnQ29udGFpbmVyJywgW2hlbHBlcnNdKTtcclxuICAgICAgICBjb250YWluZXIuc291cmNlKGNvbnRhaW5lciwgJysnKTtcclxuICAgICAgICBjb250YWluZXIuc291cmNlKGRlZmF1bHRzLCAnQCcpO1xyXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICB9O1xyXG5cclxufSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDE0LzA4LzIwMTcuXHJcbiAqL1xyXG5Db3JlKGZ1bmN0aW9uIEluamVjdGlvbihjb24sIHJlc29sdmVkKSB7XHJcbiAgICB2YXIgY29uc3RydWN0b3IgPSBjb24sIGluc3RhbmNlID0gbnVsbCxcclxuICAgICAgICBkZXBlbmRlbmNpZXMgPSBbXSxcclxuICAgICAgICBzZWxmID0gdGhpcztcclxuXHJcblxyXG4gICAgaWYgKHJlc29sdmVkKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb24gPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IgPSBjb24uY29uc3RydWN0b3I7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gY29uO1xyXG4gICAgICAgICAgICBkZXBlbmRlbmNpZXMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgUHJlUmVzb2x2ZWRJbmplY3Rpb24hIGNvbiBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0IScpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb24gPT09IFwiZnVuY3Rpb25cIiAmJiBjb24ubmFtZSkge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvciA9IGNvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbiA9PT0gXCJvYmplY3RcIiAmJiBjb24uY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbltpXSA9PT0gXCJzdHJpbmdcIiAmJiBjb25baV0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goY29uW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjb25baV0gPT09IFwiZnVuY3Rpb25cIiAmJiBjb25baV0ubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yID0gY29uW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbnN0cnVjdG9yKSB0aHJvdyBuZXcgRXJyb3IoJ0luamVjdGlvbiBjb25zdHJ1Y3RvciB1bmRlZmluZWQhJyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHRoaXMubmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IubmFtZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRlcGVuZGVuY2llc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZXh0ZW5kID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgICAgIGlmKHJlc29sdmVkKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBjYW4gbm90IGV4dGVuZCB3aXRoIFsnICsgY29uc3RydWN0b3IubmFtZSArICddIScpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBpbmplY3Rpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGluamVjdGlvbk5hbWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gY29udGFpbmVyLmZpbmRTb3VyY2VCeUluamVjdGlvbk5hbWUoaW5qZWN0aW9uTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0gc291cmNlLnJlc29sdmVJbmplY3Rpb25EZXBlbmRhbmNpZXMoaW5qZWN0aW9uTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy4kY29uc3RydWN0b3IuYXBwbHkodGFyZ2V0LCBjb25maWcuZGVwZW5kZW5jaWVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgaW5qZWN0aW9uIFsnICsgaW5qZWN0aW9uTmFtZSArICddIGZvciBbJyArIHNlbGYubmFtZSgpICsnXScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXh0ZW5kIGNsYXNzIG5hbWUgc2hvdWxkIGJlIGEgc3RyaW5nIScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHRlbmQgdGFyZ2V0IHNob3VsZCBiZSBhbiBvYmplY3QhJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaW5qZWN0ID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xyXG4gICAgICAgIGlmKHJlc29sdmVkKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBjYW4gbm90IGluamVjdCBbJyArIGNvbnN0cnVjdG9yLm5hbWUgKyddIGRpcmVjdGx5Jyk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbmplY3Rpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIucmVzb2x2ZURpcmVjdEluamVjdGlvbihpbmplY3Rpb25OYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKGFyZ3MsIGRpcmVjdCkge1xyXG4gICAgICAgIGlmIChyZXNvbHZlZCkgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgICAgIGlmIChkaXJlY3QpIHtcclxuICAgICAgICAgICAgYXJncy51bnNoaWZ0KG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShjb25zdHJ1Y3RvciwgYXJncykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgYXJncy51bnNoaWZ0KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KGNvbnN0cnVjdG9yLCBhcmdzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy4kY29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmNsb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgSW5qZWN0aW9uKGNvbiwgcmVzb2x2ZWQpO1xyXG4gICAgfTtcclxufSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDE0LzA4LzIwMTcuXHJcbiAqL1xyXG5Db3JlKGZ1bmN0aW9uIFJvb3QoKSB7XHJcbiAgICB2YXIgYXBwcyA9IHt9LFxyXG4gICAgICAgIHNlcnZpY2VzID0gQ29yZS5nZXQoJ1NlcnZpY2VzJyksXHJcbiAgICAgICAgY2xhc3NlcyA9IENvcmUuZ2V0KCdDbGFzc2VzJyksXHJcbiAgICAgICAgaGVscGVycyA9IENvcmUuZ2V0KCdIZWxwZXJzJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQXBwbGljYXRpb24oYXBwKSB7XHJcbiAgICAgICAgdmFyIGFwcENvbnRhaW5lciA9IENvcmUuaW5qZWN0KCdDb250YWluZXInLCBbYXBwc1thcHBdXSksXHJcbiAgICAgICAgICAgIGFwcFRpY2tlciA9IENvcmUuaW5qZWN0KCdUaWNrZXInKSxcclxuICAgICAgICAgICAgYXBwQ2FudmFzID0gQ29yZS5pbmplY3QoJ0NhbnZhcycsIFthcHBUaWNrZXJdKSxcclxuICAgICAgICAgICAgYXBwQXVkaW8gPSBDb3JlLmluamVjdCgnQXVkaW8nLCBbXSksXHJcbiAgICAgICAgICAgIGFwcENvbmZpZyA9IENvcmUuaW5qZWN0KCdDb25maWcnLCBbYXBwXSksXHJcbiAgICAgICAgICAgIGFwcEZvbnRzID0gQ29yZS5pbmplY3QoJ0ZvbnRzJywgW2FwcENvbmZpZywgYXBwXSksXHJcbiAgICAgICAgICAgIGFwcEFwaSA9IENvcmUuaW5qZWN0KCdBcHBsaWNhdGlvbicsIFthcHBDYW52YXMsIGFwcFRpY2tlciwgYXBwQ29uZmlnXSk7XHJcblxyXG4gICAgICAgIHZhciBkZWZhdWx0c0xpYnJhcnkgPSB7fTtcclxuXHJcbiAgICAgICAgZGVmYXVsdHNMaWJyYXJ5LlRpY2tlciA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbYXBwVGlja2VyLCB0cnVlXSk7XHJcbiAgICAgICAgZGVmYXVsdHNMaWJyYXJ5LkNhbnZhcyA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbYXBwQ2FudmFzLCB0cnVlXSk7XHJcbiAgICAgICAgZGVmYXVsdHNMaWJyYXJ5LkFQSSA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbYXBwQXBpLCB0cnVlXSk7XHJcbiAgICAgICAgZGVmYXVsdHNMaWJyYXJ5LkZvbnRzID0gQ29yZS5pbmplY3QoJ0luamVjdGlvbicsIFthcHBGb250cywgdHJ1ZV0pO1xyXG4gICAgICAgIGRlZmF1bHRzTGlicmFyeS5Db25maWcgPSBDb3JlLmluamVjdCgnSW5qZWN0aW9uJywgW2FwcENvbmZpZywgdHJ1ZV0pO1xyXG4gICAgICAgIGRlZmF1bHRzTGlicmFyeS5BdWRpbyA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbYXBwQXVkaW8sIHRydWVdKTtcclxuXHJcbiAgICAgICAgdmFyIGFwcERlZmF1bHRzID0gQ29yZS5pbmplY3QoJ0NvbnRhaW5lcicsIFtkZWZhdWx0c0xpYnJhcnldKSxcclxuICAgICAgICAgICAgYXBwU3lzSGVscGVycyA9IGhlbHBlcnMuZ2V0U3lzdGVtSGVscGVycyhhcHBEZWZhdWx0cyksXHJcbiAgICAgICAgICAgIGFwcFB1YkhlbHBlcnMgPSBoZWxwZXJzLmdldFB1YmxpY0hlbHBlcnMoYXBwRGVmYXVsdHMpLFxyXG4gICAgICAgICAgICBhcHBDbGFzc2VzID0gY2xhc3Nlcy5nZXRBcHBsaWNhdGlvbkNsYXNzZXMoYXBwKSxcclxuICAgICAgICAgICAgYXBwU3lzQ2xhc3NlcyA9IGNsYXNzZXMuZ2V0U3lzdGVtQ2xhc3NlcyhhcHApLFxyXG4gICAgICAgICAgICBhcHBTZXJ2aWNlcyA9IHNlcnZpY2VzLmdldEFwcGxpY2F0aW9uU2VydmljZXMoYXBwU3lzSGVscGVycywgYXBwU3lzQ2xhc3NlcywgYXBwRGVmYXVsdHMpO1xyXG5cclxuICAgICAgICBhcHBDb250YWluZXIuc291cmNlKGFwcFNlcnZpY2VzLCBmYWxzZSk7XHJcbiAgICAgICAgYXBwQ29udGFpbmVyLnNvdXJjZShhcHBDbGFzc2VzLCAnLicpO1xyXG4gICAgICAgIGFwcENvbnRhaW5lci5zb3VyY2UoYXBwUHViSGVscGVycywgJysnKTtcclxuICAgICAgICBhcHBDb250YWluZXIuc291cmNlKGFwcERlZmF1bHRzLCAnQCcpO1xyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBhcHBTZXJ2aWNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbGlzdCA9IGFwcFNlcnZpY2VzW2ldLmxpc3QoKTtcclxuICAgICAgICAgICAgZm9yKHZhciBsID0gMCA7IGwgPCBsaXN0Lmxlbmd0aDsgbCsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcHBTZXJ2aWNlc1tpXS5yZXNvbHZlKGxpc3RbbF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFwcENvbnRhaW5lci5yZXNvbHZlKGFwcCk7XHJcbiAgICAgICAgcmV0dXJuIGFwcEFwaTtcclxuICAgIH1cclxuXHJcbiAgICBDb3JlLmRlZmluZSgnYXBwJywgZnVuY3Rpb24gKGNmZykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBhcHBsaWNhdGlvbiA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbY2ZnXSk7XHJcbiAgICAgICAgICAgIGlmIChhcHBzW2FwcGxpY2F0aW9uLm5hbWUoKV0pIGNvbnNvbGUud2FybignQXBwbGljYXRpb24gWycgKyBhcHBsaWNhdGlvbi5uYW1lKCkgKyAnXSBvdmVycmlkZS4gUmVtb3ZlIGR1cGxpY2F0ZXMnKTtcclxuICAgICAgICAgICAgYXBwc1thcHBsaWNhdGlvbi5uYW1lKCldID0gYXBwbGljYXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byByZWdpc3RlciBBcHBsaWNhdGlvbiBjb25zdHJ1Y3Rvci4nKTtcclxuICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBDb3JlLmRlZmluZSgncnVuJywgZnVuY3Rpb24gKGFwcCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXBwID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChhcHBzW2FwcF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVBcHBsaWNhdGlvbihhcHApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcHBsaWNhdGlvbiBbJyArIGFwcCArICddIG5vdCBmb3VuZC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZ2V0IGFwcC4gQXBwIElkIGlzIG5vdCBhIHN0cmluZycpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMTQvMDgvMjAxNy5cclxuICovXHJcbkNvcmUoZnVuY3Rpb24gU2VydmljZXMoKSB7XHJcblxyXG4gICAgdmFyIHNlcnZpY2VzID0ge30sXHJcbiAgICAgICAgc2VydmljZUNsYXNzZXMgPSB7fSxcclxuICAgICAgICBwbHVnaW5zID0ge30sXHJcbiAgICAgICAgcGx1Z2luc0NsYXNzZXMgPSB7fTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXJ2aWNlKGNmZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2ZnID09PSBcIm9iamVjdFwiICYmIGNmZy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIHNlcnZpY2VOYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjZmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2ZnW2ldID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSA9IGNmZ1tpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNmZ1tpXSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIHNlcnZpY2UuIEludmFsaWQgY29uZmlnJyk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzZXJ2aWNlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2VzW3NlcnZpY2VOYW1lXSkgY29uc29sZS53YXJuKCdEdXBsaWNhdGUgZGVjbGFyYXRpb24uIFNlcnZpY2UgWycgKyBzZXJ2aWNlTmFtZSArICddIGhhcyBiZWVuIG92ZXJ3cml0dGVuJyk7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlc1tzZXJ2aWNlTmFtZV0gPSBDb3JlLmluamVjdCgnSW5qZWN0aW9uJywgW2NmZ10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjZmcgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBpZiAoY2ZnLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlc1tjZmcubmFtZV0pIGNvbnNvbGUud2FybignRHVwbGljYXRlIGRlY2xhcmF0aW9uLiBTZXJ2aWNlIFsnICsgc2VydmljZU5hbWUgKyAnXSBoYXMgYmVlbiBvdmVyd3JpdHRlbicpO1xyXG4gICAgICAgICAgICAgICAgc2VydmljZXNbY2ZnLm5hbWVdID0gQ29yZS5pbmplY3QoJ0luamVjdGlvbicsIFtjZmddKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGNyZWF0ZSBzZXJ2aWNlLiBDb25zdHJ1Y3RvciBpcyBub3QgYSBuYW1lZCBmdW5jdGlvbi4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGx1Z2luKGEsIGIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcIm9iamVjdFwiICYmIGIuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGx1Z2luTmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJbaV0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5OYW1lID0gYltpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYltpXSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgcGx1Z2luLiBJbnZhbGlkIGNvbnN0cnVjdG9yIGFyZ3VtZW50cycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5OYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwbHVnaW5zW2FdKSBwbHVnaW5zW2FdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdWdpbnNbYV1bcGx1Z2luTmFtZV0pIGNvbnNvbGUud2FybignUGx1Z2luIGR1cGxpY2F0ZWQuIFsnICsgcGx1Z2luTmFtZSArICddIGhhcyBiZWVuIG92ZXJ3cml0dGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luc1thXVtwbHVnaW5OYW1lXSA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbYl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIHBsdWdpbi4gQ29uc3RydWN0b3IgaXMgbm90IGEgbmFtZWQgZnVuY3Rpb24nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIHBsdWdpbi4gSW52YWxpZCBhcmd1bWVudHMuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsdWdpbi5jbGFzcyA9IGZ1bmN0aW9uIChzdmMsIGEsIGIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHN2YyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYiA9PT0gXCJvYmplY3RcIiAmJiBiLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwbHVnaW5DbGFzc05hbWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJbaV0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luQ2xhc3NOYW1lID0gYltpXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBiW2ldICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgcGx1Z2luIGNsYXNzLiBJbnZhbGlkIGNvbnN0cnVjdG9yIGFyZ3VtZW50cycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW5DbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwbHVnaW5zQ2xhc3Nlc1tzdmNdKSBwbHVnaW5zQ2xhc3Nlc1tzdmNdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGx1Z2luc0NsYXNzZXNbc3ZjXVthXSkgcGx1Z2luc0NsYXNzZXNbc3ZjXVthXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luc0NsYXNzZXNbc3ZjXVthXVtwbHVnaW5DbGFzc05hbWVdKSBjb25zb2xlLndhcm4oJ1BsdWdpbiBjbGFzcyBkdXBsaWNhdGVkLiBbJyArIHBsdWdpbkNsYXNzTmFtZSArICddIGhhcyBiZWVuIG92ZXJ3cml0dGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5zQ2xhc3Nlc1tzdmNdW2FdW3BsdWdpbkNsYXNzTmFtZV0gPSBDb3JlLmluamVjdCgnSW5qZWN0aW9uJywgW2JdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGNyZWF0ZSBwbHVnaW4uIENvbnN0cnVjdG9yIGlzIG5vdCBhIG5hbWVkIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwbHVnaW5zQ2xhc3Nlc1tzdmNdKSBwbHVnaW5zQ2xhc3Nlc1tzdmNdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGx1Z2luc0NsYXNzZXNbc3ZjXVthXSkgcGx1Z2luc0NsYXNzZXNbc3ZjXVthXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luc0NsYXNzZXNbc3ZjXVthXVtiLm5hbWVdKSBjb25zb2xlLndhcm4oJ1BsdWdpbiBjbGFzcyBkdXBsaWNhdGVkLiBbJyArIGIubmFtZSArICddIGhhcyBiZWVuIG92ZXJ3cml0dGVuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW5zQ2xhc3Nlc1tzdmNdW2FdW2IubmFtZV0gPSBDb3JlLmluamVjdCgnSW5qZWN0aW9uJywgW2JdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHJlZ2lzdGVyIHBsdWdpbiBjbGFzcy4gSW52YWxpZCBhcmd1bWVudHMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGNyZWF0ZSBwbHVnaW4uIEludmFsaWQgYXJndW1lbnRzLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcbiAgICBzZXJ2aWNlLmNsYXNzID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgY2xhc3NOYW1lID0gbnVsbDtcclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChiLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlcnZpY2VDbGFzc2VzW2FdKSBzZXJ2aWNlQ2xhc3Nlc1thXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VDbGFzc2VzW2FdW2IubmFtZV0gPSBDb3JlLmluamVjdCgnSW5qZWN0aW9uJywgW2JdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIGNsYXNzIGZvciBleHRlbnNpb24gWycgKyBhICsgJ10uIENvbnN0cnVjdG9yIGlzIG5vdCBhIG5hbWVkIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGIgPT09IFwib2JqZWN0XCIgJiYgYi5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYltpXSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGJbaV0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGJbaV0gIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIGNsYXNzIGZvciBzZXJ2aWNlWycgKyBhICsgJ10uIEludmFsaWQgY29uZmlnLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlcnZpY2VDbGFzc2VzW2FdKSBzZXJ2aWNlQ2xhc3Nlc1thXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlQ2xhc3Nlc1thXVtjbGFzc05hbWVdKSBjb25zb2xlLndhcm4oJ0R1cGxpY2F0ZSBkZWNsYXJhdGlvbi4gQ2xhc3MgWycgKyBjbGFzc05hbWUgKyAnXSBmb3IgZXh0ZW5zaW9uIFsnICsgYSArICddIGhhcyBiZWVuIG92ZXJ3cml0dGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZUNsYXNzZXNbYV1bY2xhc3NOYW1lXSA9IENvcmUuaW5qZWN0KCdJbmplY3Rpb24nLCBbYl0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgY2xhc3MuIEludmFsaWQgYXJndW1lbnRzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBDb3JlLmRlZmluZSgnc2VydmljZScsIHNlcnZpY2UpO1xyXG4gICAgQ29yZS5kZWZpbmUoJ3BsdWdpbicsIHBsdWdpbik7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UGx1Z2luTWFuYWdlcihsaWIpIHtcclxuICAgICAgICBmdW5jdGlvbiBQbHVnaW5zKCkge1xyXG4gICAgICAgICAgICB2YXIgbGlicmFyeSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBsaWJbaV0ubGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBsaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RbcHJvcF0uJGNvbnN0cnVjdG9yKCkgIT09IFBsdWdpbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlicmFyeS5wdXNoKHByb3ApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmVhY2ggPSBmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaWJyYXJ5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZihsaWJyYXJ5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5saXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlicmFyeS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChsaWJyYXJ5W2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIENvcmUuaW5qZWN0KCdDb250YWluZXInLCBbQ29yZS5pbmplY3QoJ0luamVjdGlvbicsIFtQbHVnaW5zXSldKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdldEFwcGxpY2F0aW9uU2VydmljZXMgPSBmdW5jdGlvbiAoX2hlbHBlcnMsIF9zeXNDbGFzc2VzLCBfZW5naW5lRGVmYXVsdHMpIHtcclxuXHJcbiAgICAgICAgdmFyIF9zZXJ2aWNlcyA9IHt9LFxyXG4gICAgICAgICAgICBfc2VydmljZXNDbGFzc2VzID0ge30sXHJcbiAgICAgICAgICAgIF9zZXJ2aWNlc1BsdWdpbnMgPSB7fSxcclxuICAgICAgICAgICAgX3NlcnZpY2VzUGx1Z2luc0NsYXNzZXMgPSB7fSxcclxuICAgICAgICAgICAgX3NlcnZpY2UsIF9wbHVnaW47XHJcblxyXG4gICAgICAgIGZvciAodmFyIHNlcnZpY2UgaW4gc2VydmljZXMpIHtcclxuICAgICAgICAgICAgaWYgKHNlcnZpY2VzLmhhc093blByb3BlcnR5KHNlcnZpY2UpKSB7XHJcbiAgICAgICAgICAgICAgICBfc2VydmljZSA9IENvcmUuaW5qZWN0KCdDb250YWluZXInLCBbc2VydmljZXNbc2VydmljZV1dKTtcclxuICAgICAgICAgICAgICAgIHZhciBfcGx1Z2lucyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5zW3NlcnZpY2VdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcGx1Z2luIGluIHBsdWdpbnNbc2VydmljZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsdWdpbnNbc2VydmljZV0uaGFzT3duUHJvcGVydHkocGx1Z2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BsdWdpbiA9IENvcmUuaW5qZWN0KCdDb250YWluZXInLCBbcGx1Z2luc1tzZXJ2aWNlXVtwbHVnaW5dXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9zZXJ2aWNlc1BsdWdpbnNbc2VydmljZV0pIF9zZXJ2aWNlc1BsdWdpbnNbc2VydmljZV0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXJ2aWNlc1BsdWdpbnNbc2VydmljZV1bcGx1Z2luXSA9IF9wbHVnaW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx1Z2luc0NsYXNzZXNbc2VydmljZV1bcGx1Z2luXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcGx1Z2luQ2xhc3Nlc0NvbnRhaW5lciA9IENvcmUuaW5qZWN0KCdDb250YWluZXInLCBbcGx1Z2luc0NsYXNzZXNbc2VydmljZV1bcGx1Z2luXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3NlcnZpY2VzUGx1Z2luc0NsYXNzZXNbc2VydmljZV0pIF9zZXJ2aWNlc1BsdWdpbnNDbGFzc2VzW3NlcnZpY2VdID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NlcnZpY2VzUGx1Z2luc0NsYXNzZXNbc2VydmljZV1bcGx1Z2luXSA9IF9wbHVnaW5DbGFzc2VzQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wbHVnaW4uc291cmNlKF9wbHVnaW5DbGFzc2VzQ29udGFpbmVyLCAnJCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wbHVnaW5DbGFzc2VzQ29udGFpbmVyLnNvdXJjZShfcGx1Z2luQ2xhc3Nlc0NvbnRhaW5lciwgJyQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGx1Z2luQ2xhc3Nlc0NvbnRhaW5lci5zb3VyY2UoX3N5c0NsYXNzZXMsICcuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BsdWdpbkNsYXNzZXNDb250YWluZXIuc291cmNlKF9oZWxwZXJzLCAnKycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3BsdWdpbi5zb3VyY2UoX3N5c0NsYXNzZXMsICcuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGx1Z2luLnNvdXJjZShfaGVscGVycywgJysnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9wbHVnaW5zLnB1c2goX3BsdWdpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgX3BsdWdpbnMucHVzaChnZXRQbHVnaW5NYW5hZ2VyKF9wbHVnaW5zKSk7XHJcbiAgICAgICAgICAgICAgICBfc2VydmljZS5zb3VyY2UoX3BsdWdpbnMsICc8Jyk7XHJcbiAgICAgICAgICAgICAgICBfc2VydmljZS5zb3VyY2UoX3N5c0NsYXNzZXMsICcuJyk7XHJcbiAgICAgICAgICAgICAgICBfc2VydmljZS5zb3VyY2UoX2hlbHBlcnMsICcrJyk7XHJcbiAgICAgICAgICAgICAgICBfc2VydmljZS5zb3VyY2UoX2VuZ2luZURlZmF1bHRzLCAnQCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlcnZpY2VDbGFzc2VzW3NlcnZpY2VdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcnZpY2VDbGFzc2VzQ29udGFpbmVyID0gQ29yZS5pbmplY3QoJ0NvbnRhaW5lcicsIFtzZXJ2aWNlQ2xhc3Nlc1tzZXJ2aWNlXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zZXJ2aWNlLnNvdXJjZShzZXJ2aWNlQ2xhc3Nlc0NvbnRhaW5lciwgJyQnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlQ2xhc3Nlc0NvbnRhaW5lci5zb3VyY2Uoc2VydmljZUNsYXNzZXNDb250YWluZXIsICckJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZUNsYXNzZXNDb250YWluZXIuc291cmNlKF9zeXNDbGFzc2VzLCAnLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VDbGFzc2VzQ29udGFpbmVyLnNvdXJjZShfcGx1Z2lucywgJzwnKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlQ2xhc3Nlc0NvbnRhaW5lci5zb3VyY2UoX2hlbHBlcnMsICcrJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZUNsYXNzZXNDb250YWluZXIuc291cmNlKF9lbmdpbmVEZWZhdWx0cywgJ0AnKTtcclxuICAgICAgICAgICAgICAgICAgICBfc2VydmljZXNDbGFzc2VzW3NlcnZpY2VdID0gc2VydmljZUNsYXNzZXNDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfc2VydmljZXNDbGFzc2VzW3NlcnZpY2VdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF9zZXJ2aWNlc1tzZXJ2aWNlXSA9IF9zZXJ2aWNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBzIGluIF9zZXJ2aWNlcykge1xyXG4gICAgICAgICAgICBpZiAoX3NlcnZpY2VzLmhhc093blByb3BlcnR5KHMpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3NlcnZpY2VzU2VydmljZVNvdXJjZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgczIgaW4gX3NlcnZpY2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9zZXJ2aWNlcy5oYXNPd25Qcm9wZXJ0eShzMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgIT09IHMyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2VydmljZXNTZXJ2aWNlU291cmNlLnB1c2goX3NlcnZpY2VzW3MyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfc2VydmljZXNbc10uc291cmNlKF9zZXJ2aWNlc1NlcnZpY2VTb3VyY2UsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoX3NlcnZpY2VzQ2xhc3Nlc1tzXSkgX3NlcnZpY2VzQ2xhc3Nlc1tzXS5zb3VyY2UoX3NlcnZpY2VzU2VydmljZVNvdXJjZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfc2VydmljZXNQbHVnaW5zW3NdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBfc2VydmljZXNQbHVnaW5zW3NdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2VydmljZXNQbHVnaW5zW3NdLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2VydmljZXNQbHVnaW5zW3NdW3BdLnNvdXJjZShfc2VydmljZXNTZXJ2aWNlU291cmNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF9zZXJ2aWNlc1BsdWdpbnNDbGFzc2VzW3NdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcGNsIGluIF9zZXJ2aWNlc1BsdWdpbnNDbGFzc2VzW3NdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc2VydmljZXNQbHVnaW5zQ2xhc3Nlc1tzXS5oYXNPd25Qcm9wZXJ0eShwY2wpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2VydmljZXNQbHVnaW5zQ2xhc3Nlc1tzXVtwY2xdLnNvdXJjZShfc2VydmljZXNTZXJ2aWNlU291cmNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBfc2VydmljZXMpIHtcclxuICAgICAgICAgICAgaWYgKF9zZXJ2aWNlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goX3NlcnZpY2VzW3Byb3BdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBfaGVscGVycy5zb3VyY2UocmVzdWx0LCBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcblxyXG59KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMTUvMDgvMjAxNy5cclxuICovXHJcbkNvcmUoZnVuY3Rpb24gU291cmNlKHByZWZpeCwgY29udGFpbmVyLCBsb29wKSB7XHJcblxyXG4gICAgdmFyIHBmeCA9IHByZWZpeCA/IHByZWZpeCA6IGZhbHNlLFxyXG4gICAgICAgIGNvbnRhaW5lcnMgPSBbXSxcclxuICAgICAgICBjYWNoZSA9IHt9LFxyXG4gICAgICAgIGNoZWNrQ2FjaGUgPSB7fTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbnRhaW5lciA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIGlmIChDb3JlLmlzKGNvbnRhaW5lciwgJ0NvbnRhaW5lcicpKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lcnMgPSBbY29udGFpbmVyXVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjb250YWluZXIuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgIHZhciB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ29yZS5pcyhjb250YWluZXJbaV0sICdDb250YWluZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcnMucHVzaChjb250YWluZXJbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLmxlbmd0aCA9PT0gMCkgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdmFsaWQpIHRocm93IG5ldyBFcnJvcignQ29udGFpbmVyIGFycmF5IGlzIGVtcHR5IScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHR5cGUgaWYgY29udGFpbmVyIScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gc3RyaXBQcmVmaXgobmFtZSkge1xyXG4gICAgICAgIGlmIChwcmVmaXgpIHtcclxuICAgICAgICAgICAgdmFyIHN0cmluZyA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID49IHBmeC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gbmFtZVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNoZWNrID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZihjaGVja0NhY2hlW25hbWVdKSByZXR1cm4gY2hlY2tDYWNoZVtuYW1lXTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICBpZiAocHJlZml4KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5hbWVbaV0gfHwgbmFtZVtpXSAhPT0gcHJlZml4W2ldKSByZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjaGVja0NhY2hlW25hbWVdID0gcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuaGFzID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYoY2FjaGVbbmFtZV0pIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cmlwTmFtZSA9IHN0cmlwUHJlZml4KG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lcnNbaV0uaGFzKHN0cmlwTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlW25hbWVdID0gY29udGFpbmVyc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmxvb3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvb3A7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY29udGFpbmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gY29udGFpbmVycztcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zb3VyY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lcnNbaV0uc291cmNlLmFwcGx5KGNvbnRhaW5lcnNbaV0sIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnByZWZpeCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgICAgICBpZiAoc3RyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0ciA9PT0gcGZ4O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGZ4O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbiAobmFtZSwgZGlyZWN0KSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgc3RyaXBOYW1lID0gc3RyaXBQcmVmaXgobmFtZSk7XHJcbiAgICAgICAgICAgIGlmKGNhY2hlW25hbWVdKSBzb3VyY2UgPSBjYWNoZVtuYW1lXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyc1tpXS5oYXMoc3RyaXBOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IGNvbnRhaW5lcnNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNvdXJjZSkgcmVzdWx0ID0gc291cmNlLnJlc29sdmUoc3RyaXBOYW1lLCBkaXJlY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnJlc29sdmVJbmplY3Rpb25EZXBlbmRhbmNpZXMgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHZhciBzb3VyY2UgPSBudWxsLCBzdHJpcE5hbWUgPSBudWxsO1xyXG4gICAgICAgIGlmKGNhY2hlW25hbWVdKSB7XHJcbiAgICAgICAgICAgIHN0cmlwTmFtZSA9IHN0cmlwUHJlZml4KG5hbWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVbbmFtZV0ucmVzb2x2ZShzdHJpcE5hbWUsICdleHRlbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhcyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgc3RyaXBOYW1lID0gc3RyaXBQcmVmaXgobmFtZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyc1tpXS5oYXMoc3RyaXBOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBjb250YWluZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZVtuYW1lXSA9IGNvbnRhaW5lcnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UpIHJldHVybiBzb3VyY2UucmVzb2x2ZShzdHJpcE5hbWUsICdleHRlbmQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG59KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMTQvMDgvMjAxNy5cclxuICovXHJcbkNvcmUoZnVuY3Rpb24gVGlja2VyKCkge1xyXG4gICAgdmFyIGZyYW1lRHVyYXRpb24gPSAoMTAwMCAvIDU4LjgpLnRvRml4ZWQoMiksXHJcbiAgICAgICAgcXVldWUgPSBbXSxcclxuICAgICAgICBmcmFtZSA9IDAsXHJcbiAgICAgICAgYXJncyA9IFtudWxsLCAwXSxcclxuICAgICAgICBkcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlW2ldLmYuYXBwbHkoc2VsZiwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgZW1lcmdlZCB3aGlsZSByZXNvbHZpbmcgY2FsbGJhY2tzLlxcbicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnUXVldWUgICA6IFsnICsgcXVldWVbaV0ubyArICddXFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdPcmRlciAgIDogWycgKyBpICsgJ11cXG4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ05hbWUgICAgOiBbJyArIChxdWV1ZVtpXS5mLm5hbWUpICsgJ10uXFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdNZXNzYWdlIDogJyArIGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnJhbWUrKztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRpY2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbMF0gPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICBhcmdzWzFdID0gZnJhbWU7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBkcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgnZXJyb3InLCBlKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHJ1biB0aWNrZXIgYW55bW9yZS4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ0Vycm9yIGVtZXJnZWQgZHVyaW5nIGFwcCB0aWNrZXIgcHJvZ3Jlc3MuXFxuICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdGcmFtZSA6JyArIGZyYW1lICsgJ1xcbicgK1xyXG4gICAgICAgICAgICAgICAgICAgICdEYXRlICA6ICcgKyBhcmdzWzBdICsgJ1xcbicgK1xyXG4gICAgICAgICAgICAgICAgICAgIGUubWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGludGVydmFsID0gbnVsbCxcclxuICAgICAgICBldmVudENiID0ge1xyXG4gICAgICAgICAgICBzdG9wOiBbXSxcclxuICAgICAgICAgICAgc3RhcnQ6IFtdLFxyXG4gICAgICAgICAgICBlcnJvcjogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlc29sdmUoZXZlbnQsIGFyZ3MpIHtcclxuICAgICAgICB2YXIgX2NhbGxfYXJncyA9IFtdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgYXJncyA9PT0gXCJvYmplY3RcIiAmJiBhcmdzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICBfY2FsbF9hcmdzID0gYXJncztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXJncyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIF9jYWxsX2FyZ3MucHVzaChhcmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQgPT09IFwic3RyaW5nXCIgJiYgZXZlbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudENiW2V2ZW50XSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudENiW2V2ZW50XS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Q2JbZXZlbnRdW2ldLmFwcGx5KHNlbGYsIF9jYWxsX2FyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmVzb2x2ZSBldmVudCBbJyArIGV2ZW50ICsgJ10uIE5vIHN1Y2ggZXZlbnQuJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcmVzb2x2ZSBldmVudC4gRXZlbnQgcGFyYW1ldGVyIGlzIG5vdCBhIHN0cmluZyBvciBlbXB0eScpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMub24gPSBmdW5jdGlvbiAoZXZlbnQsIGZ1bmMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiICYmIGV2ZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnRDYltldmVudF0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDYltldmVudF0ucHVzaChmdW5jKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gc2V0IGV2ZW50IFsnICsgZXZlbnQgKyAnXS4gQ2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgZXZlbnQgWycgKyBldmVudCArICddIGhhbmRsZXIuIE5vIHN1Y2ggZXZlbnQuJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gc2V0IGV2ZW50LiBFdmVudCBhcmd1bWVudCBpcyBub3QgYSBzdHJpbmcgb3IgZW1wdHkuJylcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgZnJhbWUgPSAwO1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgICAgICAgICAgaW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICAgICAgICByZXNvbHZlKCdzdG9wJywgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aWNrLCBmcmFtZUR1cmF0aW9uKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgnc3RhcnQnLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZnBzID0gZnVuY3Rpb24gKG51bWJlcikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChudW1iZXIgPiA2MCkgbnVtYmVyID0gNjA7XHJcbiAgICAgICAgICAgIGlmIChudW1iZXIgPD0gMCkgbnVtYmVyID0gMTtcclxuICAgICAgICAgICAgZnJhbWVEdXJhdGlvbiA9ICgxMDAwIC8gbnVtYmVyKS50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKDEwMDAgLyBmcmFtZUR1cmF0aW9uKS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5xdWV1ZSA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgaWYgKCFhLm5hbWUpIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHNldCBjYWxsYmFjay4gQ2FsbGJhY2sgaXMgbm90IGEgbmFtZWQgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goe286IDAsIGY6IGJ9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGEgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYi5uYW1lKSB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXQgY2FsbGJhY2suIENhbGxiYWNrIGlzIG5vdCBhIG5hbWVkIGZ1bmN0aW9uLicpO1xyXG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7bzogYSwgZjogYn0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcXVldWUuIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIGNhbGxiYWNrLiBXcm9uZyBhcmd1bWVudHMgcGFzc2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5vID4gYi5vO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjUvMjAxNi5cclxuICovXHJcbiRSLnBsdWdpbignT2JqZWN0cycsXHJcbiAgICBbJ0BpbmplY3QnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEFuaW1hdGlvbihpbmplY3QsIERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0ZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG1vcnBocyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb3JwaCA9IGZ1bmN0aW9uIChuYW1lLCBvcmRlcmluZywgc2V0dGVyLCBhcHBsaWVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9ycGggPSBpbmplY3QoJyRNb3JwaCcpO1xyXG4gICAgICAgICAgICAgICAgbW9ycGguY29uZmlnKG5hbWUsIHRoaXMub2JqZWN0KCksIG9yZGVyaW5nLCBzZXR0ZXIsIGFwcGxpZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vcnBoLnZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3JwaHNbbmFtZV0gPSBtb3JwaDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXh0cmFjdE1vcnBoID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtb3JwaHNbbmFtZV07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBmaW5kQ29tcGV0aXRvcihwcm9wZXJ0aWVzLCBhbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi4kJFNFTEYgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjb21wZXRpdG9yID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuaW1hdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbnNbaV0uJCRTRUxGKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25zW2ldLmFjdGl2ZSgpICYmICFhbmltYXRpb25zW2ldLmRvbmUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHByb3BlcnRpZXMubGVuZ3RoOyBuKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uc1tpXS5oYXNQcm9wZXJ0eShwcm9wZXJ0aWVzW25dKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVjayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29tcGV0aXRvcikgY29tcGV0aXRvciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBldGl0b3IucHVzaChhbmltYXRpb25zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYW5pbWF0aW9uLiQkU0VMRjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcGV0aXRvcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gQ2hlY2tBbmltYXRpb25RdWV1ZSgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfYW5pbWF0aW9ucyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uc1tpXS5hY3RpdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSBhbmltYXRpb25zW2ldLnByb3BlcnRpZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbnNbaV0ucXVldWUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaW5kQ29tcGV0aXRvcihwcm9wcywgYW5pbWF0aW9uc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zW2ldLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcGV0aXRvcnMgPSBmaW5kQ29tcGV0aXRvcihwcm9wcywgYW5pbWF0aW9uc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGV0aXRvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGNvbXBldGl0b3JzLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgcHJvcHMubGVuZ3RoOyBwKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBldGl0b3JzW25dLnN0b3AocHJvcHNbcF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uc1tpXS5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hbmltYXRpb25zLnB1c2goYW5pbWF0aW9uc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvbnNbaV0uZG9uZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMgPSBfYW5pbWF0aW9ucztcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZUFuaW1hdGlvblR5cGUxKHByb3BlcnR5LCB2YWx1ZSwgZHVyYXRpb24sIGVhc2luZykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHBhaXIgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICBwYWlyW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtb3JwaHNbcHJvcGVydHldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YWNrID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyaW5nOiBzdHlsZS5vcmRlcmluZyhwcm9wZXJ0eSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGg6IG1vcnBoc1twcm9wZXJ0eV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHVyYXRpb24gJiYgdHlwZW9mIGR1cmF0aW9uID09PSBcIm51bWJlclwiKSBjb25maWcuZHVyYXRpb24gPSBkdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWFzaW5nICYmIHR5cGVvZiBlYXNpbmcgPT09IFwic3RyaW5nXCIpIGNvbmZpZy5lYXNpbmcgPSBlYXNpbmc7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gaW5qZWN0KCckQW5pbWF0aW9uJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5jb25maWcodGhpcywgc3RhY2ssIGNvbmZpZywgQ2hlY2tBbmltYXRpb25RdWV1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVBbmltYXRpb25UeXBlMihwYWlycywgYXJnMiwgYXJnMykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gYXJnMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcyID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogYXJnMlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmczID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5lYXNpbmcgPSBhcmczXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZzIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogYXJnMlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHBhaXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYWlycy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbW9ycGhzW3Byb3BlcnR5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICdQcm9wZXJ0eSB7cHJvcGVydHl9IG9mIHt0eXBlfSBjYW4gbm90IGJlIGFuaW1hdGVkIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wZXJ0eV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcmluZzogc3R5bGUub3JkZXJpbmcocHJvcGVydHkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGg6IG1vcnBoc1twcm9wZXJ0eV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcGFpcnNbcHJvcGVydHldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1vcnBoX3N0YWNrID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaXRlbSBpbiByZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3JwaF9zdGFjay5wdXNoKHJlc3VsdFtpdGVtXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbW9ycGhfc3RhY2suc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhLm9yZGVyaW5nIC0gYi5vcmRlcmluZztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtb3JwaF9zdGFjay5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gaW5qZWN0KCckQW5pbWF0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmNvbmZpZyh0aGlzLCBtb3JwaF9zdGFjaywgY29uZmlnLCBDaGVja0FuaW1hdGlvblF1ZXVlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ05vIHByb3BlcnRpZXMgdG8gYW5pbWF0ZSEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcignYW5pbWF0ZScsIGZ1bmN0aW9uIChhcmcxLCBhcmcyLCBhcmczLCBhcmc0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdzdHJpbmcnICYmIGFyZzIpIHtcclxuICAgICAgICAgICAgICAgICAgICBDcmVhdGVBbmltYXRpb25UeXBlMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZzEgPT09IFwib2JqZWN0XCIgJiYgYXJnMS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBDcmVhdGVBbmltYXRpb25UeXBlMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2FybignVW5hYmxlIHRvIGNyZWF0ZSBhbmltYXRpb24uIFdyb25nIGFyZ3VtZW50cycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgQ2hlY2tBbmltYXRpb25RdWV1ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoJ2FuaW1hdGVkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGVkO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoJ3N0b3AnLCBmdW5jdGlvbiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnNbaV0uc3RvcChwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvNS8yMDE3LlxyXG4gKi9cclxuJFIucGx1Z2luKCdPYmplY3RzJyxcclxuICAgIFsnRGVidWcnLCAnQGluamVjdCcsXHJcbiAgICAgICAgZnVuY3Rpb24gQm94KERlYnVnLCBpbmplY3QpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBmID0gbnVsbCwgYm94ID0gaW5qZWN0KCckQm94Jyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmYgPSBmdW5jdGlvbiAoZnVuYykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoJ0JveCBFeHRlbnNpb24gLyBCb3ggZnVuY3Rpb24gaXMgbm90IGEgZnVuY3Rpb24hJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZiA9IGZ1bmM7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZjtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSB0aGlzLm9iamVjdCgpO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gQm94V3JhcHBlckZ1bmMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWYgfHwgIW9iamVjdCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgZi5jYWxsKG9iamVjdCwgYm94KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBib3g7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYm94ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5leHRlbnNpb24oJ0NhY2hlJykudmFsdWUoJ2JveCcsIEJveFdyYXBwZXJGdW5jKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wdXJnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5leHRlbnNpb24oJ0NhY2hlJykucHVyZ2UoJ2JveCcpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG9iamVjdC5wYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZXh0ZW5zaW9uKCdCb3gnKS5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcignYm94JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uKCdDYWNoZScpLnZhbHVlKCdib3gnLCBCb3hXcmFwcGVyRnVuYykuZ2V0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvNS8yMDE3LlxyXG4gKi9cclxuJFIucGx1Z2luKCdPYmplY3RzJyxcclxuICAgIFsnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIENhY2hlKERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0ge307XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdPYmplY3QgVmFsdWUgQ2FjaGUgLyBuYW1lIGlzIG5vdCBhIHN0cmluZyEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdPYmplY3QgVmFsdWUgQ2FjaGUgLyBmdW5jIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdmFsdWVzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW25hbWVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuYygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jOiBmdW5jLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxldmFudDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQobmFtZSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnB1cmdlID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdPYmplY3QgVmFsdWUgQ2FjaGUgLyBDYW4gbm90IHB1cmdlIGNhY2hlIG9mIG5vbiBzdHJpbmcgbmFtZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbbmFtZV0ucmVsZXZhbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdPYmplY3QgVmFsdWUgQ2FjaGUgLyBDYW4gbm90IGdldCB2YWx1ZSBvZiBub24tc3RyaW5nIG5hbWUnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW25hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZXNbbmFtZV0ucmVsZXZhbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW25hbWVdLnZhbHVlID0gdmFsdWVzW25hbWVdLmZ1bmMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW25hbWVdLnJlbGV2YW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXNbbmFtZV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNi8yMDE2LlxyXG4gKi9cclxuJFIucGx1Z2luKCdPYmplY3RzJyxcclxuICAgIFsnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIERyYXdlcihEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIGYgPSBudWxsLCBtYXRyaXggPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgY2IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBhZnRlcjogW11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvYmplY3QgPSB0aGlzLm9iamVjdCgpO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZShldmVudCwgYXJncykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYltldmVudF0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjYltldmVudF0uYXBwbHkob2JqZWN0LCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5mID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe30sICdPYmplY3REcmF3ZXIgLyBmdW5jIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmY7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZiA9IGZ1bmM7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5mO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcignYmVmb3JlJywgZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYi5iZWZvcmUucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ1VuYWJsZSB0byBzZXQgZXZlbnQgW2JlZm9yZSBSZW5kZXJdLiBmdW5jIGlzIG5vdCBhIEZ1bmN0aW9uJylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKCdhZnRlcicsIGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2IuYWZ0ZXIucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ1VuYWJsZSB0byBzZXQgZXZlbnQgW2FmdGVyIFJlbmRlcl0uIGZ1bmMgaXMgbm90IGEgRnVuY3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWF0cml4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdHJpeDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoJ2JlZm9yZScsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZikgZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgnYWZ0ZXInLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI2LzIwMTYuXHJcbiAqL1xyXG4kUi5wbHVnaW4oJ09iamVjdHMnLFxyXG4gICAgWydEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gTGF5ZXJzKERlYnVnKSB7XHJcbiAgICAgICAgICAgIHZhciBsYXllcnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgMDogW11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYXllciA9IDA7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKCdsYXllcicsIGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGxheWVyO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbCAhPT0gXCJudW1iZXJcIiB8fCB2YWwgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7bjogdmFsfSwgJ1ZhbHVlIHtufSBpcyBub3QgYSBudW1iZXIgb3IgbGVzcyB0aGFuIDAnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF9sYXllcl9leHQgPSBwYXJlbnQuZXh0ZW5zaW9uKCdMYXllcnMnKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXllciA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRfbGF5ZXJfZXh0LnBsYWNlKHZhbCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt9LCAnWW91IHRyeSB0byBzZXQgbGF5ZXIgb2Ygcm9vdCBncm91cCEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbGFjZSA9IGZ1bmN0aW9uICh2YWwsIG9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0LiQkTEFZRVJTRUFSQ0hWQUxVRSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbGF5ZXIgaW4gbGF5ZXJzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllcnMuaGFzT3duUHJvcGVydHkobGF5ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF5ZXJzW2xheWVyXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyc1tsYXllcl1baV0uJCRMQVlFUlNFQVJDSFZBTFVFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzW2xheWVyXS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIG9iamVjdC4kJExBWUVSU0VBUkNIVkFMVUU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFsYXllcnNbdmFsXSkgbGF5ZXJzW3ZhbF0gPSBbXTtcclxuICAgICAgICAgICAgICAgIGxheWVyc1t2YWxdLnB1c2gob2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBvYmplY3QuJCRMQVlFUlNFQVJDSFZBTFVFID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsYXllciBpbiBsYXllcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJzLmhhc093blByb3BlcnR5KGxheWVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9uZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxheWVyc1tsYXllcl0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbbGF5ZXJdW2ldLiQkTEFZRVJTRUFSQ0hWQUxVRSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyc1tsYXllcl0uc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvckVhY2ggPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbGF5ZXIgaW4gbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXllcnNbbGF5ZXJdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkobGF5ZXJzW2xheWVyXVtpXSwgW2ksIGxheWVyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sYXllcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGF5ZXJzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMi82LzIwMTcuXHJcbiAqL1xyXG4kUi5wbHVnaW4oJ09iamVjdHMnLFxyXG4gICAgWydEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gTWF0cml4KERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZiA9IG51bGwsIG9iamVjdCA9IHRoaXMub2JqZWN0KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmYgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gZnVuYztcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5mO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gTWF0cml4V3JhcHBlcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmLmNhbGwob2JqZWN0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcignbWF0cml4JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5zaW9uKCdDYWNoZScpLnZhbHVlKCd0cmFuc2Zvcm1NYXRyaXgnLCBNYXRyaXhXcmFwcGVyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnB1cmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0LmV4dGVuc2lvbignQ2FjaGUnKS5wdXJnZSgndHJhbnNmb3JtTWF0cml4Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LnR5cGUoKSA9PT0gJ0dyb3VwJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXllcnMgPSBvYmplY3QuZXh0ZW5zaW9uKCdMYXllcnMnKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uKCdDYWNoZScpLnB1cmdlKCd0cmFuc2Zvcm1NYXRyaXgnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDIvMi8yMDE3LlxyXG4gKi9cclxuJFIucGx1Z2luKCdPYmplY3RzJyxcclxuICAgIFsnK01vdXNlJywgJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBNb3VzZShNb3VzZUhlbHBlciwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdtb3ZlOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBkcmFnc3RhcnQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdlbmQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlbW92ZTogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2V1cDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWVudGVyOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBtb3VzZWxlYXZlOiBbXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRpc2FibGVkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBtb3VzZUNoZWNrRnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBHZXRFdmVudEFycmF5KGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzW2V2ZW50XTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlcignb24nLCBmdW5jdGlvbiAoZXZlbnQsIGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZnVuYyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldLiRPRkYgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiICYmIGZ1bmMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IEdldEV2ZW50QXJyYXkoZXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaV0uJE9GRiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBmdW5jID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBHZXRFdmVudEFycmF5KGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2U6IGV2ZW50fSwgJ1RoZXJlIGlzIG5vIGV2ZW50IFt7ZX1dJylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghR2V0RXZlbnRBcnJheShldmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtlOiBldmVudH0sICdVbmFibGUgdG8gc2V0IGV2ZW50IGhhbmRsZXIgZm9yIHtbZV19LiBObyBzdWNoIGV2ZW50IGZvdW5kIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2U6IGV2ZW50LCBmOiBmdW5jfSwgJ1VuYWJsZSB0byBzZXQgZXZlbnQgaGFuZGxlciBmb3Ige1tlXX0uIHtbZl19IGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlcignb2ZmJywgZnVuY3Rpb24gKGV2ZW50LCBmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT09IHVuZGVmaW5lZCAmJiBmdW5jID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbaV0uJCRPRkYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgPT09IFwic3RyaW5nXCIgJiYgZnVuYyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gR2V0RXZlbnRBcnJheShldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LiQkT0ZGID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBmdW5jID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBHZXRFdmVudEFycmF5KGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLiQkTU9VU0VGVU5DU0VBUkNIID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycmF5W2ldLiQkTU9VU0VGVU5DU0VBUkNIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFHZXRFdmVudEFycmF5KGV2ZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2U6IGV2ZW50fSwgJ1VuYWJsZSB0byB1c2V0IGV2ZW50IGhhbmRsZXIgZm9yIHtbZV19LiBubyBzdWNoIGV2ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2U6IGV2ZW50LCBmOiBmdW5jfSwgJ1VuYWJsZSB0byB1bnNldCBmdW5jdGlvbiB7W2ZdfSBmcm9tIGV2ZW50IHtbZV19LiBOb3QgYSBmdW5jdGlvbiEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoJ21vdXNlQ2hlY2tGdW5jdGlvbicsIGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTW91c2VIZWxwZXJbZnVuYyArICdDaGVja0Z1bmN0aW9uJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VDaGVja0Z1bmN0aW9uID0gTW91c2VIZWxwZXJbZnVuYyArICdVc2VyQ2hlY2tGdW5jdGlvbiddO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7ZjogZnVuY30sICdVbmFibGUgdG8gc2V0IGNoZWNrIGZ1bmN0aW9uISB7W2ZdfSBpcyBub3QgYSBmdW5jdGlvbiEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1vdXNlQ2hlY2tGdW5jdGlvbiA9IGZ1bmM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKCdkaXNhYmxlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcignZW5hYmxlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcignZGlzYWJsZWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlzYWJsZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jaGVjayA9IGZ1bmN0aW9uICh0YXJnZXQsIGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpc2FibGVkKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbW91c2VDaGVja0Z1bmN0aW9uLmNhbGwodGFyZ2V0LCBbY3Vyc29yWzBdLCBjdXJzb3JbMV1dKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJzb3JUcmFuc2Zvcm1GdW5jdGlvbiA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmN1cnNvclRyYW5zZm9ybUZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gXCJmdW5jdGlvblwiKSBjdXJzb3JUcmFuc2Zvcm1GdW5jdGlvbiA9IGZ1bmM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFwcGx5Q3Vyc29yVHJhbnNmb3JtID0gZnVuY3Rpb24gKGN1cnNvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnNvclRyYW5zZm9ybUZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnNvclRyYW5zZm9ybUZ1bmN0aW9uLmNhbGwodGhpcywgY3Vyc29yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJzb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhhc0V2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzW2V2ZW50XSAmJiBjYWxsYmFja3NbZXZlbnRdLmxlbmd0aCAmJiAhY2FsbGJhY2tzW2V2ZW50XS4kJE9GRjtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlID0gZnVuY3Rpb24gKHRhcmdldCwgZXZlbnRPYmopIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSB0YXJnZXQucGFyZW50KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlID0gcGFyZW50LmV4dGVuc2lvbignTW91c2UnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobW91c2UuaGFzRXZlbnQoZXZlbnRPYmoudHlwZSgpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGV2ZW50T2JqLnR5cGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ldmVudE9iaiA9IGV2ZW50T2JqLm9yaWdpbmFsVGFyZ2V0LmNhbGwoeyQkTU9VU0VQUk9QQUdBVElPTlNFVFRFUjogcGFyZW50fSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZS5yZXNvbHZlKHBhcmVudCwgdHlwZSwgX2V2ZW50T2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbiAodGFyZ2V0LCBldmVudCwgZXZlbnRPYmopIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXNhYmxlZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IEdldEV2ZW50QXJyYXkoZXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJheS4kT0ZGKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlbaV0uY2FsbCh0YXJnZXQsIGV2ZW50T2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudE9iai5wcm9wYWdhdGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BhZ2F0ZSh0YXJnZXQsIGV2ZW50T2JqKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtlOiBldmVudH0sICdVbmFibGUgdG8gcmVzb2x2ZSBldmVudCBbe2V9XS4gTm8gc3VjaCBldmVudCEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja3NbaV0uJCRPRkYgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvNS8yMDE3LlxyXG4gKi9cclxuJFIucGx1Z2luKCdPYmplY3RzJyxcclxuICAgIFsnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIE9mZnNldChEZWJ1Zykge1xyXG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gdGhpcy5vYmplY3QoKSxcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIGNhY2hlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE9iamVjdE9mZnNldEZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gc3R5bGUuZ2V0KCdwb3NpdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtwb3NpdGlvblswXSwgcG9zaXRpb25bMV1dO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBvYmplY3QucGFyZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfb2Zmc2V0ID0gcGFyZW50Lm9mZnNldCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbMF0gKz0gcGFyZW50X29mZnNldFswXTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbMV0gKz0gcGFyZW50X29mZnNldFsxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnB1cmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdHlsZSB8fCAhY2FjaGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IG9iamVjdC5leHRlbnNpb24oJ1N0eWxlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSBvYmplY3QuZXh0ZW5zaW9uKCdDYWNoZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNhY2hlLnB1cmdlKCdvZmZzZXQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LnR5cGUoKSA9PSAnR3JvdXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxheWVycyA9IG9iamVjdC5leHRlbnNpb24oJ0xheWVycycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leHRlbnNpb24oJ09mZnNldCcpLnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKCdvZmZzZXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmV4dGVuc2lvbignU3R5bGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHRoaXMuZXh0ZW5zaW9uKCdDYWNoZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlLnZhbHVlKCdvZmZzZXQnLCBPYmplY3RPZmZzZXRGdW5jdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjUvMjAxNi5cclxuICovXHJcbiRSLnBsdWdpbignT2JqZWN0cycsXHJcbiAgICBbJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBTdHlsZShEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fSxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrcyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgc2V0dGVycyA9IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0dGVycyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0U2V0dGVyRnVuY3Rpb24obmFtZSwgc2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHNldHRlci5hcHBseSh0aGlzLCBbdmFsdWUsIHByb3BlcnRpZXNbbmFtZV0udmFsdWVdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkID0gcHJvcGVydGllc1tuYW1lXS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdCA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2FybignVW5hYmxlIHRvIHNldCBwcm9wZXJ0eSBbJyArIG5hbWUgKyAnXS4gSW52YWxpZCB2YWx1ZSEnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW29sZCwgcmVzdWx0XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXNbbmFtZV0udmFsdWUgPSByZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrc1tuYW1lXSkgY2FsbGJhY2tzW25hbWVdID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrc1tuYW1lXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW25hbWVdW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0R2V0dGVyRnVuY3Rpb24obmFtZSwgZ2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXR0ZXIuY2FsbChudWxsLCBwcm9wZXJ0aWVzW25hbWVdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gU3R5bGVUeXBlMShhLCBiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFzZXR0ZXJzW2FdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0YXJnZXQudHlwZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJ1N0eWxlIC8gT2JqZWN0IHR5cGUge3R5cGV9IGhhcyBubyBwcm9wZXJ0eSB7cHJvcGVydHl9Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXR0ZXJzW2FdLmFwcGx5KHRhcmdldCwgW2JdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gU3R5bGVUeXBlMihvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzZXR0ZXJzdGFjayA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIG9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0Lmhhc093blByb3BlcnR5KHByb3BlcnR5KSB8fCAhc2V0dGVyc1twcm9wZXJ0eV0pIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNldHRlcnNbcHJvcGVydHldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdGFyZ2V0LnR5cGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAnU3R5bGUgLyBPYmplY3QgdHlwZSB7dHlwZX0gaGFzIG5vIHByb3BlcnR5IHtwcm9wZXJ0eX0nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0ZXJzdGFjay5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyaW5nOiBwcm9wZXJ0aWVzW3Byb3BlcnR5XS5vcmRlcmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBwcm9wZXJ0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRlcjogc2V0dGVyc1twcm9wZXJ0eV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRlcnN0YWNrLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRlcnN0YWNrLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEub3JkZXJpbmcgLSBiLm9yZGVyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0dGVyc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGVyc3RhY2tbaV0uc2V0dGVyLmFwcGx5KHRhcmdldCwgW29iamVjdFtzZXR0ZXJzdGFja1tpXS5wcm9wZXJ0eV1dKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdTdHlsZSAvIE5vIHByb3BlcnRpZXMgdG8gYmUgYXBwbGllZCEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gU3R5bGVUeXBlMyhuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWdldHRlcnNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0YXJnZXQudHlwZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgJ1N0eWxlIC8gT2JqZWN0IHR5cGUge3R5cGV9IGhhcyBubyBwcm9wZXJ0eSB7cHJvcGVydHl9Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0dGVyc1tuYW1lXS5hcHBseSh0YXJnZXQsIFtwcm9wZXJ0aWVzW25hbWVdLnZhbHVlXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKCdzdHlsZScsIGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwic3RyaW5nXCIgJiYgYiAhPT0gdW5kZWZpbmVkKSBTdHlsZVR5cGUxLmFwcGx5KHRoaXMsIFthLCBiXSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYSA9PT0gXCJvYmplY3RcIikgU3R5bGVUeXBlMi5hcHBseSh0aGlzLCBbYV0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnICYmIGIgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFN0eWxlVHlwZTMuYXBwbHkodGhpcywgW2FdKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdTdHlsZSAvIEludmFsaWQgc3R5bGUgZnVuY3Rpb24gYXJndW1lbnRzIScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlcignd2F0Y2gnLCBmdW5jdGlvbiAocHJvcGVydHksIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgIT09IFwib2JqZWN0XCIgfHwgcHJvcGVydHkuY29uc3RydWN0b3IgIT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdTdHlsZSAvIFByb3BlcnR5IGlzIG5vdCBhbiBhcnJheSBvciBzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoJ1N0eWxlIC8gQ2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb24hJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5W2ldICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcih7aTogaX0sICdTdHlsZSAvIFByb3BlcnR5IHtpfSBpcyBub3QgYSBzdHJpbmchJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2tzW3Byb3BlcnR5W2ldXSB8fCB0eXBlb2YgY2FsbGJhY2tzW3Byb3BlcnR5W2ldXSAhPT0gXCJvYmplY3RcIiB8fCBjYWxsYmFja3NbcHJvcGVydHlbaV1dLmNvbnN0cnVjdG9yICE9PSBBcnJheSkgY2FsbGJhY2tzW3Byb3BlcnR5W2ldXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1twcm9wZXJ0eVtpXV0ucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcHJvcGVydHkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrc1twcm9wZXJ0eV0gfHwgY2FsbGJhY2tzW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIGNhbGxiYWNrc1twcm9wZXJ0eV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbcHJvcGVydHldLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoJ1N0eWxlIC8gUHJvcGVydHkgaXMgbm90IGFuIGFycmF5IG9yIHN0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRlZmluZSA9IGZ1bmN0aW9uIChvcmRlcmluZywgbmFtZSwgdmFsdWUsIHNldHRlciwgZ2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtuYW1lOiBuYW1lfSwgJ1N0eWxlIC8gRHVwbGljYXRlZCBQcm9wZXJ0eSBbe25hbWV9XScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcignU3R5bGUgLyBQcm9wZXJ0eSBuYW1lIGlzIG5vdCBhIHN0cmluZyEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBnZXR0ZXIgIT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2Ygc2V0dGVyICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcignU3R5bGUgLyBVbmFibGUgdG8gZGVmaW5lIHByb3BlcnR5LiBHZXR0ZXIgb3Igc2V0dGVyIGlzIHVuZGVmaW5lZCEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAgb3JkZXJpbmcgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcignU3R5bGUgLyBVbmFibGUgdG8gZGVmaW5lIHByb3BlcnR5IHNldHRlciBvcmRlcmluZyEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW25hbWVdID0ge29yZGVyaW5nOiBvcmRlcmluZywgdmFsdWU6IHZhbHVlfTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXR0ZXJzW25hbWVdID0gR2V0U2V0dGVyRnVuY3Rpb24obmFtZSwgc2V0dGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBnZXR0ZXJzW25hbWVdID0gR2V0R2V0dGVyRnVuY3Rpb24obmFtZSwgZ2V0dGVyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW25hbWVdKSByZXR1cm4gcHJvcGVydGllc1tuYW1lXS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdHZXR0aW5nIHZhbHVlIG9mIHByb3BlcnR5IHRoYXQgZG9lcyBub3QgZXhpc3QhJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vcmRlcmluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1tuYW1lXSkgcmV0dXJuIHByb3BlcnRpZXNbbmFtZV0ub3JkZXJpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgRGVidWcud2FybignR2V0dGluZyBvcmRlcmluZyBvZiBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IGV4aXN0IScpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDMvMjUvMjAxNy5cclxuICovXHJcbiRSLnBsdWdpbignT2JqZWN0cycsXHJcbiAgICBbJ0RlYnVnJywgJytNb2RlbCcsICdAaW5qZWN0JyxcclxuICAgICAgICBmdW5jdGlvbiBUZXh0KERlYnVnLCBNb2RlbEhlbHBlciwgaW5qZWN0LCBGb250cykge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHBseVRvKCdUZXh0Jyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gdGhpcy5vYmplY3QoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvYmplY3QudHlwZSgpICE9PSAnVGV4dCcpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgd29yZEJ5V29yZFJlZ0V4cCA9IC8oKFxcUytcXHMrKXwoXFxTKyQpKS9nLFxyXG4gICAgICAgICAgICAgICAgc3R5bGUgPSBvYmplY3QuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgc3RyaW5nID0gJycsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGUgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGxpbWl0cyA9IFtJbmZpbml0eSwgSW5maW5pdHldLFxyXG4gICAgICAgICAgICAgICAgd2lkdGggPSAwLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoJ2xpbmVzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2gobGluZXNbaV0uc3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoJ3dvcmRzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCBsaW5lcy5sZW5ndGg7IGwrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdyA9IGxpbmVzW2ldLndvcmRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdyA9IDA7IHcgPCBfdy5sZW5ndGg7IHcrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKF93LnN0cmluZygpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd29yZHM7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5saW1pdHMgPSBmdW5jdGlvbiAodywgaCkge1xyXG4gICAgICAgICAgICAgICAgbGltaXRzWzBdID0gdztcclxuICAgICAgICAgICAgICAgIGxpbWl0c1sxXSA9IGg7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgb2JqZWN0LndhdGNoKCdzdHInLCBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gIT09IHN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyA9IG47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgb2JqZWN0LndhdGNoKFsnc3RyJywgJ2ZvbnRTaXplJywgJ2xpbmVIZWlnaHQnLCAnY29sb3InLCAnd2VpZ2h0JywgJ3N0eWxlJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoZm9yY2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlIHx8IGZvcmNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwaWVjZXMgPSBzdHJpbmcubWF0Y2god29yZEJ5V29yZFJlZ0V4cCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aCA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMgPSBzdHlsZS5nZXQoJ3NpemUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdyA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSAwO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvbnQgPSBzdHlsZS5nZXQoJ3N5c3RlbUZvbnQnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemUgPSBzdHlsZS5nZXQoJ2ZvbnRTaXplJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQgPSBzdHlsZS5nZXQoJ2xpbmVIZWlnaHQnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodCA9IHN0eWxlLmdldCgnd2VpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gc3R5bGUuZ2V0KCdjb2xvcicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U3R5bGUgPSBzdHlsZS5nZXQoJ3N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzID0gW107XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBpZWNlcy5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJuZXdsaW5lID0gcGllY2VzW2ldLm1hdGNoKC9cXG4vZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBwaWVjZXNbaV0ubWF0Y2goL1xcUysvZyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkID0gaW5qZWN0KCckVGV4dFdvcmRDbGFzcycpLnN0cmluZyhzdHJbMF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaW5lc1tsXSkgbGluZXNbbF0gPSBpbmplY3QoJyRUZXh0TGluZUNsYXNzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb250KGZvbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2l6ZShmb250U2l6ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oZWlnaHQobGluZUhlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb2xvcihjb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZShmb250U3R5bGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2VpZ2h0KGZvbnRXZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZXNbbF0ucHVzaCh3b3JkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoID0gbGluZXNbbF0ud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lV2lkdGggPj0gbGltaXRzWzBdIHx8IHVzZXJuZXdsaW5lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCA+IHcpIHcgPSBsaW5lV2lkdGggKyA0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBsaW5lcy5sZW5ndGggKiBzdHlsZS5nZXQoJ2xpbmVIZWlnaHQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9udFNpemUgPiBsaW5lSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCArPSBmb250U2l6ZSAtIGxpbmVIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZvbnRTaXplIDwgbGluZUhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgLT0gbGluZUhlaWdodCAtIGZvbnRTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHc7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGV4dEJsb2NrSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRleHRCbG9ja1dpZHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3aWR0aDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaExpbmUgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KGxpbmVzW2ldLCBbaSwgbGluZXNbaV1dKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNi8yMDE2LlxyXG4gKi9cclxuJFIucGx1Z2luKCdPYmplY3RzJywgWydEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gVHJlZShEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhcmVudCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1RyZWUob2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LiQkVFJFRVNFQVJDSFZBTFVFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqZWN0LnBhcmVudCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja1RyZWUob2JqZWN0LnBhcmVudCgpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRyZWVWaW9sYXRpb24odGFyZ2V0LCBvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQudHlwZSgpID09PSAnR3JvdXAnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC4kJFRSRUVTRUFSQ0hWQUxVRSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tUcmVlKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9iamVjdC4kJFRSRUVTRUFSQ0hWQUxVRTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC4kJFRSRUVTRUFSQ0hWQUxVRSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5wYXJlbnQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe30sICdZb3UgdHJ5IHRvIGFwcGVuZCBncm91cCBwYXJlbnQgaW50byBpdHNlbGYuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt9LCAnWW91IHRyeSB0byBhcHBlbmQgZ3JvdXAgcGFyZW50IGludG8gaXRcXCdzIGNoaWxkcmVuLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3QuJCRUUkVFU0VBUkNIVkFMVUU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQudHlwZSgpICE9PSAnR3JvdXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQudHlwZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBvYmplY3QudHlwZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICdZb3kgdHJ5IHRvIGFwcGVuZCBbe29iamVjdH1dIGludG8gW3t0YXJnZXR9XS4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbGF5ZXJzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoJ2FwcGVuZCcsIGZ1bmN0aW9uIChvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUoKSAhPT0gJ0dyb3VwJykge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhdGNoKHt0eXBlOiB0aGlzLnR5cGUoKX0sICcgQ2FuIG5vdCBhcHBlbmQuIHR5cGVbe3R5cGV9XSBvZiBwYXJlbnQgaXMgbm90IGFsbG93ZWQhJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdHJlZVZpb2xhdGlvbih0aGlzLCBvYmplY3QpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbGF5ZXJzKSBsYXllcnMgPSB0aGlzLmV4dGVuc2lvbignTGF5ZXJzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmplY3Rfb2xkX3BhcmVudCA9IG9iamVjdC5wYXJlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0X3RyZWVfZXh0ID0gb2JqZWN0LmV4dGVuc2lvbignVHJlZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqZWN0X29sZF9wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZF9vYmplY3RfcGFyZW50X2xheWVycyA9IG9iamVjdF9vbGRfcGFyZW50LmV4dGVuc2lvbignTGF5ZXJzJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RfbGF5ZXIgPSBvYmplY3QubGF5ZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZF9vYmplY3RfcGFyZW50X2xheWVycy5yZW1vdmUob2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVycy5wbGFjZShvYmplY3RfbGF5ZXIsIG9iamVjdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RfdHJlZV9leHQucGFyZW50KHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0X2xheWVyID0gb2JqZWN0LmxheWVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcnMucGxhY2Uob2JqZWN0X2xheWVyLCBvYmplY3QpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0X3RyZWVfZXh0LnBhcmVudCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib3ggPSB0aGlzLmV4dGVuc2lvbignQm94Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYm94LnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKCdhcHBlbmRUbycsIGZ1bmN0aW9uIChvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5hcHBlbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKCdwYXJlbnQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IGZ1bmN0aW9uIChncm91cCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFncm91cC50eXBlIHx8IGdyb3VwLnR5cGUoKSAhPT0gJ0dyb3VwJykge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdPYmplY3QgVHJlZSBFeHRlbnNpb24gLyBVbmFibGUgdG8gc2V0IG9iamVjdCBhcyBwYXJlbnQuIE5vdCBhIGdyb3VwIScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gZ3JvdXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI1LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlKFxyXG4gICAgWydAQ2FudmFzJywgJ0BDb25maWcnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIENhbnZhcyhDYW52YXMsIENvbmZpZywgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSBbXSwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBkaW1tcyA9IFswLCAwXSwgeHVuaXRzID0gJ3B4JywgeXVuaXRzID0gJ3B4JyxcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IFswLCAwXSwgc2Nyb2xsID0gWzAsIDBdLCBvdXRwdXQgPSBDYW52YXMuZWxlbWVudCgpLCBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIENvbmZpZy5kZWZpbmUoXHJcbiAgICAgICAgICAgICAgICAnc2l6ZScsXHJcbiAgICAgICAgICAgICAgICBbMCwgMF0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNBcnJheTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b206IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIHZbMF0gPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZbMF0gPT09IEFycmF5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgdlswXSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdlsxXSA9PT0gXCJudW1iZXJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC53YXRjaChcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZbMF0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gdlswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdlswXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZbMF0ubWF0Y2goL15bXFxkXSslJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBwYXJzZUludCh2WzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4dW5pdHMgPSAnJSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDEwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeHVuaXRzID0gJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt3aWR0aDogdlswXX0sICd7d2lkdGh9IGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBjYW52YXMuc2l6ZVswXS4gV2lkdGggc2V0IGFzIDEwMDBweCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7d2lkdGg6IHZbMF19LCAne3dpZHRofSBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3IgY2FudmFzLnNpemVbMF0uIFdpZHRoIHNldCBhcyAxMDAwcHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2WzFdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB2WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2WzFdID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodlsxXS5tYXRjaCgvXltcXGRdKyUkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBwYXJzZUludCh2WzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5dW5pdHMgPSAnJSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSA4MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7aGVpZ2h0OiB2WzFdfSwgJ3toZWlnaHR9IGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBjYW52YXMuc2l6ZVsxXS4gV2lkdGggc2V0IGFzIDgwMHB4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSA4MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtoZWlnaHQ6IHZbMV19LCAne2hlaWdodH0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIGNhbnZhcy5zaXplWzFdLiBXaWR0aCBzZXQgYXMgODAwcHgnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBXaW5kb3dSZXNpemVDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcFcgPSAwLCBwSCA9IDAsIHJlc2l6ZVRPID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBhcmVPblJlc2l6ZShzdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeHVuaXRzID09PSAnJScgfHwgeXVuaXRzID09PSAnJScpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3BXID0gcFcsIF9wSCA9IHBIO1xyXG4gICAgICAgICAgICAgICAgICAgIENhbnZhcy5zaXplKDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNpemVUTykgY2xlYXJUaW1lb3V0KHJlc2l6ZVRPKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzaXplVE8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBDYW52YXMuZWxlbWVudCgpLnBhcmVudE5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnROb2RlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBIID0gcGFyc2VJbnQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcFcgPSBwYXJzZUludChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BXICE9PSBwVykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHh1bml0cyA9PT0gJyUnICYmIF9wVyAhPT0gcFcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaW1tc1swXSA9IE1hdGguZmxvb3IocFcgKiAod2lkdGggLyAxMDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BIICE9PSBwSCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHl1bml0cyA9PT0gJyUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGltbXNbMV0gPSBNYXRoLmZsb29yKHBIICogKGhlaWdodCAvIDEwMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENhbnZhcy5zaXplKGRpbW1zWzBdLCBkaW1tc1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6ZVRPID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDIwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkaW1tc1swXSA9IHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpbW1zWzFdID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIENhbnZhcy5zaXplKGRpbW1zWzBdLCBkaW1tc1sxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0Q2FudmFzT2Zmc2V0KHgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRQcm9wID0geCA/ICdvZmZzZXRMZWZ0JyA6ICdvZmZzZXRUb3AnO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAwLCBlbGVtZW50ID0gQ2FudmFzLmVsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihlbGVtZW50W29mZnNldFByb3BdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gZWxlbWVudFtvZmZzZXRQcm9wXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFdpbmRvd1Jlc2l6ZUNhbGxiYWNrKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvdXRwdXQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbXBhcmVPblJlc2l6ZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WzBdID0gR2V0Q2FudmFzT2Zmc2V0KDApO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFsxXSA9IEdldENhbnZhc09mZnNldCgxKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbaV0oZGltbXNbMF0sIGRpbW1zWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgUmVzb2x2ZUNhbnZhc0V2ZW50QXJyYXkoJ2NhbnZhc3Jlc2l6ZScsIFtuZXcgUkNhbnZhc1Jlc2l6ZUV2ZW50KCldKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gQ2FudmFzU3dpdGNoQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXRbMF0gPSBHZXRDYW52YXNPZmZzZXQoMCk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXRbMV0gPSBHZXRDYW52YXNPZmZzZXQoMSk7XHJcbiAgICAgICAgICAgICAgICBSZXNvbHZlQ2FudmFzRXZlbnRBcnJheSgnY2FudmFzc3dpdGNoJywgW25ldyBSQ2FudmFzU3dpdGNoRXZlbnQoKV0pO1xyXG4gICAgICAgICAgICAgICAgV2luZG93UmVzaXplQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZXNpemUgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGZ1bmMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4dW5pdHMgPT09ICclJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwVyAqICh3aWR0aCAvIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeHVuaXRzID09PSAnJScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcEggKiAoaGVpZ2h0IC8gMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgY2FudmFzRXZlbnRDYWxsYmFja3MgPSB7XHJcbiAgICAgICAgICAgICAgICBtb3VzZW1vdmU6IFtdLFxyXG4gICAgICAgICAgICAgICAgbW91c2Vkb3duOiBbXSxcclxuICAgICAgICAgICAgICAgIG1vdXNldXA6IFtdLFxyXG4gICAgICAgICAgICAgICAgbW91c2VsZWF2ZTogW10sXHJcbiAgICAgICAgICAgICAgICBtb3VzZWVudGVyOiBbXSxcclxuICAgICAgICAgICAgICAgIGNhbnZhc3Jlc2l6ZTogW10sXHJcbiAgICAgICAgICAgICAgICBjYW52YXNzd2l0Y2g6IFtdXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBHZXRDYW52YXNFdmVudEFycmF5KGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzRXZlbnRDYWxsYmFja3NbZXZlbnRdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBSZXNvbHZlQ2FudmFzRXZlbnRBcnJheShldmVudCwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm9iamVjdFwiIHx8IGRhdGEuY29uc3RydWN0b3IgIT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7ZTogZXZlbnR9LCAnQ2FudmFzIDogdW5hYmxlIHRvIHJlc29sdmUgZXZlbnQgYXJyYXkgW3tlfV0uIERhdGEgaXMgbm90IGFuIGFycmF5IScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBHZXRDYW52YXNFdmVudEFycmF5KGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7ZTogZXZlbnR9LCAnVW5hYmxlIHRvIHJlc29sdmUgZXZlbnQgW3tlfV0gbm8gc3VjaCBldmVudCEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaV0uYXBwbHkoc2VsZiwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMub24gPSBmdW5jdGlvbiAoZXZlbnQsIGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IEdldENhbnZhc0V2ZW50QXJyYXkoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2U6IGV2ZW50fSwgJ0NhbnZhcyA6IFVuYWJsZSB0byBzZXQgZXZlbnQgaGFuZGxlciBmb3IgZXZlbnQgW3tlfV0nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2Y6IGV2ZW50fSwgJ0NhbnZhcyA6IFVuYWJsZSB0byBzZXQgZXZlbnQgaGFuZGxlciBbe2Z9XScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIEdldE1vdXNlUmVsYXRpdmVQb3NpdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2UucGFnZVggLSBvZmZzZXRbMF0gLSBzY3JvbGxbMF0sIGUucGFnZVkgLSBvZmZzZXRbMV0gLSBzY3JvbGxbMV1dO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBSQ2FudmFzTW91c2UoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlID0gW2UucGFnZVgsIGUucGFnZVldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2VlbiA9IFtlLnBhZ2VYIC0gc2Nyb2xsWzBdLCBlLnBhZ2VZIC0gc2Nyb2xsWzFdXTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBHZXRNb3VzZVJlbGF0aXZlUG9zaXRpb24oZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFJDYW52YXNNb3VzZUV2ZW50KGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWwgPSBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gZS50eXBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3VzZSA9IG5ldyBSQ2FudmFzTW91c2UoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcyA9IHNlbGY7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFJDYW52YXNSZXNpemVFdmVudCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9ICdjYW52YXNyZXNpemUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMgPSBzZWxmO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSBbb2Zmc2V0WzBdLCBvZmZzZXRbMV1dO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaXplID0gW3dpZHRoLCBoZWlnaHRdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbCA9IFt3aWR0aCwgaGVpZ2h0XTtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5pdHMgPSBbeHVuaXRzLCB5dW5pdHNdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHh1bml0cyA9PT0gJyUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplWzBdID0gcFcgKiAod2lkdGggLyAxMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHl1bml0cyA9PT0gJyUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplWzFdID0gcEggKiAoaGVpZ2h0IC8gMTAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gUkNhbnZhc1N3aXRjaEV2ZW50KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gJ2NhbnZhc3N3aXRjaCc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcyA9IHNlbGY7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IFtvZmZzZXRbMF0sIG9mZnNldFsxXV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSBbd2lkdGgsIGhlaWdodF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsID0gW3dpZHRoLCBoZWlnaHRdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bml0cyA9IFt4dW5pdHMsIHl1bml0c107XHJcbiAgICAgICAgICAgICAgICBpZiAoeHVuaXRzID09PSAnJScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemVbMF0gPSBwVyAqICh3aWR0aCAvIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoeXVuaXRzID09PSAnJScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemVbMV0gPSBwSCAqIChoZWlnaHQgLyAxMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0ge1xyXG4gICAgICAgICAgICAgICAgbW91c2Vtb3ZlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFJlc29sdmVDYW52YXNFdmVudEFycmF5KCdtb3VzZW1vdmUnLCBbbmV3IFJDYW52YXNNb3VzZUV2ZW50KGUpXSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbW91c2Vkb3duOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFJlc29sdmVDYW52YXNFdmVudEFycmF5KCdtb3VzZWRvd24nLCBbbmV3IFJDYW52YXNNb3VzZUV2ZW50KGUpXSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbW91c2V1cDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBSZXNvbHZlQ2FudmFzRXZlbnRBcnJheSgnbW91c2V1cCcsIFtuZXcgUkNhbnZhc01vdXNlRXZlbnQoZSldKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFJlc29sdmVDYW52YXNFdmVudEFycmF5KCdtb3VzZWxlYXZlJywgW25ldyBSQ2FudmFzTW91c2VFdmVudChlKV0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVzb2x2ZUNhbnZhc0V2ZW50QXJyYXkoJ21vdXNlZW50ZXInLCBbbmV3IFJDYW52YXNNb3VzZUV2ZW50KGUpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBDYW52YXMuc3dpdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBldmVudCBpbiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbZXZlbnRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSB0aGlzLmVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGV2ZW50IGluIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcnNbZXZlbnRdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBDYW52YXNTd2l0Y2hDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsWzFdID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsWzBdID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIFdpbmRvd1Jlc2l6ZUNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNS8yMDE2LlxyXG4gKi9cclxuJFIuc2VydmljZShcclxuICAgIFsnQENvbmZpZycsXHJcbiAgICAgICAgZnVuY3Rpb24gRGVidWcoY29uZmlnKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gJyRSIFtEZWJ1Z10gOiAnLFxyXG4gICAgICAgICAgICAgICAgcmVnZXhwID0gL3tbYS16QS1aXSt9L2csXHJcbiAgICAgICAgICAgICAgICByZWdleHBuYW1lID0gL1thLXpBLVpdKy9nLFxyXG4gICAgICAgICAgICAgICAgd2FybmluZ3MgPSBjb25maWcuZGVmaW5lKCd3YXJuaW5ncycsIGZhbHNlLCB7aXNCb29sOiB0cnVlfSwgZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncyA9IHY7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgZXJyb3JDYiA9IFtdLCBtZXNzYWdlQ2IgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFJlc29sdmVFdmVudCh0eXBlLCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZXJyb3InKSBhcnJheSA9IGVycm9yQ2I7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ21lc3NhZ2UnKSBhcnJheSA9IG1lc3NhZ2VDYjtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaV0oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMub24gPSBmdW5jdGlvbiAoZXZlbnQsIGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdlcnJvcicpIGVycm9yQ2IucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudCA9PT0gJ21lc3NhZ2UnKSBtZXNzYWdlQ2IucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBHZXRNZXNzYWdlKGRhdGEsIG1lc3NhZ2UsIHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG1lc3NhZ2UubWF0Y2gocmVnZXhwKTtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaG5hbWUgPSBtYXRjaGVzW2ldLm1hdGNoKHJlZ2V4cG5hbWUpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2huYW1lKSBwcm9wc1ttYXRjaG5hbWVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogbWF0Y2hlc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFbbWF0Y2huYW1lXS50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKHByb3BzW3Byb3BdLnJlcGxhY2UsIHByb3BzW3Byb3BdLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBzdHJpbmcgKyBtZXNzYWdlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHNvdXJjZSAmJiBzb3VyY2UuY29uc3RydWN0b3IgJiYgc291cmNlLmNvbnN0cnVjdG9yLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ1snK3NvdXJjZS5jb25zdHJ1Y3Rvci5uYW1lKyddIDogJyArIG1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uIChkYXRhLCBtZXNzYWdlLCBzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBHZXRNZXNzYWdlKGRhdGEsIG1lc3NhZ2UsIHNvdXJjZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgUmVzb2x2ZUV2ZW50KCdlcnJvcicsIG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2FybiA9IGZ1bmN0aW9uIChkYXRhLCBtZXNzYWdlLCBzb3VyY2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXdhcm5pbmdzKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlID0gbWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gR2V0TWVzc2FnZShkYXRhLCBtZXNzYWdlLCBzb3VyY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIFJlc29sdmVFdmVudCgnbWVzc2FnZScsIG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiA1LzExLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlKFxyXG4gICAgWydAYXBwJywgJ0BDYW52YXMnLCAnQGluamVjdCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gS2V5Ym9hcmQoYXBwLCBjYW52YXMsIGluamVjdCwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSB7fSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlZCA9IHRydWUsXHJcbiAgICAgICAgICAgICAgICBmb2N1c2VkID0gdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHF1ZXVlID0gW107XHJcblxyXG4gICAgICAgICAgICB0aGlzLmtleWRvd24gPSBmdW5jdGlvbiAoY29kZSwgZnVuYykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oY29kZSwgJ2tleWRvd24nLCBmdW5jKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMua2V5dXAgPSBmdW5jdGlvbiAoY29kZSwgZnVuYykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oY29kZSwgJ2tleXVwJywgZnVuYyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24gPSBmdW5jdGlvbiAoY29kZSwgZXZlbnQsIGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZXZlbnQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT09ICdrZXl1cCcgfHwgZXZlbnQgPT09ICdrZXlkb3duJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFja3NbY29kZV0pIGNhbGxiYWNrc1tjb2RlXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWxsYmFja3NbZXZlbnRdKSBjYWxsYmFja3NbY29kZV1bZXZlbnRdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbY29kZV1bZXZlbnRdLnB1c2goZnVuYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdFdmVudCBjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtlOiBldmVudH0sICdObyBzdWNoIHR5cGUgb2YgZXZlbnQgYXMgW3tlfV0nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtjOiBjb2RlfSwgJ1dyb25nIGtleSBjb2RlIFt7Y31dJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE9uQXBwVGljaygpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVtpXSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcXVldWUgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UXVldWVGdW5jKGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleWNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1trZXljb2RlXSAmJiBjYWxsYmFja3Nba2V5Y29kZV1bZS50eXBlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrc1trZXljb2RlXVtlLnR5cGVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBpbmplY3QoJyRLZXlib2FyZEV2ZW50JykuYnVpbGQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Nba2V5Y29kZV1bZS50eXBlXVtpXS5hcHBseShldmVudCwgW2tleWNvZGUsIGUudHlwZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgY2FudmFzQ2xpY2tlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgY2FudmFzLmVsZW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNDbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbnZhc0NsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbnZhc0NsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFjdGl2ZSB8fCAhZW5hYmxlZCB8fCAhZm9jdXNlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcXVldWUucHVzaChnZXRRdWV1ZUZ1bmMoZSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYWN0aXZlIHx8ICFlbmFibGVkIHx8ICFmb2N1c2VkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKGdldFF1ZXVlRnVuYyhlKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYXBwLiRvbignc3RhcnQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYXBwLiRvbignc3RvcCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYXBwLiQoJ3RpY2snLCBPbkFwcFRpY2spO1xyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gNS8xMS8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnS2V5Ym9hcmQnLFxyXG4gICAgW1xyXG4gICAgICAgIGZ1bmN0aW9uIEtleWJvYXJkRXZlbnQoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIga2V5Y29kZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjdHJsUHJlc3NlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYWx0UHJlc3NlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2hpZnRQcmVzc2VkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBldmVudCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGtleWNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgICAgICBjdHJsUHJlc3NlZCA9IGUuY3RybEtleTtcclxuICAgICAgICAgICAgICAgIGFsdFByZXNzZWQgPSBlLmFsdEtleTtcclxuICAgICAgICAgICAgICAgIHNoaWZ0UHJlc3NlZCA9IGUuc2hpZnRLZXk7XHJcbiAgICAgICAgICAgICAgICBldmVudCA9IGU7XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gZS50eXBlO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYnVpbGQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZSA9PT0gc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSAgcmV0dXJuIHR5cGU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5Y29kZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hpZnRQcmVzc2VkO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmFsdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhbHRQcmVzc2VkO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmN0cmwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3RybFByZXNzZWQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAyLzIvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UoXHJcbiAgICBbJ0BDYW52YXMnLCAnQ2FudmFzJywgJ0BUaWNrZXInLCAnJEZpbmRlcicsXHJcbiAgICAgICAgZnVuY3Rpb24gRGlzcGF0Y2hlcihDYW52YXNSb290LCBDYW52YXMsIFRpY2tlciwgRmluZGVyKSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogbnVsbFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG1vdXNlZG93biA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjdXJzb3IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkOiBbMCwgMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDogWzAsIDBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZHJhZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogWzAsIDBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IFswLCAwXSxcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YTogWzAsIDBdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2hlY2tlZCA9IHRydWUsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRyYWdnZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIENhbnZhcy5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUgfHwgIWZvY3VzZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIG1vdXNlZG93bi5wcmV2aW91cyA9IG1vdXNlZG93bi5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgbW91c2Vkb3duLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgQ2FudmFzLm9uKCdtb3VzZXVwJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmUgfHwgIWZvY3VzZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIG1vdXNlZG93bi5wcmV2aW91cyA9IG1vdXNlZG93bi5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgbW91c2Vkb3duLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIENhbnZhcy5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYWN0aXZlIHx8ICFmb2N1c2VkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjdXJzb3IuY3VycmVudFswXSA9IGUubW91c2UucG9zaXRpb25bMF07XHJcbiAgICAgICAgICAgICAgICBjdXJzb3IuY3VycmVudFsxXSA9IGUubW91c2UucG9zaXRpb25bMV07XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgQ2FudmFzLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIENhbnZhcy5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGZvY3VzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIERlZmF1bHRSRXZlbnQodHlwZSwgdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3R5cGUgPSB0eXBlLCBwcm9wYWdhdGUgPSB0cnVlLCBfdGFyZ2V0ID0gdGFyZ2V0LCBfb3JpZ2luYWxUYXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90eXBlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BhZ2F0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wYWdhdGU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90YXJnZXQuJCRQUk9QQUdBVElPTlNFQVJDSCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IF9vcmlnaW5hbFRhcmdldC4kJFBST1BBR0FUSU9OU0VBUkNIO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGFyZ2V0LiQkUFJPUEFHQVRJT05TRUFSQ0g7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA/IHJlc3VsdCA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuJCRNT1VTRVBST1BBR0FUSU9OU0VUVEVSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGdldEV2ZW50QnlUeXBlKF90eXBlLCBfdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxUYXJnZXQuY2FsbCh7JCRSRVNFVFRBUkdFVDogdGhpcy4kJE1PVVNFUFJPUEFHQVRJT05TRVRURVJ9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4kJFJFU0VUVEFSR0VUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90YXJnZXQgPSB0aGlzLiQkUkVTRVRUQVJHRVQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfb3JpZ2luYWxUYXJnZXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1vdXNlRXZlbnQodHlwZSwgdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBEZWZhdWx0UkV2ZW50LmFwcGx5KHRoaXMsIFt0eXBlLCB0YXJnZXRdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yID0gW2N1cnNvci5jdXJyZW50WzBdLCBjdXJzb3IuY3VycmVudFsxXV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIERyYWdFdmVudCh0eXBlLCB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIERlZmF1bHRSRXZlbnQuYXBwbHkodGhpcywgW3R5cGUsIHRhcmdldF0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBbZHJhZy5zdGFydFswXSwgZHJhZy5zdGFydFsxXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudDogW2RyYWcuY3VycmVudFswXSwgZHJhZy5jdXJyZW50WzFdXSxcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YTogW2RyYWcuZGVsdGFbMF0sIGRyYWcuZGVsdGFbMV1dXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRFdmVudEJ5VHlwZSh0eXBlLCB0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnbW91c2Vtb3ZlJyB8fCB0eXBlID09PSAnbW91c2VsZWF2ZSdcclxuICAgICAgICAgICAgICAgICAgICB8fCB0eXBlID09PSAnbW91c2VlbnRlcicgfHwgdHlwZSA9PT0gJ21vdXNlZG93bidcclxuICAgICAgICAgICAgICAgICAgICB8fCB0eXBlID09PSAnbW91c2V1cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE1vdXNlRXZlbnQodHlwZSwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnZHJhZ3N0YXJ0JyB8fCB0eXBlID09PSAnZHJhZ2VuZCcgfHwgdHlwZSA9PT0gJ2RyYWdtb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRHJhZ0V2ZW50KHR5cGUsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIERpc3BhdGNoKGV2ZW50LCB0YXJnZXQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TW91c2UgPSB0YXJnZXQuZXh0ZW5zaW9uKCdNb3VzZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0TW91c2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TW91c2UuaGFzRXZlbnQoZXZlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TW91c2UucmVzb2x2ZSh0YXJnZXQsIGV2ZW50LCBnZXRFdmVudEJ5VHlwZShldmVudCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRXZlbnRCeVR5cGUodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlID09PSAnbW91c2VlbnRlcicgfHwgdHlwZSA9PT0gJ2RyYWdzdGFydCcgfHwgdHlwZSA9PT0gJ2RyYWdlbmQnIHx8IHR5cGUgPT09ICdkcmFnbW92ZScgfHxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAnbW91c2Vtb3ZlJyB8fCB0eXBlID09PSAnbW91c2V1cCcgfHwgdHlwZSA9PT0gJ21vdXNlZG93bicpICYmIHRhcmdldC5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGlzcGF0Y2godHlwZSwgdGFyZ2V0LmN1cnJlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlID09PSAnbW91c2VsZWF2ZScgfHwgdHlwZSA9PT0gJ2RyYWdlbmQnKSAmJiB0YXJnZXQucHJldmlvdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBEaXNwYXRjaCh0eXBlLCB0YXJnZXQucHJldmlvdXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRHJhZ1N0YXJ0KCkge1xyXG4gICAgICAgICAgICAgICAgZHJhZ2dlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBkcmFnLnN0YXJ0WzBdID0gY3Vyc29yLmN1cnJlbnRbMF07XHJcbiAgICAgICAgICAgICAgICBkcmFnLnN0YXJ0WzFdID0gY3Vyc29yLmN1cnJlbnRbMV07XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlRXZlbnRCeVR5cGUoJ2RyYWdzdGFydCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlRHJhZ0VuZCgpIHtcclxuICAgICAgICAgICAgICAgIGRyYWcuY3VycmVudFswXSA9IGN1cnNvci5jdXJyZW50WzBdO1xyXG4gICAgICAgICAgICAgICAgZHJhZy5jdXJyZW50WzFdID0gY3Vyc29yLmN1cnJlbnRbMV07XHJcbiAgICAgICAgICAgICAgICBkcmFnLmRlbHRhWzBdID0gZHJhZy5zdGFydFswXSAtIGRyYWcuY3VycmVudFswXTtcclxuICAgICAgICAgICAgICAgIGRyYWcuZGVsdGFbMV0gPSBkcmFnLnN0YXJ0WzFdIC0gZHJhZy5jdXJyZW50WzFdO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZUV2ZW50QnlUeXBlKCdkcmFnZW5kJyk7XHJcbiAgICAgICAgICAgICAgICBkcmFnZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIERpc3BhdGNoRXZlbnRzKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vdXNlZG93bi5jdXJyZW50ICE9PSBtb3VzZWRvd24ub2xkICYmIG1vdXNlZG93bi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUV2ZW50QnlUeXBlKCdtb3VzZWRvd24nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChtb3VzZWRvd24uY3VycmVudCAmJiBtb3VzZWRvd24uY3VycmVudCAhPT0gbW91c2Vkb3duLm9sZCAmJiAhZHJhZ2dlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVEcmFnU3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjdXJzb3Iub2xkWzBdICE9PSBjdXJzb3IuY3VycmVudFswXSB8fCBjdXJzb3Iub2xkWzFdICE9PSBjdXJzb3IuY3VycmVudFsxXSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmN1cnJlbnQgJiYgIXRhcmdldC5wcmV2aW91cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlRXZlbnRCeVR5cGUoJ21vdXNlZW50ZXInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuY3VycmVudCAmJiB0YXJnZXQucHJldmlvdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUV2ZW50QnlUeXBlKCdtb3VzZWxlYXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVEcmFnRW5kKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY3VycmVudCAmJiB0YXJnZXQucHJldmlvdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmN1cnJlbnQuJCRNT1VTRVNFQVJDSCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0LnByZXZpb3VzLiQkTU9VU0VTRUFSQ0gpIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXQuY3VycmVudC4kJE1PVVNFU0VBUkNIO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZURyYWdFbmQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVFdmVudEJ5VHlwZSgnbW91c2VsZWF2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUV2ZW50QnlUeXBlKCdtb3VzZWVudGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlRHJhZ1N0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vdXNlZG93bi5jdXJyZW50ICYmIG1vdXNlZG93bi5jdXJyZW50ID09PSBtb3VzZWRvd24ub2xkICYmIGRyYWdnZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZy5jdXJyZW50WzBdID0gY3Vyc29yLmN1cnJlbnRbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWcuY3VycmVudFsxXSA9IGN1cnNvci5jdXJyZW50WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnLmRlbHRhWzBdID0gZHJhZy5zdGFydFswXSAtIGRyYWcuY3VycmVudFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZy5kZWx0YVsxXSA9IGRyYWcuc3RhcnRbMV0gLSBkcmFnLmN1cnJlbnRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVFdmVudEJ5VHlwZSgnZHJhZ21vdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1vdXNlZG93bi5jdXJyZW50ICYmIG1vdXNlZG93bi5jdXJyZW50ID09PSBtb3VzZWRvd24ub2xkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVFdmVudEJ5VHlwZSgnbW91c2Vtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFtb3VzZWRvd24uY3VycmVudCAmJiBtb3VzZWRvd24uY3VycmVudCAhPT0gbW91c2Vkb3duLm9sZCAmJiBkcmFnZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZURyYWdFbmQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghbW91c2Vkb3duLmN1cnJlbnQgJiYgbW91c2Vkb3duLmN1cnJlbnQgIT09IG1vdXNlZG93bi5vbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlRXZlbnRCeVR5cGUoJ21vdXNldXAnKTtcclxuICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQucHJldmlvdXMgPSB0YXJnZXQuY3VycmVudDtcclxuICAgICAgICAgICAgICAgIG1vdXNlZG93bi5vbGQgPSBtb3VzZWRvd24uY3VycmVudDtcclxuICAgICAgICAgICAgICAgIGN1cnNvci5vbGRbMF0gPSBjdXJzb3IuY3VycmVudFswXTtcclxuICAgICAgICAgICAgICAgIGN1cnNvci5vbGRbMV0gPSBjdXJzb3IuY3VycmVudFsxXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gVXBkYXRlVGFyZ2V0cygpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldC5wcmV2aW91cyA9IHRhcmdldC5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmN1cnJlbnQgPSBGaW5kZXIuY2hlY2soY3Vyc29yLmN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdGljayA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZXZlbnREaXNwYXRjaGVyVGljaygpIHtcclxuICAgICAgICAgICAgICAgIHRpY2sgPSAhdGljaztcclxuICAgICAgICAgICAgICAgIGlmICh0aWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICBVcGRhdGVUYXJnZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgRGlzcGF0Y2hFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQ2FudmFzUm9vdC5xdWV1ZSgtMSwgZXZlbnREaXNwYXRjaGVyVGljayk7XHJcblxyXG4gICAgICAgICAgICBUaWNrZXIub24oJ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFRpY2tlci5vbignc3RvcCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgVGlja2VyLm9uKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI1LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlKFxyXG4gICAgWydAaW5qZWN0JywgJytFYXNpbmcnLCAnQENhbnZhcycsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gTW9ycGhpbmUoaW5qZWN0LCBFYXNpbmdzLCBDYW52YXMsIERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbW9ycGhpbmVzID0gW107XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVjayhzdGFydCwgZW5kLCBmdW5jLCBlYXNpbmcsIGR1cmF0aW9uLCBycHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhcnQgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGVuZCAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt9LCAnTW9ycGhpbmUgLyBVbmFibGUgdG8gY3JlYXRlLiBTdGFydCB2YWx1ZSBpcyBpbnZhbGlkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe30sICdNb3JwaGluZSAvIFVuYWJsZSB0byBjcmVhdGUuIEVuZCB2YWx1ZSBpcyBpbnZhbGlkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZWFzaW5nICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe30sICdNb3JwaGluZSAvIFVuYWJsZSB0byBjcmVhdGUuIEVhc2luZyBpcyBub3QgYSBzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAgZHVyYXRpb24gIT09IFwibnVtYmVyXCIgfHwgZHVyYXRpb24gPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt9LCAnTW9ycGhpbmUgLyBVbmFibGUgdG8gY3JlYXRlLiBEdXJhdGlvbiBpcyBsZXNzIHRoYW4gMCBvciBub3QgYSBudW1iZXInKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVmdW5jID0gRWFzaW5ncy5nZXQoZWFzaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe2Vhc2luZzogZWFzaW5nfSwgJyBNb3JwaGluZSAvIFVuYWJsZSB0byBjcmVhdGUuIE5vIHN1Y2ggZWFzaW5nIHtlYXNpbmd9Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVmdW5jO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGZ1bmMsIGVhc2luZywgZHVyYXRpb24sIHJwdCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGVhc2luZyA9IGNoZWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1vcnBoaW5lID0gaW5qZWN0KCckTW9ycGhpbmUnKSxcclxuICAgICAgICAgICAgICAgICAgICB0aWNrRiA9IG1vcnBoaW5lLmNvbmZpZyhzdGFydCwgZW5kLCBmdW5jLCBkdXJhdGlvbiwgZWFzaW5nLCBycHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRpY2tGLm1vcnBoaW5lID0gbW9ycGhpbmU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aWNrRiB8fCB0eXBlb2YgdGlja0YgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt9LCAnVW5hYmxlIHRvIGNvbmZpZyBtb3JwaGluZSBkdWUgdG8gc29tZSBjb25maWcgZXJyb3IuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGlja0Y7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBmdW5jLCBlYXNpbmcsIGR1cmF0aW9uLCBycHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBlYXNpbmcgPSBjaGVjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBtb3JwaGluZSA9IGluamVjdCgnJE1vcnBoaW5lJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRpY2tGID0gbW9ycGhpbmUuY29uZmlnKHN0YXJ0LCBlbmQsIGZ1bmMsIGR1cmF0aW9uLCBlYXNpbmcsIHJwdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aWNrRiB8fCB0eXBlb2YgdGlja0YgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt9LCAnTW9ycGhpbmUgLyBVbmFibGUgdG8gY29uZmlnIG1vcnBoaW5lLiBEdWUgdG8gc29tZSBlcnJvci4nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGlja0YuJG0gPSBtb3JwaGluZTtcclxuXHJcbiAgICAgICAgICAgICAgICBtb3JwaGluZXMucHVzaCh0aWNrRik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vcnBoaW5lO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIENhbnZhcy5xdWV1ZSgtMiwgZnVuY3Rpb24gcHJvY2Vzc01vcnBoaW5lcyhjb250ZXh0LCBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IGRhdGUuZ2V0VGltZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIF9tb3JwaGluZXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1vcnBoaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbW9ycGhpbmVzW2ldLiRtLmRvbmUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JwaGluZXNbaV0oZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9tb3JwaGluZXMucHVzaChtb3JwaGluZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1vcnBoaW5lcyA9IF9tb3JwaGluZXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjUvMjAxNi5cclxuICovXHJcblxyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIFsnQGV4dGVuZCcsICdAaW5qZWN0JywgJzxQbHVnaW5zJyxcclxuICAgICAgICBmdW5jdGlvbiBHcmFwaGljcyhleHRlbmQsIGluamVjdCwgcGx1Z2lucykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHR5cGUgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRfcGx1Z2lucyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5leHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkX3BsdWdpbnNbbmFtZV07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGVmaW5lVHlwZSA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgIT09IFwic3RyaW5nXCIpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kZWZpbmVUeXBlO1xyXG5cclxuICAgICAgICAgICAgICAgIHR5cGUgPSB0O1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gcGx1Z2lucy5saXN0KCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZF9wbHVnaW5zW2xpc3RbaV1dID0gaW5qZWN0KCckUGx1Z2luJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRfcGx1Z2luc1tsaXN0W2ldXS5kZWZpbmVPYmplY3QodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc29sdmVkX3BsdWdpbnNbbGlzdFtpXV0sICc8JyArIGxpc3RbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlZF9wbHVnaW5zW2xpc3RbaV1dLm1hdGNoVHlwZSh0eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZF9wbHVnaW5zW2xpc3RbaV1dLndyYXAodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzb2x2ZWRfcGx1Z2luc1tsaXN0W2ldXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBleHRlbmQodGhpcywgJyQnICsgdCArICdPYmplY3RNb2RlbCcpO1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckRGVmYXVsdE9iamVjdERyYXdlcicpO1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckJyArIHQgKyAnT2JqZWN0RHJhd2VyJyk7XHJcbiAgICAgICAgICAgICAgICBleHRlbmQodGhpcywgJyREZWZhdWx0T2JqZWN0VHlwZScpO1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckJyArIHQgKyAnT2JqZWN0Q2xhc3MnKTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNS8yMDE2LlxyXG4gKi9cclxuJFIuc2VydmljZShcclxuICAgIFsnQGluamVjdCcsICdUcmVlJyxcclxuICAgICAgICBmdW5jdGlvbiBPYmplY3RzKGluamVjdCwgVHJlZSkge1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gSW5qZWN0QnlUeXBlKHR5cGUsIGNvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGluamVjdCgnJEdyYXBoaWNzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzdWx0LmRlZmluZVR5cGUodHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0eWxlLmFwcGx5KHJlc3VsdCwgY29uZmlnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5qZWN0QnlUeXBlKCdHcm91cCcsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxpbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5qZWN0QnlUeXBlKCdMaW5lJywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBJbmplY3RCeVR5cGUoJ1JlY3RhbmdsZScsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNpcmNsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBJbmplY3RCeVR5cGUoJ0NpcmNsZScsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEluamVjdEJ5VHlwZSgnSW1hZ2UnLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5qZWN0QnlUeXBlKCdTcHJpdGUnLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEluamVjdEJ5VHlwZSgnVGV4dCcsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFyZWEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5qZWN0QnlUeXBlKCdBcmVhJywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIFRyZWUucm9vdCh0aGlzLmdyb3VwKCkpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvMTIvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UoXHJcbiAgICBbJ0BDYW52YXMnLCAnQGluamVjdCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gUmVzb3VyY2UoQ2FudmFzLCBpbmplY3QsIERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgYWxsID0gW10sXHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGVzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBmb250czogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9zOiBbXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxvYWRDb3VudGVyID0gMCxcclxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBHZXRSZXNvdXJjZUJ5VVJMKHR5cGUsIHNlYXJjaCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdmb250Jykgc2VhcmNoID0gc2VhcmNoWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5ID0gY29udGFpbmVyW3R5cGUgKyAncyddO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghYXJyYXkpIHJldHVybiByZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJheVtpXS51cmwoKSA9PT0gc2VhcmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gSW5qZWN0QnlUeXBlKHR5cGUsIHNyYykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0ZWQgPSBHZXRSZXNvdXJjZUJ5VVJMKHR5cGUsIHNyYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleGlzdGVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90eXBlID0gdHlwZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGluamVjdCgnJCcgKyB0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZENvdW50ZXItLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVzb2x2ZUV2ZW50KCdsb2FkJywgW3RoaXMsIGxvYWRDb3VudGVyLCBhbGwubGVuZ3RoXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5vbignZXJyb3InLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRDb3VudGVyLS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlc29sdmVFdmVudCgnZXJyb3InLCBbdGhpcywgbG9hZENvdW50ZXIsIGFsbC5sZW5ndGhdKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnVybChzcmMpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyW190eXBlICsgJ3MnXS5wdXNoKHJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFsbC5wdXNoKHJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRDb3VudGVyKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFJlc29sdmVFdmVudCgnYWRkJywgW3Jlc3VsdCwgbG9hZENvdW50ZXIsIGFsbC5sZW5ndGhdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pbWFnZSA9IGZ1bmN0aW9uIChzcmMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBJbmplY3RCeVR5cGUoJ2ltYWdlJywgc3JjKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlID0gZnVuY3Rpb24gKHNyYykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEluamVjdEJ5VHlwZSgnc3ByaXRlJywgc3JjKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW8gPSBmdW5jdGlvbiAoc3JjKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5qZWN0QnlUeXBlKCdhdWRpbycsIHNyYyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVsb2FkUmVxdWVzdChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5pbWFnZXMgJiYgZGF0YS5pbWFnZXMuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmltYWdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEuaW1hZ2VzW2ldID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoL14oWy4vX1xcZGEtekEtWl0rKShcXFsoXFxkKylcXF0pJC8udGVzdChkYXRhLmltYWdlc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNwcml0ZShkYXRhLmltYWdlc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmltYWdlKGRhdGEuaW1hZ2VzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5hdWRpbyAmJiBkYXRhLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5hdWRpby5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEuYXVkaW9baV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXVkaW8oZGF0YS5hdWRpb1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5mb250cyAmJiBkYXRhLmZvbnRzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5mb250cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5mb250c1tpXSAmJiB0eXBlb2YgZGF0YS5mb250c1tpXSA9PT0gXCJvYmplY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIGRhdGEuZm9udHNbaV0ubmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBkYXRhLmZvbnRzW2ldLm5hbWUubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IGRhdGEuZm9udHNbaV0ud2VpZ2h0ICYmIHR5cGVvZiBkYXRhLmZvbnRzW2ldLndlaWdodCA9PT0gXCJudW1iZXJcIiA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZm9udHNbaV0ud2VpZ2h0IDogNDAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlID0gZGF0YS5mb250c1tpXS5zdHlsZSA9PT0gJ2l0YWxpYycgPyBkYXRhLmZvbnRzW2ldLnN0eWxlIDogJ25vcm1hbCc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5mb250KGRhdGEuZm9udHNbaV0ubmFtZSwgd2VpZ2h0LCBzdHlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJlbG9hZCA9IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICAgICAgICAgIHByZWxvYWRSZXF1ZXN0KGNvbmZpZyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByZWxvYWRCeVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0KSByZXF1ZXN0LmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gXCJzdHJpbmdcIiAmJiB1cmwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3BvbnNlLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt1cmw6IHVybH0sICdVbmFibGUgdG8gcGFyc2UgSlNPTiBmcm9tIFt7dXJsfV0uIFVua25vd24gcmVzcG9uc2UgZm9ybWF0LicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWxvYWRSZXF1ZXN0KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe3VybDogdXJsfSwgJ1VuYWJsZSB0byBnZXQgcmVzb3VyY2VzIGZyb20gW3t1cmx9XSB0byBwcmVsb2FkLiBTZXJ2ZXIgZXJyb3IuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWxvYWRSZXF1ZXN0KHt9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt1cmw6IHVybH0sICdVbmFibGUgdG8gZ2V0IHJlc291cmNlcyBmcm9tIFt7dXJsfV0gdG8gcHJlbG9hZC4gUmVxdWVzdCBhYm9ydGVkLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVsb2FkUmVxdWVzdCh7fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZvbnQgPSBmdW5jdGlvbiAoc3JjLCB3ZWlnaHQsIHN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5qZWN0QnlUeXBlKCdmb250JywgW3NyYywgd2VpZ2h0LCBzdHlsZV0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGNCQ29udGFpbmVyID0ge1xyXG4gICAgICAgICAgICAgICAgbG9hZDogW10sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogW10sXHJcbiAgICAgICAgICAgICAgICBhZGQ6IFtdXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uID0gZnVuY3Rpb24gKGV2ZW50LCBmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gY0JDb250YWluZXJbZXZlbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2V2ZW50OiBldmVudH0sICdVbmFibGUgdG8gc2V0IGV2ZW50IFt7ZXZlbnR9XSBjYWxsYmFjay4gZnVuYyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7ZXZlbnQ6IGV2ZW50fSwgJ1VuYWJsZSB0byBzZXQgZXZlbnQgW3tldmVudH1dLiBObyBzdWNoIGV2ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2FybignVW5hYmxlIHRvIHNldCBldmVudCBjYWxsYmFjay4gRXZlbnQgbmFtZSBpcyBub3QgYSBzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gY0JDb250YWluZXJbZXZlbnRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuYy4kJFNFQVJDSCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcnJheVtpXS4kJFNFQVJDSCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXJyYXkucHVzaChhcnJheVtpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZnVuYy4kJFNFQVJDSDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNCQ29udGFpbmVyW2V2ZW50XSA9IG5hcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7ZXZlbnQ6IGV2ZW50fSwgJ1VuYWJsZSB0byB1bnNldCBjYWxsYmFjayBmb3IgZXZlbnQgW3tldmVudH1dLiBObyBzdWNoIGV2ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2FybignVW5hYmxlIHRvIHVuc2V0IGV2ZW50LiBFdmVudCBpcyBub3QgYSBzdHJpbmcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGlzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQoY29udGFpbmVyLmltYWdlcykuY29uY2F0KGNvbnRhaW5lci5hdWRpb3MpLmNvbmNhdChjb250YWluZXIuZm9udHMpLmNvbmNhdChjb250YWluZXIuc3ByaXRlcyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBSZXNvbHZlRXZlbnQodHlwZSwgZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gY0JDb250YWluZXJbdHlwZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFycmF5KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2ldLmFwcGx5KHNlbGYsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBDYW52YXMucXVldWUoLTIsIGZ1bmN0aW9uIHVwZGF0ZVJlc291cmNlcyAoY2FudmFzLCBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZSA9IGRhdGUuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXIuc3ByaXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIuc3ByaXRlc1tpXS5yZWFkeSgpICYmIGNvbnRhaW5lci5zcHJpdGVzW2ldLmxvYWRlZCgpID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zcHJpdGVzW2ldLnRpY2sodGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI0LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlKFsnQGluamVjdCcsXHJcbiAgICAgICAgZnVuY3Rpb24gU3RhdGUoaW5qZWN0KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3RhdGVzID0ge307XHJcblxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gUGFyc2VBZGRyZXNzKGFkZHJlc3MpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhZGRyZXNzLm1hdGNoKC9eKFthLXpBLVpdKykuKFthLXpBLVpdKykkLyksXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSByZXN1bHRbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcCA9IHJlc3VsdFsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUgJiYgcHJvcCkgcmV0dXJuIHtzdGF0ZTogc3RhdGUsIHByb3A6IHByb3B9O1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2ggPSBmdW5jdGlvbiAoYWRkcmVzcywgZnVuYykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgYWRkcmVzcyA9IFBhcnNlQWRkcmVzcyhhZGRyZXNzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWFkZHJlc3MpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRlc1thZGRyZXNzLnN0YXRlXSkgc3RhdGVzW2FkZHJlc3Muc3RhdGVdID0gaW5qZWN0KCckU3RhdGUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGF0ZXNbYWRkcmVzcy5wcm9wXS53aGVuKGFkZHJlc3MucHJvcCwgZnVuYyk7XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZWZpbmUgPSBmdW5jdGlvbiAoYWRkcmVzcywgdmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBhZGRyZXNzID0gUGFyc2VBZGRyZXNzKGFkZHJlc3MpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghYWRkcmVzcykgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghc3RhdGVzW2FkZHJlc3Muc3RhdGVdKSBzdGF0ZXNbYWRkcmVzcy5zdGF0ZV0gPSBpbmplY3QoJyRTdGF0ZScpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0YXRlc1thZGRyZXNzLnN0YXRlXS5kZWZpbmUoYWRkcmVzcy5wcm9wLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjYvMjAxNi5cclxuICovXHJcbiRSLnNlcnZpY2UoXHJcbiAgICBbJ0RlYnVnJywgJ0BDYW52YXMnLCAnQENvbmZpZycsXHJcbiAgICAgICAgZnVuY3Rpb24gVHJlZShEZWJ1ZywgQ2FudmFzLCBDb25maWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciByb290ID0gbnVsbCwgcm9vdERyYXdlciA9IG51bGwsIHJvb3RTdHlsZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjbGVhciA9IENvbmZpZy5kZWZpbmUoJ2NsZWFyJywgZmFsc2UsIHtpc0Jvb2w6IHRydWV9KS53YXRjaChmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyID0gdjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yb290ID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmplY3QudHlwZSB8fCB0eXBlb2Ygb2JqZWN0LnR5cGUgIT09IFwiZnVuY3Rpb25cIiB8fCBvYmplY3QudHlwZSgpICE9PSAnR3JvdXAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt9LCAnVHJlZSAvIFVuYWJsZSB0byBzZXQgdHJlZSByb290ISBXcm9uZyBvYmplY3QgdHlwZSEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdCA9IG9iamVjdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyYXdlciA9IHJvb3QuZXh0ZW5zaW9uKCdEcmF3ZXInKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkcmF3ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe30sICdUcmVlIC8gVW5hYmxlIHRvIGdldCBEcmF3ZXIgZXh0ZW5zaW9uIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZHJhd2VyLmRyYXcgfHwgdHlwZW9mIGRyYXdlci5kcmF3ICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe30sICdUcmVlIC8gVW5hYmxlIHRvIHJlZ2lzdGVyIHJvb3QgRHJhd2VyLiBEcmF3ZXIuZHJhdyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdERyYXdlciA9IGRyYXdlcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdFN0eWxlID0gcm9vdC5leHRlbnNpb24oJ1N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb290O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvb3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBDYW52YXMucXVldWUoMCwgZnVuY3Rpb24gZHJhd0dyYXBoaWNzVHJlZShjb250ZXh0LCBkYXRlLCBmcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyb290IHx8ICFyb290RHJhd2VyKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xlYXIpIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGNvbnRleHQuY2FudmFzLm9mZnNldFdpZHRoLCBjb250ZXh0LmNhbnZhcy5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgcm9vdERyYXdlci5kcmF3LmFwcGx5KHJvb3QsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDQvMTYvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UoXHJcbiAgICBbJ0BBdWRpbycsICdAaW5qZWN0JywgJ0BDb25maWcnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIFNvdW5kKGNvbnRleHQsIGluamVjdCwgY29uZmlnLCBEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgY29uZmlnLmRlZmluZSgnZmlsdGVycycsIFsnRGVsYXknLCAnR2FpbiddLCB7aXNBcnJheTogdHJ1ZX0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gaW5qZWN0KCckQXVkaW8nKS5idWlsZCgnJCRERVNUSU5BVElPTicsICdkZXN0aW5hdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgc291bmRzID0ge30sXHJcbiAgICAgICAgICAgICAgICBzb3VuZGNvdW50ID0gMCxcclxuICAgICAgICAgICAgICAgIGNoYW5uZWxjb3VudCA9IDAsXHJcbiAgICAgICAgICAgICAgICBjaGFubmVscyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAkJERFU1RJTkFUSU9OOiBkZXN0aW5hdGlvblxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLnNhbXBsZSA9IGZ1bmN0aW9uICh1cmwsIGNoYW5uZWwsIG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiICYmIHVybC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdW5kc1t1cmxdKSByZXR1cm4gc291bmRzW3VybF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUubGVuZ3RoID09PSAwKSBuYW1lID0gJ1VzZXJTb3VuZFsnICsgc291bmRjb3VudCArICddJztcclxuICAgICAgICAgICAgICAgICAgICBzb3VuZGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGluamVjdCgnJEF1ZGlvJykuYnVpbGQobmFtZSwgdXJsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNoYW5uZWwgIT09IFwic3RyaW5nXCIgfHwgY2hhbm5lbC5sZW5ndGggPT09IDApIGNoYW5uZWwgPSAnJCRERVNUSU5BVElPTic7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG91dCA9IHRoaXMuY2hhbm5lbChjaGFubmVsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuY29ubmVjdChvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kc1tyZXN1bHQudXJsKCldID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt1cmw6IHVybH0sICdbe3VybH1dIGlzIG5vdCB2YWxpZCBhdWRpbyB1cmwgb3IgZW1wdHkuJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmIG5hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsc1tuYW1lXSkgcmV0dXJuIGNoYW5uZWxzW25hbWVdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gaW5qZWN0KCckQXVkaW8nKS5idWlsZChuYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmNvbm5lY3QoZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzW25hbWVdID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWxzID0gZnVuY3Rpb24gKGJ5dXJsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIGJ5dXJsID0gISFieXVybDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjaGFubmVsIGluIGNoYW5uZWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxzLmhhc093blByb3BlcnR5KGNoYW5uZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsICE9PSAnJCRERVNUSU5BVElPTicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChieXVybCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RbY2hhbm5lbC51cmwoKV0gPSBjaGFubmVsW2NoYW5uZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFtjaGFubmVsXSA9IGNoYW5uZWxzW2NoYW5uZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc291bmRzID0gZnVuY3Rpb24gKGJ5dXJsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIGJ5dXJsID0gISFieXVybDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdW5kcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VuZHMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ5dXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0W3Byb3BdID0gc291bmRzW3Byb3BdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdFtzb3VuZHNbcHJvcF0ubmFtZSgpXSA9IHNvdW5kc1twcm9wXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhbm5lbHMuJCRERVNUSU5BVElPTjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI1LzIwMTYuXHJcbiAqL1xyXG4kUi5wbHVnaW4uY2xhc3MoJ09iamVjdHMnLCAnQW5pbWF0aW9uJyxcclxuICAgIFsnK0FuaW1hdGlvbicsICdNb3JwaGluZScsXHJcbiAgICAgICAgZnVuY3Rpb24gQW5pbWF0aW9uKEFuaW1hdGlvbkhlbHBlciwgTW9ycGhpbmUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IDAsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBlYXNpbmcgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgZG9uZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc3RhY2sgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgbW9ycGhpbmUgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHN0ZXBzQ2IgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgcXVldWUgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY2xlYXIgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgc3RlcFR5cGVTdHIgPSAndHlwZScsXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZVR5cGVTdHIgPSAnY29tcGxldGUnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlnID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFJlc29sdmUodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gc3RlcFR5cGVTdHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGVwc0NiLmhhc093blByb3BlcnR5KHN0YWNrW2ldLm1vcnBoLnByb3BlcnR5KCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwc0NiW3N0YWNrW2ldLm1vcnBoLnByb3BlcnR5KCldLmFwcGx5KHRhcmdldCwgW3Byb2dyZXNzLCBzdGFja1tpXS5yZXN1bHRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT0gY29tcGxldGVUeXBlU3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbc3RhY2tbaV0ubW9ycGgucHJvcGVydHkoKV0gPSBzdGFja1tpXS5yZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5kb25lKDEsIHJlc3VsdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5xdWV1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBxdWV1ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5oYXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrW2ldLm1vcnBoLnByb3BlcnR5KCkgPT0gcHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBhcnJheS5wdXNoKHN0YWNrW2ldLm1vcnBoLnByb3BlcnR5KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmhhc1Byb3BlcnR5KHByb3BlcnR5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnNwbGljZShpbmRleCwgMSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFjayA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmUpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBfc3RhY2sgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vcnBoID0gc3RhY2tbaV0ubW9ycGguZ2V0KHN0YWNrW2ldLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vcnBoICE9PSB1bmRlZmluZWQgJiYgbW9ycGguc3RhcnQoKSAhPT0gZmFsc2UgJiYgbW9ycGguZW5kKCkgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zdGFjay5wdXNoKHN0YWNrW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhY2sgPSBfc3RhY2s7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRpY2tfZnVuY3Rpb24gPSBBbmltYXRpb25IZWxwZXIuZ2V0VGlja0Z1bmN0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbW9ycGhpbmUgPSBNb3JwaGluZS5jcmVhdGUoMCwgMSwgZnVuY3Rpb24gKGNvbXBsZXRlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVzb2x2ZShjb21wbGV0ZVR5cGVTdHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JwaGluZS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja1tpXS5yZXN1bHQgPSB0aWNrX2Z1bmN0aW9uKHZhbHVlLCBjb21wbGV0ZSwgc3RhY2tbaV0ubW9ycGguc3RhcnQoKSwgc3RhY2tbaV0ubW9ycGguZW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbaV0ubW9ycGguYXBwbHkoY29tcGxldGUsIHN0YWNrW2ldLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlc29sdmUoc3RlcFR5cGVTdHIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXNvbHZlKGNvbXBsZXRlVHlwZVN0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgZWFzaW5nLCBkdXJhdGlvbiwgMCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uICh0LCBtLCBjZmcsIGYpIHtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbkhlbHBlci5ub3JtYWxpemVDb25maWcoY2ZnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IGNmZy5kdXJhdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBlYXNpbmcgPSBjZmcuZWFzaW5nO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0ZXBzQ2IgPSBjZmcuc3RlcDtcclxuXHJcbiAgICAgICAgICAgICAgICBxdWV1ZSA9IGNmZy5xdWV1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBjbGVhciA9IGY7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhY2sgPSBtO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uZmlnID0gY2ZnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNS8yMDE2LlxyXG4gKi9cclxuJFIucGx1Z2luLmNsYXNzKCdPYmplY3RzJywgJ0FuaW1hdGlvbicsXHJcbiAgICBbJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBNb3JwaChEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHNldHRlciA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBnZXR0ZXIgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgYXBwbGllciA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGFydCwgZW5kLFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBvcmRlcmluZyA9IDA7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBTZXRTdGFydFZhbHVlKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSB2YWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFNldEVuZFZhbHVlKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgZW5kID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3JkZXJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JkZXJpbmc7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dGVyLmFwcGx5KG9iamVjdCwgW1NldFN0YXJ0VmFsdWUsIFNldEVuZFZhbHVlLCB2YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHBseSA9IGZ1bmN0aW9uIChwcm9ncmVzcywgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5zdHlsZShwcm9wZXJ0eSwgYXBwbGllci5hcHBseShvYmplY3QsIFt2YWx1ZSwgcHJvZ3Jlc3NdKSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IGZ1bmN0aW9uIChuYW1lLCBvYmosIG9yZCwgc2V0LCBhcGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtuYW1lOiBuYW1lfSwgJ1VuYWJsZSB0byBjb25maWcgTW9ycGguIGFyZzEgW3tuYW1lfV0gaXMgbm90IGEgc3RyaW5nIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe25hbWU6IG5hbWV9LCAnVW5hYmxlIHRvIGNvbmZpZyBNb3JwaC4gYXJnMyBpcyBub3QgYW4gb2JqZWN0IScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0ICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcih7bmFtZTogbmFtZX0sICdVbmFibGUgdG8gY29uZmlnIE1vcnBoLiBhcmc0IGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3JkICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe25hbWU6IG5hbWV9LCAnVW5hYmxlIHRvIGNvbmZpZyBNb3JwaC4gYXJnMiBpcyBub3QgYSBudW1iZXIhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcGwgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtuYW1lOiBuYW1lfSwgJ1VuYWJsZSB0byBjb25maWcgTW9ycGguIGFyZzUgaXMgbm90IGEgZnVuY3Rpb24hJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gbmFtZTtcclxuICAgICAgICAgICAgICAgIHNldHRlciA9IHNldDtcclxuICAgICAgICAgICAgICAgIGFwcGxpZXIgPSBhcGw7XHJcbiAgICAgICAgICAgICAgICBvcmRlcmluZyA9IG9yZDtcclxuICAgICAgICAgICAgICAgIG9iamVjdCA9IG9iajtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAyLzcvMjAxNy5cclxuICovXHJcbiRSLnBsdWdpbi5jbGFzcygnT2JqZWN0cycsXHJcbiAgICAnQm94JyxcclxuICAgIFtmdW5jdGlvbiBCb3goKSB7XHJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHtcclxuICAgICAgICAgICAgICAgIHNpemU6IFswLCAwXSxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBbMCwgMF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3ByaXRlID0ge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiBbMCwgMCwgMCwgMF0sXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogWzAsIDBdLFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogWzAsIDBdXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2l6ZTogW2NvbnRhaW5lci5zaXplWzBdLCBjb250YWluZXIuc2l6ZVsxXV0sXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogW2NvbnRhaW5lci5wb3NpdGlvblswXSwgY29udGFpbmVyLnBvc2l0aW9uWzFdXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXQgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCwgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5zaXplWzBdID0gd2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5zaXplWzFdID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICBjb250YWluZXIucG9zaXRpb25bMF0gPSB4O1xyXG4gICAgICAgICAgICBjb250YWluZXIucG9zaXRpb25bMV0gPSB5O1xyXG4gICAgICAgICAgICBzcHJpdGUubWFyZ2luWzBdID0gdG9wO1xyXG4gICAgICAgICAgICBzcHJpdGUubWFyZ2luWzFdID0gcmlnaHQ7XHJcbiAgICAgICAgICAgIHNwcml0ZS5tYXJnaW5bMl0gPSBib3R0b207XHJcbiAgICAgICAgICAgIHNwcml0ZS5tYXJnaW5bM10gPSBsZWZ0O1xyXG4gICAgICAgICAgICBzcHJpdGUuc2l6ZVswXSA9IGxlZnQgKyB3aWR0aCArIHJpZ2h0O1xyXG4gICAgICAgICAgICBzcHJpdGUuc2l6ZVsxXSA9IHRvcCArIGhlaWdodCArIGJvdHRvbTtcclxuICAgICAgICAgICAgc3ByaXRlLnBvc2l0aW9uWzBdID0geCAtIGxlZnQ7XHJcbiAgICAgICAgICAgIHNwcml0ZS5wb3NpdGlvblsxXSA9IHkgLSB0b3A7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3ByaXRlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfV1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMy8yOC8yMDE3LlxyXG4gKi9cclxuJFIucGx1Z2luLmNsYXNzKCdPYmplY3RzJywgJ1RleHQnLFxyXG4gICAgWydAZXh0ZW5kJywgJ0BpbmplY3QnLCAnK0RyYXdlcicsXHJcbiAgICAgICAgZnVuY3Rpb24gVGV4dExpbmVDbGFzcyhleHRlbmQsIGluamVjdCwgRHJhd2VySGVscGVyKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJFRleHRFbGVtZW50Q2xhc3MnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IDAsXHJcbiAgICAgICAgICAgICAgICB3b3JkcyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgc3BhY2UgPSBpbmplY3QoJyRUZXh0U3BhY2VDbGFzcycpLFxyXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gMCxcclxuICAgICAgICAgICAgICAgIHdpZHRoVXBkYXRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0V2lkdGgoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod2lkdGhVcGRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gd29yZHNbaV0ud2lkdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGhVcGRhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERyYXdlckhlbHBlci5tZWFzdXJlVGV4dChnZXRXaWR0aClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlbmd0aDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud29yZHMgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheSAmJiB0eXBlb2YgYXJyYXkgPT09IFwib2JqZWN0XCIgJiYgYXJyYXkuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGFycmF5W2ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2l6ZSh0aGlzLnNpemUoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oZWlnaHQodGhpcy5oZWlnaHQoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSh0aGlzLnN0eWxlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2VpZ2h0KHRoaXMud2VpZ2h0KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29sb3IodGhpcy5jb2xvcigpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvbnQodGhpcy5mb250KCkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gd29yZHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYXJyID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYXJyLnB1c2god29yZHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BlcnR5Q2hhbmdlZCgnc3RyaW5nJywgX2Fycik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aWR0aFVwZGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmRzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wdXNoID0gZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh3b3Jkcy5sZW5ndGggPiAwKSB3b3Jkcy5wdXNoKHNwYWNlKTtcclxuICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgd29yZC5zaXplKHRoaXMuc2l6ZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuaGVpZ2h0KHRoaXMuaGVpZ2h0KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zdHlsZSh0aGlzLnN0eWxlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC53ZWlnaHQodGhpcy53ZWlnaHQoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNvbG9yKHRoaXMuY29sb3IoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmZvbnQodGhpcy5mb250KCkpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgd2lkdGhVcGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSB3b3Jkc1tpXS5zdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmc7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uUHJvcGVydHlDaGFuZ2UoZnVuY3Rpb24gKHByb3BlcnR5LCB2YWwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGFjZVtwcm9wZXJ0eV0odmFsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMy8yOC8yMDE3LlxyXG4gKi9cclxuJFIucGx1Z2luLmNsYXNzKCdPYmplY3RzJywgJ1RleHQnLFxyXG4gICAgWydAZXh0ZW5kJywgJytEcmF3ZXInLFxyXG4gICAgICAgIGZ1bmN0aW9uIFRleHRTcGFjZUNsYXNzKGV4dGVuZCwgRHJhd2VySGVscGVyKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJFRleHRFbGVtZW50Q2xhc3MnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSAnICcsXHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IDAsXHJcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFdpZHRoKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZm9udCA9IHNlbGYuZXh0cmFjdEZvbnRTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERyYXdlckhlbHBlci5tZWFzdXJlVGV4dChnZXRXaWR0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDMvMjgvMjAxNy5cclxuICovXHJcbiRSLnBsdWdpbi5jbGFzcygnT2JqZWN0cycsICdUZXh0JyxcclxuICAgIFsnK0NvbG9yJyxcclxuICAgICAgICBmdW5jdGlvbiBUZXh0RWxlbWVudENsYXNzKENvbG9ySGVscGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2xvciA9ICdyZ2JhKDAsMCwwLDEpJyxcclxuICAgICAgICAgICAgICAgIGZvbnQgPSAnc2Fucy1zZXJpZicsXHJcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0ID0gNDAwLFxyXG4gICAgICAgICAgICAgICAgZm9udFNpemUgPSAxNCxcclxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQgPSAxNCxcclxuICAgICAgICAgICAgICAgIGZvbnRTdHlsZSA9ICdub3JtYWwnLFxyXG4gICAgICAgICAgICAgICAgY2IgPSBbXSxcclxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZShwcm9wZXJ0eSwgdmFsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNiLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2JbaV0uYXBwbHkoc2VsZiwgW3Byb3BlcnR5LCB2YWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zaXplID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsIDwgMCkgdmFsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZSA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdzaXplJywgZm9udFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvbnRTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPCAwKSB2YWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnaGVpZ2h0JywgbGluZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZUhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2VpZ2h0ID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsIDwgMTAwKSB2YWwgPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA+IDkwMCkgdmFsID0gOTAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgJSAxMDAgIT09IDApIHZhbCA9IHZhbCAtICh2YWwgJSAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnd2VpZ2h0JywgZm9udFdlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9udFdlaWdodDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9udCA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICYmIHZhbC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udCA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdmb250JywgZm9udCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9udDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnY29sb3InLCBjb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdHlsZSA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09ICdub3JtYWwnIHx8IHZhbCA9PT0gJ2l0YWxpYycgfHwgdmFsID09PSAnb2JsaXF1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U3R5bGUgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnc3R5bGUnLCBmb250U3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbnRTdHlsZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXh0cmFjdEZvbnRTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9udFN0eWxlICsgJyAnICsgZm9udFNpemUgKyAncHggXCInICsgZm9udCArICctJyArIGZvbnRXZWlnaHQgKyAnXCInO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vblByb3BlcnR5Q2hhbmdlID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2IucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHlDaGFuZ2VkID0gZnVuY3Rpb24gKG5hbWUsIHZhbCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuYW1lLCB2YWwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMy8yNi8yMDE3LlxyXG4gKi9cclxuJFIucGx1Z2luLmNsYXNzKCdPYmplY3RzJywgJ1RleHQnLFxyXG4gICAgWycrQ29sb3InLCAnQGV4dGVuZCcsICcrRHJhd2VyJyxcclxuICAgICAgICBmdW5jdGlvbiBUZXh0V29yZENsYXNzKENvbG9ySGVscGVyLCBleHRlbmQsIERyYXdlckhlbHBlcikge1xyXG5cclxuICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckVGV4dEVsZW1lbnRDbGFzcycpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0cmluZyA9ICcnLFxyXG4gICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0cmluZyA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcGVydHlDaGFuZ2VkKCdzdHJpbmcnLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFdpZHRoKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZm9udCA9IHNlbGYuZXh0cmFjdEZvbnRTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRHJhd2VySGVscGVyLm1lYXN1cmVUZXh0KGdldFdpZHRoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLmRyYXcgPSBmdW5jdGlvbiAoY29udGV4dCwgeCwgeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB4ICE9PSBcIm51bWJlclwiKSB4ID0gMDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeSAhPT0gXCJudW1iZXJcIikgeSA9IDA7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvcigpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5mb250ID0gdGhpcy5leHRyYWN0Rm9udFN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChzdHJpbmcsIHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMi8yLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdEaXNwYXRjaGVyJyxcclxuICAgIFsnVHJlZScsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gRmluZGVyKFRyZWUsIERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBDaGVja0VsZW1lbnQoZSwgY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS50eXBlKCkgPT09ICdHcm91cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzID0gZS5leHRlbnNpb24oJ0xheWVycycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50eXBlKCkgPT09ICdHcm91cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3Jlc3VsdCA9IENoZWNrRWxlbWVudCh0aGlzLCBjdXJzb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcmVzdWx0KSByZXN1bHQgPSBfcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vdXNlZXh0ID0gdGhpcy5leHRlbnNpb24oJ01vdXNlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQgPSBtb3VzZWV4dC5jaGVjayh0aGlzLCBjdXJzb3IpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3Jlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfcmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jaGVjayA9IGZ1bmN0aW9uIChjdXJzb3IpIHtcclxuICAgICAgICAgICAgICAgIHZhciByb290ID0gVHJlZS5yb290KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJvb3QpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJzb3IgIT09IFwib2JqZWN0XCIgfHwgY3Vyc29yLmNvbnN0cnVjdG9yICE9PSBBcnJheSB8fCBjdXJzb3IubGVuZ3RoICE9PSAyIHx8IHR5cGVvZiBjdXJzb3JbMF0gIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGN1cnNvclsxXSAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2M6IGN1cnNvcn0sICdPYmplY3RGaW5kZXIgOyB7W2NdfSBpcyBub3QgYSB2YWxpZCBjdXJzb3IgdmFsdWUuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hlY2tFbGVtZW50KHJvb3QsIGN1cnNvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI1LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdNb3JwaGluZScsIFtcclxuICAgICAgICBmdW5jdGlvbiBNb3JwaGluZSgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlYXNpbmcgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSAxLFxyXG4gICAgICAgICAgICAgICAgcmVwZWF0ID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICByZXBlYXRDb3VudCA9IDEsXHJcbiAgICAgICAgICAgICAgICBzdGFydF90aW1lID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIGZ1bmMgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSAwLFxyXG4gICAgICAgICAgICAgICAgZW5kID0gMDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHBhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhdXNlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXVzZWQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IDAsXHJcbiAgICAgICAgICAgICAgICBwYXVzZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRvbmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFRpY2sodGltZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydF90aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSAoZHVyYXRpb24gKiBwcm9ncmVzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFydF90aW1lKSBzdGFydF90aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gKHRpbWUgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPiAxKSBwcm9ncmVzcyA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVwZWF0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGVhdENvdW50ID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVwZWF0Q291bnQgIT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdENvdW50LS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydF90aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KG51bGwsIFtwcm9ncmVzcywgZWFzaW5nKCh0aW1lIC0gc3RhcnRfdGltZSkgLyAxMDAwLCBzdGFydCwgZW5kIC0gc3RhcnQsIGR1cmF0aW9uIC8gMTAwMCksIHN0YXJ0X3RpbWVdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbiAocywgZSwgZiwgZHVyLCBlYXNlLCBycHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHMgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGUgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGR1ciAhPT0gXCJudW1iZXJcIiB8fCBkdXIgPCAwKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlYXNlICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBycHQgPT09IFwibnVtYmVyXCIpIHJlcGVhdCA9IHJwdDtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydCA9IHM7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBlO1xyXG4gICAgICAgICAgICAgICAgZWFzaW5nID0gZWFzZTtcclxuICAgICAgICAgICAgICAgIGZ1bmMgPSBmO1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBkdXIgPiAwID8gZHVyIDogMTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jb25maWc7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFRpY2s7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzEwLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJywgW2Z1bmN0aW9uIENhbnZhcygpIHtcclxuXHJcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyksXHJcbiAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICAgIHZhciB3ID0gMCwgaCA9IDA7XHJcblxyXG4gICAgdGhpcy5jb250ZXh0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBjb250ZXh0O1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLndpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5oZWlnaHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgaCA9IHZhbHVlO1xyXG4gICAgICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5leHBvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbnZhcztcclxuICAgIH07XHJcblxyXG59XSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDIvNy8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsIFsnQGluamVjdCcsICdEZWJ1ZycsIGZ1bmN0aW9uIEdyYXBoaWNzQXNzZW1ibGVyKGluamVjdCwgRGVidWcpIHtcclxuXHJcbiAgICB2YXIgb3V0cHV0ID0gaW5qZWN0KCckQ2FudmFzJyksXHJcbiAgICAgICAgY29udGV4dCA9IG91dHB1dC5jb250ZXh0KCksXHJcbiAgICAgICAgcGlwZSA9IFtdLFxyXG4gICAgICAgIGxheWVycyA9IHt9LFxyXG4gICAgICAgIHcgPSAwLFxyXG4gICAgICAgIGggPSAwLFxyXG4gICAgICAgIGJveEV4dCA9IG51bGwsXHJcbiAgICAgICAgcmVzaXplZCA9IGZhbHNlLFxyXG4gICAgICAgIHJlYWR5ID0gZmFsc2U7XHJcblxyXG4gICAgZnVuY3Rpb24gU2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaXBlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHBpcGVbaV0uc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3V0cHV0LndpZHRoKHdpZHRoKTtcclxuICAgICAgICBvdXRwdXQuaGVpZ2h0KGhlaWdodCk7XHJcbiAgICAgICAgdyA9IHdpZHRoO1xyXG4gICAgICAgIGggPSBoZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29tcG9zZShjdHgpIHtcclxuICAgICAgICBpZighcmVzaXplZCkge1xyXG4gICAgICAgICAgICBpZihib3hFeHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzcHJpdGUgPSBib3hFeHQuYm94KCkuc3ByaXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZihzcHJpdGUuc2l6ZVswXSAhPT0gdyB8fCBzcHJpdGUuc2l6ZVsxXSAhPT0gaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFNldFNpemUoc3ByaXRlLnNpemVbMF0sc3ByaXRlLnNpemVbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc2l6ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighcmVhZHkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwwLHcsaCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGlwZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcGlwZVtpXS5kcmF3KGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShvdXRwdXQuZXhwb3J0KCksMCwwKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmxheWVyID0gZnVuY3Rpb24gKG9yZGVyLCBuYW1lLCB1cGRhdGVGdW5jKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcmRlciAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBEZWJ1Zy53YXJuKHtvOiBvcmRlcn0sICdJbnZhbGlkIG9yZGVyIGFyZ3VtZW50IFt7b31dIGlzIG5vdCBhIG51bWJlci4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgRGVidWcud2Fybih7bjogbmFtZX0sICdbe259XSBpcyBub3QgdmFsaWQgbmFtZSBmb3IgbGF5ZXInKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHVwZGF0ZUZ1bmMgIT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBEZWJ1Zy53YXJuKCd1cGRhdGVGdW5jIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsYXllcnNbbmFtZV0gPSBpbmplY3QoJyRHcmFwaGljc0Fzc2VtYmxlckxheWVyJyk7XHJcbiAgICAgICAgbGF5ZXJzW25hbWVdLmYodXBkYXRlRnVuYyk7XHJcbiAgICAgICAgbGF5ZXJzW25hbWVdLm9yZGVyaW5nKG9yZGVyKTtcclxuICAgICAgICBsYXllcnNbbmFtZV0udXBkYXRlKCk7XHJcbiAgICAgICAgcGlwZS5wdXNoKGxheWVyc1tuYW1lXSk7XHJcbiAgICAgICAgcGlwZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLm9yZGVyaW5nKCkgLSBiLm9yZGVyaW5nKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVhZHkgPSBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZWFkeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gcmVhZHk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuYm94ID0gZnVuY3Rpb24gKGJveFByb3ZpZGVyKSB7XHJcbiAgICAgICAgYm94RXh0ID0gYm94UHJvdmlkZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuc2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgaWYgKHdpZHRoICE9PSB3IHx8IGhlaWdodCAhPT0gaCkge1xyXG4gICAgICAgICAgICBTZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICByZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmVzaXplZCA9IGZhbHNlO1xyXG4gICAgICAgIHJlYWR5ID0gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICByZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgIGxheWVyc1tuYW1lXS51cGRhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5kcmF3ID0gY29tcG9zZTtcclxuXHJcbn1dKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMi83LzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJywgWydAaW5qZWN0JywgJ0RlYnVnJywgZnVuY3Rpb24gR3JhcGhpY3NBc3NlbWJsZXJMYXllcihpbmplY3QsIERlYnVnKSB7XHJcbiAgICB2YXIgY2FudmFzID0gaW5qZWN0KCckQ2FudmFzJyksXHJcbiAgICAgICAgY29udGV4dCA9IGNhbnZhcy5jb250ZXh0KCksXHJcbiAgICAgICAgd2lkdGggPSAwLFxyXG4gICAgICAgIGhlaWdodCA9IDAsXHJcbiAgICAgICAgZnVuYyA9IG51bGwsXHJcbiAgICAgICAgcmVhZHkgPSBmYWxzZSxcclxuICAgICAgICBvcmRlcmluZyA9IDA7XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlQ2FudmFzKGN0eCkge1xyXG4gICAgICAgIGlmICghcmVhZHkpIHtcclxuICAgICAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgICAgICBpZiAoZnVuYykgZnVuYyhjb250ZXh0KTtcclxuICAgICAgICAgICAgcmVhZHkgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShjYW52YXMuZXhwb3J0KCksIDAsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZiA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgZnVuYyA9IGY7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBEZWJ1Zy53YXJuKHtmOiBmfSwgJ1t7Zn1dIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNpemUgPSBmdW5jdGlvbiAodywgaCkge1xyXG4gICAgICAgIGlmICh3aWR0aCAhPT0gdyB8fCBoICE9PSBoKSB7XHJcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCh3KTtcclxuICAgICAgICAgICAgY2FudmFzLmhlaWdodChoKTtcclxuICAgICAgICAgICAgd2lkdGggPSB3O1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBoO1xyXG4gICAgICAgICAgICByZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5vcmRlcmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgb3JkZXJpbmcgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9yZGVyaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZWFkeSA9IGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmRyYXcgPSB1cGRhdGVDYW52YXM7XHJcbn1dKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjUvMjAxNi5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgZnVuY3Rpb24gUGx1Z2luKCkge1xyXG5cclxuICAgICAgICB2YXIgcHJvcGVydGllcyA9IHt9LCBjbGVhciA9IHt9LCBvYmplY3QgPSBudWxsLFxyXG4gICAgICAgICAgICBhcHBsaWVzID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuZGVmaW5lT2JqZWN0ID0gZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICAgICAgb2JqZWN0ID0gbztcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGVmaW5lT2JqZWN0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMub2JqZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubWF0Y2hUeXBlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKGFwcGxpZXMubGVuZ3RoID09IDApIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcHBsaWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGllc1tpXSA9PT0gdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwbHlUbykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXBwbHlUbztcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSAgdGhpcy5tYXRjaFR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmFwcGx5VG8gPSBmdW5jdGlvbiAodHlwZXMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0eXBlcyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBhcHBsaWVzLnB1c2godHlwZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0eXBlcyA9PSBcIm9iamVjdFwiICYmIHR5cGVzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZXNbaV0gPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWVzLnB1c2godHlwZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hcHBseVRvO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbiAocHJvcGVydHksIGZ1bmMsIHRlbXApIHtcclxuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0aWVzW3Byb3BlcnR5XSkgcHJvcGVydGllc1twcm9wZXJ0eV0gPSBmdW5jO1xyXG4gICAgICAgICAgICBpZiAodGVtcCkgY2xlYXJbcHJvcGVydHldID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLndyYXAgPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdFtwcm9wZXJ0eV0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IHByb3BlcnRpZXNbcHJvcGVydHldO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZWxldGUgIHRoaXMud3JhcDtcclxuICAgICAgICAgICAgZGVsZXRlICB0aGlzLnJlZ2lzdGVyO1xyXG4gICAgICAgICAgICBkZWxldGUgIHRoaXMuY2xlYXI7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5oYXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwcm9wID09IHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFyID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGNsZWFyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNsZWFyLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSAgb2JqZWN0W3Byb3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gNS8xLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJywgW2Z1bmN0aW9uIEFyZWFPYmplY3RDbGFzcygpIHtcclxuXHJcbn1dKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMS8xMy8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJytNb3VzZScsXHJcbiAgICAgICAgZnVuY3Rpb24gQ2lyY2xlT2JqZWN0Q2xhc3MoTW91c2VIZWxwZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNoZWNrRnVuY3Rpb24oTW91c2VIZWxwZXIuY2lyY2xlQ2hlY2tGdW5jdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNi8yMDE2LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJ1RyZWUnLFxyXG4gICAgICAgIGZ1bmN0aW9uIERlZmF1bHRPYmplY3RUeXBlKFRyZWUpIHtcclxuICAgICAgICAgICAgVHJlZS5yb290KHRoaXMpLmFwcGVuZCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI2LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIGZ1bmN0aW9uIEdyb3VwT2JqZWN0Q2xhc3MoKSB7XHJcblxyXG4gICAgfVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzEzLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIFsnK01vdXNlJyxcclxuICAgICAgICBmdW5jdGlvbiBJbWFnZU9iamVjdENsYXNzKE1vdXNlSGVscGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDaGVja0Z1bmN0aW9uKE1vdXNlSGVscGVyLnJlY3RDaGVja0Z1bmN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI1LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIGZ1bmN0aW9uIExpbmVPYmplY3RDbGFzcygpIHtcclxuXHJcbiAgICB9XHJcbik7IiwiJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJytNb3VzZScsXHJcbiAgICAgICAgZnVuY3Rpb24gUmVjdGFuZ2xlT2JqZWN0Q2xhc3MoTW91c2VIZWxwZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNoZWNrRnVuY3Rpb24oTW91c2VIZWxwZXIucmVjdENoZWNrRnVuY3Rpb24pO1xyXG4gICAgICAgICAgICB2YXIgbW91c2UgPSB0aGlzLmV4dGVuc2lvbignTW91c2UnKTtcclxuICAgICAgICAgICAgbW91c2UuY3Vyc29yVHJhbnNmb3JtRnVuY3Rpb24oTW91c2VIZWxwZXIucmVjdEN1cnNvclRyYW5zZm9ybUZ1bmN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvMTMvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWycrTW91c2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uIFNwcml0ZU9iamVjdENsYXNzKE1vdXNlSGVscGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDaGVja0Z1bmN0aW9uKE1vdXNlSGVscGVyLnJlY3RDaGVja0Z1bmN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDMvMjUvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWycrTW91c2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uIFRleHRPYmplY3RDbGFzcyhNb3VzZUhlbHBlcikge1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ2hlY2tGdW5jdGlvbihNb3VzZUhlbHBlci5yZWN0Q2hlY2tGdW5jdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiA0LzEwLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdSZXNvdXJjZScsXHJcbiAgICBbJ0BleHRlbmQnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEF1ZGlvKGV4dGVuZCwgRGVidWcpIHtcclxuICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckUmVzb3VyY2UnKTtcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAnQXVkaW8nO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciByZXNvbHZlRXZlbnRGdW5jID0gbnVsbCwgc3RhdGVGdW5jID0gbnVsbCwgdXJsID0gbnVsbCwgcmVzcG9uc2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbignaW5pdCcsIGZ1bmN0aW9uIChfdXJsLCByZXNvbHZlRnVuYywgc2V0U3RhdGVGdW5jKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlRXZlbnRGdW5jID0gcmVzb2x2ZUZ1bmM7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZUZ1bmMgPSBzZXRTdGF0ZUZ1bmM7XHJcbiAgICAgICAgICAgICAgICB1cmwgPSBfdXJsO1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlQXVkaW8oKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVBdWRpbygpIHtcclxuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XHJcbiAgICAgICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZUZ1bmMoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB0aGlzLnJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVFdmVudEZ1bmMoJ2xvYWQnLCBbcmVzcG9uc2VdKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZUZ1bmMoLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVFdmVudEZ1bmMoJ2Vycm9yJywgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt1cmw6IHVybH0sICdVbmFibGUgdG8gbG9hZCBhdWRpbyBbe3VybH1dLicpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmV4cG9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gMy8yNi8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnUmVzb3VyY2UnLFxyXG4gICAgWydAZXh0ZW5kJywgJ0RlYnVnJywgJ0BDb25maWcnLCAnQEZvbnRzJyxcclxuICAgICAgICBmdW5jdGlvbiBGb250KGV4dGVuZCwgRGVidWcsIGNvbmZpZywgRm9udHMpIHtcclxuXHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJFJlc291cmNlJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAnRm9udCc7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IG51bGwsIHJlc29sdmUgPSBudWxsLCBmb250ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHJvb3QgPSBjb25maWcud2F0Y2goJ2ZvbnREaXInLCBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdCA9IHN0cjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwZW5kZWQpIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0ucmVtb3ZlQ2hpbGQoZm9udExvYWRlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGVja0ludGVydmFsKSB3aW5kb3cuY2xlYXJJbnRlcnZhbChjaGVja0ludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICBnZXRGb250KCk7XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IEZvbnRzLmZvcm1hdHMoKSxcclxuICAgICAgICAgICAgICAgIHdlaWdodCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdHlsZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBhcHBlbmRlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZm9udExvYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgICAgIGZvbnRMb2FkZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncmVmbGVjdC1mb250LWxvYWRlci1lbGVtZW50Jyk7XHJcbiAgICAgICAgICAgIGZvbnRMb2FkZXJFbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSAnc2Fucy1zZXJpZic7XHJcbiAgICAgICAgICAgIGZvbnRMb2FkZXJFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gJzEycHgnO1xyXG4gICAgICAgICAgICBmb250TG9hZGVyRWxlbWVudC5zdHlsZS5saW5lSGVpZ2h0ID0gJzEycHgnO1xyXG4gICAgICAgICAgICBmb250TG9hZGVyRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgICAgIGZvbnRMb2FkZXJFbGVtZW50LnN0eWxlLmxlZnQgPSAnLTk5OTlweCc7XHJcbiAgICAgICAgICAgIGZvbnRMb2FkZXJFbGVtZW50LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcclxuICAgICAgICAgICAgZm9udExvYWRlckVsZW1lbnQuaW5uZXJUZXh0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6IDEyMzQ1Njc4OTBbIT8sLjw+XCLCoyQlXiYqKCl+QCMtPV0nO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbignaW5pdCcsIGZ1bmN0aW9uICh1cmwsIHIsIHMpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUgPSByO1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBzO1xyXG4gICAgICAgICAgICAgICAgZm9udCA9IHVybFswXTtcclxuICAgICAgICAgICAgICAgIHdlaWdodCA9IHVybFsxXTtcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gdXJsWzJdO1xyXG4gICAgICAgICAgICAgICAgZm9udExvYWRlckVsZW1lbnQuc3R5bGUuZm9udFN0eWxlID0gc3R5bGU7XHJcbiAgICAgICAgICAgICAgICBnZXRGb250KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgY2hlY2tJbnRlcnZhbCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRGb250KCkge1xyXG4gICAgICAgICAgICAgICAgRm9udHMuZm9udChyb290LCBmb250LCB3ZWlnaHQsIHN0eWxlKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uYXBwZW5kQ2hpbGQoZm9udExvYWRlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgYXBwZW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcGVhdFRpbGxFcnJvciA9IDEwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0Q291bnQgPSAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWwgPSBbZm9udExvYWRlckVsZW1lbnQub2Zmc2V0V2lkdGgsIGZvbnRMb2FkZXJFbGVtZW50Lm9mZnNldEhlaWdodF07XHJcblxyXG4gICAgICAgICAgICAgICAgZm9udExvYWRlckVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdcIicgKyBGb250cy5mb3JtYXQoZm9udCkgKyAnLScgKyB3ZWlnaHQgKyAnXCIsIHNhbnMtc2VyaWYnO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9udExvYWRlckVsZW1lbnQub2Zmc2V0V2lkdGggIT09IGluaXRpYWxbMF0gfHwgZm9udExvYWRlckVsZW1lbnQub2Zmc2V0SGVpZ2h0ICE9PSBpbml0aWFsWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0ucmVtb3ZlQ2hpbGQoZm9udExvYWRlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGNoZWNrSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgnbG9hZCcsIFtdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0Q291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVwZWF0Q291bnQgPiByZXBlYXRUaWxsRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUoLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCdlcnJvcicsIFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7Zm9udDogZm9udCArICctJyArIHdlaWdodH0sICdVbmFibGUgdG8gbG9hZCBmb250IFt7Zm9udH1dLiBGb250IHBlbmRpbmcgdGltZWQgb3V0Li4uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0ucmVtb3ZlQ2hpbGQoZm9udExvYWRlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGNoZWNrSW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5leHBvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRm9udHMuZm9ybWF0KGZvbnQpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzEyLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdSZXNvdXJjZScsXHJcbiAgICBbJ0BleHRlbmQnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEltYWdlKGV4dGVuZCwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJFJlc291cmNlJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdXJsID0gbnVsbCwgcmVzb2x2ZUV2ZW50RnVuYyA9IG51bGwsIHN0YXRlRnVuYyA9IG51bGwsIGltYWdlID0gbnVsbCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50eXBlID0gJ0ltYWdlJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24oJ2luaXQnLCBmdW5jdGlvbiAoX3VybCwgcmVzb2x2ZUZ1bmMsIHNldFN0YXRlRnVuYykge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZUV2ZW50RnVuYyA9IHJlc29sdmVGdW5jO1xyXG4gICAgICAgICAgICAgICAgc3RhdGVGdW5jID0gc2V0U3RhdGVGdW5jO1xyXG4gICAgICAgICAgICAgICAgdXJsID0gX3VybDtcclxuICAgICAgICAgICAgICAgIENyZWF0ZUltYWdlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlSW1hZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZUZ1bmMoMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlRXZlbnRGdW5jKCdsb2FkJywgW10pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZUZ1bmMoLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVFdmVudEZ1bmMoJ2Vycm9yJywgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt1cmw6IHVybH0sICdVbmFibGUgdG8gbG9hZCBpbWFnZSBbe3VybH1dLicpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5leHBvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW1hZ2U7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMS8xMi8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnUmVzb3VyY2UnLFxyXG4gICAgWydAZXh0ZW5kJywgJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBSZXNvdXJjZShleHRlbmQsIERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgdXJsID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZUZ1bmN0aW9uUGFzc2VkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSAtMTsgLy8gLTEgaW5pdCwgMCBsb2FkaW5nLCAxIGxvYWRlZCwgLTIgZXJyb3JcclxuXHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1cyA9PSAxO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0dXMgPT0gLTI7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzID09IDA7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVybCA9IGZ1bmN0aW9uIChfdXJsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3VybCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gX3VybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmVGdW5jdGlvblBhc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzb2x2ZUV2ZW50KCdpbml0JywgW3VybF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzb2x2ZUV2ZW50KCdpbml0JywgW3VybCwgUmVzb2x2ZUV2ZW50LCBzZXRTdGF0dXNdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVGdW5jdGlvblBhc3NlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYkNvbnRhaW5lciA9IHtcclxuICAgICAgICAgICAgICAgIGluaXQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgbG9hZDogW10sXHJcbiAgICAgICAgICAgICAgICBlcnJvcjogW10sXHJcbiAgICAgICAgICAgICAgICBsb2FkaW5nOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0U3RhdHVzKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcih7dmFsOiB2YWx9LCAnW3t2YWx9XSBpcyBub3QgdmFsaWQgdmFsdWUgZm9yIHN0YXR1cycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWwgPiAxIHx8IHZhbCA8IC0yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe3ZhbDogdmFsfSwgJ1t7dmFsfV0gbm8gc3VjaCBzdGF0dXMgcG9zc2libGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3RhdHVzID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBSZXNvbHZlRXZlbnQoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjYkNvbnRhaW5lcltldmVudF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gdHlwZW9mIGRhdGEgPT0gXCJvYmplY3RcIiAmJiBkYXRhLmNvbnN0cnVjdG9yID09IEFycmF5ID8gZGF0YSA6IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNiQ29udGFpbmVyW2V2ZW50XS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYkNvbnRhaW5lcltldmVudF1baV0uYXBwbHkoc2VsZiwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7ZTogZXZlbnR9LCAnVW5hYmxlIHRvIHNldCBldmVudCB7ZX0uIE5vIHN1Y2ggZXZlbnQhJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMub24gPSBmdW5jdGlvbiAoZXZlbnQsIGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IGNiQ29udGFpbmVyW2V2ZW50XSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jID0gdHlwZW9mIGZ1bmMgPT0gXCJmdW5jdGlvblwiID8gZnVuYyA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChldmVudCA9PSAnbG9hZCcgJiYgc3RhdHVzID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgPT0gJ2Vycm9yJyAmJiBzdGF0dXMgPT0gLTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmdW5jLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFhcnJheSB8fCAhZnVuYykge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe2U6IGV2ZW50fSwgJ1VuYWJsZSB0byBzZXQgaGFuZGxlciBmb3IgZXZlbnQgW3tlfV0uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNiQ29udGFpbmVyW2V2ZW50XS5wdXNoKGZ1bmMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvMTIvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ1Jlc291cmNlJyxcclxuICAgIFsnQGV4dGVuZCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gU3ByaXRlKGV4dGVuZCwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJFJlc291cmNlJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdXJsID0gbnVsbCwgaW1hZ2UgPSBudWxsLCBzaXplID0gMCwgZnJhbWVzID0gMCwgZHVyYXRpb24gPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsXHJcbiAgICAgICAgICAgICAgICBmcmFtZUhlaWdodCA9IDAsIGZyYW1lV2lkdGggPSAwLCBmcHMgPSAxMixcclxuICAgICAgICAgICAgICAgIHNldFN0YXVzRnVuYyA9IG51bGwsIHJlc29sdmVFdmVudEZ1bmMgPSBudWxsLCByZWFkeSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gW107XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAnU3ByaXRlJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMub24oJ2luaXQnLCBmdW5jdGlvbiAodSwgZXZlbnRGLCBzdGF0dXNGKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRTdGF1c0Z1bmMgPSBzdGF0dXNGO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZUV2ZW50RnVuYyA9IGV2ZW50RjtcclxuICAgICAgICAgICAgICAgIHVybCA9IHU7XHJcblxyXG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U3RhdXNGdW5jKDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGltYWdlLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGltYWdlLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENyZWF0ZUNhbnZhc0FycmF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNldENhbnZhc1NpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZUV2ZW50RnVuYygnbG9hZCcsIFtdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U3RhdXNGdW5jKC0yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlRXZlbnRGdW5jKCdlcnJvcicsIFtdKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZUNhbnZhc0FycmF5KCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBlbGVtcyA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IHNpemU7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeC5wdXNoKFtdKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHNpemU7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbXMgPCBmcmFtZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeFtyXS5wdXNoKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gU2V0Q2FudmFzU2l6ZSgpIHtcclxuICAgICAgICAgICAgICAgIGZyYW1lSGVpZ2h0ID0gTWF0aC5yb3VuZChoZWlnaHQgLyBzaXplKTtcclxuICAgICAgICAgICAgICAgIGZyYW1lV2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoIC8gc2l6ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBzaXplOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHNpemU7IGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0cml4W3JdW2NdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXhbcl1bY10uc2V0QXR0cmlidXRlKCd3aWR0aCcsIGZyYW1lV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4W3JdW2NdLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgZnJhbWVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9jdHggPSBtYXRyaXhbcl1bY10uZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jdHgudHJhbnNsYXRlKC1mcmFtZVdpZHRoICogYywgLWZyYW1lSGVpZ2h0ICogcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlYWR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWR5O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZVdpZHRoO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZUhlaWdodDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlV2lkdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2lkdGg7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZwcyA9IGZ1bmN0aW9uIChudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtYmVyICE9PSBcIm51bWJlclwiIHx8IG51bWJlciA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7bjogbnVtYmVyfSwgJ1t7bn1dIGlzIG5vdCBhIGNvcnJlY3QgZnBzIG51bWJlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZwcyA9IG51bWJlcjtcclxuXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IE1hdGgucm91bmQoKGZyYW1lcyAvIGZwcykgKiAxMDAwKTtcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgcGF1c2UgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGF1c2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBwYXVzZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBwYXVzZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmICE9PSBcIm51bWJlclwiIHx8IGYgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Jvd3M6IGZ9LCAnW3tyb3dzfV0gaXMgbm90IGEgdmFsaWQgZnJhbWVzIG51bWJlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzaXplID0gTWF0aC5jZWlsKE1hdGguc3FydChmKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZnJhbWVzID0gZjtcclxuXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IE1hdGgucm91bmQoKGZyYW1lcyAvIGZwcykgKiAxMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZWFkeSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgQ3JlYXRlQ2FudmFzQXJyYXkoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1lcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50WCA9IDAsIGN1cnJlbnRZID0gMDtcclxuXHJcbiAgICAgICAgICAgIHZhciBfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50aWNrID0gZnVuY3Rpb24gKHRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aW1lLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXVzZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9ICh0aW1lIC0gX3RpbWUpIC8gZHVyYXRpb247XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBfdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzcyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lID0gTWF0aC5mbG9vcigoZnJhbWVzIC0gMSkgKiBwcm9ncmVzcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudFkgPSBNYXRoLmZsb29yKGZyYW1lIC8gc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50WCA9IGZyYW1lIC0gY3VycmVudFkgKiBzaXplO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5leHBvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0cml4W2N1cnJlbnRZXVtjdXJyZW50WF0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0cml4W2N1cnJlbnRZXVtjdXJyZW50WF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI0LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdTdGF0ZScsXHJcbiAgICBmdW5jdGlvbiBQcm9wZXJ0eSgpIHtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlID0gbnVsbCwgY2FsbGJhY2tzID0gW107XHJcblxyXG5cclxuICAgICAgICB0aGlzLnNldCA9IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tpXSh2YWwsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLm9uc2V0ID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiAgZnVuYyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuO1xyXG4gICAgICAgICAgICBjYWxsYmFja3MucHVzaChmdW5jKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNC8yMDE2LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnU3RhdGUnLFxyXG4gICAgWydAaW5qZWN0JyxcclxuICAgICAgICBmdW5jdGlvbiBTdGF0ZShpbmplY3QpIHtcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0ge30sIHByb3BzID0ge307XHJcblxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0UHJvcGVydHlDYWxsYmFjayhuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG4sIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrc1tuYW1lXSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tuYW1lXVtpXShuLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLmRlZmluZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWwpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wc1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzW25hbWVdLnNldCh2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwcm9wc1tuYW1lXSA9IGluamVjdCgnJFByb3BlcnR5Jyk7XHJcbiAgICAgICAgICAgICAgICBwcm9wc1tuYW1lXS5vbnNldChHZXRQcm9wZXJ0eUNhbGxiYWNrKG5hbWUpKTtcclxuICAgICAgICAgICAgICAgIHByb3BzW25hbWVdLnNldCh2YWwpO1xyXG5cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2ggPSBmdW5jdGlvbiAocHJvcGVydHksIGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgIT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGZ1bmMgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2tzW3Byb3BlcnR5XSkgY2FsbGJhY2tzW3Byb3BlcnR5XSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghcHJvcHNbcHJvcGVydHldKSB0aGlzLmRlZihwcm9wZXJ0eSwgbnVsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzW3Byb3BlcnR5XS5wdXNoKGZ1bmMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI1LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdTb3VuZCcsXHJcbiAgICBbJ0BpbmplY3QnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEFuaW1hdGlvblByb3ZpZGVyKGluamVjdCwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25zID0gW10sXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbW9ycGhzID0ge307XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1vcnBoID0gZnVuY3Rpb24gKG5hbWUsIG9yZGVyaW5nLCBzZXR0ZXIsIGFwcGxpZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb3JwaCA9IGluamVjdCgnJE1vcnBoJyk7XHJcbiAgICAgICAgICAgICAgICBtb3JwaC5jb25maWcobmFtZSwgdGhpcywgb3JkZXJpbmcsIHNldHRlciwgYXBwbGllcik7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9ycGgudmFsaWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vcnBoc1tuYW1lXSA9IG1vcnBoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5leHRyYWN0TW9ycGggPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vcnBoc1tuYW1lXTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZpbmRDb21wZXRpdG9yKHByb3BlcnRpZXMsIGFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLiQkU0VMRiA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBldGl0b3IgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uc1tpXS4kJFNFTEYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbnNbaV0uYWN0aXZlKCkgJiYgIWFuaW1hdGlvbnNbaV0uZG9uZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgcHJvcGVydGllcy5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25zW2ldLmhhc1Byb3BlcnR5KHByb3BlcnRpZXNbbl0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wZXRpdG9yKSBjb21wZXRpdG9yID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGV0aXRvci5wdXNoKGFuaW1hdGlvbnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBhbmltYXRpb24uJCRTRUxGO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21wZXRpdG9yO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBDaGVja0FuaW1hdGlvblF1ZXVlKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hbmltYXRpb25zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbmltYXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmltYXRpb25zW2ldLmFjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IGFuaW1hdGlvbnNbaV0ucHJvcGVydGllcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uc1tpXS5xdWV1ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbmRDb21wZXRpdG9yKHByb3BzLCBhbmltYXRpb25zW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnNbaV0uc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21wZXRpdG9ycyA9IGZpbmRDb21wZXRpdG9yKHByb3BzLCBhbmltYXRpb25zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wZXRpdG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgY29tcGV0aXRvcnMubGVuZ3RoOyBuKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcm9wcy5sZW5ndGg7IHArKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGV0aXRvcnNbbl0uc3RvcChwcm9wc1twXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zW2ldLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2FuaW1hdGlvbnMucHVzaChhbmltYXRpb25zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uc1tpXS5kb25lKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hbmltYXRpb25zLnB1c2goYW5pbWF0aW9uc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9ucyA9IF9hbmltYXRpb25zO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlQW5pbWF0aW9uVHlwZTEocHJvcGVydHksIHZhbHVlLCBkdXJhdGlvbiwgZWFzaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFpciA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIHBhaXJbcHJvcGVydHldID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1vcnBoc1twcm9wZXJ0eV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhY2sgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJpbmc6IG1vcnBoc1twcm9wZXJ0eV0ub3JkZXJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JwaDogbW9ycGhzW3Byb3BlcnR5XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbiAmJiB0eXBlb2YgZHVyYXRpb24gPT09IFwibnVtYmVyXCIpIGNvbmZpZy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlYXNpbmcgJiYgdHlwZW9mIGVhc2luZyA9PT0gXCJzdHJpbmdcIikgY29uZmlnLmVhc2luZyA9IGVhc2luZztcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBpbmplY3QoJyRBbmltYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmNvbmZpZyh0aGlzLCBzdGFjaywgY29uZmlnLCBDaGVja0FuaW1hdGlvblF1ZXVlKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZUFuaW1hdGlvblR5cGUyKHBhaXJzLCBhcmcyLCBhcmczKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gYXJnMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcyID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogYXJnMlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmczID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5lYXNpbmcgPSBhcmczXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZzIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogYXJnMlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHBhaXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYWlycy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbW9ycGhzW3Byb3BlcnR5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IHByb3BlcnR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICdQcm9wZXJ0eSB7cHJvcGVydHl9IG9mIHt0eXBlfSBjYW4gbm90IGJlIGFuaW1hdGVkIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BlcnR5XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyaW5nOiBtb3JwaHNbcHJvcGVydHldLm9yZGVyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JwaDogbW9ycGhzW3Byb3BlcnR5XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwYWlyc1twcm9wZXJ0eV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbW9ycGhfc3RhY2sgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpdGVtIGluIHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vcnBoX3N0YWNrLnB1c2gocmVzdWx0W2l0ZW1dKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobW9ycGhfc3RhY2subGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9ycGhfc3RhY2suc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5vcmRlcmluZyAtIGIub3JkZXJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBpbmplY3QoJyRBbmltYXRpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY29uZmlnKHRoaXMsIG1vcnBoX3N0YWNrLCBjb25maWcsIENoZWNrQW5pbWF0aW9uUXVldWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2FybignTm8gcHJvcGVydGllcyB0byBhbmltYXRlIScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUgPSBmdW5jdGlvbiAoYXJnMSwgYXJnMiwgYXJnMywgYXJnNCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnc3RyaW5nJyAmJiBhcmcyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlQW5pbWF0aW9uVHlwZTEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcxID09PSBcIm9iamVjdFwiICYmIGFyZzEuY29uc3RydWN0b3IgIT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ3JlYXRlQW5pbWF0aW9uVHlwZTIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ1VuYWJsZSB0byBjcmVhdGUgYW5pbWF0aW9uLiBXcm9uZyBhcmd1bWVudHMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIENoZWNrQW5pbWF0aW9uUXVldWUoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5pbWF0ZWQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgIT09IFwic3RyaW5nXCIgfHwgcHJvcGVydHkubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuaW1hdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zW2ldLnN0b3AocHJvcGVydHkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDQvMjMvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ1NvdW5kJyxcclxuICAgIFsnQGluamVjdCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gQXVkaW8oaW5qZWN0LCBEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICB1cmwgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgdHlwZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBldmVudHMgPSBpbmplY3QoJyRFdmVudFByb3ZpZGVyJyksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zID0gaW5qZWN0KCckQW5pbWF0aW9uUHJvdmlkZXInKSxcclxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIG5vZGVuYW1lID0gJyc7XHJcblxyXG4gICAgICAgICAgICBldmVudHMud3JhcCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGV2ZW50QXJncygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbc2VsZiwgb3V0cHV0LCB1cmwsIHR5cGVdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ3JlYWR5JywgZXZlbnRBcmdzLCB0cnVlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdsb2FkJywgZXZlbnRBcmdzLCB0cnVlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdlcnJvcicsIGV2ZW50QXJncywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgncGxheScsIGV2ZW50QXJncywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ2Nvbm5lY3QnLCBldmVudEFyZ3MsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdkaXNjb25uZWN0JywgZXZlbnRBcmdzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgnZW5kJywgZXZlbnRBcmdzLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVBbmltYXRpb25Nb3JwaChmaWx0ZXIsIHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zLm1vcnBoLmFwcGx5KHRoaXMsIFtwcm9wZXJ0eS5uYW1lLCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BlcnR5Lm5vcm1hbGl6ZXIodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KGZpbHRlci5nZXQocHJvcGVydHkubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0eS5ub3JtYWxpemVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci5zZXQocHJvcGVydHkubmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKG5hbWUsIHNyYykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmIG5hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSBcInN0cmluZ1wiICYmIHNyYyAhPT0gJ2Rlc3RpbmF0aW9uJyAmJiBzcmMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBzcmM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IGluamVjdCgnJFVzZXJBdWRpb1NvdXJjZScpLmJ1aWxkKHNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnU2FtcGxlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnJlc29sdmUoJ2xvYWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzcmMgPT09ICdkZXN0aW5hdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlID0gaW5qZWN0KCckVXNlckF1ZGlvTWl4ZXInKS5idWlsZChuYW1lLCBzcmMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzWzBdICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwib2JqZWN0XCIgJiYgYXJndW1lbnRzWzBdLiQkU09VUkNFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gJ1snICsgbmFtZSArICddJyArICdBdWRpb0NoYW5uZWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ0NoYW5uZWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMucmVzb2x2ZSgnbG9hZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzcmMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBpbmplY3QoJyRVc2VyQXVkaW9NaXhlcicpLmJ1aWxkKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAnWycgKyBuYW1lICsgJ10nICsgJ0F1ZGlvQ2hhbm5lbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnQ2hhbm5lbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdsb2FkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2Uub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMucmVzb2x2ZSgnZXJyb3InKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLm9uKCdwbGF5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMucmVzb2x2ZSgncGxheScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2Uub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnJlc29sdmUoJ2VuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2Uub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdjb25uZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5vbignZGlzY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnJlc29sdmUoJ2Rpc2Nvbm5lY3QnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSBzb3VyY2UuZmlsdGVycygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbHRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BzID0gZmlsdGVyc1tpXS5wcm9wcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtID0gMDsgbSA8IHByb3BzLmxlbmd0aDsgbSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHNbbV0uYW5pbWF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVBbmltYXRpb25Nb3JwaC5hcHBseSh0aGlzLCBbZmlsdGVyc1tpXSwgcHJvcHNbbV1dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZW5hbWUgPSBuYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBldmVudHMucmVzb2x2ZSgncmVhZHknKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdBdWRpbyBtaXhlciBoYXZlIG5vIG5hbWUhIFNob3VsZCBiZSBhIHN0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5maWx0ZXIgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBuYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyID0gbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVycyA9IHNvdXJjZS5maWx0ZXJzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyc1tpXS5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlcnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5zZXQobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci5nZXQobmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe25hbWU6IG5hbWV9LCAnVW5hYmxlIHRvIHNldCBmaWx0ZXIgcHJvcGVydHkgW3tuYW1lfV0uIE5vIGZpbHRlciB3aXRoIHRoYXQgcGFyYW0hJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3QgPSBmdW5jdGlvbiAob3V0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3V0ICYmIHR5cGVvZiBvdXQgPT09IFwib2JqZWN0XCIgJiYgb3V0LiQkU09VUkNFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG91dCA9PT0gXCJvYmplY3RcIiAmJiBvdXQudHlwZSAmJiB0eXBlb2Ygb3V0LnR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHlwZSA9IG91dC50eXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdDaGFubmVsJyAmJiBjdHlwZSA9PT0gJ1NhbXBsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoJ1RyeWluZyB0byBjb25uZWN0IENoYW5uZWwgd2l0aCBTYW1wbGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChvdXQuY29ubmVjdCAmJiB0eXBlb2Ygb3V0LmNvbm5lY3QgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0c291cmNlID0gb3V0LmNvbm5lY3QoeyQkU09VUkNFOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmNvbm5lY3Qob3V0c291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdVbmtub3duIHR5cGUgb2YgIG9iamVjdCBwYXNzZWQgYXMgb3V0cHV0IScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdVbmtub3duIHR5cGUgb2YgIG9iamVjdCBwYXNzZWQgYXMgb3V0cHV0IScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vdXRwdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9ucy5hbmltYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ciA9PT0gdHlwZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy51cmwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVuYW1lO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9ucy5zdG9wLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDQvMjEvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ1NvdW5kJyxcclxuICAgIFsnQGluamVjdCcsICdAQ29uZmlnJywgJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBVc2VyQXVkaW9NaXhlcihpbmplY3QsIGNvbmZpZywgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBldmVudHMgPSBpbmplY3QoJyRFdmVudFByb3ZpZGVyJyksXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJzID0gW10sXHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgbmFtZSA9ICcnLFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyc0NmZyA9IGNvbmZpZy53YXRjaCgnZmlsdGVycycsIGZ1bmN0aW9uICh2KSB7ZmlsdGVycyA9IHZ9KTtcclxuXHJcblxyXG4gICAgICAgICAgICBldmVudHMud3JhcCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFyZ0YoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXNdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ3BsYXknLCBhcmdGLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgnY29ubmVjdCcsIGFyZ0YsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdyZWFkeScsIGFyZ0YsIHRydWUpO1xyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ2Vycm9yJywgYXJnRiwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKG4sIGNoYW5uZWwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbHRlcnNDZmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGluamVjdCgnJCcgKyBmaWx0ZXJzQ2ZnW2ldICsgJ05vZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyc1tmaWx0ZXJzLmxlbmd0aCAtIDFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnNbZmlsdGVycy5sZW5ndGggLSAxXS5jb25uZWN0KG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuID09PSBcInN0cmluZ1wiICYmIG4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7bjogbn0sICdbe259XSBpcyBub3QgYSB2YWxpZCBuYW1lIGZvciBjaGFubmVsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzLnJlc29sdmUoJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5uZWwgJiYgdHlwZW9mIGNoYW5uZWwgPT09IFwib2JqZWN0XCIgJiYgY2hhbm5lbC5jb25uZWN0ICYmIHR5cGVvZiBjaGFubmVsLmNvbm5lY3QgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdChjaGFubmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYW5uZWwgPT09ICdkZXN0aW5hdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzdGluYXRpb24gPSBpbmplY3QoJyREZXN0aW5hdGlvbk5vZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzW2ZpbHRlcnMubGVuZ3RoIC0gMV0uY29ubmVjdChkZXN0aW5hdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uIChvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91dC4kJEFVRElPTk9ERSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcnNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSAgdGhpcy5idWlsZDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0ID0gZnVuY3Rpb24gKG91dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG91dC4kJEFVRElPTk9ERSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJzWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gb3V0LmNvbm5lY3QoeyQkQVVESU9OT0RFOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyc1tmaWx0ZXJzLmxlbmd0aCAtIDFdLmNvbm5lY3QoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3V0cHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiA0LzE5LzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdTb3VuZCcsXHJcbiAgICBbJ0BleHRlbmQnLCAnQGluamVjdCcsXHJcbiAgICAgICAgZnVuY3Rpb24gVXNlckF1ZGlvU291cmNlKGV4dGVuZCwgaW5qZWN0KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IGluamVjdCgnJEF1ZGlvU291cmNlJyksXHJcbiAgICAgICAgICAgICAgICBldmVudHMgPSBpbmplY3QoJyRFdmVudFByb3ZpZGVyJyksXHJcbiAgICAgICAgICAgICAgICBtaXhlciA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgdXJsID0gJyc7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjYkFyZ3MoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXNdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjb25uZWN0Q2JBcmdzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLCBvdXRwdXRdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudHMud3JhcCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgncmVhZHknLCBjYkFyZ3MsIHRydWUpO1xyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ2xvYWQnLCBjYkFyZ3MsIHRydWUpO1xyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ2Vycm9yJywgY2JBcmdzLCB0cnVlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdjb25uZWN0JywgY29ubmVjdENiQXJncywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ3BsYXknLCBjYkFyZ3MsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdzdG9wJywgY2JBcmdzLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBub2RlLm9uKCdyZWFkeScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdyZWFkeScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG5vZGUub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudHMucmVzb2x2ZSgnbG9hZCcpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIG5vZGUub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzLnJlc29sdmUoJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uIChzcmMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gXCJzdHJpbmdcIiAmJiBzcmMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHNyYztcclxuICAgICAgICAgICAgICAgICAgICBub2RlLmJ1aWxkKHNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWl4ZXIgPSBpbmplY3QoJyRVc2VyQXVkaW9NaXhlcicpLmJ1aWxkKCdzb3VyY2UtYnVpbHQtaW4tZmlsdGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWl4ZXIub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdjb25uZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jb25uZWN0KG1peGVyLmNvbm5lY3QoeyQkQVVESU9OT0RFOiB0cnVlfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJ1aWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdyZWFkeScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICB0aGlzLmJ1aWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdlcnJvcicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtaXhlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtaXhlci5maWx0ZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgdGhpcy5wbGF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXR1cygnZXJyb3InKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cygncmVhZHknKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMoJ2xvYWQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vdXRwdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0ID0gZnVuY3Rpb24gKG91dCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG91dCAmJiBvdXQuY29uc3RydWN0b3IgPT09IG1peGVyLmNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgIG1peGVyLmNvbm5lY3Qob3V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDQvMTYvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ1NvdW5kJyxcclxuICAgIFsnQEF1ZGlvJywgJ0BleHRlbmQnLFxyXG4gICAgICAgIGZ1bmN0aW9uIERlbGF5Tm9kZShhdWRpbywgZXh0ZW5kKSB7XHJcblxyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyRBdWRpb05vZGUnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aW1lQ0ZHID0gMCwgZm9yY2VDRkcgPSAwLCBraWxsRGVsYXkgPSAxMDAwMCxcclxuICAgICAgICAgICAgICAgIGdsb2JhbEdhaW4gPSBhdWRpby5jb250ZXh0KCkuY3JlYXRlR2FpbigpLFxyXG4gICAgICAgICAgICAgICAgZGVsYXkgPSBhdWRpby5jb250ZXh0KCkuY3JlYXRlRGVsYXkoKSxcclxuICAgICAgICAgICAgICAgIGZlZWRiYWNrID0gYXVkaW8uY29udGV4dCgpLmNyZWF0ZUdhaW4oKSxcclxuICAgICAgICAgICAgICAgIGJxID0gYXVkaW8uY29udGV4dCgpLmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xyXG5cclxuICAgICAgICAgICAgZ2xvYmFsR2Fpbi5nYWluLnZhbHVlID0gMTtcclxuICAgICAgICAgICAgYnEuZnJlcXVlbmN5LnZhbHVlID0gMjAwMDtcclxuICAgICAgICAgICAgZmVlZGJhY2suZ2Fpbi52YWx1ZSA9IGZvcmNlQ0ZHO1xyXG4gICAgICAgICAgICBkZWxheS5kZWxheVRpbWUudmFsdWUgPSB0aW1lQ0ZHO1xyXG5cclxuICAgICAgICAgICAgZGVsYXkuY29ubmVjdChmZWVkYmFjayk7XHJcbiAgICAgICAgICAgIGZlZWRiYWNrLmNvbm5lY3QoYnEpO1xyXG4gICAgICAgICAgICBicS5jb25uZWN0KGRlbGF5KTtcclxuICAgICAgICAgICAgZmVlZGJhY2suY29ubmVjdChnbG9iYWxHYWluKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGQoJ2RlbGF5JywgW2dsb2JhbEdhaW4sIGZlZWRiYWNrXSwgZ2xvYmFsR2Fpbik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnR5KCdkZWxheScsIFswLCAwXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUubGVuZ3RoID09IDIgJiYgdHlwZW9mIHZhbHVlWzBdID09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlWzFdID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSB2YWx1ZVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlID0gdmFsdWVbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZSA+IDEpIHRpbWUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZSA8IDApIHRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9yY2UgPiAuOCkgZm9yY2UgPSAuODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvcmNlIDwgMCkgZm9yY2UgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lQ0ZHID0gdGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VDRkcgPSBmb3JjZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkuZGVsYXlUaW1lLnZhbHVlID0gdGltZUNGRztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlZGJhY2suZ2Fpbi52YWx1ZSA9IGZvcmNlQ0ZHO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZvcmNlLCB0aW1lXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZVswXSwgdmFsdWVbMV1dO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gdmFsdWVbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlID0gdmFsdWVbMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lID4gMSkgdGltZSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWUgPCAwKSB0aW1lID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yY2UgPiAuOCkgZm9yY2UgPSAuODtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yY2UgPCAwKSBmb3JjZSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZm9yY2UsIHRpbWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gNC8xNi8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnU291bmQnLFxyXG4gICAgWydAQXVkaW8nLCAnQGV4dGVuZCcsXHJcbiAgICAgICAgZnVuY3Rpb24gRGVzdGluYXRpb25Ob2RlKGF1ZGlvLCBleHRlbmQpIHtcclxuXHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJEF1ZGlvTm9kZScpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5idWlsZCgnZGVzdGluYXRpb24nLCBhdWRpby5jb250ZXh0KCkuZGVzdGluYXRpb24sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiA0LzE2LzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdTb3VuZCcsXHJcbiAgICBbJ0BBdWRpbycsICdAZXh0ZW5kJyxcclxuICAgICAgICBmdW5jdGlvbiBHYWluTm9kZShhdWRpbywgZXh0ZW5kKSB7XHJcblxyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyRBdWRpb05vZGUnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB2b2x1bWUgPSAxLFxyXG4gICAgICAgICAgICAgICAgZ2FpbiA9IGF1ZGlvLmNvbnRleHQoKS5jcmVhdGVHYWluKCk7XHJcblxyXG4gICAgICAgICAgICBnYWluLmdhaW4udmFsdWUgPSB2b2x1bWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkKCdnYWluJywgZ2FpbiwgZ2Fpbik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnR5KCd2b2x1bWUnLCAxLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMSkgdmFsdWUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2Fpbi5nYWluLnZhbHVlID0gdm9sdW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMSkgdmFsdWUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiA0LzE2LzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdTb3VuZCcsXHJcbiAgICBbJ0BBdWRpbycsICdAZXh0ZW5kJyxcclxuICAgICAgICBmdW5jdGlvbiBMb3dwYXNzTm9kZShhdWRpbywgZXh0ZW5kKSB7XHJcblxyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyRBdWRpb05vZGUnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBicWYgPSBhdWRpby5jb250ZXh0KCkuY3JlYXRlQmlxdWFkRmlsdGVyKCksXHJcblxyXG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5ID0gMjIwNTA7XHJcblxyXG4gICAgICAgICAgICBicWYudHlwZSA9ICdsb3dwYXNzJztcclxuICAgICAgICAgICAgYnFmLmZyZXF1ZW5jeS52YWx1ZSA9IGZyZXF1ZW5jeTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGQoJ2xvd3Bhc3MnLCBicWYsIGJxZik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByb3BlcnR5KCdsb3dwYXNzJywgMjIwNTAsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMjIwNTApIHZhbHVlID0gMjIwNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnFmLmZyZXF1ZW5jeS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDIyMDUwKSB2YWx1ZSA9IDIyMDUwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDQvMTYvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ1NvdW5kJyxcclxuICAgIFsnQGluamVjdCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gQXVkaW9Ob2RlKGluamVjdCwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgYnVpbGRGID0gZnVuY3Rpb24gKHNvdW5kLCBvdXRwdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW91dHB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLmlucHV0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kLmNvbm5lY3QoaW5wdXRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dCgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNvdW5kcyA9IFtdLFxyXG4gICAgICAgICAgICAgICAgZXZlbnRzID0gaW5qZWN0KCckRXZlbnRQcm92aWRlcicpLFxyXG4gICAgICAgICAgICAgICAgbm9kZW5hbWUgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFyZ3MoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW25leHROb2RlXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXZlbnRzLndyYXAodGhpcyk7XHJcblxyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ3JlYWR5JywgYXJncywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgncGxheScsIGFyZ3MsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdlbmQnLCBhcmdzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgnY29ubmVjdCcsIGFyZ3MsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdkaXNjb25uZWN0JywgYXJncywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ3Byb3BlcnR5JywgYXJncywgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIG91dHB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfaW5wQXJyYXkgPSBuZXh0Tm9kZS5pbnB1dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0cHV0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgX2lucEFycmF5Lmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbaV0uZGlzY29ubmVjdChfaW5wQXJyYXlbbl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBldmVudHMucmVzb2x2ZSgnZGlzY29ubmVjdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3QgPSBmdW5jdGlvbiAob3V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgIG5leHROb2RlID0gb3V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIG91dHB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfaW5wQXJyID0gbmV4dE5vZGUuaW5wdXQoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IF9pbnBBcnIubGVuZ3RoOyBuKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtpXS5jb25uZWN0KF9pbnBBcnJbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZXZlbnRzLnJlc29sdmUoJ2Nvbm5lY3QnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5idWlsZCA9IGZ1bmN0aW9uIChuYW1lLCBpbnAsIG91dCwgZikge1xyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSB0eXBlb2YgaW5wID09IFwib2JqZWN0XCIgJiYgaW5wLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IGlucCA6IFtpbnBdO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdHlwZW9mIG91dCA9PSBcIm9iamVjdFwiICYmIG91dC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgPyBvdXQgOiBbb3V0XTtcclxuICAgICAgICAgICAgICAgIG5vZGVuYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZiA9PSBcImZ1bmN0aW9uXCIpIGJ1aWxkRiA9IGY7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5idWlsZDtcclxuICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdyZWFkeScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlucHV0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vdXRwdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVuYW1lO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbGF5ID0gZnVuY3Rpb24gKHNvdW5kLCBvdXRwdXQpIHtcclxuICAgICAgICAgICAgICAgIHNvdW5kcy5wdXNoKHNvdW5kKTtcclxuICAgICAgICAgICAgICAgIHNvdW5kLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBzb3VuZC4kJFNFQVJDSCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VuZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzb3VuZHMuJCRTRUFSQ0gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvdW5kc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNvdW5kLiQkU0VBUkNIO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kcyA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChuZXh0Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlLnBsYXkoc291bmQsIGJ1aWxkRi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgbW9kZWwgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgZGVmVmFsLCBzZXR0ZXIsIGdldHRlciwgbm9ybWxpemVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXR0ZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRlcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplcjogbm9ybWxpemVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlZDogdHlwZW9mIG5vcm1saXplciA9PT0gXCJmdW5jdGlvblwiID8gdHJ1ZSA6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBnZXR0ZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5nZXR0ZXIgPSBnZXR0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuc2V0dGVyID0gc2V0dGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkudmFsdWUgPSBkZWZWYWw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZWYWwgJiYgdHlwZW9mIHByb3BlcnR5LmdldHRlciAmJiBwcm9wZXJ0eS5zZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RlbFtwcm9wZXJ0eS5uYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxbcHJvcGVydHkubmFtZV0gPSBwcm9wZXJ0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Byb3BlcnR5OiBwcm9wZXJ0eX0sICdEdXBsaWNhdGVkIHByb3BlcnR5IFt7cHJvcGVydHl9XScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7bmFtZTogbmFtZX0sICdQcm9wZXJ0eSBuYW1lIFt7bmFtZX1dIGlzIG5vdCB2YWxpZCEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT0gXCJzdHJpbmdcIiAmJiBuYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gbW9kZWxbbmFtZV0uc2V0dGVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxbbmFtZV0udmFsdWUgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtwcm9wOiBuYW1lLCB2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgdmFsdWVuIGZvciBbe3Byb3B9XS4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT0gXCJzdHJpbmdcIiAmJiBuYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWxbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsW25hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7bmFtZTogbmFtZX0sICdPYmplY3QgaGFzIG5vIHByb3BlcnR5IFt7bmFtZX1dLiBVbmFibGUgdG8gZ2V0IHZhbHVlLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ1Byb3BlcnR5IG5hbWUgaGFzIHRvIGJlIGEgc3RyaW5nJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnByb3BzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gbW9kZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWwuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobW9kZWxbcHJvcF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5oYXMgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbW9kZWxbbmFtZV07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBWaWt0b3IgS2hvZG9zZXZpY2ggb24gNC8yMi8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnU291bmQnLFxyXG4gICAgZnVuY3Rpb24gQXVkaW9Ob2RlU291bmREaXNwYXRjaGVyKCkge1xyXG5cclxuICAgICAgICB2YXIgc291bmRzID0gW107XHJcblxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbiAoc291bmQpIHtcclxuICAgICAgICAgICAgc291bmQuYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc291bmQuJCRTRUFSQ0ggPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdW5kcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc291bmRzW2ldLiQkU0VBUkNIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNvdW5kc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc291bmRzID0gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNvdW5kcy5wdXNoKHNvdW5kKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnJlY29ubmVjdCA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdW5kcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc291bmRzW2ldLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgIHNvdW5kc1tpXS5jb25uZWN0KGRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDQvMTYvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ1NvdW5kJyxcclxuICAgIFsnQEF1ZGlvJywgJ0BpbmplY3QnLCAnUmVzb3VyY2UnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEF1ZGlvU291cmNlKGF1ZGlvLCBpbmplY3QsIFJlc291cmNlLCBEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHVybCA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIGV2ZW50cyA9IGluamVjdCgnJEV2ZW50UHJvdmlkZXInKSxcclxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgc291bmRzID0gW107XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhcmdzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtyZXNvdXJjZSwgYnVmZmVyLCBvdXRwdXRdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBldmVudHMud3JhcCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgncmVhZHknLCBhcmdzLCB0cnVlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdsb2FkJywgYXJncywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgnZXJyb3InLCBhcmdzLCB0cnVlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdjb25uZWN0JywgYXJncywgZmFsc2UpO1xyXG4gICAgICAgICAgICBldmVudHMuZXZlbnQoJ2Rpc2Nvbm5lY3QnLCBhcmdzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGV2ZW50cy5ldmVudCgncGxheScsIGZhbHNlKTtcclxuICAgICAgICAgICAgZXZlbnRzLmV2ZW50KCdlbmQnLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKHNyYykge1xyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UgPSBSZXNvdXJjZS5hdWRpbyhzcmMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc291cmNlLm9uKCdsb2FkJywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW8uY29udGV4dCgpLmRlY29kZUF1ZGlvRGF0YShcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdsb2FkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtzcmM6IHNyY30sICdbe3NyY31dIGF1ZGlvIGJ1ZmZlciBjYW4gbm90IGJlIGRlY29kZWQuIFJlc291cmNlIG5vdCBmb3VuZCwgb3Igb2Ygd3JvbmcgZm9ybWF0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMucmVzb2x2ZSgnZXJyb3InKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc291cmNlLm9uKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcih7c3JjOiBzcmN9LCAnVW5hYmxlIHRvIGxvYWQgYXVkaW8gZmlsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5idWlsZDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cy5yZXNvbHZlKCdkaXNjb25uZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdCA9IGZ1bmN0aW9uIChvdXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0O1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzLnJlc29sdmUoJ2Nvbm5lY3QnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wbGF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG91dHB1dCAmJiB0aGlzLnN0YXR1cygnbG9hZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGF1ZGlvLmNvbnRleHQoKS5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kcy5wdXNoKHNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnBsYXkoc291cmNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLnN0YXJ0KDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdW5kcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvdW5kc1tpXS5zdG9wKDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc291bmRzID0gW107XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiA0LzE2LzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdTb3VuZCcsXHJcbiAgICBbJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBFdmVudChEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIGNiID0gW10sXHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbmFtZSA9ICdkZWZhdWx0JyxcclxuICAgICAgICAgICAgICAgIHN0YXRldmFsID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGFyZ0Z1bmN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgYXJnRiwgaXNTdGF0ZUV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9ICEhaXNTdGF0ZUV2ZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnRiA9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdGdW5jdCA9IGFyZ0Y7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudE5hbWUgPT0gXCJzdHJpbmdcIiAmJiBldmVudE5hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBldmVudE5hbWVcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5idWlsZDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZXZhbDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSkgc3RhdGV2YWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gYXJnRnVuY3QoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJncyAhPT0gXCJvYmplY3RcIiB8fCBhcmdzLmNvbnN0cnVjdG9yICE9PSBBcnJheSkgYXJncyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2IubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2JbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmFjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmdGdW5jdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJncyAhPT0gXCJvYmplY3RcIiB8fCBhcmdzLmNvbnN0cnVjdG9yICE9PSBBcnJheSkgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2IucHVzaChhcmd1bWVudHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2IucHVzaChmdW5jKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDQvMTYvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ1NvdW5kJyxcclxuICAgIFsnQGluamVjdCcsXHJcbiAgICAgICAgZnVuY3Rpb24gRXZlbnRQcm92aWRlcihpbmplY3QpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgYXJnRiwgc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGluamVjdCgnJEV2ZW50Jyk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5idWlsZC5hcHBseShldmVudCwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50c1tuYW1lXSA9IGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50c1tuYW1lXSkgZXZlbnRzW25hbWVdLnJlc29sdmUuY2FsbChldmVudHNbbmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLndyYXAgPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBvYmplY3Qub24gPSBmdW5jdGlvbiAobmFtZSwgZnVuYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudHNbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzW25hbWVdLmNhbGxiYWNrLmNhbGwob2JqZWN0LCBmdW5jKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIG9iamVjdC5zdGF0dXMgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudHNbbmFtZV0pIHJldHVybiBldmVudHNbbmFtZV0uYWN0aXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDUvMS8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJ0BpbmplY3QnLCAnK0RyYXdlcicsICcrUGF0aCcsICcrTW9kZWwnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEFyZWFPYmplY3REcmF3ZXIoaW5qZWN0LCBEcmF3ZXJIZWxwZXIsIFBhdGhIZWxwZXIsIE1vZGVsSGVscGVyKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXNzZW1ibGVyID0gaW5qZWN0KCckR3JhcGhpY3NBc3NlbWJsZXInKSxcclxuICAgICAgICAgICAgICAgIGJveCA9IHRoaXMuZXh0ZW5zaW9uKCdCb3gnKSxcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyksXHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSB0aGlzLmV4dGVuc2lvbignTWF0cml4JyksXHJcbiAgICAgICAgICAgICAgICBkcmF3ZXIgPSB0aGlzLmV4dGVuc2lvbignRHJhd2VyJyksXHJcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZWZpeCA9IDEsIGludGVycG9sYXRpb25maXggPSAwLFxyXG4gICAgICAgICAgICAgICAgeHNoaWZ0ID0gMCwgeXNoaWZ0ID0gMDtcclxuXHJcblxyXG4gICAgICAgICAgICAvL1RPRE8gOiBBcHBseSBpbnRlcnBvbGF0aW9uIHRvIHBhdGghXHJcblxyXG4gICAgICAgICAgICBhc3NlbWJsZXIubGF5ZXIoMCwgJ2ZpbGwnLCBVcGRhdGVGaWxsLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBhc3NlbWJsZXIubGF5ZXIoMSwgJ2JnJywgVXBkYXRlQmcuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGFzc2VtYmxlci5sYXllcigyLCAnc3Ryb2tlJywgVXBkYXRlU3Ryb2tlLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBhc3NlbWJsZXIuYm94KGJveCk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBVcGRhdGVGaWxsKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzcHJpdGUgPSB0aGlzLmV4dGVuc2lvbignQm94JykuYm94KCkuc3ByaXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmV4dGVuc2lvbignU3R5bGUnKSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoID0gc3R5bGUuZ2V0KCdwYXRoJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShzcHJpdGUubWFyZ2luWzNdIC0geHNoaWZ0LCBzcHJpdGUubWFyZ2luWzBdIC0geXNoaWZ0KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJwb2xhdGlvbiA9IHN0eWxlLmdldCgnaW50ZXJwb2xhdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaW50ZXJwb2xhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUGF0aEhlbHBlci5pbnRlcnBvbGF0ZShwYXRoLCBpbnRlcnBvbGF0aW9uLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0aW9uKSBEcmF3ZXJIZWxwZXIuZHJhd0JlemllclBhdGhGaWxsKGNvbnRleHQsIHBhdGgsIHN0eWxlKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgRHJhd2VySGVscGVyLmRyYXdMaW5lUGF0aEZpbGwoY29udGV4dCwgcGF0aCwgc3R5bGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBVcGRhdGVTdHJva2UoY29udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNwcml0ZSA9IHRoaXMuZXh0ZW5zaW9uKCdCb3gnKS5ib3goKS5zcHJpdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBNb2RlbEhlbHBlci5jbG9uZUFycmF5KHN0eWxlLmdldCgncGF0aCcpKSxcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0aW9uID0gc3R5bGUuZ2V0KCdpbnRlcnBvbGF0aW9uJyk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHNwcml0ZS5tYXJnaW5bM10gLSB4c2hpZnQsIHNwcml0ZS5tYXJnaW5bMF0gLSB5c2hpZnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaW50ZXJwb2xhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUGF0aEhlbHBlci5pbnRlcnBvbGF0ZShwYXRoLCBpbnRlcnBvbGF0aW9uLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0aW9uKSBEcmF3ZXJIZWxwZXIuZHJhd0xpbmVQYXRoKGNvbnRleHQsIHBhdGgsIHN0eWxlKTtcclxuICAgICAgICAgICAgICAgIERyYXdlckhlbHBlci5kcmF3QmV6aWVyUGF0aChjb250ZXh0LCBwYXRoLCBzdHlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZUJnKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IHRoaXMuZXh0ZW5zaW9uKCdCb3gnKS5ib3goKS5zcHJpdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoID0gTW9kZWxIZWxwZXIuY2xvbmVBcnJheShzdHlsZS5nZXQoJ3BhdGgnKSksXHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGlvbiA9IHN0eWxlLmdldCgnaW50ZXJwb2xhdGlvbicpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShzcHJpdGUubWFyZ2luWzNdIC0geHNoaWZ0LCBzcHJpdGUubWFyZ2luWzBdIC0geXNoaWZ0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWludGVycG9sYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFBhdGhIZWxwZXIuaW50ZXJwb2xhdGUocGF0aCwgaW50ZXJwb2xhdGlvbiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbikgRHJhd2VySGVscGVyLmRyYXdMaW5lQmdDbGlwUGF0aChjb250ZXh0LCBwYXRoLCBzdHlsZSwgYXNzZW1ibGVyLCBzcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBEcmF3ZXJIZWxwZXIuZHJhd0JlemllckJnQ2xpcFBhdGgoY29udGV4dCwgcGF0aCwgc3R5bGUsIGFzc2VtYmxlciwgc3ByaXRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3BhdGgnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJwb2xhdGlvbiA9IHN0eWxlLmdldCgnaW50ZXJwb2xhdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnJlc2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnZmlsbCcpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnc3Ryb2tlJyk7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdiZycpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ2ludGVycG9sYXRpb24nLCBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0aW9uZml4ID0gTWF0aC5yb3VuZCg0MCAqIG4pO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnZmlsbCcpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnc3Ryb2tlJyk7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdiZycpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnJlc2l6ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3Bvc2l0aW9uJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYm94LnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXgucHVyZ2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKFsnc3Ryb2tlU3R5bGUnLCAnc3Ryb2tlQ29sb3InXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnc3Ryb2tlJyk7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIucmVzaXplKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaCgnZmlsbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2ZpbGwnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKFsnYmcnLCAnYmdTaXplJywgJ2JnUG9zaXRpb24nXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnYmcnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdzdHJva2VXaWR0aCcsIGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZml4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobltpXSA+IGZpeCkgZml4ID0gbltpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdHJva2VmaXggPSBmaXggLyAyO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnc3Ryb2tlJyk7XHJcbiAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnJlc2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBib3guZihmdW5jdGlvbiAoYm94Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBzdHlsZS5nZXQoJ3Bvc2l0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHN0eWxlLmdldCgncGF0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IHN0eWxlLmdldCgnYW5jaG9yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHBvc2l0aW9uWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkgPSBwb3NpdGlvblsxXSxcclxuICAgICAgICAgICAgICAgICAgICBtaW54ID0gSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICAgICAgbWlueSA9IEluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgIG1heHggPSAtSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4eSA9IC1JbmZpbml0eTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtpXVswXSA8IG1pbngpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWlueCA9IHBhdGhbaV1bMF1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhbaV1bMl0gPCBtaW54KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnggPSBwYXRoW2ldWzJdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2ldWzFdIDwgbWlueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW55ID0gcGF0aFtpXVsxXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtpXVszXSA8IG1pbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWlueSA9IHBhdGhbaV1bM11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhbaV1bMF0gPiBtYXh4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heHggPSBwYXRoW2ldWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2ldWzJdID4gbWF4eCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXh4ID0gcGF0aFtpXVsyXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtpXVsxXSA+IG1heHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4eSA9IHBhdGhbaV1bMV1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhbaV1bM10gPiBtYXh5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heHkgPSBwYXRoW2ldWzNdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtaW54ID09PSBJbmZpbml0eSkgbWlueCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAobWlueSA9PT0gSW5maW5pdHkpIG1pbnkgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heHggPT09IC1JbmZpbml0eSkgbWF4eCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4eSA9PT0gLUluZmluaXR5KSBtYXh4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB4c2hpZnQgPSBtaW54O1xyXG4gICAgICAgICAgICAgICAgeXNoaWZ0ID0gbWlueTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZml4ID0gc3Ryb2tlZml4ICsgaW50ZXJwb2xhdGlvbmZpeCxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGguYWJzKG1heHggLSBtaW54KSxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmFicyhtYXh5IC0gbWlueSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclswXSA9PT0gJ2NlbnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZHRoID8gd2lkdGggLyAyIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMF0gPT09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZHRoID8gd2lkdGggOiAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclsxXSA9PT0gJ21pZGRsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IGhlaWdodCA/IGhlaWdodCAvIDIgOiAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclsxXSA9PT0gJ2JvdHRvbScpIHtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IGhlaWdodCA/IGhlaWdodCA6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJveENvbnRhaW5lci5zZXQoXHJcbiAgICAgICAgICAgICAgICAgICAgeCArIHhzaGlmdCxcclxuICAgICAgICAgICAgICAgICAgICB5ICsgeXNoaWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBmaXgsXHJcbiAgICAgICAgICAgICAgICAgICAgZml4LFxyXG4gICAgICAgICAgICAgICAgICAgIGZpeCxcclxuICAgICAgICAgICAgICAgICAgICBmaXhcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGRyYXdlci5mKGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBEcmF3ZXJIZWxwZXIudHJhbnNmb3JtKHRoaXMsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLmRyYXcoY29udGV4dCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMS8xMy8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJytEcmF3ZXInLCAnRGVidWcnLCAnQGluamVjdCcsXHJcbiAgICAgICAgZnVuY3Rpb24gQ2lyY2xlT2JqZWN0RHJhd2VyKERyYXdlckhlbHBlciwgRGVidWcsIGluamVjdCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2VtYmxlciA9IGluamVjdCgnJEdyYXBoaWNzQXNzZW1ibGVyJyksXHJcbiAgICAgICAgICAgICAgICBkcmF3ZXIgPSB0aGlzLmV4dGVuc2lvbignRHJhd2VyJyksXHJcbiAgICAgICAgICAgICAgICBib3hFeHQgPSB0aGlzLmV4dGVuc2lvbignQm94JyksXHJcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gdGhpcy5leHRlbnNpb24oJ01hdHJpeCcpLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlZml4ID0gMTtcclxuXHJcbiAgICAgICAgICAgIGFzc2VtYmxlci5sYXllcigwLCAnZmlsbCcsIFVwZGF0ZUZpbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGFzc2VtYmxlci5sYXllcigxLCAnYmcnLCBVcGRhdGVCZy5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgYXNzZW1ibGVyLmxheWVyKDIsICdzdHJva2UnLCBVcGRhdGVTdHJva2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGFzc2VtYmxlci5ib3goYm94RXh0KTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZVN0cm9rZShjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3ByaXRlID0gYm94RXh0LmJveCgpLnNwcml0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3R5bGUuZ2V0KCdzdHJva2VDb2xvcicpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHlsZS5nZXQoJ3N0cm9rZVdpZHRoJyk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKHN0eWxlLmdldCgnc3Ryb2tlU3R5bGUnKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMoc3ByaXRlLnNpemVbMF0gLyAyLCBzcHJpdGUuc2l6ZVsxXSAvIDIsIHN0eWxlLmdldCgncmFkaXVzJyksIDAsIE1hdGguUEkgKiAyKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBVcGRhdGVGaWxsKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzcHJpdGUgPSBib3hFeHQuYm94KCkuc3ByaXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gc3R5bGUuZ2V0KCdmaWxsJyk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyhzcHJpdGUuc2l6ZVswXSAvIDIsIHNwcml0ZS5zaXplWzFdIC8gMiwgc3R5bGUuZ2V0KCdyYWRpdXMnKSwgMCwgTWF0aC5QSSAqIDIpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZUJnKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzcHJpdGUgPSBib3hFeHQuYm94KCkuc3ByaXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm94ID0gYm94RXh0LmJveCgpLnZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHNwcml0ZS5zaXplWzBdIC8gMiwgc3ByaXRlLnNpemVbMV0gLyAyLCBzdHlsZS5nZXQoJ3JhZGl1cycpLCAwLCBNYXRoLlBJIC8gMik7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYmdwb3NpdGlvbiA9IHN0eWxlLmdldCgnYmdQb3NpdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJnc2l6ZSA9IHN0eWxlLmdldCgnYmdTaXplJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYmcgPSBzdHlsZS5nZXQoJ2JnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiZy5sZW5ndGg7IGkrKykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJnW2ldLmxvYWRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJnW2ldLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnYmcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJnd2lkdGggPSBib3guc2l6ZVswXSAqIGJnc2l6ZVtpXVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJnaGVpZ2h0ID0gYm94LnNpemVbMV0gKiBiZ3NpemVbaV1bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZ3Bvc2l0aW9ueCA9IGJveC5zaXplWzBdICogYmdwb3NpdGlvbltpXVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJncG9zaXRpb255ID0gYm94LnNpemVbMV0gKiBiZ3Bvc2l0aW9uW2ldWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoc3ByaXRlLm1hcmdpblszXSArIGJncG9zaXRpb254LCBzcHJpdGUubWFyZ2luWzBdICsgYmdwb3NpdGlvbnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ1tpXS5leHBvcnQoKSwgMCwgMCwgYmd3aWR0aCwgYmdoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJveEV4dC5mKGZ1bmN0aW9uIChib3hDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYWRpdXMgPSBzdHlsZS5nZXQoJ3JhZGl1cycpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gc3R5bGUuZ2V0KCdwb3NpdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IHN0eWxlLmdldCgnYW5jaG9yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgZCA9IHJhZGl1cyAqIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHggPSBwb3NpdGlvblswXSxcclxuICAgICAgICAgICAgICAgICAgICB5ID0gcG9zaXRpb25bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclswXSA9PT0gJ2NlbnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB4IC09IHJhZGl1c1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclswXSA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHggLT0gZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclsxXSA9PT0gJ21pZGRsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IHJhZGl1c1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclsxXSA9PT0gJ2JvdHRvbScpIHtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYm94Q29udGFpbmVyLnNldCh4LCB5LCBkLCBkLCBzdHJva2VmaXgsIHN0cm9rZWZpeCwgc3Ryb2tlZml4LCBzdHJva2VmaXgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3JhZGl1cycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ3N0cm9rZScpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnYmcnKTtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2ZpbGwnKTtcclxuICAgICAgICAgICAgICAgIGJveEV4dC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIucmVzaXplKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaCgnZmlsbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2ZpbGwnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdwb3NpdGlvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGJveEV4dC5wdXJnZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3N0cm9rZVdpZHRoJywgZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChuICE9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlZml4ID0gbjtcclxuICAgICAgICAgICAgICAgICAgICBib3hFeHQucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdzdHJva2UnKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXgucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZXIucmVzaXplKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaChbJ3N0cm9rZVN0eWxlJywgJ3N0cm9rZUNvbG9yJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ3N0b2tlJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaChbJ2JnJywgJ2JnUG9zaXRpb24nLCAnYmdTaXplJ10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2JnJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZHJhd2VyLmYoZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIERyYXdlckhlbHBlci50cmFuc2Zvcm0odGhpcywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIuZHJhdyhjb250ZXh0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzUvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWydEZWJ1ZycsICcrTWF0cml4JyxcclxuICAgICAgICBmdW5jdGlvbiBEZWZhdWx0T2JqZWN0RHJhd2VyKERlYnVnLCBNYXRyaXgpIHtcclxuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IHRoaXMuZXh0ZW5zaW9uKCdNYXRyaXgnKTtcclxuXHJcbiAgICAgICAgICAgIG1hdHJpeC5mKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRyaXgub2JqZWN0TWF0cml4KHRoaXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goWydwb3NpdGlvbicsICdyb3RhdGUnLCAndHJhbnNsYXRlJywgJ3NjYWxlJywgJ3NrZXcnXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LnB1cmdlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjYvMjAxNi5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWycrRHJhd2VyJyxcclxuICAgICAgICBmdW5jdGlvbiBHcm91cE9iamVjdERyYXdlcihEcmF3ZXJIZWxwZXIpIHtcclxuICAgICAgICAgICAgdmFyIGRyYXdlciA9IHRoaXMuZXh0ZW5zaW9uKCdEcmF3ZXInKSxcclxuICAgICAgICAgICAgICAgIGxheWVycyA9IHRoaXMuZXh0ZW5zaW9uKCdMYXllcnMnKSxcclxuICAgICAgICAgICAgICAgIGJveCA9IHRoaXMuZXh0ZW5zaW9uKCdCb3gnKSxcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICBib3guZihmdW5jdGlvbiAoYm94Q29udGFpbmVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG1pbnggPSBJbmZpbml0eSxcclxuICAgICAgICAgICAgICAgICAgICBtaW55ID0gSW5maW5pdHksXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4eCA9IC1JbmZpbml0eSxcclxuICAgICAgICAgICAgICAgICAgICBtYXh5ID0gLUluZmluaXR5O1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JveCA9IHRoaXMuZXh0ZW5zaW9uKCdCb3gnKS5ib3goKS52YWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JveC5wb3NpdGlvblswXSA8IG1pbngpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWlueCA9IG9ib3gucG9zaXRpb25bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYm94LnBvc2l0aW9uWzFdIDwgbWlueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW55ID0gb2JveC5wb3NpdGlvblsxXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob2JveC5wb3NpdGlvblswXSArIG9ib3guc2l6ZVswXSA+IG1heHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4eCA9IG9ib3gucG9zaXRpb25bMF0gKyBvYm94LnNpemVbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYm94LnBvc2l0aW9uWzFdICsgb2JveC5zaXplWzFdID4gbWF4eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXh5ID0gb2JveC5wb3NpdGlvblsxXSArIG9ib3guc2l6ZVsxXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gc3R5bGUuZ2V0KCdwb3NpdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChtaW54ID09PSBJbmZpbml0eSkgbWlueCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4eCA9PT0gLUluZmluaXR5KSBtYXh4ID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChtaW55ID09PSBJbmZpbml0eSkgbWlueSA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4eSA9PT0gLUluZmluaXR5KSBtYXh5ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICBib3hDb250YWluZXIuc2V0KFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbnggKyBwb3NpdGlvblswXSxcclxuICAgICAgICAgICAgICAgICAgICBtaW55ICsgcG9zaXRpb25bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4eCAtIG1pbngsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4eSAtIG1pbnksXHJcbiAgICAgICAgICAgICAgICAgICAgMCwgMCwgMCwgMFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBbMCwgMF07XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdwb3NpdGlvbicsIGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IG47XHJcbiAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBkcmF3ZXIuZihmdW5jdGlvbiAoY29udGV4dCwgdGltZSwgZnJhbWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgKj0gc3R5bGUuZ2V0KCdvcGFjaXR5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgRHJhd2VySGVscGVyLnRyYW5zZm9ybSh0aGlzLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsYXllcnMuZm9yRWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9kcmF3ZXIgPSB0aGlzLmV4dGVuc2lvbignRHJhd2VyJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSB0aGlzLnR5cGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdHcm91cCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2RyYXdlci5kcmF3LmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9zdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gb3N0eWxlLmdldCgnYmxlbmRpbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSAqPSBvc3R5bGUuZ2V0KCdvcGFjaXR5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9kcmF3ZXIuZHJhdy5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzEzLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIFsnK0RyYXdlcicsICdSZXNvdXJjZScsXHJcbiAgICAgICAgZnVuY3Rpb24gSW1hZ2VPYmplY3REcmF3ZXIoRHJhd2VySGVscGVyLCBSZXNvdXJjZSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyksXHJcbiAgICAgICAgICAgICAgICBib3ggPSB0aGlzLmV4dGVuc2lvbignQm94JyksXHJcbiAgICAgICAgICAgICAgICBkcmF3ZXIgPSB0aGlzLmV4dGVuc2lvbignRHJhd2VyJyksXHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSB0aGlzLmV4dGVuc2lvbignTWF0cml4Jyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSBudWxsLCBoZWlnaHQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaCgnc3JjJywgZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChvICE9PSBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UgPSBSZXNvdXJjZS5pbWFnZShuKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGltYWdlLndpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlaWdodCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4LnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3NpemUnLCBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9bMF0gIT09IG5bMF0gfHwgb1sxXSAhPT0gblsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gblswXTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBuWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3Bvc2l0aW9uJywgZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChvWzBdICE9PSBuWzBdIHx8IG9bMV0gIT09IG5bMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBib3guZihmdW5jdGlvbiAoYm94Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBzdHlsZS5nZXQoJ3Bvc2l0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gc3R5bGUuZ2V0KCdhbmNob3InKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHBvc2l0aW9uWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkgPSBwb3NpdGlvblsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzBdID09PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkdGggPyB3aWR0aCAvIDIgOiAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclswXSA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkdGggPyB3aWR0aCA6IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzFdID09PSAnbWlkZGxlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHkgLT0gaGVpZ2h0ID8gaGVpZ2h0IC8gMiA6IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzFdID09PSAnYm90dG9tJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHkgLT0gaGVpZ2h0ID8gaGVpZ2h0IDogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYm94Q29udGFpbmVyLnNldCh4LCB5LCB3aWR0aCA/IHdpZHRoIDogMCwgaGVpZ2h0ID8gaGVpZ2h0IDogMCwgMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZHJhd2VyLmYoZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbWFnZSAmJiBpbWFnZS5sb2FkZWQoKSAmJiAhaW1hZ2UuZXJyb3IoKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ICE9PSBudWxsICYmIHdpZHRoID4gMCAmJiBoZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRHJhd2VySGVscGVyLnRyYW5zZm9ybSh0aGlzLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZS5leHBvcnQoKSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI2LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIFsnQGluamVjdCcsICdEZWJ1ZycsICcrRHJhd2VyJywgJytQYXRoJyxcclxuICAgICAgICBmdW5jdGlvbiBMaW5lT2JqZWN0RHJhd2VyKGluamVjdCwgRGVidWcsIERyYXdlckhlbHBlciwgUGF0aEhlbHBlcikge1xyXG5cclxuICAgICAgICAgICAgdmFyIGJveCA9IHRoaXMuZXh0ZW5zaW9uKCdCb3gnKSxcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyksXHJcbiAgICAgICAgICAgICAgICBjYW52YXMgPSBpbmplY3QoJyRDYW52YXMnKSxcclxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IHRoaXMuZXh0ZW5zaW9uKCdNYXRyaXgnKSxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVfdXBkYXRlID0gZmFsc2UsIGludGVycG9sYXRlZCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlZml4ID0gMSwgaW50ZXJwb2xhdGlvbmZpeCA9IDAsXHJcbiAgICAgICAgICAgICAgICBkcmF3ZXIgPSB0aGlzLmV4dGVuc2lvbignRHJhd2VyJyksXHJcbiAgICAgICAgICAgICAgICB4c2hpZnQgPSAwLCB5c2hpZnQgPSAwO1xyXG5cclxuICAgICAgICAgICAgYm94LmYoZnVuY3Rpb24gKGJveENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gc3R5bGUuZ2V0KCdwb3NpdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBzdHlsZS5nZXQoJ3BhdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgPSBzdHlsZS5nZXQoJ2FuY2hvcicpLFxyXG4gICAgICAgICAgICAgICAgICAgIHggPSBwb3NpdGlvblswXSxcclxuICAgICAgICAgICAgICAgICAgICB5ID0gcG9zaXRpb25bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWlueCA9IEluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbnkgPSBJbmZpbml0eSxcclxuICAgICAgICAgICAgICAgICAgICBtYXh4ID0gLUluZmluaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgIG1heHkgPSAtSW5maW5pdHk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhbaV1bMF0gPCBtaW54KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnggPSBwYXRoW2ldWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2ldWzJdIDwgbWlueCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW54ID0gcGF0aFtpXVsyXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtpXVsxXSA8IG1pbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWlueSA9IHBhdGhbaV1bMV1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhbaV1bM10gPCBtaW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnkgPSBwYXRoW2ldWzNdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2ldWzBdID4gbWF4eCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXh4ID0gcGF0aFtpXVswXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFtpXVsyXSA+IG1heHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4eCA9IHBhdGhbaV1bMl1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhbaV1bMV0gPiBtYXh5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heHkgPSBwYXRoW2ldWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXRoW2ldWzNdID4gbWF4eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXh5ID0gcGF0aFtpXVszXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobWlueCA9PT0gSW5maW5pdHkpIG1pbnggPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1pbnkgPT09IEluZmluaXR5KSBtaW55ID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChtYXh4ID09PSAtSW5maW5pdHkpIG1heHggPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heHkgPT09IC1JbmZpbml0eSkgbWF4eCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgeHNoaWZ0ID0gbWlueDtcclxuICAgICAgICAgICAgICAgIHlzaGlmdCA9IG1pbnk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGZpeCA9IHN0cm9rZWZpeCArIGludGVycG9sYXRpb25maXgsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBNYXRoLmFicyhtYXh4IC0gbWlueCksXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5hYnMobWF4eSAtIG1pbnkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMF0gPT09ICdjZW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCAtPSB3aWR0aCA/IHdpZHRoIC8gMiA6IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzBdID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCAtPSB3aWR0aCA/IHdpZHRoIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMV0gPT09ICdtaWRkbGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeSAtPSBoZWlnaHQgPyBoZWlnaHQgLyAyIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMV0gPT09ICdib3R0b20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeSAtPSBoZWlnaHQgPyBoZWlnaHQgOiAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBib3hDb250YWluZXIuc2V0KFxyXG4gICAgICAgICAgICAgICAgICAgIHggKyB4c2hpZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgeSArIHlzaGlmdCxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgZml4LFxyXG4gICAgICAgICAgICAgICAgICAgIGZpeCxcclxuICAgICAgICAgICAgICAgICAgICBmaXgsXHJcbiAgICAgICAgICAgICAgICAgICAgZml4XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdwYXRoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGludGVycG9sYXRpb24gPSBzdHlsZS5nZXQoJ2ludGVycG9sYXRpb24nKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0aW9uICE9PSAwKSBpbnRlcnBvbGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICByZXF1aXJlX3VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdwb3NpdGlvbicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3N0cm9rZVdpZHRoJywgZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuW2ldID4gZml4KSBmaXggPSBuW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHN0cm9rZWZpeCA9IGZpeCAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZV91cGRhdGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LnB1cmdlKCk7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ2ludGVycG9sYXRpb24nLCBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8gIT09IG4pIGludGVycG9sYXRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGludGVycG9sYXRpb25maXggPSBNYXRoLnJvdW5kKDIwICogbik7XHJcbiAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZV91cGRhdGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKFsnc3Ryb2tlU3R5bGUnLCAnc3Ryb2tlQ29sb3InXSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZV91cGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgY3R4ID0gY2FudmFzLmNvbnRleHQoKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZUNhbnZhcygpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzcHJpdGUgPSBib3guYm94KCkuc3ByaXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHN0eWxlLmdldCgncGF0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVycG9sYXRpb24gPSBzdHlsZS5nZXQoJ2ludGVycG9sYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FudmFzLndpZHRoKCkgIT09IHNwcml0ZS5zaXplWzBdIHx8IGNhbnZhcy5oZWlnaHQoKSAhPT0gc3ByaXRlLnNpemVbMV0pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gc3ByaXRlLnNpemVbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHNwcml0ZS5zaXplWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGgod2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQoaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHNwcml0ZS5zaXplWzBdLCBzcHJpdGUuc2l6ZVsxXSk7XHJcbiAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaW50ZXJwb2xhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUGF0aEhlbHBlci5pbnRlcnBvbGF0ZShwYXRoLCBpbnRlcnBvbGF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoc3ByaXRlLm1hcmdpblszXSAtIHhzaGlmdCwgc3ByaXRlLm1hcmdpblswXSAtIHlzaGlmdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGludGVycG9sYXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEcmF3ZXJIZWxwZXIuZHJhd0JlemllclBhdGgoY3R4LCBwYXRoLCBzdHlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEcmF3ZXJIZWxwZXIuZHJhd0xpbmVQYXRoKGN0eCwgcGF0aCwgc3R5bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVpcmVfdXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRyYXdlci5mKGZ1bmN0aW9uIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZV91cGRhdGUpIFVwZGF0ZUNhbnZhcy5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgRHJhd2VySGVscGVyLnRyYW5zZm9ybSh0aGlzLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGNhbnZhcy5leHBvcnQoKSwgMCwgMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvMTEvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWydAaW5qZWN0JywgJytEcmF3ZXInLFxyXG4gICAgICAgIGZ1bmN0aW9uIFJlY3RhbmdsZU9iamVjdERyYXdlcihpbmplY3QsIERyYXdlckhlbHBlcikge1xyXG5cclxuICAgICAgICAgICAgdmFyIGFzc2VtYmxlciA9IGluamVjdCgnJEdyYXBoaWNzQXNzZW1ibGVyJyksXHJcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgZHJhd2VyID0gdGhpcy5leHRlbnNpb24oJ0RyYXdlcicpLFxyXG4gICAgICAgICAgICAgICAgYm94RXh0ZW5zaW9uID0gdGhpcy5leHRlbnNpb24oJ0JveCcpLFxyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gdGhpcy5leHRlbnNpb24oJ01hdHJpeCcpLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlZml4ID0gWzIsIDIsIDIsIDJdO1xyXG5cclxuICAgICAgICAgICAgYXNzZW1ibGVyLmxheWVyKDAsICdmaWxsJywgVXBkYXRlRmlsbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgYXNzZW1ibGVyLmxheWVyKDEsICdiZycsIFVwZGF0ZUJnLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBhc3NlbWJsZXIubGF5ZXIoMiwgJ3N0cm9rZScsIFVwZGF0ZVN0cm9rZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgYXNzZW1ibGVyLmJveChib3hFeHRlbnNpb24pO1xyXG5cclxuICAgICAgICAgICAgYm94RXh0ZW5zaW9uLmYoZnVuY3Rpb24gKGJveENvbnRhaW5lcikge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHN0eWxlLmdldCgncG9zaXRpb24nKSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplID0gc3R5bGUuZ2V0KCdzaXplJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gc3R5bGUuZ2V0KCdhbmNob3InKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHBvc2l0aW9uWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkgPSBwb3NpdGlvblsxXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzBdID09PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHggLT0gc2l6ZVswXSAvIDI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzBdID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCAtPSBzaXplWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclsxXSA9PT0gJ21pZGRsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IHNpemVbMV0gLyAyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvclsxXSA9PT0gJ2JvdHRvbScpIHtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IHNpemVbMV1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBib3hDb250YWluZXIuc2V0KFxyXG4gICAgICAgICAgICAgICAgICAgIHgsIHksXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZVswXSwgc2l6ZVsxXSxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2VmaXhbMF0sIHN0cm9rZWZpeFsxXSwgc3Ryb2tlZml4WzJdLCBzdHJva2VmaXhbM11cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZHJhd2VyLmYoZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIERyYXdlckhlbHBlci50cmFuc2Zvcm0odGhpcywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIuZHJhdyhjb250ZXh0KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdzaXplJywgZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2ZpbGwnKTtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ3N0cm9rZScpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnYmcnKTtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci5yZXNpemUoKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgYm94RXh0ZW5zaW9uLnB1cmdlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaCgncmFkaXVzJywgZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2ZpbGwnKTtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ3N0cm9rZScpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnYmcnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdzdHJva2VXaWR0aCcsIGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2VmaXhbMF0gPSBuWzBdO1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlZml4WzFdID0gblsxXTtcclxuICAgICAgICAgICAgICAgIHN0cm9rZWZpeFsyXSA9IG5bMl07XHJcbiAgICAgICAgICAgICAgICBzdHJva2VmaXhbM10gPSBuWzNdO1xyXG4gICAgICAgICAgICAgICAgYm94RXh0ZW5zaW9uLnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIucmVzaXplKCk7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXgucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2ZpbGwnKTtcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ3N0cm9rZScpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgnYmcnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKFsncG9zaXRpb24nLCAnc2l6ZSddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBib3hFeHRlbnNpb24ucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXJnZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goWydiZycsICdiZ1NpemUnLCAnYmdQb3NpdGlvbiddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdiZycpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goWydzdHJva2VTdHlsZScsICdzdHJva2VDb2xvciddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdzdHJva2UnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKFsnZmlsbCddLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdmaWxsJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplUmFkaXVzKHJhZGl1cykge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbcmFkaXVzWzBdLCByYWRpdXNbMV0sIHJhZGl1c1syXSwgcmFkaXVzWzNdXSxcclxuICAgICAgICAgICAgICAgICAgICBib3ggPSBib3hFeHRlbnNpb24uYm94KCkudmFsdWUoKSxcclxuICAgICAgICAgICAgICAgICAgICBoYWxmYm94ID0gW2JveC5zaXplWzBdIC8gMiwgYm94LnNpemVbMV0gLyAyXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbaV0gPiBoYWxmYm94WzBdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGhhbGZib3hbMF1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFtpXSA+IGhhbGZib3hbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gaGFsZmJveFsxXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkcmF3UmVjdFBhdGgoY29udGV4dCwgc3Ryb2tlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IG5vcm1hbGl6ZVJhZGl1cyhzdHlsZS5nZXQoJ3JhZGl1cycpKSxcclxuICAgICAgICAgICAgICAgICAgICBrID0gMC41NTIyODQ3NDk4LFxyXG4gICAgICAgICAgICAgICAgICAgIGJveCA9IGJveEV4dGVuc2lvbi5ib3goKS52YWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IGJveEV4dGVuc2lvbi5ib3goKS5zcHJpdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gc3R5bGUuZ2V0KCdzdHJva2VDb2xvcicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aCA9IHN0eWxlLmdldCgnc3Ryb2tlV2lkdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGUgPSBzdHlsZS5nZXQoJ3N0cm9rZVN0eWxlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcCA9IHN0eWxlLmdldCgnY2FwJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZUNhcCA9IGNhcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJhZGl1c1swXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzcHJpdGUubWFyZ2luWzNdICsgcmFkaXVzWzBdLCBzcHJpdGUubWFyZ2luWzBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHNwcml0ZS5tYXJnaW5bM10sIHNwcml0ZS5tYXJnaW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChzdHJva2VTdHlsZVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlV2lkdGhbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmFkaXVzWzFdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGJveC5zaXplWzBdICsgc3ByaXRlLm1hcmdpblszXSAtIHJhZGl1c1sxXSwgc3ByaXRlLm1hcmdpblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnZlTW9kaWZpZXIgPSBrICogcmFkaXVzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnNpemVbMF0gKyBzcHJpdGUubWFyZ2luWzNdIC0gcmFkaXVzWzFdICsgY3VydmVNb2RpZmllcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLm1hcmdpblswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnNpemVbMF0gKyBzcHJpdGUubWFyZ2luWzNdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUubWFyZ2luWzBdICsgcmFkaXVzWzFdIC0gY3VydmVNb2RpZmllcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnNpemVbMF0gKyBzcHJpdGUubWFyZ2luWzNdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUubWFyZ2luWzBdICsgcmFkaXVzWzFdXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGJveC5zaXplWzBdICsgc3ByaXRlLm1hcmdpblszXSwgc3ByaXRlLm1hcmdpblswXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0cm9rZSkgY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChzdHJva2VTdHlsZVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlV2lkdGhbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmFkaXVzWzJdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJ2ZU1vZGlmaWVyID0gayAqIHJhZGl1c1syXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhib3guc2l6ZVswXSArIHNwcml0ZS5tYXJnaW5bM10sIGJveC5zaXplWzFdICsgc3ByaXRlLm1hcmdpblswXSAtIHJhZGl1c1syXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cm9rZSkgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goc3Ryb2tlU3R5bGVbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3JbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlV2lkdGhbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnNpemVbMF0gKyBzcHJpdGUubWFyZ2luWzNdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3guc2l6ZVsxXSArIHNwcml0ZS5tYXJnaW5bMF0gLSByYWRpdXNbMl0gKyBjdXJ2ZU1vZGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3guc2l6ZVswXSArIHNwcml0ZS5tYXJnaW5bM10gLSByYWRpdXNbMl0gKyBjdXJ2ZU1vZGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3guc2l6ZVsxXSArIHNwcml0ZS5tYXJnaW5bMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5zaXplWzBdICsgc3ByaXRlLm1hcmdpblszXSAtIHJhZGl1c1syXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnNpemVbMV0gKyBzcHJpdGUubWFyZ2luWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oYm94LnNpemVbMF0gKyBzcHJpdGUubWFyZ2luWzNdLCBib3guc2l6ZVsxXSArIHNwcml0ZS5tYXJnaW5bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJva2UpIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goc3Ryb2tlU3R5bGVbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHJva2VDb2xvclsyXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IHN0cm9rZVdpZHRoWzJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyYWRpdXNbM10gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnZlTW9kaWZpZXIgPSBrICogcmFkaXVzWzNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHNwcml0ZS5tYXJnaW5bM10gKyByYWRpdXNbM10sIGJveC5zaXplWzFdICsgc3ByaXRlLm1hcmdpblswXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLm1hcmdpblszXSArIHJhZGl1c1szXSAtIGN1cnZlTW9kaWZpZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5zaXplWzFdICsgc3ByaXRlLm1hcmdpblswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLm1hcmdpblszXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnNpemVbMV0gKyBzcHJpdGUubWFyZ2luWzBdIC0gcmFkaXVzWzNdICsgY3VydmVNb2RpZmllcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLm1hcmdpblszXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LnNpemVbMV0gKyBzcHJpdGUubWFyZ2luWzBdIC0gcmFkaXVzWzNdXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHNwcml0ZS5tYXJnaW5bM10sIGJveC5zaXplWzFdICsgc3ByaXRlLm1hcmdpblswXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0cm9rZSkgY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lRGFzaChzdHJva2VTdHlsZVszXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yWzNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlV2lkdGhbM107XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJhZGl1c1swXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VydmVNb2RpZmllciA9IGsgKiByYWRpdXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3ByaXRlLm1hcmdpblszXSwgc3ByaXRlLm1hcmdpblswXSArIHJhZGl1c1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cm9rZSkgY29udGV4dC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKHN0cm9rZVN0eWxlWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva1N0eWxlID0gc3Ryb2tlQ29sb3JbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlV2lkdGhbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLm1hcmdpblszXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLm1hcmdpblswXSArIHJhZGl1c1swXSAtIGN1cnZlTW9kaWZpZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwcml0ZS5tYXJnaW5bMF0gKyByYWRpdXNbMF0gLSBjdXJ2ZU1vZGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUubWFyZ2luWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUubWFyZ2luWzNdICsgcmFkaXVzWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUubWFyZ2luWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3Ryb2tlKSBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3ByaXRlLm1hcmdpblszXSwgc3ByaXRlLm1hcmdpblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cm9rZSkgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhc1JhZGl1cygpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICByYWRpdXMgPSBzdHlsZS5nZXQoJ3JhZGl1cycpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFkaXVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl1c1tpXSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaGFzU3Ryb2tlKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cm9rZSA9IHN0eWxlLmdldCgnc3Ryb2tlV2lkdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cm9rZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJva2VbaV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBtb25vU3Ryb2tlKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gc3R5bGUuZ2V0KCdzdHJva2VDb2xvcicpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoID0gc3R5bGUuZ2V0KCdzdHJva2VXaWR0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlID0gc3R5bGUuZ2V0KCdzdHJva2VTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRDb2xvciA9IHN0cm9rZUNvbG9yWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGRXaWR0aCA9IHN0cm9rZVdpZHRoWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGRTdHlsZSA9IHN0cm9rZVN0eWxlWzBdLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkQ29sb3IgIT09IHN0cm9rZUNvbG9yW2ldIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRXaWR0aCAhPT0gc3Ryb2tlV2lkdGhbaV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIShzdHJva2VTdHlsZVtpXVswXSA9PT0gZFN0eWxlWzBdICYmIHN0cm9rZVN0eWxlW2ldWzFdID09PSBkU3R5bGVbMV0pXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBVcGRhdGVCZyhjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYm94Q29udGFpbmVyID0gYm94RXh0ZW5zaW9uLmJveCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJveCA9IGJveENvbnRhaW5lci52YWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IGJveENvbnRhaW5lci5zcHJpdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICBiZ3Bvc2l0aW9uID0gc3R5bGUuZ2V0KCdiZ1Bvc2l0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYmdzaXplID0gc3R5bGUuZ2V0KCdiZ1NpemUnKSxcclxuICAgICAgICAgICAgICAgICAgICBiZyA9IHN0eWxlLmdldCgnYmcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzUmFkaXVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3UmVjdFBhdGgoY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3Qoc3ByaXRlLm1hcmdpblszXSwgc3ByaXRlLm1hcmdpblswXSwgYm94LnNpemVbMF0sIGJveC5zaXplWzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJnLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYmdbaV0ubG9hZGVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmdbaV0ub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdiZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmd3aWR0aCA9IGJveC5zaXplWzBdICogYmdzaXplW2ldWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdoZWlnaHQgPSBib3guc2l6ZVsxXSAqIGJnc2l6ZVtpXVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJncG9zaXRpb254ID0gYm94LnNpemVbMF0gKiBiZ3Bvc2l0aW9uW2ldWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdwb3NpdGlvbnkgPSBib3guc2l6ZVsxXSAqIGJncG9zaXRpb25baV1bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShzcHJpdGUubWFyZ2luWzNdICsgYmdwb3NpdGlvbngsIHNwcml0ZS5tYXJnaW5bMF0gKyBiZ3Bvc2l0aW9ueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnW2ldLmV4cG9ydCgpLCAwLCAwLCBiZ3dpZHRoLCBiZ2hlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gVXBkYXRlU3Ryb2tlKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNTdHJva2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJva2VDb2xvciA9IHN0eWxlLmdldCgnc3Ryb2tlQ29sb3InKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBzdHlsZS5nZXQoJ3N0cm9rZVdpZHRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlID0gc3R5bGUuZ2V0KCdzdHJva2VTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib3hDb250YWluZXIgPSBib3hFeHRlbnNpb24uYm94KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveCA9IGJveENvbnRhaW5lci52YWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUgPSBib3hDb250YWluZXIuc3ByaXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNSYWRpdXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3UmVjdFBhdGgoY29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9ub1N0cm9rZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwID0gc3R5bGUuZ2V0KCdjYXAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZUNhcCA9IGNhcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goc3Ryb2tlU3R5bGVbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2VXaWR0aFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhzcHJpdGUubWFyZ2luWzNdLCBzcHJpdGUubWFyZ2luWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHNwcml0ZS5tYXJnaW5bM10gKyBib3guc2l6ZVswXSwgc3ByaXRlLm1hcmdpblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzcHJpdGUubWFyZ2luWzNdICsgYm94LnNpemVbMF0sIHNwcml0ZS5tYXJnaW5bMF0gKyBib3guc2l6ZVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhzcHJpdGUubWFyZ2luWzNdLCBzcHJpdGUubWFyZ2luWzBdICsgYm94LnNpemVbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oc3ByaXRlLm1hcmdpblszXSwgc3ByaXRlLm1hcmdpblswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBVcGRhdGVGaWxsKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxsID0gc3R5bGUuZ2V0KCdmaWxsJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYm94Q29udGFpbmVyID0gYm94RXh0ZW5zaW9uLmJveCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJveCA9IGJveENvbnRhaW5lci52YWx1ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZSA9IGJveENvbnRhaW5lci5zcHJpdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzUmFkaXVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3UmVjdFBhdGgoY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3Qoc3ByaXRlLm1hcmdpblszXSwgc3ByaXRlLm1hcmdpblswXSwgYm94LnNpemVbMF0sIGJveC5zaXplWzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzEzLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIFsnK0RyYXdlcicsICcrTW9kZWwnLCAnUmVzb3VyY2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uIFNwcml0ZU9iamVjdERyYXdlcihEcmF3ZXJIZWxwZXIsIE1vZGVsSGVscGVyLCBSZXNvdXJjZSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyksXHJcbiAgICAgICAgICAgICAgICBib3ggPSB0aGlzLmV4dGVuc2lvbignQm94JyksXHJcbiAgICAgICAgICAgICAgICBkcmF3ZXIgPSB0aGlzLmV4dGVuc2lvbignRHJhd2VyJyksXHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSB0aGlzLmV4dGVuc2lvbignTWF0cml4JyksXHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IG51bGwsIGhlaWdodCA9IG51bGwsIGltYWdlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGJveC5mKGZ1bmN0aW9uIChib3hDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHN0eWxlLmdldCgncG9zaXRpb24nKSxcclxuICAgICAgICAgICAgICAgICAgICBhbmNob3IgPSBzdHlsZS5nZXQoJ2FuY2hvcicpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB4ID0gcG9zaXRpb25bMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMF0gPT0gJ2NlbnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZHRoID8gd2lkdGggLyAyIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMF0gPT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHggLT0gd2lkdGggPyB3aWR0aCA6IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzFdID09ICdtaWRkbGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeSAtPSBoZWlnaHQgPyBoZWlnaHQgLyAyIDogMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMV0gPT0gJ2JvdHRvbScpIHtcclxuICAgICAgICAgICAgICAgICAgICB5IC09IGhlaWdodCA/IGhlaWdodCA6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJveENvbnRhaW5lci5zZXQoXHJcbiAgICAgICAgICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID8gd2lkdGggOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA/IGhlaWdodCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBkcmF3ZXIuZihmdW5jdGlvbiAoY29udGV4dCwgdGltZSwgZnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbWFnZSAmJiBpbWFnZS5sb2FkZWQoKSAmJiAhaW1hZ2UuZXJyb3IoKVxyXG4gICAgICAgICAgICAgICAgICAgICYmIGltYWdlLnJlYWR5KClcclxuICAgICAgICAgICAgICAgICAgICAmJiB3aWR0aCAhPT0gbnVsbCAmJiBoZWlnaHQgIT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAmJiB3aWR0aCA+IDAgJiYgaGVpZ2h0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIERyYXdlckhlbHBlci50cmFuc2Zvcm0odGhpcywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UudGljayh0aW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZS5leHBvcnQoKSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaCgnc3JjJywgZnVuY3Rpb24gKG8sIG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChuICE9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBNb2RlbEhlbHBlci5yZWFkU3ByaXRlU3RyaW5nKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlID0gUmVzb3VyY2Uuc3ByaXRlKGRhdGEudXJsKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5jb25maWcoZGF0YS5mcmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBpbWFnZS53aWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWlnaHQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4LnB1cmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3NpemUnLCBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9bMF0gIT09IG5bMF0gfHwgb1sxXSAhPT0gblsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gblswXTtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBuWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy53YXRjaCgncG9zaXRpb24nLCBmdW5jdGlvbiAobywgbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9bMF0gIT09IG5bMF0gfHwgb1sxXSAhPT0gblsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDMvMjUvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWydAaW5qZWN0JywgJytEcmF3ZXInLCAnUmVzb3VyY2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uIFRleHRPYmplY3REcmF3ZXIoaW5qZWN0LCBEcmF3ZXJIZWxwZXIsIFJlc291cmNlKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gdGhpcy5leHRlbnNpb24oJ1RleHQnKSxcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyksXHJcbiAgICAgICAgICAgICAgICBib3ggPSB0aGlzLmV4dGVuc2lvbignQm94JyksXHJcbiAgICAgICAgICAgICAgICBkcmF3ZXIgPSB0aGlzLmV4dGVuc2lvbignRHJhd2VyJyksXHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSB0aGlzLmV4dGVuc2lvbignTWF0cml4JyksXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlX3VwZGF0ZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZm9udCA9IHN0eWxlLmdldCgnZm9udCcpLFxyXG4gICAgICAgICAgICAgICAgd2VpZ2h0ID0gc3R5bGUuZ2V0KCd3ZWlnaHQnKSxcclxuICAgICAgICAgICAgICAgIGZzdHlsZSA9IHN0eWxlLmdldCgnc3R5bGUnKSxcclxuICAgICAgICAgICAgICAgIGFzc2VtYmxlciA9IGluamVjdCgnJEdyYXBoaWNzQXNzZW1ibGVyJyksXHJcbiAgICAgICAgICAgICAgICBvYmplY3QgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgYXNzZW1ibGVyLmxheWVyKDAsICd0ZXh0JywgVXBkYXRlVGV4dExheWVyKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZVRleHRMYXllcihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsaW5lSGVpZ2h0ID0gc3R5bGUuZ2V0KCdsaW5lSGVpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBzdHlsZS5nZXQoJ2NvbG9yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemUgPSBzdHlsZS5nZXQoJ2ZvbnRTaXplJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24gPSBzdHlsZS5nZXQoJ2FsaWduJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdG9wU3BhbiA9IGxpbmVIZWlnaHQgLSAoZm9udFNpemUgLyA1KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZm9udFNpemUgPCBsaW5lSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wU3BhbiA9IHRvcFNwYW4gLSAobGluZUhlaWdodCAtIGZvbnRTaXplKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcFNwYW4gPSB0b3BTcGFuICsgKGZvbnRTaXplIC0gbGluZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmZvckVhY2hMaW5lKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHRvcFNwYW4gKyBpICogbGluZUhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5mb250ID0gdGhpcy5leHRyYWN0Rm9udFN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0aGlzLnN0cmluZygpLCAodGV4dC50ZXh0QmxvY2tXaWR0aCgpIC0gdGhpcy53aWR0aCgpKSAvIDIsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRoaXMuc3RyaW5nKCksIHRleHQudGV4dEJsb2NrV2lkdGgoKSAtIHRoaXMud2lkdGgoKSAtIDIsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dCh0aGlzLnN0cmluZygpLCAyLCB5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Rm9udEZpbGUoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3N0eWxlID0gZnN0eWxlID09PSAnb2JsaXF1ZScgPyAnbm9ybWFsJyA6IGZzdHlsZTtcclxuICAgICAgICAgICAgICAgIHZhciBmID0gUmVzb3VyY2UuZm9udChmb250LCB3ZWlnaHQsIF9zdHlsZSk7XHJcbiAgICAgICAgICAgICAgICBmLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVfdXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXgucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LnVwZGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGYub24oJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVfdXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXgucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0LnVwZGF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRyYXdUZXh0KGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlX3VwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VtYmxlci5zaXplKHRleHQudGV4dEJsb2NrV2lkdGgoKSwgdGV4dC50ZXh0QmxvY2tIZWlnaHQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzZW1ibGVyLnVwZGF0ZSgndGV4dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVfdXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBEcmF3ZXJIZWxwZXIudHJhbnNmb3JtKHRoaXMsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgYXNzZW1ibGVyLmRyYXcoY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goWydzdHInLCAnc3R5bGUnLCAnZm9udCcsICd3ZWlnaHQnLCAnc2l6ZScsICdjb2xvcicsICdmb250U2l6ZScsICdsaW5lSGVpZ2h0J10sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVfdXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJveC5wdXJnZSgpO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LnB1cmdlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53YXRjaCgnZm9udCcsIGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBmb250ID0gbjtcclxuICAgICAgICAgICAgICAgIGdldEZvbnRGaWxlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdzdHlsZScsIGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBmc3R5bGUgPSBuO1xyXG4gICAgICAgICAgICAgICAgZ2V0Rm9udEZpbGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3dlaWdodCcsIGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgICAgICAgICB3ZWlnaHQgPSBuO1xyXG4gICAgICAgICAgICAgICAgZ2V0Rm9udEZpbGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdhbmNob3InLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBib3gucHVyZ2UoKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5wdXJnZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMud2F0Y2goJ3Bvc2l0aW9uJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYm94LnB1cmdlKClcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBib3guZihmdW5jdGlvbiAoYm94Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBzdHlsZS5nZXQoJ3Bvc2l0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9yID0gc3R5bGUuZ2V0KCdhbmNob3InKSxcclxuICAgICAgICAgICAgICAgICAgICB4ID0gcG9zaXRpb25bMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMF0gPT09ICdjZW50ZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCAtPSB0ZXh0LnRleHRCbG9ja1dpZHRoKCkgLyAyXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzBdID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCAtPSB0ZXh0LnRleHRCbG9ja1dpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yWzFdID09PSAnbWlkZGxlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHkgLT0gdGV4dC50ZXh0QmxvY2tIZWlnaHQoKSAvIDJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmNob3JbMV0gPT09ICdib3R0b20nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeSAtPSB0ZXh0LnRleHRCbG9ja0hlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYm94Q29udGFpbmVyLnNldCh4LCB5LCB0ZXh0LnRleHRCbG9ja1dpZHRoKCksIHRleHQudGV4dEJsb2NrSGVpZ2h0KCksIDAsIDAsIDAsIDApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGRyYXdlci5mKGRyYXdUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDUvMS8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJ0BleHRlbmQnLCAnK01vZGVsJywgJytQYXRoJywgJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBBcmVhT2JqZWN0TW9kZWwoZXh0ZW5kLCBNb2RlbEhlbHBlciwgUGF0aEhlbHBlciwgRGVidWcpIHtcclxuICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckRGVmYXVsdE9iamVjdE1vZGVsJyk7XHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJEdsb2JhbEJhY2tncm91bmRNb2RlbCcpO1xyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyREZWZhdWx0RnJlZVN0cm9rZU1vZGVsJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLmV4dGVuc2lvbignU3R5bGUnKSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IHRoaXMuZXh0ZW5zaW9uKCdBbmltYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFN5bmNQYXRoUHJvcGVydHkocGF0aCwgcHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvcGVydHlbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkucHVzaChwcm9wZXJ0eVtwcm9wZXJ0eS5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA8IHByb3BlcnR5Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LnNwbGljZShwYXRoLmxlbmd0aCAtIDEsIHByb3BlcnR5Lmxlbmd0aCAtIHBhdGgubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgwLCAncGF0aCcsIFtbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF1dLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFBhdGhIZWxwZXIuY2hlY2tTaW1wbGVQYXRoKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkID0gc3R5bGUuZ2V0KCdwYXRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBQYXRoSGVscGVyLmNvbnZlcnRTaW1wbGVQYXRoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFswXVswXSAhPT0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXVsyXSB8fCByZXN1bHRbMF1bMV0gIT09IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV1bM10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdWzJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV1bM10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WzBdWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFswXVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdWzJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV1bM10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WzBdWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFswXVsxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGQubGVuZ3RoICE9PSByZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTeW5jUGF0aFByb3BlcnR5KHJlc3VsdCwgc3R5bGUuZ2V0KCdzdHJva2VTdHlsZScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN5bmNQYXRoUHJvcGVydHkocmVzdWx0LCBzdHlsZS5nZXQoJ3N0cm9rZVdpZHRoJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3luY1BhdGhQcm9wZXJ0eShyZXN1bHQsIHN0eWxlLmdldCgnc3Ryb2tlQ29sb3InKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdBcmVhIE1vZGVsIC8gSW52YWxpZCB2YWx1ZSBmb3IgYXJlYSBwYXRoIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQYXRoSGVscGVyLmNvbnZlcnRDb21wbGV4UGF0aCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMS8xMy8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJ0BleHRlbmQnLCAnK0NvbG9yJywgJytNb2RlbCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gQ2lyY2xlT2JqZWN0TW9kZWwoZXh0ZW5kLCBDb2xvckhlbHBlciwgTW9kZWxIZWxwZXIsIERlYnVnKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJERlZmF1bHRPYmplY3RNb2RlbCcpO1xyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyRHbG9iYWxCYWNrZ3JvdW5kTW9kZWwnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gdGhpcy5leHRlbnNpb24oJ0FuaW1hdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdyYWRpdXMnLCAwLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLm1vcnBoKCdyYWRpdXMnLCAwLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3JhZGl1cycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCBhIHZhbGlkIHJhZGl1cyB2YWx1ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMCwgJ3N0cm9rZVdpZHRoJywgMSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBhbmltYXRpb24ubW9ycGgoJ3N0cm9rZVdpZHRoJywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdzdHJva2VXaWR0aCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgwLCAnc3Ryb2tlQ29sb3InLCAncmdiYSgwLDAsMCwxKScsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgc3Ryb2tlQ29sb3IgdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5pc0NvbG9yKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbG9ySGVscGVyLmFycmF5VG9Db2xvcih2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgc3Ryb2tlQ29sb3IgdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5tb3JwaCgnc3Ryb2tlQ29sb3InLCAwLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSBDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3N0cm9rZUNvbG9yJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKGNvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBzdHJva2VDb2xvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvbG9ySGVscGVyLmlzQ29sb3IodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdzdHJva2VDb2xvcicpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZChNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3Igc3Ryb2tlQ29sb3InKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnW3t2fV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHN0cm9rZUNvbG9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIENvbG9ySGVscGVyLm5vcm1hbGl6ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdzdHJva2VTdHlsZScsIFsxLCAwXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNWYWx1ZSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlW2ldID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzdHJva2VTdHlsZSB2YWx1ZS4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgc3Ryb2tlU3R5bGUgdmFsdWUuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzdHJva2VTdHlsZSB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLm1vcnBoKCdzdHJva2VTdHlsZScsIDAsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIudmFsaWROdW1lcmljQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQodGhpcy5zdHlsZSgnc3Ryb2tlU3R5bGUnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnW3t2fV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHN0cm9rZUNvbG9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3Igc3Ryb2tlQ29sb3InKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnW3t2fV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHN0cm9rZUNvbG9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVswXSA8IDApIHZhbHVlWzBdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbMV0gPCAwKSB2YWx1ZVsxXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNi8yMDE2LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJytNb2RlbCcsICcrUGF0aCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gRGVmYXVsdE9iamVjdE1vZGVsKE1vZGVsSGVscGVyLCBQYXRoSGVscGVyLCBEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb24gPSB0aGlzLmV4dGVuc2lvbignQW5pbWF0aW9uJyk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMiwgJ3Bvc2l0aW9uJywgWzAsIDBdLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2FybignSW52YWxpZCBudW1lcmljIGFycmF5IGZvciBwb3NpdGlvbiEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBhbmltYXRpb24ubW9ycGgoJ3Bvc2l0aW9uJywgMixcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3Bvc2l0aW9uJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQoTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnSW52YWxpZCB2YWx1ZSBmb3IgcG9zaXRpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdyb3RhdGUnLCAwLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAtMzYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgMzYwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDM2MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAtIDM2MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICogTWF0aC5QSSAvIDE4MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgKiAoMTgwIC8gTWF0aC5QSSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5tb3JwaCgncm90YXRlJywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQodGhpcy5zdHlsZSgncm90YXRlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnSXMgbm90IGEgdmFsaWQgdmFsdWUgdG8gYW5pbWF0ZSByb3RhdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICd0cmFuc2xhdGUnLCBbMCwgMF0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIudmFsaWROdW1lcmljQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdJbnZhbGlkIG51bWVyaWMgYXJyYXkgZm9yIHRyYW5zbGF0ZSEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5tb3JwaCgndHJhbnNsYXRlJywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3RyYW5zbGF0ZScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ0ludmFsaWQgdmFsdWUgZm9yIHRyYW5zbGF0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdvcGFjaXR5JywgMSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdPcGFjaXR5IHZhbHVlIGlzIG5vdCBhIG51bWJlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLm1vcnBoKCdvcGFjaXR5JywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMSkgdmFsdWUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdvcGFjaXR5JykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnSW52YWxpZCB2YWx1ZSBmb3IgdHJhbnNsYXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPiAxKSB2YWx1ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdzY2FsZScsIFsxLCAxXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZSwgdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFswLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ1Vua25vd24gdHlwZSBvZiB2YWx1ZSBmb3Igc2NhbGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgYW5pbWF0aW9uLm1vcnBoKCdzY2FsZScsIDAsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mICB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3NjYWxlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQoW3ZhbHVlLCB2YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3NjYWxlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kQXJyYXkgPSBbdmFsdWVbMF0sdmFsdWVbMV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlbmRBcnJheVswXSA8IDApIGVuZEFycmF5WzBdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZW5kQXJyYXlbMV0gPCAwKSBlbmRBcnJheVsxXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZChlbmRBcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdJbnZhbGlkIHZhbHVlIGZvciBzY2FsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbMF0gPCAwKSB2YWx1ZVswXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWzFdIDwgMCkgdmFsdWVbMV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgwLCAnc2tldycsIFswLCAwXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gMzYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlIC0gMzYwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IC0zNjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAzNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZCA9IHZhbHVlICogTWF0aC5QSSAvIDE4MDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbcmFkLCByYWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVswXSA+IDM2MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVbMF0gPSB2YWx1ZVsxXSAtIDM2MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbMV0gPCAtMzYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVsxXSA9IHZhbHVlWzFdICsgMzYwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWQxID0gdmFsdWVbMF0gKiBNYXRoLlBJIC8gMTgwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkMiA9IHZhbHVlWzFdICogTWF0aC5QSSAvIDE4MDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbcmFkMSwgcmFkMl07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdVYmtub3duIHZhbHVlIGZvcm1hdCBmb3Igc2tldy4gW3t2fV0nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgYW5pbWF0aW9uLm1vcnBoKCdza2V3JywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3NrZXcnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZChbdmFsdWUsIHZhbHVlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQodGhpcy5zdHlsZSgnc2tldycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ0ludmFsaWQgdmFsdWUgZm9yIHNrZXcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdvcmlnaW4nLCBbLjUsIC41XSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3ZhbHVlWzBdLCB2YWx1ZVsxXV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ1Vua25vd24gZm9ybWF0IG9mIHZhbHVlIGZvciBvcmlnaW4uIEludmFsaWQgQXJyYXkhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ1Vua25vd24gdHlwZSBvZiB2YWx1ZSBmb3Igb3JpZ2luJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBhbmltYXRpb24ubW9ycGgoJ29yaWdpbicsIDAsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIudmFsaWROdW1lcmljQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdvcmlnaW4nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZChNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdJbnZhbGlkIHZhbHVlIGZvciBvcmlnaW4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDIsICdjYXAnLCAncm91bmQnLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdyb3VuZCcgfHwgdmFsdWUgPT09ICdidXR0JyB8fCB2YWx1ZSA9PT0gJ3NxdWFyZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHt2YWw6IHZhbHVlfSwgJ3t2YWx9IGlzIGluY29ycmVjdCB2YWx1ZSBmb3IgbGluZSBjYXAgcHJvcGVydHkhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdDYXAgcHJvcGVydHkgaXMgYSBzdHJpbmchJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGUoKSAhPT0gJ0dyb3VwJykge1xyXG4gICAgICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdibGVuZGluZycsICdzb3VyY2Utb3ZlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZEJsZW5kaW5nKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZX0sICcgW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBibGVuZGluZyEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDEsICdhbmNob3InLCBbJ2xlZnQnLCAndG9wJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5ICYmIHZhbHVlLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZVswXSA9PT0gJ2xlZnQnIHx8IHZhbHVlWzBdID09PSAnY2VudGVyJyB8fCB2YWx1ZVswXSA9PT0gJ3JpZ2h0JykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodmFsdWVbMV0gPT09ICd0b3AnIHx8IHZhbHVlWzFdID09PSAnbWlkZGxlJyB8fCB2YWx1ZVsxXSA9PT0gJ2JvdHRvbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3ZhbHVlWzBdLCB2YWx1ZVsxXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCB2YWx1ZS4gQXJyYXkgW1wibGVmdFwiIHx8IFwiY2VudGVyXCIgfHwgXCJyaWdodFwiICwgXCJ0b3BcIiB8fCBcIm1pZGRsZVwiIHx8IFwiYm90dG9tXCIgXSBpcyByZXF1aXJlZCBmb3JtYXQuJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCBhbmNob3IgdmFsdWUgZm9yIHRleHQgZWxlbWVudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZVswXSwgdmFsdWVbMV1dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDUvMy8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJytNb2RlbCcsICcrQ29sb3InLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIERlZmF1bHRGcmVlU3Ryb2tlTW9kZWwoTW9kZWxIZWxwZXIsIENvbG9ySGVscGVyLCBEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMSwgJ2ludGVycG9sYXRpb24nLCAwLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gLjQpIHZhbHVlID0gLjQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgyLCAnc3Ryb2tlQ29sb3InLCBbJ3JnYmEoMCwwLDAsMSknXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHN0eWxlLmdldCgncGF0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCBhIGNvbG9yIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gc3R5bGUuZ2V0KCdwYXRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQgPSBzdHlsZS5nZXQoJ3N0cm9rZUNvbG9yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtpXSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWVbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCBhIGNvbG9yLCBtbyBjaGFuZ2VzIG1hZGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbb2xkLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciwgcmVwbGFjZSB3aXRoIHJnYmEoMCwwLDAsMSkhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZVtpXSA9PSBcIm9iamVjdFwiIHx8IHZhbHVlW2ldLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5pc0NvbG9yKHZhbHVlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goQ29sb3JIZWxwZXIuYXJyYXlUb0NvbG9yKHZhbHVlW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCBhIGNvbG9yLCBtbyBjaGFuZ2VzIG1hZGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbb2xkLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciwgcmVwbGFjZSB3aXRoIHJnYmEoMCwwLDAsMSkhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciwgbW8gY2hhbmdlcyBtYWRlIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW29sZC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciwgcmVwbGFjZSB3aXRoIHJnYmEoMCwwLDAsMSkhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCBhIGNvbG9yLCBtbyBjaGFuZ2VzIG1hZGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbb2xkLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgY29sb3IsIHJlcGxhY2Ugd2l0aCByZ2JhKDAsMCwwLDEpIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHN0eWxlLmdldCgncGF0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkID0gc3R5bGUuZ2V0KCdzdHJva2VDb2xvcicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbaV0gPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWVbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciwgbW8gY2hhbmdlcyBtYWRlIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW29sZC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgY29sb3IsIHJlcGxhY2Ugd2l0aCByZ2JhKDAsMCwwLDEpIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWVbaV0gPT0gXCJvYmplY3RcIiB8fCB2YWx1ZVtpXS5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sb3JIZWxwZXIuaXNDb2xvcih2YWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKENvbG9ySGVscGVyLmFycmF5VG9Db2xvcih2YWx1ZVtpXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciwgbm8gY2hhbmdlcyBtYWRlIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW29sZC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgY29sb3IsIHJlcGxhY2Ugd2l0aCByZ2JhKDAsMCwwLDEpIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgY29sb3IsIG5vIGNoYW5nZXMgbWFkZSEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtvbGQubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgY29sb3IsIHJlcGxhY2Ugd2l0aCByZ2JhKDAsMCwwLDEpIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBjb2xvciwgbm8gY2hhbmdlcyBtYWRlIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW29sZC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCBhIGNvbG9yLCByZXBsYWNlIHdpdGggcmdiYSgwLDAsMCwxKSEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgY29sb3IhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ0xpbmUgTW9kZWwgLyBXcm9uZyB0eXBlIG9mIHZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWVbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMiwgJ3N0cm9rZVdpZHRoJywgWzFdLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gc3R5bGUuZ2V0KCdwYXRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBzdHlsZS5nZXQoJ3BhdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZCA9IHN0eWxlLmdldCgnc3Ryb2tlV2lkdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW2ldID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCBhIG51bWJlciEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtvbGQubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBudW1iZXIhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gc3R5bGUuZ2V0KCdwYXRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQgPSBzdHlsZS5nZXQoJ3N0cm9rZVdpZHRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW2ldID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCBhIG51bWJlciEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtvbGQubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgbnVtYmVyIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSBudW1iZXIhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbb2xkLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnTGluZSBNb2RlbCAvIHt2YWx9IGlzIG5vdCB2YWxpZCB2YWx1ZSBmb3Igc3Ryb2tlV2lkdGghJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgyLCAnc3Ryb2tlU3R5bGUnLCBbWzEsIDBdXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIudmFsaWROdW1lcmljQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHN0eWxlLmdldCgncGF0aCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBzdHlsZS5nZXQoJ3BhdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQgPSBzdHlsZS5nZXQoJ3N0cm9rZVN0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW29sZC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ0xpbmUgTW9kZWwgLyB7dmFsfSBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3Igc3Ryb2tlU3R5bGUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbb2xkLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZCA9IHN0eWxlLmdldCgnc3Ryb2tlU3R5bGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBzdHlsZS5nZXQoJ3BhdGgnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW29sZC5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdMaW5lIE1vZGVsIC8ge3ZhbH0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHN0cm9rZVN0eWxlIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbGRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtvbGQubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMS8xMy8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJytNb2RlbCcsICcrQ29sb3InLCAnRGVidWcnLCAnUmVzb3VyY2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEdsb2JhbEJhY2tncm91bmRNb2RlbChNb2RlbEhlbHBlciwgQ29sb3JIZWxwZXIsIERlYnVnLCBSZXNvdXJjZSkge1xyXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLmV4dGVuc2lvbignU3R5bGUnKSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IHRoaXMuZXh0ZW5zaW9uKCdBbmltYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFN5bmNCZ1Byb3BlcnR5KGJnLCBwcm9wZXJ0eSwgZGVmKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJnLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkoZGVmKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChiZy5sZW5ndGggPCBwcm9wZXJ0eS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5zcGxpY2UoYmcubGVuZ3RoIC0gMSwgcHJvcGVydHkubGVuZ3RoIC0gcGF0aC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdmaWxsJywgJ3JnYmEoMCwwLDAsMSknLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgY29sb3IhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5pc0NvbG9yKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbG9ySGVscGVyLmFycmF5VG9Db2xvcih2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgY29sb3InKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZX0sICdbe3ZhbH1dIGlzIG5vdCBhIHZhbGlkIGNvbG9yIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgYW5pbWF0aW9uLm1vcnBoKCdmaWxsJywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdmaWxsJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKGNvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCBhdmFsaWQgY29sb3IhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5pc0NvbG9yKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQodGhpcy5zdHlsZSgnZmlsbCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZChNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCBhIHZhbGlkIGNvbG9yIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBDb2xvckhlbHBlci5ub3JtYWxpemUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgwLCAnYmcnLCBbXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIuaXNTcHJpdGVTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IE1vZGVsSGVscGVyLnJlYWRTcHJpdGVTdHJpbmcodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gUmVzb3VyY2Uuc3ByaXRlKGRhdGEudXJsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZS5jb25maWcoZGF0YS5mcmFtZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbcmVzb3VyY2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtSZXNvdXJjZS5pbWFnZSh2YWx1ZSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiIHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAyICYmIHR5cGVvZiB2YWx1ZVswXSA9PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZVsxXSA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbMV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc291cmNlID0gUmVzb3VyY2Uuc3ByaXRlKHZhbHVlWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZS5jb25maWcodmFsdWVbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbcmVzb3VyY2VdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW2ldID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1vZGVsSGVscGVyLmlzU3ByaXRlU3RyaW5nKHZhbHVlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBNb2RlbEhlbHBlci5yZWFkU3ByaXRlU3RyaW5nKHZhbHVlW2ldKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSA9IFJlc291cmNlLnNwcml0ZShkYXRhLnVybCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2UuY29uZmlnKGRhdGEuZnJhbWVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChSZXNvdXJjZS5pbWFnZSh2YWx1ZVtpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZVtpXSA9PSBcIm9iamVjdFwiICYmIHZhbHVlW2ldLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXS5sZW5ndGggPT0gMiAmJiB0eXBlb2YgdmFsdWVbaV1bMF0gPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdmFsdWVbaV1bMV0gPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldWzFdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IFJlc291cmNlLnNwcml0ZSh2YWx1ZVtpXVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2UuY29uZmlnKHZhbHVlW2ldWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyZXNvdXJjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw6IHZhbHVlW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpOiBpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ1t7aX1dW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBiZyB2YWx1ZS4gU2tpcHBlZC4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXSwgaTogaX0sICdbe2l9XVt7dmFsfV0gaXMgbm90IGEgdmFsaWQgYmcgdmFsdWUuIFNraXBwZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSBzdHlsZS5nZXQoJ2JnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2xkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW2ldID09IFwib2JqZWN0XCIgJiYgdmFsdWVbaV0uY29uc3RydWN0b3IgPT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtpXVswXSA9PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZVtpXVsxXSA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSBSZXNvdXJjZS5zcHJpdGUodmFsdWVbaV1bMF0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlLmNvbmZpZyh2YWx1ZVtpXVsxXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVzb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXSwgaTogaX0sICdbe2l9XVt7dmFsfV0gaXMgbm90IGEgdmFsaWQgYmcgYXJyYXkgdmFsdWUuJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWVbaV0gPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIuaXNTcHJpdGVTdHJpbmcodmFsdWVbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IE1vZGVsSGVscGVyLnJlYWRTcHJpdGVTdHJpbmcodmFsdWVbaV0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlID0gUmVzb3VyY2Uuc3ByaXRlKGRhdGEudXJsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZS5jb25maWcoZGF0YS5mcmFtZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFJlc291cmNlLmltYWdlKHZhbHVlW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV0sIGk6IGl9LCAnW3tpfV1be3ZhbH1dIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBiZy4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZX0sICdbe3ZhbH1dIGlzIG5vdCB2YWxpZCB2YWx1ZSBmb3IgYmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXS50eXBlID09ICdJbWFnZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlW2ldLnVybCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZVtpXS50eXBlID09ICdTcHJpdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXS51cmwoKSArICdbJyArIHZhbHVlW2ldLmZyYW1lcygpICsgJ10nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiB2YWx1ZVtpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaTogaVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKyAnW3tpfV1be3ZhbH1dIFVua25vd24gdHlwZSBvZiB0aGUgYmFja2dyb3VuZCBvYmplY3QgY29udGFpbmVyLiBDcml0aWNhbCBlcnJvci4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBkZWZCZ1Bvc3ZhbCA9IFswLCAwXTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgyLCAnYmdQb3NpdGlvbicsIFtkZWZCZ1Bvc3ZhbF0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJnID0gc3R5bGUuZ2V0KCdiZycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcmVzID0gW3ZhbHVlWzBdLCB2YWx1ZVsxXV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKF9yZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmcgPSBzdHlsZS5nZXQoJ2JnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdwb3NpdGlvbiA9IHN0eWxlLmdldCgnYmdQb3NpdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlW2ldKSAmJiB2YWx1ZVtpXS5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goW3ZhbHVlWzBdLCB2YWx1ZVsxXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJncG9zaXRpb25baV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChiZ3Bvc2l0aW9uW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkoZGVmQmdQb3N2YWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbDogdmFsdWVbaV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICdbe2l9XVt7dmFsfV0gaXMgbm90IGEgdmFsaWQgYmdwb3NpdGlvbiB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmdwb3NpdGlvbltpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYmdwb3NpdGlvbltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChNb2RlbEhlbHBlci5jbG9uZUFycmF5KGRlZkJnUG9zdmFsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZyA9IHN0eWxlLmdldCgnYmcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJncG9zaXRpb24gPSBzdHlsZS5nZXQoJ2JnUG9zaXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZ3Bvc2l0aW9uW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNWYWx1ZSgpICYmIHZhbHVlW2ldLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChbdmFsdWVbMF0sIHZhbHVlWzFdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChiZ3Bvc2l0aW9uW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGk6IGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiB2YWx1ZVtpXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJ1t7aX1dW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBiZ3Bvc2l0aW9uIHZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkoZGVmQmdQb3N2YWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmdwb3NpdGlvbltpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChiZ3Bvc2l0aW9uW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkoZGVmQmdQb3N2YWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgYmdwb3NpdGlvbiB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGVmQmdTaXplVmFsID0gWzEsIDFdO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDEsICdiZ1NpemUnLCBbZGVmQmdTaXplVmFsXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDIgJiYgTW9kZWxIZWxwZXIudmFsaWROdW1lcmljQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmcgPSBzdHlsZS5nZXQoJ2JnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlcyA9IFt2YWx1ZVswXSwgdmFsdWVbMV1dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChfcmVzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmcgPSBzdHlsZS5nZXQoJ2JnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdzaXplID0gc3R5bGUuZ2V0KCdiZ1NpemUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJnLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldLmxlbmd0aCA9PSAyICYmIE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXVswXSwgdmFsdWVbaV1bMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJnc2l6ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYmdzaXplW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkoZGVmQmdTaXplVmFsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXSwgaTogaX0sICdbe2l9XVt7dmFsfV0gaXMgbm90IGEgdmFsaWQgYmdzaXplIHZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJnID0gc3R5bGUuZ2V0KCdiZycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmdzaXplID0gc3R5bGUuZ2V0KCdiZ1NpemUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtpXSA9PSBcIm9iamVjdFwiICYmIHZhbHVlW2ldLmNvbnN0cnVjdG9yID09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXS5sZW5ndGggPT0gMiAmJiBNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFt2YWx1ZVtpXVswXSwgdmFsdWVbaV1bMV1dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZ3NpemVbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChiZ3NpemVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goTW9kZWxIZWxwZXIuY2xvbmVBcnJheShkZWZCZ1NpemVWYWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV0sIGk6IGl9LCAnW3tpfV1be3ZhbH1dIGlzIG5vdCBhIHZhbGlkIGJnc2l6ZSB2YWx1ZS4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJnc2l6ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYmdzaXplW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkoZGVmQmdTaXplVmFsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXSwgaTogaX0sICdbe2l9XVt7dmFsfV0gaXMgbm90IGEgdmFsaWQgYmdzaXplIHZhbHVlLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZ3NpemVbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYmdzaXplW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkoZGVmQmdTaXplVmFsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLndhdGNoKCdiZycsIGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoby5sZW5ndGggIT09IG4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3luY0JnUHJvcGVydHkobiwgc3R5bGUuZ2V0KCdiZ1Bvc2l0aW9uJyksIGRlZkJnUG9zdmFsKTtcclxuICAgICAgICAgICAgICAgICAgICBTeW5jQmdQcm9wZXJ0eShuLCBzdHlsZS5nZXQoJ2JnU2l6ZScpLCBkZWZCZ1NpemVWYWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDIvOC8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJytNb2RlbCcsXHJcbiAgICAgICAgZnVuY3Rpb24gR2xvYmFsU2l6ZU1vZGVsKE1vZGVsSGVscGVyKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gdGhpcy5leHRlbnNpb24oJ0FuaW1hdGlvbicpLFxyXG4gICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLmV4dGVuc2lvbignU3R5bGUnKTtcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5tb3JwaCgnc2l6ZScsIDEsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQodGhpcy5zdHlsZSgnc2l6ZScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKFt2YWx1ZSwgdmFsdWVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdIDwgMCkgdmFsdWVbMF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWzFdIDwgMCkgdmFsdWVbMV0gPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ3NpemUnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQoTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnW3t2fV0gaXMgbm90IHZhbGlkIHZhbHVlIGZvciBzaXplJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCB2YWxpZCB2YWx1ZSBmb3Igc2l6ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbMF0gPCAwKSB2YWx1ZVswXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWzFdIDwgMCkgdmFsdWVbMV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgxLCAnc2l6ZScsIFswLCAwXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdmFsdWUsIHZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUuY29uc3RydWN0b3IgPT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAyICYmIE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdIDwgMCkgdmFsdWVbMF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlWzFdIDwgMCkgdmFsdWVbMV0gPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdmFsdWVbMF0sIHZhbHVlWzFdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgdmFsaWQgdmFsdWUgZm9yIHNpemUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgdmFsaWQgdmFsdWUgZm9yIHNpemUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNi8yMDE2LlxyXG4gKi9cclxuXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWydAZXh0ZW5kJyxcclxuICAgICAgICBmdW5jdGlvbiBHcm91cE9iamVjdE1vZGVsKGV4dGVuZCkge1xyXG5cclxuICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckRGVmYXVsdE9iamVjdE1vZGVsJyk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMS8xMy8yMDE3LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnT2JqZWN0cycsXHJcbiAgICBbJ0BleHRlbmQnLCAnRGVidWcnLFxyXG4gICAgICAgIGZ1bmN0aW9uIEltYWdlT2JqZWN0TW9kZWwoZXh0ZW5kLCBEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckRGVmYXVsdE9iamVjdE1vZGVsJyk7XHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJEdsb2JhbFNpemVNb2RlbCcpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5leHRlbnNpb24oJ1N0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMCwgJ3NyYycsIG51bGwsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZX0sICdbe3ZhbH1dIGlzIG5vdCBhIHZhbGlkIHNyYyB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI2LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIFsnQGV4dGVuZCcsICcrTW9kZWwnLCAnK1BhdGgnLCAnK0NvbG9yJywgJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBMaW5lT2JqZWN0TW9kZWwoZXh0ZW5kLCBNb2RlbEhlbHBlciwgUGF0aEhlbHBlciwgQ29sb3JIZWxwZXIsIERlYnVnKSB7XHJcblxyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyREZWZhdWx0T2JqZWN0TW9kZWwnKTtcclxuICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckRGVmYXVsdEZyZWVTdHJva2VNb2RlbCcpO1xyXG5cclxuICAgICAgICAgICAgLy9UT0RPOiBBZGQgYW5pbWF0aW9uIG1vcnBocyEhXHJcblxyXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLmV4dGVuc2lvbignU3R5bGUnKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFN5bmNQYXRoUHJvcGVydHkocGF0aCwgcHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcHJvcGVydHlbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkucHVzaChwcm9wZXJ0eVtwcm9wZXJ0eS5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdwYXRoJywgW1swLCAwLCAwLCAwLCAwLCAwLCAwLCAwXV0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoUGF0aEhlbHBlci5jaGVja1NpbXBsZVBhdGgodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSBzdHlsZS5nZXQoJ3BhdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFBhdGhIZWxwZXIuY29udmVydFNpbXBsZVBhdGgodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZC5sZW5ndGggIT09IHJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN5bmNQYXRoUHJvcGVydHkocmVzdWx0LCBzdHlsZS5nZXQoJ3N0cm9rZVN0eWxlJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3luY1BhdGhQcm9wZXJ0eShyZXN1bHQsIHN0eWxlLmdldCgnc3Ryb2tlV2lkdGgnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTeW5jUGF0aFByb3BlcnR5KHJlc3VsdCwgc3R5bGUuZ2V0KCdzdHJva2VDb2xvcicpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oJ0xpbmUgTW9kZWwgLyBJbnZhbGlkIHZhbHVlIGZvciBwYXRoIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQYXRoSGVscGVyLmNvbnZlcnRDb21wbGV4UGF0aCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzExLzIwMTcuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdPYmplY3RzJyxcclxuICAgIFsnQGV4dGVuZCcsICcrTW9kZWwnLCAnK0NvbG9yJywgJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBSZWN0YW5nbGVPYmplY3RNb2RlbChleHRlbmQsIE1vZGVsSGVscGVyLCBDb2xvckhlbHBlciwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJERlZmF1bHRPYmplY3RNb2RlbCcpO1xyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyRHbG9iYWxCYWNrZ3JvdW5kTW9kZWwnKTtcclxuICAgICAgICAgICAgZXh0ZW5kKHRoaXMsICckR2xvYmFsU2l6ZU1vZGVsJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLmV4dGVuc2lvbignU3R5bGUnKSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IHRoaXMuZXh0ZW5zaW9uKCdBbmltYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgwLCAncmFkaXVzJywgWzAsIDAsIDAsIDBdLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3ZhbHVlLCB2YWx1ZSwgdmFsdWUsIHZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbaV0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1hdGgucm91bmQodmFsdWVbaV0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IFtdLCBvbGQgPSB0aGlzLnN0eWxlKCdyYWRpdXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9sZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0W2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5wdXNoKHJlc3VsdFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkID0gc3R5bGUuZ2V0KCdyYWRpdXMnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9sZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbaV0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsLnB1c2goTWF0aC5yb3VuZCh2YWx1ZVtpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsLnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5tb3JwaCgncmFkaXVzJywgMSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdyYWRpdXMnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZChbdmFsdWUsIHZhbHVlLCB2YWx1ZSwgdmFsdWVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSB0aGlzLnN0eWxlKCdyYWRpdXMnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQob2xkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbaV0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVbaV0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnB1c2goTWF0aC5yb3VuZCh2YWx1ZVtpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICd7dn0gaXMgbm90IGEgdmFsaWQgcmFkaXVzIHZhbHVlIGZvciByZWN0YW5nbGUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdzdHJva2VDb2xvcicsIFsncmdiYSgwLDAsMCwxKScsICdyZ2JhKDAsMCwwLDEpJywgJ3JnYmEoMCwwLDAsMSknLCAncmdiYSgwLDAsMCwxKSddLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZSwgdmFsdWUsIHZhbHVlLCB2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWx1ZTogdmFsfSwgJyBbe3ZhbH0gaXMgbm90IGEgdmFsaWQgc3Ryb2tlIHN0cmluZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZCA9IHN0eWxlLmdldCgnc3Ryb2tlQ29sb3InKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbaV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvbG9ySGVscGVyLmNvbG9yVG9BcnJheSh2YWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzdHJva2UgY29sb3IgdmFsdWUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlW2ldID09PSBcIm9iamVjdFwiICYmIHZhbHVlW2ldLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sb3JIZWxwZXIuaXNDb2xvcih2YWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKENvbG9ySGVscGVyLmFycmF5VG9Db2xvcih2YWx1ZVtpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzdHJva2UgY29sb3IgdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdbe3ZhbH1dIGlzIG5vdCBhIHZhbGlkIGNvbG9yIHZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSBzdHlsZS5nZXQoJ3N0cm9rZUNvbG9yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2xkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW2ldID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5jb2xvclRvQXJyYXkodmFsdWVbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICdbe3ZhbH1dIGlzIG5vdCBhIHZhbGlkIGNvbG9yIHZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlW2ldID09PSBcIm9iamVjdFwiICYmIHZhbHVlW2ldLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sb3JIZWxwZXIuaXNDb2xvcih2YWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKENvbG9ySGVscGVyLmFycmF5VG9Db2xvcih2YWx1ZVtpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBjb2xvciB2YWx1ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWVbaV19LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBjb2xvciB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3Igc3Ryb2tlQ29sb3IhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBhbmltYXRpb24ubW9ycGgoJ3N0cm9rZUNvbG9yJywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQoW01vZGVsSGVscGVyLmNsb25lQXJyYXkoY29sb3IpLCBNb2RlbEhlbHBlci5jbG9uZUFycmF5KGNvbG9yKSwgTW9kZWxIZWxwZXIuY2xvbmVBcnJheShjb2xvciksIE1vZGVsSGVscGVyLmNsb25lQXJyYXkoY29sb3IpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdzdHJva2VDb2xvcicpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ3t2fSBpcyBub3QgYSB2YWxpZCBjb2xvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvbG9ySGVscGVyLmlzQ29sb3IodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQoW01vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQodGhpcy5zdHlsZSgnc3Ryb2tlQ29sb3InKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3V1cmVudCA9IHRoaXMuc3R5bGUoJ3N0cm9rZUNvbG9yJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1dXJlbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW2ldID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IENvbG9ySGVscGVyLmNvbG9yVG9BcnJheSh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudFtpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWVbaV0gPT09IFwib2JqZWN0XCIgJiYgdmFsdWVbaV0uY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXSAmJiBDb2xvckhlbHBlci5pc0NvbG9yKHZhbHVlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZVtpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KGN1dXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnW3t2fV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHN0cm9rZUNvbG9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5zdHlsZSgnc3Ryb2tlQ29sb3InKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtpXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IENvbG9ySGVscGVyLmNvbG9yVG9BcnJheSh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlW2ldID09PSBcIm9iamVjdFwiICYmIHZhbHVlW2ldLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb2xvckhlbHBlci5pc0NvbG9yKHZhbHVlW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnW3t2fV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHN0cm9rZUNvbG9yIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ29sb3JIZWxwZXIubm9ybWFsaXplKHZhbHVlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdzdHJva2VXaWR0aCcsIFsxLCAxLCAxLCAxXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZSwgdmFsdWUsIHZhbHVlLCB2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZCA9IHN0eWxlLmdldCgnc3Ryb2tlV2lkdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbaV0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWVbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZX0sICcgW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzdHJva2Ugd2lkdGggdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQgPSBzdHlsZS5nZXQoJ3N0cm9rZVdpZHRoJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9sZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtpXSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHN0cm9rZVdpZHRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnIFt7dmFsfV0gaXMgbm90IGEgdmFsaWQgc3Ryb2tlV2lkdGggdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBhbmltYXRpb24ubW9ycGgoJ3N0cm9rZVdpZHRoJywgMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGFydCwgZW5kLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kKFt2YWx1ZSwgdmFsdWUsIHZhbHVlLCB2YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdzdHJva2VXaWR0aCcpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuc3R5bGUoJ3N0cm9rZVdpZHRoJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldICYmIHR5cGVvZiB2YWx1ZVtpXSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5zdHlsZSgnc3Ryb2tlV2lkdGgnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldICYmIHR5cGVvZiB2YWx1ZVtpXSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQoY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICcgW3t2fV0gaXMgbm90IGEgdmFsaWQgc3Ryb2tlV2lkdGggb2JqZWN0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJyBbe3Z9XSBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3Igc3Ryb2tlV2lkdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMCwgJ3N0cm9rZVN0eWxlJywgW1sxLCAwXSwgWzEsIDBdLCBbMSwgMF0sIFsxLCAwXV0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdmFsdWUsIHZhbHVlLCB2YWx1ZSwgdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnIFt7dn1dIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciBzdHJva2Ugd2lkdGghJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQgPSBzdHlsZS5nZXQoJ3N0cm9rZVN0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2xkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlW2ldKSAmJiB2YWx1ZS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZVtpXX0sICcgW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzdHJva2Ugc3R5bGUgdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGQgPSBzdHlsZS5nZXQoJ3N0cm9rZVN0eWxlJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtpXSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZVtpXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZVtpXSkgJiYgdmFsdWVbaV0ubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZVtpXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gob2xkW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlW2ldfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgc3Ryb2tlU3R5bGUgdmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9sZFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXRjaCh7dmFsOiB2YWx1ZVtpXX0sICcgW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzdHJva2VTdHlsZSB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvbGRbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJyBbe3ZhbH1dIGlzIG5vdCB2YWxpZCBzdHJva2VTdHlsZSB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5tb3JwaCgnc3Ryb2tlU3R5bGUnLCAwLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIudmFsaWROdW1lcmljQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdzdHJva2VTdHlsZScpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpLCBNb2RlbEhlbHBlci5jbG9uZUFycmF5KHZhbHVlKSwgTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSksIE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJyBbe3Z9XSBpcyBub3QgYSB2YWxpZCBzdHJva2VTdHlsZSB2YWx1ZSEnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuc3R5bGUoJ3N0cm9rZVN0eWxyJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlW2ldICYmIE1vZGVsSGVscGVyLnZhbGlkTnVtZXJpY0FycmF5KHZhbHVlW2ldKSAmJiB2YWx1ZVtpXS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWVbaV0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydChjdXJyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCBzdHJva2VTdHlsZSB2YWx1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5zdHlsZSgnc3Ryb2tlU3R5bGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZVtpXSAmJiBNb2RlbEhlbHBlci52YWxpZE51bWVyaWNBcnJheSh2YWx1ZVtpXSkgJiYgdmFsdWVbaV0ubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKE1vZGVsSGVscGVyLmNsb25lQXJyYXkodmFsdWVbb10pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY3VycmVudFtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQoY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCBzdHJva2VTdHlsZVZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCBhIHZhbGlkIHN0cm9rZVN0eWxlVmFsdWUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcblxyXG5cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEvMTMvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWydAZXh0ZW5kJywgJytNb2RlbCcsICdEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gU3ByaXRlT2JqZWN0TW9kZWwoZXh0ZW5kLCBNb2RlbEhlbHBlciwgRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIGV4dGVuZCh0aGlzLCAnJERlZmF1bHRPYmplY3RNb2RlbCcpO1xyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyRHbG9iYWxTaXplTW9kZWwnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDAsICdzcmMnLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTW9kZWxIZWxwZXIuaXNTcHJpdGVTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHNwcml0ZSBzcmMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlWzBdID09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlWzFdID09IFwibnVtYmVyXCIgJiYgdmFsdWVbMV0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVbMF0gKyAnWycgKyB2YWx1ZVsxXSArICddJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzcHJpdGUgc3JjJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBzcHJpdGUgc3JjJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgVmlrdG9yIEtob2Rvc2V2aWNoIG9uIDMvMjUvMjAxNy5cclxuICovXHJcbiRSLnNlcnZpY2UuY2xhc3MoJ09iamVjdHMnLFxyXG4gICAgWydAZXh0ZW5kJywgJytNb2RlbCcsICcrQ29sb3InLCAnRGVidWcnLCAnQEZvbnRzJyxcclxuICAgICAgICBmdW5jdGlvbiBUZXh0T2JqZWN0TW9kZWwoZXh0ZW5kLCBNb2RlbEhlbHBlciwgQ29sb3JIZWxwZXIsIERlYnVnLCBGb250cykge1xyXG4gICAgICAgICAgICBleHRlbmQodGhpcywgJyREZWZhdWx0T2JqZWN0TW9kZWwnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMuZXh0ZW5zaW9uKCdUZXh0JyksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb24gPSB0aGlzLmV4dGVuc2lvbignQW5pbWF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICBvYmplY3QgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDEsICdzaXplJywgWydhdXRvJywgJ2F1dG8nXSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LmxpbWl0cyhJbmZpbml0eSwgSW5maW5pdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3ZhbHVlLCB2YWx1ZV1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LmxpbWl0cyh2YWx1ZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3ZhbHVlLCB2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVtpXSAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdmFsdWVbaV0gIT09IFwibnVtYmVyXCIpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZVtpXSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZVtpXSAhPT0gJ2F1dG8nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVswXSA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZVswXSA8IDApIHZhbHVlWzBdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbMV0gPT09IFwibnVtYmVyXCIgJiYgdmFsdWVbMV0gPCAwKSB2YWx1ZVsxXSA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5saW1pdHModmFsdWVbMF0gPT09ICdhdXRvJyA/IEluZmluaXR5IDogdmFsdWVbMF0sIHZhbHVlWzFdID09PSAnYXV0bycgPyBJbmZpbml0eSA6IHZhbHVlWzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3ZhbHVlWzBdLCB2YWx1ZVsxXV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCBzaXplIGFycmF5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7djogdmFsdWV9LCAnW3t2fV0gaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIHNpemUnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2YWx1ZVswXSwgdmFsdWVbMV1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDEsICdzdHInLCAnJyxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzeXN0ZW1Gb250ID0gJ3NhbnMtc2VyaWYnO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDEsICdmb250JywgJ3NhbnMtc2VyaWYnLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1Gb250ID0gRm9udHMuZm9ybWF0KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnN0eWxlKCdzeXN0ZW1Gb250JywgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgc3R5bGUuZGVmaW5lKDEsICdzeXN0ZW1Gb250Jywgc3lzdGVtRm9udCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3lzdGVtRm9udDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5c3RlbUZvbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMSwgJ3dlaWdodCcsIDQwMCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMTAwKSB2YWx1ZSA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gOTAwKSB2YWx1ZSA9IDkwMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAlIDEwMCAhPT0gMCkgdmFsdWUgPSB2YWx1ZSAtICh2YWx1ZSAlIDEwMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHN0eWxlLmRlZmluZSgxLCAnc3R5bGUnLCAnbm9ybWFsJyxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgKHZhbHVlID09PSAnbm9ybWFsJyB8fCB2YWx1ZSA9PT0gJ2l0YWxpYycgfHwgdmFsdWUgPT09ICdvYmxpcXVlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMSwgJ2xpbmVIZWlnaHQnLCAxNCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMSwgJ2ZvbnRTaXplJywgMTQsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMSwgJ2NvbG9yJywgJ3JnYmEoMCwwLDAsMSknLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcud2Fybih7dmFsOiB2YWx1ZX0sICdbe3ZhbH1dIGlzIG5vdCBhIHZhbGlkIGNvbG9yIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvbG9ySGVscGVyLmlzQ29sb3IodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29sb3JIZWxwZXIuYXJyYXlUb0NvbG9yKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3ZhbDogdmFsdWV9LCAnW3t2YWx9XSBpcyBub3QgYSB2YWxpZCBjb2xvcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2YWw6IHZhbHVlfSwgJ1t7dmFsfV0gaXMgbm90IGEgdmFsaWQgY29sb3IhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvbG9ySGVscGVyLmNvbG9yVG9BcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBzdHlsZS5kZWZpbmUoMSwgJ2FsaWduJywgJ2xlZnQnLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnY2VudGVyJyB8fCB2YWx1ZSA9PT0gJ2xlZnQnIHx8IHZhbHVlID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCBhIHByb3BlciB2YWx1ZSBmb3IgYWxpbmcgdGV4dCBwcm9wZXJ0eScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5tb3JwaCgnY29sb3InLCAxLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gQ29sb3JIZWxwZXIuY29sb3JUb0FycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCh0aGlzLnN0eWxlKCdmaWxsJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKGNvbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlYnVnLndhcm4oe3Y6IHZhbHVlfSwgJ1t7dn1dIGlzIG5vdCBhdmFsaWQgY29sb3IhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29sb3JIZWxwZXIuaXNDb2xvcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KHRoaXMuc3R5bGUoJ2ZpbGwnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQoTW9kZWxIZWxwZXIuY2xvbmVBcnJheSh2YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKHt2OiB2YWx1ZX0sICdbe3Z9XSBpcyBub3QgYSB2YWxpZCBjb2xvciEnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQ29sb3JIZWxwZXIubm9ybWFsaXplKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxMi8yNS8yMDE2LlxyXG4gKi9cclxuJFIuc2VydmljZS5jbGFzcygnU291bmQnLFxyXG4gICAgWycrQW5pbWF0aW9uJywgJ01vcnBoaW5lJyxcclxuICAgICAgICBmdW5jdGlvbiBBbmltYXRpb24oQW5pbWF0aW9uSGVscGVyLCBNb3JwaGluZSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb2dyZXNzID0gMCxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIGVhc2luZyA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBkb25lID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzdGFjayA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBtb3JwaGluZSA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgc3RlcHNDYiA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBxdWV1ZSA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjbGVhciA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGVwVHlwZVN0ciA9ICd0eXBlJyxcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlVHlwZVN0ciA9ICdjb21wbGV0ZScsXHJcbiAgICAgICAgICAgICAgICBjb25maWcgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gUmVzb2x2ZSh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSBzdGVwVHlwZVN0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXBzQ2IuaGFzT3duUHJvcGVydHkoc3RhY2tbaV0ubW9ycGgucHJvcGVydHkoKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzQ2Jbc3RhY2tbaV0ubW9ycGgucHJvcGVydHkoKV0uYXBwbHkodGFyZ2V0LCBbcHJvZ3Jlc3MsIHN0YWNrW2ldLnJlc3VsdF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBjb21wbGV0ZVR5cGVTdHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1tzdGFja1tpXS5tb3JwaC5wcm9wZXJ0eSgpXSA9IHN0YWNrW2ldLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmRvbmUoMSwgcmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXVlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kb25lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmhhc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2tbaV0ubW9ycGgucHJvcGVydHkoKSA9PSBwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2goc3RhY2tbaV0ubW9ycGgucHJvcGVydHkoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaGFzUHJvcGVydHkocHJvcGVydHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2suc3BsaWNlKGluZGV4LCAxKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIF9zdGFjayA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9ycGggPSBzdGFja1tpXS5tb3JwaC5nZXQoc3RhY2tbaV0udmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobW9ycGggIT09IHVuZGVmaW5lZCAmJiBtb3JwaC5zdGFydCgpICE9PSBmYWxzZSAmJiBtb3JwaC5lbmQoKSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3N0YWNrLnB1c2goc3RhY2tbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdGFjayA9IF9zdGFjaztcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdGlja19mdW5jdGlvbiA9IEFuaW1hdGlvbkhlbHBlci5nZXRUaWNrRnVuY3Rpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBtb3JwaGluZSA9IE1vcnBoaW5lLmNyZWF0ZSgwLCAxLCBmdW5jdGlvbiAoY29tcGxldGUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlc29sdmUoY29tcGxldGVUeXBlU3RyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhpbmUuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbaV0ucmVzdWx0ID0gdGlja19mdW5jdGlvbih2YWx1ZSwgc3RhY2tbaV0ubW9ycGguc3RhcnQoKSwgc3RhY2tbaV0ubW9ycGguZW5kKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tbaV0ubW9ycGguYXBwbHkoY29tcGxldGUsIHN0YWNrW2ldLnJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlc29sdmUoc3RlcFR5cGVTdHIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlc29sdmUoY29tcGxldGVUeXBlU3RyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBlYXNpbmcsIGR1cmF0aW9uLCAwKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gZnVuY3Rpb24gKHQsIG0sIGNmZywgZikge1xyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uSGVscGVyLm5vcm1hbGl6ZUNvbmZpZyhjZmcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gY2ZnLmR1cmF0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgIGVhc2luZyA9IGNmZy5lYXNpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RlcHNDYiA9IGNmZy5zdGVwO1xyXG5cclxuICAgICAgICAgICAgICAgIHF1ZXVlID0gY2ZnLnF1ZXVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNsZWFyID0gZjtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGFjayA9IG07XHJcblxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25maWcgPSBjZmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBdXHJcbik7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI1LzIwMTYuXHJcbiAqL1xyXG4kUi5zZXJ2aWNlLmNsYXNzKCdTb3VuZCcsXHJcbiAgICBbJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBNb3JwaChEZWJ1Zykge1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHNldHRlciA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBnZXR0ZXIgPSBudWxsLFxyXG4gICAgICAgICAgICAgICAgYXBwbGllciA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGFydCwgZW5kLFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gbnVsbCxcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBvcmRlcmluZyA9IDA7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBTZXRTdGFydFZhbHVlKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSB2YWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIFNldEVuZFZhbHVlKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgZW5kID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3JkZXJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JkZXJpbmc7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dGVyLmFwcGx5KG9iamVjdCwgW1NldFN0YXJ0VmFsdWUsIFNldEVuZFZhbHVlLCB2YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHBseSA9IGZ1bmN0aW9uIChwcm9ncmVzcywgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5maWx0ZXIocHJvcGVydHksIGFwcGxpZXIuYXBwbHkob2JqZWN0LCBbdmFsdWUsIHByb2dyZXNzXSkpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb25maWcgPSBmdW5jdGlvbiAobmFtZSwgb2JqLCBvcmQsIHNldCwgYXBsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcih7bmFtZTogbmFtZX0sICdVbmFibGUgdG8gY29uZmlnIE1vcnBoLiBhcmcxIFt7bmFtZX1dIGlzIG5vdCBhIHN0cmluZyEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtuYW1lOiBuYW1lfSwgJ1VuYWJsZSB0byBjb25maWcgTW9ycGguIGFyZzMgaXMgbm90IGFuIG9iamVjdCEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldCAhPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3Ioe25hbWU6IG5hbWV9LCAnVW5hYmxlIHRvIGNvbmZpZyBNb3JwaC4gYXJnNCBpcyBub3QgYSBmdW5jdGlvbiEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9yZCAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtuYW1lOiBuYW1lfSwgJ1VuYWJsZSB0byBjb25maWcgTW9ycGguIGFyZzIgaXMgbm90IGEgbnVtYmVyIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXBsICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcih7bmFtZTogbmFtZX0sICdVbmFibGUgdG8gY29uZmlnIE1vcnBoLiBhcmc1IGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgICBzZXR0ZXIgPSBzZXQ7XHJcbiAgICAgICAgICAgICAgICBhcHBsaWVyID0gYXBsO1xyXG4gICAgICAgICAgICAgICAgb3JkZXJpbmcgPSBvcmQ7XHJcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBvYmo7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIF1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjUvMjAxNi5cclxuICovXHJcbiRSLmhlbHBlci5zeXN0ZW0oXHJcbiAgICBmdW5jdGlvbiBBbmltYXRpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFRpY2tWYWwoY29tcGxldGUsIHByb2dyZXNzLCBzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2NzID0gZmFsc2UsIGxvY2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gXCJmdW5jdGlvblwiKSBsb2NzID0gc3RhcnQoKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09IFwiZnVuY3Rpb25cIikgbG9jZSA9IGVuZCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXJ0LmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFydC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFRpY2tWYWwoY29tcGxldGUsIHByb2dyZXNzLCBzdGFydFtpXSwgZW5kW2ldKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHN0YXJ0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IFRpY2tWYWwoY29tcGxldGUsIHByb2dyZXNzLCBzdGFydFtwcm9wXSwgZW5kW3Byb3BdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBzdGFydCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVuZHZhbCA9IGxvY2UgPT09IGZhbHNlID8gZW5kIDogbG9jZSxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydHZhbCA9IGxvY3MgPT09IGZhbHNlID8gc3RhcnQgOiBsb2NzLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpZmZlcmVuY2UgPSBlbmR2YWwgLSBzdGFydHZhbCxcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzdGFydHZhbCArIChkaWZmZXJlbmNlICogY29tcGxldGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzID49IDEpIHJlc3VsdCA9IGVuZHZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ub3JtYWxpemVDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgIGNvbmZpZy5kdXJhdGlvbiA9IHR5cGVvZiBjb25maWcuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgJiYgY29uZmlnLmR1cmF0aW9uID4gMCA/IGNvbmZpZy5kdXJhdGlvbiA6IDEwMDA7XHJcbiAgICAgICAgICAgIGNvbmZpZy5xdWV1ZSA9ICEhY29uZmlnLnF1ZXVlO1xyXG4gICAgICAgICAgICBjb25maWcuc3RlcCA9IHR5cGVvZiBjb25maWcuc3RlcCA9PT0gXCJvYmplY3RcIiA/IGNvbmZpZy5zdGVwIDoge307XHJcbiAgICAgICAgICAgIGNvbmZpZy5lYXNpbmcgPSB0eXBlb2YgY29uZmlnLmVhc2luZyA9PT0gJ3N0cmluZycgPyBjb25maWcuZWFzaW5nIDogJ2xpbmVhcic7XHJcbiAgICAgICAgICAgIGNvbmZpZy5kb25lID0gdHlwZW9mIGNvbmZpZy5kb25lID09PSBcImZ1bmN0aW9uXCIgPyBjb25maWcuZG9uZSA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmdldFRpY2tGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFRpY2tWYWw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMS8xMC8yMDE3LlxyXG4gKi9cclxuJFIuaGVscGVyLnN5c3RlbShcclxuICAgIGZ1bmN0aW9uIENvbG9yKCkge1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBOb3JtYWxpemVDb2xvckFycmF5KGFycmF5KSB7XHJcbiAgICAgICAgICAgIGlmIChhcnJheSAhPT0gZmFsc2UgJiYgYXJyYXkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2ldID0gYXJyYXlbaV0gPD0gMjU1ID8gYXJyYXlbaV0gOiAyNTU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBhcnJheVtpXSA+PSAwID8gYXJyYXlbaV0gOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmF5W2ldID0gKGkgIT09IDMgJiYgYXJyYXlbaV0gIT09IDApID8gcGFyc2VJbnQoYXJyYXlbaV0pIDogYXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaV0gPSAoKGkgPT0gMykgJiYgYXJyYXlbaV0pIDw9IDEgPyBhcnJheVtpXSA6IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBNYXRoLmFicyhhcnJheVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFBhcnNlQ29sb3VyKGNvbG9yKSB7XHJcbiAgICAgICAgICAgIHZhciBjYWNoZVxyXG4gICAgICAgICAgICAgICAgLCBwID0gcGFyc2VJbnQgLy8gVXNlIHAgYXMgYSBieXRlIHNhdmluZyByZWZlcmVuY2UgdG8gcGFyc2VJbnRcclxuICAgICAgICAgICAgICAgICwgY29sb3IgPSBjb2xvci5yZXBsYWNlKC9cXHNcXHMqL2csICcnKSAvLyBSZW1vdmUgYWxsIHNwYWNlc1xyXG4gICAgICAgICAgICA7Ly92YXJcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrcyBmb3IgNiBkaWdpdCBoZXggYW5kIGNvbnZlcnRzIHN0cmluZyB0byBpbnRlZ2VyXHJcbiAgICAgICAgICAgIGlmIChjYWNoZSA9IC9eIyhbXFxkYS1mQS1GXXsyfSkoW1xcZGEtZkEtRl17Mn0pKFtcXGRhLWZBLUZdezJ9KS8uZXhlYyhjb2xvcikpXHJcbiAgICAgICAgICAgICAgICBjYWNoZSA9IFtwKGNhY2hlWzFdLCAxNiksIHAoY2FjaGVbMl0sIDE2KSwgcChjYWNoZVszXSwgMTYpXTtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNrcyBmb3IgMyBkaWdpdCBoZXggYW5kIGNvbnZlcnRzIHN0cmluZyB0byBpbnRlZ2VyXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNhY2hlID0gL14jKFtcXGRhLWZBLUZdKShbXFxkYS1mQS1GXSkoW1xcZGEtZkEtRl0pLy5leGVjKGNvbG9yKSlcclxuICAgICAgICAgICAgICAgIGNhY2hlID0gW3AoY2FjaGVbMV0sIDE2KSAqIDE3LCBwKGNhY2hlWzJdLCAxNikgKiAxNywgcChjYWNoZVszXSwgMTYpICogMTddO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2tzIGZvciByZ2JhIGFuZCBjb252ZXJ0cyBzdHJpbmcgdG9cclxuICAgICAgICAgICAgLy8gaW50ZWdlci9mbG9hdCB1c2luZyB1bmFyeSArIG9wZXJhdG9yIHRvIHNhdmUgYnl0ZXNcclxuICAgICAgICAgICAgZWxzZSBpZiAoY2FjaGUgPSAvXnJnYmFcXCgoW1xcZF0rKSwoW1xcZF0rKSwoW1xcZF0rKSwoW1xcZF0rfFtcXGRdKi5bXFxkXSspXFwpLy5leGVjKGNvbG9yKSlcclxuICAgICAgICAgICAgICAgIGNhY2hlID0gWytjYWNoZVsxXSwgK2NhY2hlWzJdLCArY2FjaGVbM10sICtjYWNoZVs0XV07XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVja3MgZm9yIHJnYiBhbmQgY29udmVydHMgc3RyaW5nIHRvXHJcbiAgICAgICAgICAgIC8vIGludGVnZXIvZmxvYXQgdXNpbmcgdW5hcnkgKyBvcGVyYXRvciB0byBzYXZlIGJ5dGVzXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNhY2hlID0gL15yZ2JcXCgoW1xcZF0rKSwoW1xcZF0rKSwoW1xcZF0rKVxcKS8uZXhlYyhjb2xvcikpXHJcbiAgICAgICAgICAgICAgICBjYWNoZSA9IFsrY2FjaGVbMV0sICtjYWNoZVsyXSwgK2NhY2hlWzNdXTtcclxuXHJcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSB0aHJvdyBhbiBleGNlcHRpb24gdG8gbWFrZSBkZWJ1Z2dpbmcgZWFzaWVyXHJcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8gUGVyZm9ybXMgUkdCQSBjb252ZXJzaW9uIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgaXNOYU4oY2FjaGVbM10pICYmIChjYWNoZVszXSA9IDEpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkcyBvciByZW1vdmVzIDR0aCB2YWx1ZSBiYXNlZCBvbiByZ2JhIHN1cHBvcnRcclxuICAgICAgICAgICAgLy8gU3VwcG9ydCBpcyBmbGlwcGVkIHR3aWNlIHRvIHByZXZlbnQgZXJyb3MgaWZcclxuICAgICAgICAgICAgLy8gaXQncyBub3QgZGVmaW5lZFxyXG4gICAgICAgICAgICByZXR1cm4gTm9ybWFsaXplQ29sb3JBcnJheShjYWNoZS5zbGljZSgwLCA0KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbG9yVG9BcnJheSA9IFBhcnNlQ29sb3VyO1xyXG4gICAgICAgIHRoaXMubm9ybWFsaXplID0gTm9ybWFsaXplQ29sb3JBcnJheTtcclxuICAgICAgICB0aGlzLmlzQ29sb3IgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIGVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChhcnJheS5sZW5ndGggPT0gNCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbGVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcnJheVtpXSA9PSAnbnVtYmVyJyB8fCB0eXBlb2YgYXJyYXlbaV0gPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAgYXJyYXlbaV0gPT0gJ3N0cmluZycgJiYgaXNOYU4oYXJyYXlbaV0gKiAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdTaWxrIDogQ2hlY2sgZm9yIGNvbG9yIHVuc3VjY2Vzc2Z1bC4gXCInICsgYXJyYXkgKyAnXCIgaXMgbm90IGEgY29sb3IgQXJyYXkuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICFlcnJvcjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmFycmF5VG9Db2xvciA9IGZ1bmN0aW9uIChhcnJheSkge1xyXG4gICAgICAgICAgICBpZiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoID09IDQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHJpbmcgPSAncmdiYSgnO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBpID09IDMgPyBhcnJheVtpXSArICcpJyA6IGFycmF5W2ldICsgJywnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVW5rbm93biBJbnB1dCBhcnJheSBmb3JtYXQuIFNob3VsZCBiZSBbUixHLEIsQV07Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KSIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJ4N2t2XzAwMCBvbiAxLzEwLzIwMTcuXHJcbiAqL1xyXG4kUi5oZWxwZXIuc3lzdGVtKFxyXG4gICAgZnVuY3Rpb24gRHJhd2VyKERlYnVnKSB7XHJcbiAgICAgICAgdmFyIHRleHREcmF3ZXJDb250ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAgICAgdGhpcy5tZWFzdXJlVGV4dCA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICAgICAgICAgIHRleHREcmF3ZXJDb250ZXh0LnNhdmUoKTtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gZnVuYyh0ZXh0RHJhd2VyQ29udGV4dCk7XHJcbiAgICAgICAgICAgIHRleHREcmF3ZXJDb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gZnVuY3Rpb24gKG9iamVjdCwgY29udGV4dCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zZm9ybS5hcHBseShjb250ZXh0LCBvYmplY3QubWF0cml4KCkuZXh0cmFjdCgpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmRyYXdMaW5lQmdDbGlwUGF0aCA9IGZ1bmN0aW9uIChjb250ZXh0LCBwYXRoLCBzdHlsZSwgYXNzZW1ibGVyLCBzcHJpdGUpIHtcclxuICAgICAgICAgICAgdmFyIGJnID0gc3R5bGUuZ2V0KCdiZycpLFxyXG4gICAgICAgICAgICAgICAgYmdzaXplID0gc3R5bGUuZ2V0KCdiZ1NpemUnKSxcclxuICAgICAgICAgICAgICAgIGJncG9zaXRpb24gPSBzdHlsZS5nZXQoJ2JnUG9zaXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8ocGF0aFswXVswXSwgcGF0aFswXVsxXSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB4MSA9IHBhdGhbaV1bMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgeTEgPSBwYXRoW2ldWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyID0gcGF0aFtpXVsyXSxcclxuICAgICAgICAgICAgICAgICAgICB5MiA9IHBhdGhbaV1bM107XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB4MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeDIgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHkxICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB5MiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdJbnZhbGlkIHBhdGghJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5jbGlwKCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8IGJnLmxlbmd0aDsgYisrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFiZ1tiXS5sb2FkZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJnW2JdLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlbWJsZXIudXBkYXRlKCdiZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJnd2lkdGggPSBib3guc2l6ZVswXSAqIGJnc2l6ZVtiXVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmdoZWlnaHQgPSBib3guc2l6ZVsxXSAqIGJnc2l6ZVtiXVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmdwb3NpdGlvbnggPSBib3guc2l6ZVswXSAqIGJncG9zaXRpb25bYl1bMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJncG9zaXRpb255ID0gYm94LnNpemVbMV0gKiBiZ3Bvc2l0aW9uW2JdWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShzcHJpdGUubWFyZ2luWzNdICsgYmdwb3NpdGlvbngsIHNwcml0ZS5tYXJnaW5bMF0gKyBiZ3Bvc2l0aW9ueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdbaV0uZXhwb3J0KCksIDAsIDAsIGJnd2lkdGgsIGJnaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmRyYXdCZXppZXJCZ0NsaXBQYXRoID0gZnVuY3Rpb24gKGNvbnRleHQsIHBhdGgsIHN0eWxlLCBhc3NlbWJsZXIsIHNwcml0ZSkge1xyXG4gICAgICAgICAgICB2YXIgYmcgPSBzdHlsZS5nZXQoJ2JnJyksXHJcbiAgICAgICAgICAgICAgICBiZ3NpemUgPSBzdHlsZS5nZXQoJ2JnU2l6ZScpLFxyXG4gICAgICAgICAgICAgICAgYmdwb3NpdGlvbiA9IHN0eWxlLmdldCgnYmdQb3NpdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwYXRoWzBdWzBdLCBwYXRoWzBdWzFdKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSBwYXRoW2ldWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxID0gcGF0aFtpXVsxXSxcclxuICAgICAgICAgICAgICAgICAgICB4MiA9IHBhdGhbaV1bMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgeTIgPSBwYXRoW2ldWzNdLFxyXG4gICAgICAgICAgICAgICAgICAgIGF4MSA9IHBhdGhbaV1bNF0sXHJcbiAgICAgICAgICAgICAgICAgICAgYXkxID0gcGF0aFtpXVs1XSxcclxuICAgICAgICAgICAgICAgICAgICBheDIgPSBwYXRoW2ldWzZdLFxyXG4gICAgICAgICAgICAgICAgICAgIGF5MiA9IHBhdGhbaV1bN107XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB4MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeDIgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHkxICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB5MiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdJbnZhbGlkIHBhdGghJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGF4MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgIGF4MiAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgYXkxICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiAgYXkyICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoJ0ludmFsaWQgY3VydmUhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oYXgxLCBheTEsIGF4MiwgYXkyLCB4MiwgeTIpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgYmcubGVuZ3RoOyBiKyspIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWJnW2JdLmxvYWRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmdbYl0ub24oJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VtYmxlci51cGRhdGUoJ2JnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYmd3aWR0aCA9IGJveC5zaXplWzBdICogYmdzaXplW2JdWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZ2hlaWdodCA9IGJveC5zaXplWzFdICogYmdzaXplW2JdWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZ3Bvc2l0aW9ueCA9IGJveC5zaXplWzBdICogYmdwb3NpdGlvbltiXVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmdwb3NpdGlvbnkgPSBib3guc2l6ZVsxXSAqIGJncG9zaXRpb25bYl1bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHNwcml0ZS5tYXJnaW5bM10gKyBiZ3Bvc2l0aW9ueCwgc3ByaXRlLm1hcmdpblswXSArIGJncG9zaXRpb255KTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ1tpXS5leHBvcnQoKSwgMCwgMCwgYmd3aWR0aCwgYmdoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3TGluZVBhdGhGaWxsID0gZnVuY3Rpb24gKGNvbnRleHQsIHBhdGgsIHN0eWxlKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxsID0gc3R5bGUuZ2V0KCdmaWxsJyksXHJcbiAgICAgICAgICAgICAgICBjYXAgPSBzdHlsZS5nZXQoJ2NhcCcpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZUNhcCA9IGNhcDtcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8ocGF0aFswXVswXSwgcGF0aFswXVsxXSk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSBwYXRoW2ldWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxID0gcGF0aFtpXVsxXSxcclxuICAgICAgICAgICAgICAgICAgICB4MiA9IHBhdGhbaV1bMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgeTIgPSBwYXRoW2ldWzNdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeDEgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHgyICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB5MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeTIgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcignSW52YWxpZCBwYXRoIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd0JlemllclBhdGhGaWxsID0gZnVuY3Rpb24gKGNvbnRleHQsIHBhdGgsIHN0eWxlKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxsID0gc3R5bGUuZ2V0KCdmaWxsJyksXHJcbiAgICAgICAgICAgICAgICBjYXAgPSBzdHlsZS5nZXQoJ2NhcCcpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVDYXAgPSBjYXA7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwYXRoWzBdWzBdLCBwYXRoWzBdWzFdKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHgxID0gcGF0aFtpXVswXSxcclxuICAgICAgICAgICAgICAgICAgICB5MSA9IHBhdGhbaV1bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgeDIgPSBwYXRoW2ldWzJdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyID0gcGF0aFtpXVszXSxcclxuICAgICAgICAgICAgICAgICAgICBheDEgPSBwYXRoW2ldWzRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGF5MSA9IHBhdGhbaV1bNV0sXHJcbiAgICAgICAgICAgICAgICAgICAgYXgyID0gcGF0aFtpXVs2XSxcclxuICAgICAgICAgICAgICAgICAgICBheTIgPSBwYXRoW2ldWzddO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeDEgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHgyICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB5MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeTIgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcignSW52YWxpZCBwYXRoIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBheDEgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mICBheDIgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGF5MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgIGF5MiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdJbnZhbGlkIGN1cnZlIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhheDEsIGF5MSwgYXgyLCBheTIsIHgyLCB5Mik7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZmlsbDtcclxuICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmRyYXdMaW5lUGF0aCA9IGZ1bmN0aW9uIChjb250ZXh0LCBwYXRoLCBzdHlsZSkge1xyXG4gICAgICAgICAgICB2YXIgc3Ryb2tlQ29sb3IgPSBzdHlsZS5nZXQoJ3N0cm9rZUNvbG9yJyksXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aCA9IHN0eWxlLmdldCgnc3Ryb2tlV2lkdGgnKSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlID0gc3R5bGUuZ2V0KCdzdHJva2VTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ2FwID0gc3R5bGUuZ2V0KCdjYXAnKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5saW5lQ2FwID0gc3Ryb2tlQ2FwO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeDEgPSBwYXRoW2ldWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxID0gcGF0aFtpXVsxXSxcclxuICAgICAgICAgICAgICAgICAgICB4MiA9IHBhdGhbaV1bMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgeTIgPSBwYXRoW2ldWzNdO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeDEgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHgyICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB5MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeTIgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcignSW52YWxpZCBwYXRoIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdHJva2VXaWR0aFtpXSA8IC4xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oeDIsIHkyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oeDEsIHkxKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2VXaWR0aFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKHN0cm9rZVN0eWxlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd0JlemllclBhdGggPSBmdW5jdGlvbiAoY29udGV4dCwgcGF0aCwgc3R5bGUpIHtcclxuICAgICAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gc3R5bGUuZ2V0KCdzdHJva2VDb2xvcicpLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGggPSBzdHlsZS5nZXQoJ3N0cm9rZVdpZHRoJyksXHJcbiAgICAgICAgICAgICAgICBzdHJva2VTdHlsZSA9IHN0eWxlLmdldCgnc3Ryb2tlU3R5bGUnKSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNhcCA9IHN0eWxlLmdldCgnY2FwJyk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZUNhcCA9IHN0cm9rZUNhcDtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHgxID0gcGF0aFtpXVswXSxcclxuICAgICAgICAgICAgICAgICAgICB5MSA9IHBhdGhbaV1bMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgeDIgPSBwYXRoW2ldWzJdLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyID0gcGF0aFtpXVszXSxcclxuICAgICAgICAgICAgICAgICAgICBheDEgPSBwYXRoW2ldWzRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGF5MSA9IHBhdGhbaV1bNV0sXHJcbiAgICAgICAgICAgICAgICAgICAgYXgyID0gcGF0aFtpXVs2XSxcclxuICAgICAgICAgICAgICAgICAgICBheTIgPSBwYXRoW2ldWzddO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeDEgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHgyICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiB5MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgeTIgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcignSW52YWxpZCBwYXRoIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBheDEgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mICBheDIgIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIGF5MSAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgIGF5MiAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdJbnZhbGlkIGN1cnZlIScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdHJva2VXaWR0aFtpXSA8IC4xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oeDIsIHkyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oeDEsIHkxKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3JbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2VXaWR0aFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKHN0cm9rZVN0eWxlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJlemllckN1cnZlVG8oYXgxLCBheTEsIGF4MiwgYXkyLCB4MiwgeTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd1JlY3RGaWxsID0gZnVuY3Rpb24gKGNvbnRleHQsIHN0eWxlLCB4LCB5LCB3LCBoKSB7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBmaWxsID0gc3R5bGUuZ2V0KCdmaWxsJyk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGZpbGw7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnJlY3QoeCwgeSwgdywgaCk7XHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5kcmF3UmVjdFN0cm9rZSA9IGZ1bmN0aW9uIChjb250ZXh0LCBzdHlsZSwgeCwgeSwgdywgaCkge1xyXG4gICAgICAgICAgICB2YXIgc3Ryb2tlU3R5bGUgPSBzdHlsZS5nZXQoJ3N0cm9rZVN0eWxlJyksXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvciA9IHN0eWxlLmdldCgnc3Ryb2tlQ29sb3InKSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoID0gc3R5bGUuZ2V0KCdzdHJva2VXaWR0aCcpO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgX3ggPSAwLCBfeSA9IDA7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHJva2VDb2xvcltpXTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlV2lkdGggPSBzdHJva2VXaWR0aFtpXTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZURhc2goc3Ryb2tlU3R5bGVbaV0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF94ID0geCArIHc7XHJcbiAgICAgICAgICAgICAgICAgICAgX3kgPSB5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfeCA9IHggKyB3O1xyXG4gICAgICAgICAgICAgICAgICAgIF95ID0geSArIGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIF94ID0geDtcclxuICAgICAgICAgICAgICAgICAgICBfeSA9IHkgKyBoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBfeCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgX3kgPSB5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdHJva2VXaWR0aFtpXSA8IC4xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oX3gsIF95KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKF94LCBfeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjUvMjAxNi5cclxuICovXHJcbiRSLmhlbHBlci5zeXN0ZW0oXHJcbiAgICBbJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBFYXNpbmcoRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlYXNpbmdzID0ge1xyXG4gICAgICAgICAgICAgICAgJ18nOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGluZWFyOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgLz0gZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYiArIGMgKiAodCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGluZWFyU29mdDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSAodCAvPSBkKSAqIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRjID0gdHMgKiB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiICsgYyAqICg0ICogdGMgKiB0cyArIC0xMCAqIHRzICogdHMgKyA4ICogdGMgKyAtMiAqIHRzICsgdCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGluZWFyU29mdE91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSAodCAvPSBkKSAqIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRjID0gdHMgKiB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiICsgYyAqICgtMyAqIHRjICogdHMgKyAxMSAqIHRzICogdHMgKyAtMTQgKiB0YyArIDYgKiB0cyArIHQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxpbmVhclNvZnRJbjogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSAodCAvPSBkKSAqIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRjID0gdHMgKiB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiICsgYyAqICgtMSAqIHRjICogdHMgKyAyICogdGMpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJblF1YWQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGMgKiAodCAvPSBkKSAqIHQgKyBiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlT3V0UXVhZDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWMgKiAodCAvPSBkKSAqICh0IC0gMikgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dFF1YWQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHJldHVybiBjIC8gMiAqIHQgKiB0ICsgYjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWMgLyAyICogKCgtLXQpICogKHQgLSAyKSAtIDEpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5DdWJpYzogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRDdWJpYzogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCArIDEpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICsgYjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5RdWFydDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlT3V0UXVhcnQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1jICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICogdCAtIDEpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5PdXRRdWFydDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICogdCArIGI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1jIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5RdWludDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICogdCArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZU91dFF1aW50OiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluT3V0UXVpbnQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHJldHVybiBjIC8gMiAqIHQgKiB0ICogdCAqIHQgKiB0ICsgYjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMikgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJblNpbmU6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC1jICogTWF0aC5jb3ModCAvIGQgKiAoTWF0aC5QSSAvIDIpKSArIGMgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRTaW5lOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjICogTWF0aC5zaW4odCAvIGQgKiAoTWF0aC5QSSAvIDIpKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluT3V0U2luZTogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLWMgLyAyICogKE1hdGguY29zKE1hdGguUEkgKiB0IC8gZCkgLSAxKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluRXhwbzogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQgPT09IDApID8gYiA6IGMgKiBNYXRoLnBvdygyLCAxMCAqICh0IC8gZCAtIDEpKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZU91dEV4cG86IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0ID09PSBkKSA/IGIgKyBjIDogYyAqICgtTWF0aC5wb3coMiwgLTEwICogdCAvIGQpICsgMSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dEV4cG86IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IDApIHJldHVybiBiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSBkKSByZXR1cm4gYiArIGM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHJldHVybiBjIC8gMiAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjIC8gMiAqICgtTWF0aC5wb3coMiwgLTEwICogLS10KSArIDIpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5DaXJjOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtYyAqIChNYXRoLnNxcnQoMSAtICh0IC89IGQpICogdCkgLSAxKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZU91dENpcmM6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiBNYXRoLnNxcnQoMSAtICh0ID0gdCAvIGQgLSAxKSAqIHQpICsgYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlYXNlSW5PdXRDaXJjOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSByZXR1cm4gLWMgLyAyICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjIC8gMiAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSArIGI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZWFzZUluQmFjazogZnVuY3Rpb24gKHQsIGIsIGMsIGQsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSAodCAvPSBkKSAqIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRjID0gdHMgKiB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiICsgYyAqICgxNS4yNiAqIHRjICogdHMgKyAtNDMuNTYgKiB0cyAqIHRzICsgMzkuOCAqIHRjICsgLTEwLjYgKiB0cyArIDAuMSAqIHQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRCYWNrOiBmdW5jdGlvbiAodCwgYiwgYywgZCwgcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cyA9ICh0IC89IGQpICogdDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGMgPSB0cyAqIHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgKyBjICogKDExLjI0ICogdGMgKiB0cyArIC0yMy45NiAqIHRzICogdHMgKyAxMi4yNCAqIHRjICsgMS40NCAqIHRzICsgMC4wNCAqIHQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VJbk91dEJhY2s6IGZ1bmN0aW9uICh0LCBiLCBjLCBkLCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRzID0gKHQgLz0gZCkgKiB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YyA9IHRzICogdDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYiArIGMgKiAoMjIuOTIgKiB0YyAqIHRzICsgLTU3Ljc4ICogdHMgKiB0cyArIDQ1ICogdGMgKyAtOS4yOCAqIHRzICsgMC4xNCAqIHQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVhc2VPdXRCb3VuY2U6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0IC89IGQpIDwgKDEgLyAyLjc1KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiB0ICogdCkgKyBiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCA8ICgyIC8gMi43NSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDEuNSAvIDIuNzUpKSAqIHQgKyAuNzUpICsgYjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPCAoMi41IC8gMi43NSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDIuMjUgLyAyLjc1KSkgKiB0ICsgLjkzNzUpICsgYjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMi42MjUgLyAyLjc1KSkgKiB0ICsgLjk4NDM3NSkgKyBiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlYXNpbmdzW25hbWVdKSByZXR1cm4gZWFzaW5nc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKHtuYW1lOiBuYW1lfSwgJ0Vhc2luZ3MgLyBVbmFibGUgdG8gZ2V0IHVuZGVmaW5lZCBlYXNpbmcgW3tuYW1lfV0uIExpbmVhciBlYXNpbmcgZnVuY3Rpb24gcHJvdmlkZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWFzaW5nc1snbGluZWFyJ107XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG4pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAyLzYvMjAxNy5cclxuICovXHJcbiRSLmhlbHBlci5zeXN0ZW0oXHJcbiAgICBmdW5jdGlvbiBNYXRyaXgoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gR3JhcGhpY3NUcmFuc2Zvcm1NYXRyaXgob2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcclxuICAgICAgICAgICAgICAgIGludmVyc2lvbiA9IFsxLCAwLCAwLCAxLCAwLCAwXSxcclxuICAgICAgICAgICAgICAgIGdsb2JhbEludmVyc2lvbiA9IG51bGwsXHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5ID0gW10sIGludmVydGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBtdWx0aXBseShtMSwgbTIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhMSA9IG0xWzBdICogbTJbMF0gKyBtMVsyXSAqIG0yWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgIGEyID0gbTFbMV0gKiBtMlswXSArIG0xWzNdICogbTJbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgYTMgPSBtMVswXSAqIG0yWzJdICsgbTFbMl0gKiBtMlszXSxcclxuICAgICAgICAgICAgICAgICAgICBhNCA9IG0xWzFdICogbTJbMl0gKyBtMVszXSAqIG0yWzNdLFxyXG4gICAgICAgICAgICAgICAgICAgIGE1ID0gbTFbMF0gKiBtMls0XSArIG0xWzJdICogbTJbNV0gKyBtMVs0XSxcclxuICAgICAgICAgICAgICAgICAgICBhNiA9IG0xWzFdICogbTJbNF0gKyBtMVszXSAqIG0yWzVdICsgbTFbNV07XHJcbiAgICAgICAgICAgICAgICBtMVswXSA9IGExO1xyXG4gICAgICAgICAgICAgICAgbTFbMV0gPSBhMjtcclxuICAgICAgICAgICAgICAgIG0xWzJdID0gYTM7XHJcbiAgICAgICAgICAgICAgICBtMVszXSA9IGE0O1xyXG4gICAgICAgICAgICAgICAgbTFbNF0gPSBhNTtcclxuICAgICAgICAgICAgICAgIG0xWzVdID0gYTY7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGludmVydCgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBoaXN0b3J5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpc3RvcnlbaV0ucm90YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaW5BID0gTWF0aC5zaW4oLWhpc3RvcnlbaV0ucm90YXRlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvc0EgPSBNYXRoLmNvcygtaGlzdG9yeVtpXS5yb3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbHkoaW52ZXJzaW9uLCBbY29zQSwgc2luQSwgLXNpbkEsIGNvc0EsIDAsIDBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhpc3RvcnlbaV0udHJhbnNsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGx5KGludmVyc2lvbiwgWzEsIDAsIDAsIDEsIC1oaXN0b3J5W2ldLnRyYW5zbGF0ZVswXSwgLWhpc3RvcnlbaV0udHJhbnNsYXRlWzFdXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoaXN0b3J5W2ldLnNrZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbHkoaW52ZXJzaW9uLCBbMSwgTWF0aC50YW4oLWhpc3RvcnlbaV0uc2tld1sxXSksIE1hdGgudGFuKC1oaXN0b3J5W2ldLnNrZXdbMF0pLCAxLCAwLCAwXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoaXN0b3J5W2ldLnNjYWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGx5KGludmVyc2lvbiwgWzEgLyBoaXN0b3J5W2ldLnNjYWxlWzBdLCAwLCAwLCAxIC8gaGlzdG9yeVtpXS5zY2FsZVsxXSwgMCwgMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGludmVydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGhpc3RvcnkgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZSA9IGZ1bmN0aW9uIChhbmdsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNpbkEgPSBNYXRoLnNpbihhbmdsZSksXHJcbiAgICAgICAgICAgICAgICAgICAgY29zQSA9IE1hdGguY29zKGFuZ2xlKSxcclxuICAgICAgICAgICAgICAgICAgICBtID0gW2Nvc0EsIHNpbkEsIC1zaW5BLCBjb3NBLCAwLCAwXTtcclxuXHJcbiAgICAgICAgICAgICAgICBtdWx0aXBseSh2YWx1ZSwgbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHsncm90YXRlJzogYW5nbGV9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNsYXRlID0gZnVuY3Rpb24gKHgsIHkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gWzEsIDAsIDAsIDEsIHgsIHldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh4ICE9PSAwIHx8IHkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBtdWx0aXBseSh2YWx1ZSwgbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHsndHJhbnNsYXRlJzogW3gsIHldfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gZnVuY3Rpb24gKHgsIHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4ICE9PSAxIHx8IHkgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IFt4LCAwLCAwLCB5LCAwLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICBtdWx0aXBseSh2YWx1ZSwgbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHsnc2NhbGUnOiBbeCwgeV19KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2tldyA9IGZ1bmN0aW9uICh4LCB5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeCAhPT0gMCB8fCB5ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhbkEgPSBNYXRoLnRhbih4KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFuQiA9IE1hdGgudGFuKHkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gWzEsIHRhbkIsIHRhbkEsIDEsIDAsIDBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtdWx0aXBseSh2YWx1ZSwgbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHsnc2tldyc6IFt4LCB5XX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5leHRyYWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW52ZXJ0R2xvYmFsKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG9iamVjdC5wYXJlbnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWludmVydGVkKSBpbnZlcnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFnbG9iYWxJbnZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsSW52ZXJzaW9uID0gW2ludmVyc2lvblswXSwgaW52ZXJzaW9uWzFdLCBpbnZlcnNpb25bMl0sIGludmVyc2lvblszXSwgaW52ZXJzaW9uWzRdLCBpbnZlcnNpb25bNV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBseShnbG9iYWxJbnZlcnNpb24sIHBhcmVudC5tYXRyaXgoKS5nbG9iYWxJbnZlcnNpb25NYXRyaXgoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsSW52ZXJzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbEludmVyc2lvbiA9IGludmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsSW52ZXJzaW9uO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdsb2JhbEludmVyc2lvbk1hdHJpeCA9IGludmVydEdsb2JhbDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsQ3Vyc29yUHJvamVjdGlvbiA9IGZ1bmN0aW9uIChjdXJzb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZ2xvYmFsSW52ZXJzaW9uKSBpbnZlcnRHbG9iYWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGN1cnNvclswXSAqIGdsb2JhbEludmVyc2lvblswXSArIGN1cnNvclsxXSAqIGdsb2JhbEludmVyc2lvblsyXSArIGdsb2JhbEludmVyc2lvbls0XSxcclxuICAgICAgICAgICAgICAgICAgICB5ID0gY3Vyc29yWzBdICogZ2xvYmFsSW52ZXJzaW9uWzFdICsgY3Vyc29yWzFdICogZ2xvYmFsSW52ZXJzaW9uWzNdICsgZ2xvYmFsSW52ZXJzaW9uWzVdO1xyXG5cclxuICAgICAgICAgICAgICAgIGN1cnNvclswXSA9IHg7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3JbMV0gPSB5O1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJzb3I7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmN1cnNvclByb2plY3Rpb24gPSBmdW5jdGlvbiAoY3Vyc29yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWludmVydGVkKSBpbnZlcnQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGN1cnNvclswXSAqIGludmVyc2lvblswXSArIGN1cnNvclsxXSAqIGludmVyc2lvblsyXSArIGludmVyc2lvbls0XSxcclxuICAgICAgICAgICAgICAgICAgICB5ID0gY3Vyc29yWzBdICogaW52ZXJzaW9uWzFdICsgY3Vyc29yWzFdICogaW52ZXJzaW9uWzNdICsgaW52ZXJzaW9uWzVdO1xyXG5cclxuICAgICAgICAgICAgICAgIGN1cnNvclswXSA9IHg7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3JbMV0gPSB5O1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJzb3I7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vYmplY3RNYXRyaXggPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gbmV3IEdyYXBoaWNzVHJhbnNmb3JtTWF0cml4KG9iamVjdCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBvYmplY3QuZXh0ZW5zaW9uKCdTdHlsZScpLFxyXG4gICAgICAgICAgICAgICAgYm94Q29udGFpbmVyID0gb2JqZWN0LmV4dGVuc2lvbignQm94JykuYm94KCksXHJcbiAgICAgICAgICAgICAgICBzcHJpdGUgPSBib3hDb250YWluZXIuc3ByaXRlKCksXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHN0eWxlLmdldCgncG9zaXRpb24nKSxcclxuICAgICAgICAgICAgICAgIG9yaWdpbiA9IHN0eWxlLmdldCgnb3JpZ2luJyksXHJcbiAgICAgICAgICAgICAgICBza2V3ID0gc3R5bGUuZ2V0KCdza2V3JyksXHJcbiAgICAgICAgICAgICAgICByb3RhdGUgPSBzdHlsZS5nZXQoJ3JvdGF0ZScpLFxyXG4gICAgICAgICAgICAgICAgc2NhbGUgPSBzdHlsZS5nZXQoJ3NjYWxlJyksXHJcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGUgPSBzdHlsZS5nZXQoJ3RyYW5zbGF0ZScpLFxyXG5cclxuICAgICAgICAgICAgICAgIF90cmFuc2xhdGUgPSBvYmplY3QudHlwZSgpID09PSAnR3JvdXAnID8gW1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uWzBdICsgdHJhbnNsYXRlWzBdIC0gc3ByaXRlLm1hcmdpblszXSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblsxXSArIHRyYW5zbGF0ZVsxXSAtIHNwcml0ZS5tYXJnaW5bMF1cclxuICAgICAgICAgICAgICAgIF0gOlxyXG4gICAgICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlLnBvc2l0aW9uWzBdICsgdHJhbnNsYXRlWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHJpdGUucG9zaXRpb25bMV0gKyB0cmFuc2xhdGVbMV1cclxuICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgX29yaWdpbiA9IFtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5bMF0gKiBzcHJpdGUuc2l6ZVswXSxcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5bMV0gKiBzcHJpdGUuc2l6ZVsxXVxyXG4gICAgICAgICAgICAgICAgXTtcclxuXHJcblxyXG4gICAgICAgICAgICBtYXRyaXgudHJhbnNsYXRlKF9vcmlnaW5bMF0sIF9vcmlnaW5bMV0pO1xyXG4gICAgICAgICAgICBpZiAoX3RyYW5zbGF0ZVswXSAhPT0gMCB8fCBfdHJhbnNsYXRlWzFdICE9PSAwKSBtYXRyaXgudHJhbnNsYXRlKF90cmFuc2xhdGVbMF0sIF90cmFuc2xhdGVbMV0pO1xyXG4gICAgICAgICAgICBpZiAocm90YXRlICE9PSAwKSBtYXRyaXgucm90YXRlKHJvdGF0ZSk7XHJcbiAgICAgICAgICAgIGlmIChza2V3WzBdICE9PSAwIHx8IHNrZXdbMV0gIT09IDApIG1hdHJpeC5za2V3KHNrZXdbMF0sIHNrZXdbMV0pO1xyXG4gICAgICAgICAgICBpZiAoc2NhbGVbMF0gIT09IDEgfHwgc2NhbGVbMV0gIT09IDEpIG1hdHJpeC5zY2FsZShzY2FsZVswXSwgc2NhbGVbMV0pO1xyXG4gICAgICAgICAgICBtYXRyaXgudHJhbnNsYXRlKC1fb3JpZ2luWzBdLCAtX29yaWdpblsxXSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbWF0cml4O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgfSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYng3a3ZfMDAwIG9uIDEyLzI5LzIwMTYuXHJcbiAqL1xyXG4kUi5oZWxwZXIuc3lzdGVtKFxyXG4gICAgWydEZWJ1ZycsXHJcbiAgICAgICAgZnVuY3Rpb24gTW9kZWwoRGVidWcpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2xvbmVIYXNoID0gZnVuY3Rpb24gKGhhc2gpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGFzaCAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdIYXNoIGlzIG5vdCBhbiBvYmplY3QhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaGFzaCkpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jbG9uZUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFycmF5ICE9PSBcIm9iamVjdFwiIHx8IGFycmF5LmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKCdhcnJheSBpcyBub3QgYW4gYXJyYXkhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcnJheVtpXSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnJheVtpXS5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5jbG9uZUFycmF5KGFycmF5W2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuY2xvbmVIYXNoKGFycmF5W2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFycmF5W2ldID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGFycmF5W2ldLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGV2YWwodGV4dCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKCdZb3UgY2xvbmUgZnVuY3Rpb25zISBJdCBjYW4gYmUgc2xvdyEnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFycmF5W2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudmFsaWROdW1lcmljQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJyYXkgIT09IFwib2JqZWN0XCIgfHwgYXJyYXkuY29uc3RydWN0b3IgIT09IEFycmF5KSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJyYXlbaV0gIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGJsZW5kaW5ncyA9IFsnc291cmNlLW92ZXInLCAnc291cmNlLWluJywgJ3NvdXJjZS1vdXQnLCAnc291cmNlLWF0b3AnLCAnZGVzdGluYXRpb24tb3ZlcicsXHJcbiAgICAgICAgICAgICAgICAnZGVzdGluYXRpb24taW4nLCAnZGVzdGluYXRpb24tb3V0JywgJ2Rlc3RpbmF0aW9uLWF0b3AnLCAnbGlnaHRlcicsICdjb3B5JywgJ3hvcicsICdtdWx0aXBseScsXHJcbiAgICAgICAgICAgICAgICAnc2NyZWVuJywgJ292ZXJsYXknLCAnZGFya2VuJywgJ2xpZ2h0ZW4nLCAnY29sb3ItZG9kZ2UnLCAnY29sb3ItYnVybicsICdoYXJkLWxpZ2h0JyxcclxuICAgICAgICAgICAgICAgICdzb2Z0LWxpZ2h0JywgJ2RpZmZlcmVuY2UnLCAnZXhjbHVzaW9uJywgJ2h1ZScsICdzYXR1cmF0aW9uJywgJ2NvbG9yJywgJ2x1bWlub3NpdHknXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZhbGlkQmxlbmRpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsZW5kaW5ncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChibGVuZGluZ3NbaV0gPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgc3ByaXRlX3JlZ2V4cCA9IC9eKFsuL19cXGRhLXpBLVpdKykoXFxbKFxcZCspXFxdKSQvO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pc1Nwcml0ZVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzcHJpdGVfcmVnZXhwLnRlc3Qoc3RyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVhZFNwcml0ZVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBzdHIubWF0Y2goc3ByaXRlX3JlZ2V4cCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IHJlc3VsdFsxXSxcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZXM6IHBhcnNlSW50KHJlc3VsdFszXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfV0pOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IFZpa3RvciBLaG9kb3NldmljaCBvbiAyLzMvMjAxNy5cclxuICovXHJcbiRSLmhlbHBlci5zeXN0ZW0oXHJcbiAgICBmdW5jdGlvbiBNb3VzZSgpIHtcclxuICAgICAgICB0aGlzLmNpcmNsZVVzZXJDaGVja0Z1bmN0aW9uID0gZnVuY3Rpb24gKGN1cnNvcikge1xyXG4gICAgICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5tYXRyaXgoKS5nbG9iYWxDdXJzb3JQcm9qZWN0aW9uKFtjdXJzb3JbMF0sIGN1cnNvclsxXV0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvb3JkcyA8IFswXSB8fCBjb29yZHNbMV0gPCAwKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3ByaXRlID0gdGhpcy5leHRlbnNpb24oJ0JveCcpLmJveCgpLnNwcml0ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvb3Jkc1swXSA+IHNwcml0ZS5zaXplWzBdKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29vcmRzWzFdID4gc3ByaXRlLnNpemVbMV0pIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHZhciByYWRpdXMgPSBzcHJpdGUuc2l6ZVswXSAvIDIsXHJcbiAgICAgICAgICAgICAgICBjeCA9IHJhZGl1cyxcclxuICAgICAgICAgICAgICAgIGN5ID0gc3ByaXRlLnNpemVbMV0gLyAyO1xyXG5cclxuICAgICAgICAgICAgaWYgKE1hdGgucG93KGNvb3Jkc1swXSAtIGN4LCAyKSArIE1hdGgucG93KGNvb3Jkc1sxXSAtIGN5LCAyKSA8PSBNYXRoLnBvdyhyYWRpdXMsIDIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuc3F1YXJlVXNlckNoZWNrRnVuY3Rpb24gPSBmdW5jdGlvbiAoY3Vyc29yKSB7XHJcbiAgICAgICAgICAgIHZhciBjb29yZHMgPSB0aGlzLm1hdHJpeCgpLmdsb2JhbEN1cnNvclByb2plY3Rpb24oW2N1cnNvclswXSwgY3Vyc29yWzFdXSksXHJcbiAgICAgICAgICAgICAgICBzcHJpdGUgPSB0aGlzLmV4dGVuc2lvbignQm94JykuYm94KCkuc3ByaXRlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29vcmRzWzBdID4gMCAmJiBjb29yZHNbMF0gPCBzcHJpdGUuc2l6ZVswXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvb3Jkc1sxXSA+IDAgJiYgY29vcmRzWzFdIDwgc3ByaXRlLnNpemVbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmNpcmNsZUNoZWNrRnVuY3Rpb24gPSBmdW5jdGlvbiAoY3Vyc29yKSB7XHJcbiAgICAgICAgICAgIHZhciBjb29yZHMgPSB0aGlzLm1hdHJpeCgpLmdsb2JhbEN1cnNvclByb2plY3Rpb24oW2N1cnNvclswXSwgY3Vyc29yWzFdXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29vcmRzIDwgWzBdIHx8IGNvb3Jkc1sxXSA8IDApIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzcHJpdGUgPSB0aGlzLmV4dGVuc2lvbignQm94JykuYm94KCkuc3ByaXRlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY29vcmRzWzBdID4gc3ByaXRlLnNpemVbMF0pIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb29yZHNbMV0gPiBzcHJpdGUuc2l6ZVsxXSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbnRlciA9IHNwcml0ZS5zaXplWzBdIC8gMixcclxuICAgICAgICAgICAgICAgIHJhZGl1cyA9IHRoaXMuZXh0ZW5zaW9uKCdTdHlsZScpLmdldCgncmFkaXVzJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoTWF0aC5wb3coKGNvb3Jkc1swXSAtIGNlbnRlciksIDIpICsgTWF0aC5wb3coKGNvb3Jkc1sxXSAtIGNlbnRlciksIDIpIDwgTWF0aC5wb3cocmFkaXVzLCAyKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnJlY3RDaGVja0Z1bmN0aW9uID0gZnVuY3Rpb24gKGN1cnNvcikge1xyXG4gICAgICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5tYXRyaXgoKS5nbG9iYWxDdXJzb3JQcm9qZWN0aW9uKFtjdXJzb3JbMF0sIGN1cnNvclsxXV0pLFxyXG4gICAgICAgICAgICAgICAgc3ByaXRlID0gdGhpcy5leHRlbnNpb24oJ0JveCcpLmJveCgpLnNwcml0ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvb3Jkc1swXSA+IDAgJiYgY29vcmRzWzBdIDwgc3ByaXRlLnNpemVbMF0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb29yZHNbMV0gPiAwICYmIGNvb3Jkc1sxXSA8IHNwcml0ZS5zaXplWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBieDdrdl8wMDAgb24gMTIvMjkvMjAxNi5cclxuICovXHJcbiRSLmhlbHBlci5zeXN0ZW0oXHJcbiAgICBbJ0RlYnVnJyxcclxuICAgICAgICBmdW5jdGlvbiBQYXRoKERlYnVnKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENvbnRyb2xQb2ludHMoeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGQwMSA9IE1hdGguc3FydChNYXRoLnBvdyh4MSAtIHgwLCAyKSArIE1hdGgucG93KHkxIC0geTAsIDIpKTtcclxuICAgICAgICAgICAgICAgIHZhciBkMTIgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDIgLSB4MSwgMikgKyBNYXRoLnBvdyh5MiAtIHkxLCAyKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmEgPSB0ICogZDAxIC8gKGQwMSArIGQxMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmIgPSB0ICogZDEyIC8gKGQwMSArIGQxMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcDF4ID0geDEgLSBmYSAqICh4MiAtIHgwKTtcclxuICAgICAgICAgICAgICAgIHZhciBwMXkgPSB5MSAtIGZhICogKHkyIC0geTApO1xyXG4gICAgICAgICAgICAgICAgdmFyIHAyeCA9IHgxICsgZmIgKiAoeDIgLSB4MCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcDJ5ID0geTEgKyBmYiAqICh5MiAtIHkwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbcDF4LCBwMXksIHAyeCwgcDJ5XTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb252ZXJ0Q29tcGxleFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtpXVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtpXVsxXVxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRTaW1wbGVQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoJ1BhdGggc2hvdWxkIGNvbnNpc3Qgb2YgYXQgbGVhc3QgdHdvIHBvaW50cyEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gcGF0aFtpXVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHBhdGhbaV1bMV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeCAhPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgIHkgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRGVidWcuZXJyb3IoJ0luY29ycmVjdCBQYXRoIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBwYXRoLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbaV0pIHJlc3VsdC5wdXNoKFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldLnB1c2goeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXS5wdXNoKHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2kgLSAxXS5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaSAtIDFdLnB1c2goeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpIC0gMV0ucHVzaChyZXN1bHRbaSAtIDFdWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2kgLSAxXS5wdXNoKHJlc3VsdFtpIC0gMV1bMV0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2kgLSAxXS5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaSAtIDFdLnB1c2goeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gKHBhdGgsIHNtb290aGluZywgY2xvc2VkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gW10sIG1pZCA9IFtwYXRoW2ldWzBdLCBwYXRoW2ldWzFdXSwgbmV4dCA9IFtwYXRoW2ldWzJdLCBwYXRoW2ldWzNdXSwgcHRzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IFtwYXRoW2kgLSAxXVswXSwgcGF0aFtpIC0gMV1bMV1dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHB0cyA9IGdldENvbnRyb2xQb2ludHMocHJldlswXSwgcHJldlsxXSwgbWlkWzBdLCBtaWRbMV0sIG5leHRbMF0sIG5leHRbMV0sIHNtb290aGluZyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtpXVs0XSA9IHB0c1syXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtpXVs1XSA9IHB0c1szXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbaSAtIDFdWzZdID0gcHRzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoW2kgLSAxXVs3XSA9IHB0c1sxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtpXVs0XSA9IHB0c1syXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtpXVs1XSA9IHB0c1szXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IHBhdGgubGVuZ3RoIC0gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldiA9IFtwYXRoW2ldWzBdLCBwYXRoW2ldWzFdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWlkID0gW3BhdGhbaV1bMl0sIHBhdGhbaV1bM11dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbWlkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHRzID0gZ2V0Q29udHJvbFBvaW50cyhwcmV2WzBdLCBwcmV2WzFdLCBtaWRbMF0sIG1pZFsxXSwgbmV4dFswXSwgbmV4dFsxXSwgc21vb3RoaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbaV1bNl0gPSBwdHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbaV1bN10gPSBwdHNbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzMSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMyID0gcGF0aFswXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfc2VnbWVudCA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzMVswXSwgczFbMV0sIHMxWzJdLCBzMVszXSwgczFbNF0sIHMxWzVdLCBzMVs2XSwgczFbN11dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3MyWzBdLCBzMlsxXSwgczJbMl0sIHMyWzNdLCBzMls0XSwgczJbNV0sIHMyWzZdLCBzMls3XV1dO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnBvbGF0ZShfc2VnbWVudCwgc21vb3RoaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhbMF1bNF0gPSBfc2VnbWVudFsxXVs0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFswXVs1XSA9IF9zZWdtZW50WzFdWzVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoW3BhdGgubGVuZ3RoIC0gMV1bNl0gPSBfc2VnbWVudFswXVs2XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aFtwYXRoLmxlbmd0aCAtIDFdWzddID0gX3NlZ21lbnRbMF1bN107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tTaW1wbGVQYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gXCJvYmplY3RcIiB8fCBwYXRoLmNvbnN0cnVjdG9yICE9PSBBcnJheSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkZWVwY2hlY2sgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHBhdGhbaV0gIT09IFwib2JqZWN0XCIgfHwgcGF0aFtpXS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkgfHwgcGF0aFtpXS5sZW5ndGggIT09IDIgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHBhdGhbaV1bMF0gIT09IFwibnVtYmVyXCIgfHwgdHlwZW9mICBwYXRoW2ldWzFdICE9PSBcIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZXBjaGVjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBjaGVjaztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29tcGFyZVBhdGhzID0gZnVuY3Rpb24gKHBhdGgxLCBwYXRoMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGgxLmxlbmd0aCAhPT0gcGF0aDIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aDEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IHBhdGgxW2ldLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoMVtpXVtuXSAhPT0gcGF0aDJbaV1bbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
