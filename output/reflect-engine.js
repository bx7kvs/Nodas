!function(){function Reflect(){function CoreInjection(){var r=[],o=null;this.name=function(){return o.name},this.dependencies=function(){return r},this.instance=null,this.build=function(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);return t.unshift(null),this.instance=new(Function.prototype.bind.apply(o,t)),n[this.name()]=this,this};for(var i=0;i<arguments.length;i++)if("string"==typeof arguments[i]&&arguments[i].length&&r.push(arguments[i]),"function"==typeof arguments[i]){o=arguments[i];break}if(!o||!o.name||0==o.name.length)throw new Error("Unable to create core injection. Constructor is undefined!");e[o.name]=this,t[o.name]=!0}function createDefineFunction(t){return function define(e,i){void 0===r[e]&&(r[e]={value:i,targetname:t,wrap:function(){void 0===o[i]&&("function"==typeof i?n[t]&&(o[e]=function(){var e=i.apply(n[t].instance,arguments);return void 0!==e?e:o}):o[e]=i)}})}}function resolve(t){for(var r=t.dependencies(),o=[],i=0;i<r.length;i++){var a=r[i];if("@define"===a)o.push(createDefineFunction(t.name()));else{if("string"!=typeof a)throw o.push(void 0),new Error("Unable to resolve injection ["+a+"]. Unknown type of injection request.");if(n[a])o.push(n[a].instance);else{if(!e[a])throw o.push(void 0),new Error("Unable to resolve injection ["+a+"]. Mo such core module found!");o.push(resolve(e[a]).instance)}}}return t.build.apply(t,o)}function buildCore(){for(var o in t)n[o]||(n[o]=resolve(e[o]));for(var i in r)r.hasOwnProperty(i)&&r[i].wrap()}function check(){var e=!0;for(var n in t)if(t.hasOwnProperty(n)&&!t[n]){e=!1;break}e&&buildCore()}var t={},e={},n={},r={},o=this,i=[];this.$=function(){var t=[];if("object"==typeof arguments[0]&&arguments[0].constructor==Array)for(var e=0;e<arguments[0].length;e++)t.push(arguments[0][e]);else"function"==typeof arguments[0]&&arguments[0].name&&t.push(arguments[0]);return t.unshift(null),new(Function.prototype.bind.apply(CoreInjection,t)),check(),this},this.modules=function(){for(var e=0;e<arguments.length;e++)t[arguments[e]]||(t[arguments[e]]=!1);check()},document.addEventListener("DOMContentLoaded",function(){for(var t=0;t<i.length;t++)i[t].call(this)}),this.on=function(t,e){if(!t||"string"!=typeof t)throw new Error("Unable to add event listener. unknown event name type.");if("function"!=typeof e)throw new Error("Unable to add event listener. func is not a function");if("build"!=t)throw new Error("Unable to add event listener. Unknown event");i.push(e)}}window.$R=new Reflect}(),$R.modules("ApplicationCanvasProvider","ApplicationHTMLRootProvider","ApplicationProvider","ApplicationTickerProvider","ApplicationConfigProvider","InjectionContainerProvider","ExtensionsProvider","FontFamilyManager"),$R.$(function ApplicationAudioContextProvider(){function getAppContext(e){return{context:new AudioContext,constructor:function audio(){this.context=function(){return t[e].context}}}}var t={};this.getApplicationAudioContext=function(e){return t[e]=getAppContext(e),t[e].constructor}}),$R.$([function ApplicationCanvasProvider(){function getCanvasConstructor(e){return function Canvas(){var n=t[e].element,r=n.getContext("2d");this.element=function(){return n},this.context=function(){return r}}}var t={};this.canvasInjectionConstructor=function(e){return t[e]={appname:e,element:document.createElement("canvas"),constructor:getCanvasConstructor(e)},t[e].constructor},this.getApplicationCanvas=function(e){return t[e].element}}]),$R.$(["@define",function ApplicationConfigProvider(t){function createExtensionConfig(t){return function config(){for(var e in t)if(t.hasOwnProperty(e))if("string"==typeof t[e]||"number"==typeof t[e]||"boolean"==typeof t[e])this[e]=t[e];else if("object"==typeof t[e]&&t[e].constructor===Array){for(var n=[],r=0;r<t[e].length;r++)"boolean"!=typeof t[e][r]&&"string"!=typeof t[e][r]&&"number"!=typeof t[e][r]||n.push(t[e][r]);this[e]=n}}}function getAppConfig(t){var e={};for(var n in t)t.hasOwnProperty(n)&&"object"==typeof t[n]&&t[n].constructor!==Array&&(e[n]=createExtensionConfig(t[n]));return e}var e={},n=function config(){};t("cfg",function(t,n){"object"==typeof n&&(e[t]=getAppConfig(n))}),this.getExtensionConfig=function(t,r){return e[t]&&e[t][r]?e[t][r]:n}}]),$R.$(function ApplicationHTMLRootProvider(){function getHTmlRootConstructor(n,r){var o=null;return t[r]={element:document.createElement("div"),$constructor:function HTMLRoot(){function resolve(t,e){var n=a[t],r=e&&"object"==typeof e&&e.constructor==Array?e:[];if(n)for(var o=0;o<n.length;o++){n[o].apply(this,r)}}function checkElementResize(t,e){t===s&&e===u||(s=t,u=e,n.setAttribute("width",s),n.setAttribute("height",u),resolve("resize",[t,e]))}var i=t[r].element,a={resize:[]},s=0,u=0;this.element=function(){return i},this.on=function(t,e){if(!("string"==typeof t&&t.length>0))throw new Error("Unable to set event. Event name is not a string or empty.");if(!a[t])throw new Error("Unable to set event ["+t+"]. No such event.");if("function"!=typeof e)throw new Error("Unable to set event ["+t+"] callback. Not a function");a[t].push(e)},this.hide=function(){o=this.element().parentNode,e.appendChild(this.element())},this.show=function(){o&&(o.appendChild(this.element()),o=null)},document.addEventListener("DOMContentLoaded",function(){checkElementResize(i.offsetWidth,i.offsetHeight)}),window.addEventListener("resize",function(){checkElementResize(i.offsetWidth,i.offsetHeight)})}},t[r].element.setAttribute("class","reflect-canvas-wrapper"),t[r].element.setAttribute("style","position:absolute; left:0;top:0;width:100%;height:100%;"),n.setAttribute("style","position:absolute; left:0;top:0;"),n.setAttribute("id","reflect-canvas-"+r),n.setAttribute("class","reflect-canvas-output"),t[r].element.appendChild(n),document.getElementsByTagName("body")[0].appendChild(t[r].element),t[r].$constructor}var t={},e=document.createElement("div");this.HTMLRootConstructor=function(t,e){return getHTmlRootConstructor(t,e)}}),$R.$(["@define","ExtensionsProvider","InjectionContainerProvider","ApplicationCanvasProvider","ApplicationHTMLRootProvider","ApplicationTickerProvider","ApplicationConfigProvider","ApplicationAudioContextProvider",function ApplicationProvider(t,e,n,r,o,i,a,s){function getAppSources(t){var e=n.container({app:n.injection(getRApp(t))});return e.injection(r.canvasInjectionConstructor(t)),e.injection(o.HTMLRootConstructor(r.getApplicationCanvas(t),t)),e.injection(s.getApplicationAudioContext(t)),e.source(e,!1),e}function getRApp(t){return function ReflectApplication(){function resolve(t,n){if("string"!=typeof t||!t.length)throw new Error("Unable to resolve event. Event argument is not a string.");if(!a[t])throw new Error("Unable to resolve event ["+t+"]. No such event.");var r=[];"object"==typeof n&&n.constructor==Array?r=n:void 0!==n&&(r=[n]);for(var o=0;o<a[t].length;o++)a[t][o].apply(e,r)}var e=this,n=i.createTicker(t,r.getApplicationCanvas(t),e),o={start:{target:n,func:"start"},stop:{target:n,func:"stop"},fps:{target:n,func:"fps"},tick:{target:n,func:"callback"}};this.$=function(t,e){if("string"==typeof t&&t.length&&o[t])return void 0===e?e=[]:"object"==typeof e&&e.constructor===Array||(e=[e]),o[t].target[o[t].func].apply(o[t].target,e)};var a={stop:[],start:[],error:[]};n.on("stop",function(){resolve("stop",e)}),n.on("start",function(){resolve("start",e)}),n.on("error",function(){resolve("error",e)}),this.$on=function(t,e){if("string"!=typeof t||!t.length)throw new Error("Unable to set handler. Event string is undefined or empty.");if(!a[t])throw new Error("Unable to set event ["+t+"]. No such event.");if("function"!=typeof e)throw new Error("Unable to set event ["+t+"]. Callback func is not a function.");a[t].push(e)},this.$define=function(t,e){void 0===this[t]&&"$"!==t.charAt(0)&&(this[t]=e)},f[t]=this}}var u={},l={},c=[],f={},h={};t("app",function(t){if("function"==typeof t&&t.name)u[t.name]=n.container(),u[t.name].injection(t);else{if("object"!=typeof t||t.constructor!==Array)throw new Error("Invalid application injection config");for(var e=null,r=[],o=0;o<t.length;o++)"string"==typeof t[o]&&t[o].length>0?r.push(t[o]):"function"==typeof t[o]&&t[o].name&&(e=t[o]);if(!e)throw new Error("Unable to create application. Constructor not found!");r.push(e),u[e.name]=n.container(),u[e.name].injection(r)}}),t("mod",function(t,e){if("string"==typeof t&&t.length)if(l[t]||(l[t]=n.container(),l[t].source(l[t],"$")),"function"==typeof e)l[t].injection(e);else if("object"==typeof e&&e.constructor==Array){for(var r=null,o=[],i=0;i<e.length;i++){if("string"!=typeof e[i]||!e[i].length){if("function"==typeof e[i]&&e[i].name){r=e[i];break}throw new Error("Unknown type of module constructor parameter")}o.push(e[i])}if(!r)throw new Error("Unable to create module. No constructor found!");o.push(r),l[t].injection(o)}}),t("run",function(){for(var t=0;t<arguments.length;t++)if("string"==typeof arguments[t]&&arguments[t].length){for(var e=!1,n=0;n<c.length;n++)if(c[n]==arguments[t]){e=!0;break}e||c.push(arguments[t])}}),t("application",function(t){if("string"==typeof t&&t.length){if(f[t])return f[t];if(u[t]){var r=e.extensions(),o=getAppSources(t),i=[];for(var s in r)if(r.hasOwnProperty(s)){i.push(r[s]);var c=a.getExtensionConfig(t,s),p=n.container();p.injection(c);var v=[];for(var g in r)r.hasOwnProperty(g)&&g!==s&&v.push(r[g]);r[s].source(v,!1),r[s].source(o,"@"),r[s].source(p,"$$");var d=r[s].findSourceByPrefix("$");d&&(d.source(v,!1),d.source(d.containers(),"$"),d.source(o,"@"),d.source(p,"$$"))}for(var s in r)r.hasOwnProperty(s)&&r[s].resolve(s);var y=n.container();for(var b in h)h.hasOwnProperty(b)&&y.injection(h[b]);return l[t]&&(u[t].source(l[t],"$"),l[t].source(o,"@"),l[t].source(y,"."),l[t].source(i,!1)),u[t].source(y,"."),u[t].source(o,"@"),u[t].source(i,!1),u[t].resolve(t),f[t]}throw new Error("Unable to run app ["+t+"]. No such app registered.")}throw new Error("Unable to run app. App name (id) is not a string or empty.")}),t("cls",function(t){if("function"!=typeof t||!t.name||!t.name.length)throw new Error("Class func should be a named function");if(h[t.name])throw new Error("Duplicate or invalid class name ["+t.name+"]");h[t.name]=t}),$R.on("build",function(){var t=[];if(c.length)t=c;else for(var e in u)t.push(e);for(var n=0;n<t.length;n++)$R.application(t[n])})}]),$R.$(function ApplicationTickerProvider(){function Ticker(t,e){function resolve(t,e){var n=[];if("object"==typeof e&&e.constructor==Array?n=e:void 0!==e&&n.push(e),"string"!=typeof t||!t.length)throw new Error("Unable to resolve event. Event parameter is not a string or empty");if(!l[t])throw new Error("Unable to resolve event ["+t+"]. No such event.");for(var r=0;r<l[t].length;r++)l[t][r].apply(c,n)}var n=(1e3/58.8).toFixed(2),r={},o=t.getContext("2d"),i=0,a=[null,t,o,0],s=function(){a[0]=new Date,a[3]=i;try{for(var t in r)for(var n=0;n<r[t].length;n++)r[t][n].apply(e,a);i++}catch(o){throw clearInterval(u),resolve("error",o),console.error("Unable to run ticker anymore. Error emerged during app ticker progress."),o}},u=null,l={stop:[],start:[],error:[]},c=this;this.on=function(t,e){if("string"!=typeof t||!t.length)throw new Error("Unable to set event. Event argument is not a string or empty.");if(!l[t])throw new Error("Unable to set event ["+t+"] handler. No such event.");if("function"!=typeof e)throw new Error("Unable to set event ["+t+"]. Callback is not a function.");l[t].push(e)},this.stop=function(){u&&(i=0,clearInterval(u),u=null,resolve("stop",this))},this.start=function(){u||(u=setInterval(s,n),resolve("start",this))},this.fps=function(t){return"number"!=typeof t?(1e3/n).toFixed(2):(t>60&&(t=60),t<=0&&(t=1),n=(1e3/t).toFixed(2),this.stop(),this.start(),void 0)},this.callback=function(t,e){if("function"==typeof t)r[0]||(r[0]=[]),r[0].push(t);else{if("number"!=typeof t)throw new Error("Unable to create callback. Wrong arguments passed");if("function"!=typeof e)throw new Error("Unable to queue. callback is not a function");r[t]||(r[t]=[]),r[t].push(e)}}}var t={};this.createTicker=function(e,n,r){return t[e]&&t[e].stop(),t[e]=new Ticker(n,r),t[e]}}),$R.$(["@define","InjectionContainerProvider",function ExtensionsProvider(t,e){function createExtensionContainer(t){return n[t]?n[t]:(n[t]=e.container(),n[t])}function createPartContainer(t){return r[t]?r[t]:(r[t]=e.container(),createExtensionContainer(t).source(r[t],"$"),r[t])}var n={},r={};this.extensions=function(){var t={};for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e].clone());return t},t("ext",function(t){if("function"==typeof t&&t.name)createExtensionContainer(t.name).injection(t);else{if("object"!=typeof t||t.constructor!==Array)throw new Error("Wrong arguments");for(var e=null,n=0;n<t.length;n++)if("function"==typeof t[n]&&t[n].name){e=t[n].name;break}if(!e)throw new Error("Constructor not found.");createExtensionContainer(e).injection(t)}}),t("part",function(t,e){if(!("string"==typeof t&&t.length>0))throw new Error("Host extension was not specified!");if("function"==typeof e&&e.name)createPartContainer(t).injection(e);else if("object"==typeof e&&e.constructor==Array){for(var n=null,r=0;r<e.length;r++)if("function"==typeof e[r]&&e[r].name){n=e[r].name;break}if(!n)throw new Error("Extension ["+t+"] part Constructor was not found.");createPartContainer(t).injection(e)}})}]),$R.$(["@define",function FontFamilyManager(t){function fontString(t,e){for(var n="",i=0;i<t.weight.length;i++)for(var a=0;a<t.style.length;a++){if(!t[t.weight[i]+"-"+t.style[a]]){for(var s=e+"/"+t.name+"-"+t.weight[i]+"-"+t.style[a],u='@font-face {font-family: "'+t.name+"-"+t.weight[i]+'";src:',l=0;l<r.length;l++)u+=o[r[l]](s,t.name,t.style[a]),u+=l<r.length-1?",":";";u+="font-weight: "+t.weight[i]+";",u+="font-style:"+t.style[a]+";}",t[t.weight[i]+"-"+t.style[a]]=u}n+=t[t.weight[i]+"-"+t.style[a]]}return n}function update(t){var r="";for(var o in n)n.hasOwnProperty(o)&&(r+=fontString(n[o],t));e.innerHTML=r}function inArray(t,e){for(var n=!1,r=0;r<t.length;r++)if(t[r]===e){n=!0;break}return n}var e=document.createElement("style"),n={},r=["eot","svg","ttf","woff"];document.getElementsByTagName("head")[0].appendChild(e);var o={eot:function(t){return'url("'+t+'.eot?#iefix") format("embedded-opentype")'},woff:function(t){return'url("'+t+'.woff") format("woff")'},ttf:function(t){return'url("'+t+'.ttf") format("truetype")'},svg:function(t,e,n){return'url("'+t+".svg#"+e+"-"+(n.charAt(0).toUpperCase()+n.slice(1))+'") format("svg")'}};t("font",function(t,e,r,o){n[e]||(n[e]={name:e}),n[e][r+"-"+o]||(n[e].weight||(n[e].weight=[]),n[e].style||(n[e].style=[]),inArray(n[e].weight,r)||n[e].weight.push(r),inArray(n[e].style,o)||n[e].style.push(o),update(t))}),t("fontFormats",function(){for(var t=[],e=0;e<r.length;e++)t.push(r[e]);return t})}]),$R.$([function InjectionContainerProvider(){function Injection(t){var e=t,n=null,r=[];if("function"==typeof t&&t.name)e=t;else if("object"==typeof t&&t.constructor===Array)for(var o=0;o<t.length;o++)if("string"==typeof t[o]&&t[o].length)r.push(t[o]);else if("function"==typeof t[o]&&t[o].name){e=t[o];break}if(!e)throw new Error("Injection constructor undefined!");this.name=function(){return e.name},this.dependencies=function(){for(var t=[],e=0;e<r.length;e++)t.push(r[e]);return t},this.extend=function(t){return function(e,n){if("object"!=typeof e)throw new Error("Extend target should be an object!");if("string"!=typeof n)throw new Error("Extend class name should be a string!");var r=t.findSourceByInjectionName(n);if(!r)throw new Error("Unable to find injection ["+n+"]");var o=r.resolveInjectionDependancies(n);o.$constructor.apply(e,o.dependencies)}},this.inject=function(t){return function(e){return t.resolveDirectInjection(e)}},this.create=function(t,r){return r?(t.unshift(null),new(Function.prototype.bind.apply(e,t))):(n||(t.unshift(null),n=new(Function.prototype.bind.apply(e,t))),n)},this.$constructor=function(){return e},this.clone=function(){return new Injection(t)}}function SourceContainer(t,e,n){function stripPrefix(e){if(t){for(var n="",o=0;o<e.length;o++)o>=r.length&&(n+=e[o]);return n}return e}var r=!!t&&t,o=[];if("object"==typeof e)if(e.constructor===InjectionContainer)o=[e];else{if(e.constructor!=Array)throw new Error("Invalid type if container!");for(var i=!0,a=0;a<e.length;a++){if(e[a].constructor!==InjectionContainer){i=!1;break}o.push(e[a])}if(0==e.length&&(i=!1),!i)throw new Error("Container array is empty!")}this.check=function(e){var n=!0;if(t)for(var r=0;r<t.length;r++)e[r]&&e[r]===t[r]||(n=!1);return n},this.has=function(t){var e=!1;if(this.check(t))for(var n=0;n<o.length;n++){var r=stripPrefix(t);if(o[n].has(r)){e=!0;break}}return e},this.loop=function(){return n},this.containers=function(){return o},this.source=function(){for(var t=0;t<o.length;t++)o[t].source.apply(o[t],arguments)},this.prefix=function(t){return void 0!==t?t===r:r},this.resolve=function(t,e){var n=null;if(this.has(t)){for(var r=null,i=stripPrefix(t),a=0;a<o.length;a++)o[a].has(i)&&(r=o[a]);r&&(n=r.resolve(i,e))}return n},this.resolveInjectionDependancies=function(t){if(this.has(t)){for(var e=null,n=stripPrefix(t),r=0;r<o.length;r++)o[r].has(n)&&(e=o[r]);if(e)return e.resolve(n,"extend")}}}function InjectionContainer(t){var e="object"==typeof t?t:{},n={};this.list=function(){return e},this.injection=function(t){var n=null,r=[];if("function"==typeof t){if(!t.name||!t.name.length)throw new Error("Anonymous function can not be injection constructor.");n=t}else{if("object"!=typeof t||t.constructor!==Array)throw new Error("Unknown type of injection config.");for(var o=0;o<t.length;o++){if("string"!=typeof t[o]||!t[o].length){if("function"==typeof t[o]&&t[o].name){n=t[o];break}throw new Error("Unknown type of injection name or constructor.")}r.push(t[o])}}r.push(n),e[n.name]=new Injection(r)},this.source=function(t,e){if(t&&"object"==typeof t)if(t.constructor===InjectionContainer){if(e||(e=!1),"string"==typeof e&&e.length||e===!1){t.$$LOOP=!0;var r=!1;this.$LOOP&&(r=!0),delete t.$$LOOOP,n[e?e:"$$noprefix"]=new SourceContainer(e,[t],[r])}}else if(t.constructor===Array){for(var o=!0,r=[],i=0;i<t.length;i++)"object"==typeof t[i]&&t[i].constructor==InjectionContainer?(t[i].$$LOOOP=!0,this.$$LOOOP?r.push(!0):r.push(!1),delete t[i].$$LOOOP):o=!1;if(!o)throw new Error("Source container config is not valid. One of the containers provided is not an InjectionContainer instance");e||(e=!1),("string"==typeof e&&e.length||e===!1)&&(n[e?e:"$$noprefix"]=new SourceContainer(e,t,r))}},this.clone=function(){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r].clone());var o=new InjectionContainer(t);for(var i in n){for(var a=n[i].containers(),s=n[i].loop(),u=n[i].prefix(),l=[],c=0;c<a.length;c++)s[c]?l.push(o):l.push(a[c].clone());o.source(l,u)}return o},this.findSourceByPrefix=function(t){return t===!1?n.$$noprefix:"string"==typeof t?n[t]:null},this.findSourceByInjectionName=function(t){var e=null;for(var r in n)if(n.hasOwnProperty(r)&&n[r].prefix()&&n[r].has(t)){e=n[r];break}return!e&&n.$$noprefix&&n.$$noprefix.has(t)&&(e=n.$$noprefix),e},this.resolve=function(t,n){if("extend"===n){if(e[t]){for(var r={dependencies:[],$constructor:e[t].$constructor()},o=e[t].dependencies(),i=0;i<o.length;i++)if("@extend"==o[i])r.dependencies.push(e[t].extend(this));else if("@inject"==o[i])r.dependencies.push(e[t].inject(this));else{var a=this.findSourceByInjectionName(o[i]);if(!a)throw new Error("Unable to inject ["+o[i]+"] while direct injection process.");r.dependencies.push(a.resolve(o[i]))}return r}throw new Error("Unable to inject ["+t+"] no such injection found")}if(this.has(t)){for(var o=e[t].dependencies(),s=[],u=0;u<o.length;u++)if("@extend"==o[u])s.push(e[t].extend(this));else if("@inject"==o[u])s.push(e[t].inject(this));else if("."===o[u].charAt(0))s.push(e[t].$constructor);else{var l=this.findSourceByInjectionName(o[u]);if(!l)throw new Error("Injection ["+o[u]+"] source was not found.");s.push(l.resolve(o[u]))}return e[t].create(s,n)}throw new Error("Injection ["+t+"] was not found in library!")},this.resolveDirectInjection=function(t){var e=this.findSourceByInjectionName(t);return e?e.resolve(t,!0):e},this.has=function(t){return!!e[t]},this.get=function(t){return e[t]?e[t]:null}}this.container=function(t){return new InjectionContainer(t)},this.injection=function(t){return new Injection(t)}}]),$R.$(["@define","InjectionContainerProvider","ApplicationProvider",function Injector(t,e,n){function createExtensionContainer(t){return r[t]?r[t]:(r[t]=e.container(),r[t])}function createPartContainer(t){return o[t]?o[t]:(o[t]=e.container(),createExtensionContainer(t).source(o[t],"$"),o[t])}var r={},o={};this.extensions=function(){var t=[];for(var e in r)r.hasOwnProperty(e)&&t.push(r[e].clone());return t},t("ext",function(t){if("function"==typeof t&&t.name){if(r[t.name])throw new Error("Extension constuctor is not a named function");createExtensionContainer(t.name).injection(t)}else{if("object"!=typeof t||t.constructor!==Array)throw new Error("Wrong arguments");for(var e=null,n=0;n<t.length;n++)if("function"==typeof t[n]&&t[n].name){e=t[n].name;break}if(!e)throw new Error("Constructor not found.");if(r[e])throw new Error("Extension constructor was not found!");createExtensionContainer(t.name).injection(t)}}),t("part",function(t,e){if(!("string"==typeof t&&t.length>0))throw new Error("Host extension was not specified!");if("function"==typeof e&&e.name)createPartContainer(t).injection(e);else if("object"==typeof e&&e.constructor==Array){for(var n=null,r=0;r<e.length;r++)if("function"==typeof e[r]&&e[r].name){n=e.name;break}if(!n)throw new Error("Extension ["+t+"] part Constructor was not found.");createPartContainer(t).injection(e)}})}]),$R.part("Morphine",[function Morphine(){function Tick(f){if(!c){if(l)return void(o=(new Date).getTime()-e*u);o||(o=(new Date).getTime()),u=(f-o)/e,u>1&&(u=1),1==u&&(n&&r>0?(r!==1/0&&r--,o=(new Date).getTime()):c=!0),i.apply(null,[u,t((f-o)/1e3,a,s-a,e/1e3),o])}}var t=null,e=1,n=!1,r=1,o=null,i=null,a=0,s=0;this.done=function(){return c},this.pause=function(){l=!0},this.paused=function(){return l},this.stop=function(){c=!0};var u=0,l=!1,c=!1;this.config=function(r,o,u,l,c,f){if(!("number"!=typeof r||"number"!=typeof o||"number"!=typeof l||l<0)&&"function"==typeof c&&"function"==typeof u)return"number"==typeof f&&(n=f),a=r,s=o,t=c,i=u,e=l>0?l:1,delete this.config,Tick}}]),$R.part("Objects",["Debug","@app","$$config",function Tree(t,e,n){var r=null,o=null,i=null,a=null;this.root=function(e){if(r)return r;if(!e.type||"function"!=typeof e.type||"Group"!==e.type())return void t.error({},"Tree / Unable to set tree root! Wrong object type!");r=e;var n=r.extension("Drawer");return n?n.draw&&"function"==typeof n.draw?(i=n,a=r.extension("Style"),r):void t.error({},"Tree / Unable to register root Drawer. Drawer.draw is not a function!"):void t.error({},"Tree / Unable to get Drawer extension!")},e.$("tick",function(t,e){r&&i&&(o||(o=e.getContext("2d")),n.clear===!0&&o.clearRect(0,0,e.offsetWidth,e.offsetHeight),i.draw.call(r,o))})}]),$R.part("Objects",[function Canvas(){var t=document.createElement("canvas"),e=t.getContext("2d"),n=0,r=0;this.context=function(){return e},this.width=function(e){return"number"!=typeof e?n:(n=e,void t.setAttribute("width",n))},this.height=function(e){return"number"!=typeof e?r:(r=e,void t.setAttribute("height",r))},this["export"]=function(){return t}}]),$R.part("Objects",function ColorHelper(){function NormalizeColorArray(t){if(t!==!1&&void 0!==t){for(var e=0;e<t.length;e++)t[e]=t[e]<=255?t[e]:255,t[e]=t[e]>=0?t[e]:0,t[e]=3!==e&&0!==t[e]?parseInt(t[e]):t[e],t[e]=(3==e&&t[e])<=1?t[e]:1,t[e]=Math.abs(t[e]);return t}return!1}function ParseColour(t){var e,n=parseInt,t=t.replace(/\s\s*/g,"");if(e=/^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})/.exec(t))e=[n(e[1],16),n(e[2],16),n(e[3],16)];else if(e=/^#([\da-fA-F])([\da-fA-F])([\da-fA-F])/.exec(t))e=[17*n(e[1],16),17*n(e[2],16),17*n(e[3],16)];else if(e=/^rgba\(([\d]+),([\d]+),([\d]+),([\d]+|[\d]*.[\d]+)\)/.exec(t))e=[+e[1],+e[2],+e[3],+e[4]];else{if(!(e=/^rgb\(([\d]+),([\d]+),([\d]+)\)/.exec(t)))return!1;e=[+e[1],+e[2],+e[3]]}return isNaN(e[3])&&(e[3]=1),NormalizeColorArray(e.slice(0,4))}this.colorToArray=ParseColour,this.normalize=NormalizeColorArray,this.isColor=function(t){var e=!1;if(4==t.length)for(var n=0;n<t.length;n++)"number"==typeof t[n]||"string"==typeof t[n]?"string"==typeof t[n]&&isNaN(1*t[n])&&(e=!0):e=!0;else e=!0;return e&&console.warn('Silk : Check for color unsuccessful. "'+t+'" is not a color Array.'),!e},this.arrayToColor=function(t){if(t&&4==t.length){for(var e="rgba(",n=0;n<t.length;n++)e+=3==n?t[n]+")":t[n]+",";return e}return console.warn("Unknown Input array format. Should be [R,G,B,A];"),!1}}),$R.part("Objects",["Debug",function DrawerHelper(t){var e=document.createElement("canvas").getContext("2d");this.measureText=function(t){e.save();var n=t(e);return e.restore(),n},this.transform=function(t,e){e.transform.apply(e,t.matrix().extract())},this.drawLineBgClipPath=function(e,n,r,o,i){var a=r.get("bg"),s=r.get("bgSize"),u=r.get("bgPosition");e.save(),e.beginPath(),e.moveTo(n[0][0],n[0][1]);for(var l=0;l<n.length;l++){var c=n[l][0],f=n[l][1],h=n[l][2],p=n[l][3];if("number"!=typeof c||"number"!=typeof h||"number"!=typeof f||"number"!=typeof p){t.error("Invalid path!");break}e.lineTo(h,p)}e.closePath(),e.clip();for(var v=0;v<a.length;v++)if(a[v].loaded()){e.save();var g=box.size[0]*s[v][0],d=box.size[1]*s[v][1],y=box.size[0]*u[v][0],b=box.size[1]*u[v][1];e.translate(i.margin[3]+y,i.margin[0]+b),e.drawImage(a[l]["export"](),0,0,g,d),e.restore()}else a[v].on("load",function(){o.update("bg")});e.restore()},this.drawBezierBgClipPath=function(e,n,r,o,i){var a=r.get("bg"),s=r.get("bgSize"),u=r.get("bgPosition");e.save(),e.beginPath(),e.moveTo(n[0][0],n[0][1]);for(var l=0;l<n.length;l++){var c=n[l][0],f=n[l][1],h=n[l][2],p=n[l][3],v=n[l][4],g=n[l][5],d=n[l][6],y=n[l][7];if("number"!=typeof c||"number"!=typeof h||"number"!=typeof f||"number"!=typeof p){t.error("Invalid path!");break}if("number"!=typeof v||"number"!=typeof d||"number"!=typeof g||"number"!=typeof y){t.error("Invalid curve!");break}e.bezierCurveTo(v,g,d,y,h,p)}e.closePath(),e.clip();for(var b=0;b<a.length;b++)if(a[b].loaded()){e.save();var m=box.size[0]*s[b][0],w=box.size[1]*s[b][1],A=box.size[0]*u[b][0],x=box.size[1]*u[b][1];e.translate(i.margin[3]+A,i.margin[0]+x),e.drawImage(a[l]["export"](),0,0,m,w),e.restore()}else a[b].on("load",function(){o.update("bg")});e.restore()},this.drawLinePathFill=function(e,n,r){var o=r.get("fill"),i=r.get("cap");e.save(),e.lineCap=i,e.moveTo(n[0][0],n[0][1]),e.beginPath(),console.log(n);for(var a=0;a<n.length;a++){var s=n[a][0],u=n[a][1],l=n[a][2],c=n[a][3];if("number"!=typeof s||"number"!=typeof l||"number"!=typeof u||"number"!=typeof c){t.error("Invalid path!");break}e.lineTo(l,c)}e.closePath(),e.fillStyle=o,e.fill(),e.restore()},this.drawBezierPathFill=function(e,n,r){var o=r.get("fill"),i=r.get("cap");e.save(),e.lineCap=i,e.beginPath(),e.moveTo(n[0][0],n[0][1]);for(var a=0;a<n.length;a++){var s=n[a][0],u=n[a][1],l=n[a][2],c=n[a][3],f=n[a][4],h=n[a][5],p=n[a][6],v=n[a][7];if("number"!=typeof s||"number"!=typeof l||"number"!=typeof u||"number"!=typeof c){t.error("Invalid path!");break}if("number"!=typeof f||"number"!=typeof p||"number"!=typeof h||"number"!=typeof v){t.error("Invalid curve!");break}e.bezierCurveTo(f,h,p,v,l,c)}e.closePath(),e.fillStyle=o,e.fill(),e.restore()},this.drawLinePath=function(e,n,r){var o=r.get("strokeColor"),i=r.get("strokeWidth"),a=r.get("strokeStyle"),s=r.get("cap");e.save(),e.lineCap=s;for(var u=0;u<n.length;u++){var l=n[u][0],c=n[u][1],f=n[u][2],h=n[u][3];if("number"!=typeof l||"number"!=typeof f||"number"!=typeof c||"number"!=typeof h){t.error("Invalid path!");break}i[u]<.1?e.moveTo(f,h):(e.moveTo(l,c),e.beginPath(),e.strokeStyle=o[u],e.lineWidth=i[u],e.setLineDash(a[u]),e.lineTo(f,h),e.stroke())}e.restore()},this.drawBezierPath=function(e,n,r){var o=r.get("strokeColor"),i=r.get("strokeWidth"),a=r.get("strokeStyle"),s=r.get("cap");e.save(),e.lineCap=s;for(var u=0;u<n.length;u++){var l=n[u][0],c=n[u][1],f=n[u][2],h=n[u][3],p=n[u][4],v=n[u][5],g=n[u][6],d=n[u][7];if("number"!=typeof l||"number"!=typeof f||"number"!=typeof c||"number"!=typeof h){t.error("Invalid path!");break}if("number"!=typeof p||"number"!=typeof g||"number"!=typeof v||"number"!=typeof d){t.error("Invalid curve!");break}i[u]<.1?e.moveTo(f,h):(e.beginPath(),e.moveTo(l,c),e.strokeStyle=o[u],e.lineWidth=i[u],e.setLineDash(a[u]),e.bezierCurveTo(p,v,g,d,f,h),e.stroke())}e.restore()},this.drawRectFill=function(t,e,n,r,o,i){t.save();var a=e.get("fill");t.fillStyle=a,t.rect(n,r,o,i),t.fill(),t.restore()},this.drawRectStroke=function(t,e,n,r,o,i){var a=e.get("strokeStyle"),s=e.get("strokeColor"),u=e.get("strokeWidth");t.save();for(var l=0,c=0,f=0;f<4;f++)t.beginPath(),t.strokeStyle=s[f],t.strokeWidth=u[f],t.setLineDash(a[f]),0==f&&(l=n+o,c=r),1==f&&(l=n+o,c=r+i),2==f&&(l=n,c=r+i),3==f&&(l=n,c=r),u[f]<.1?t.moveTo(l,c):(t.lineTo(l,c),t.stroke());t.restore()}}]),$R.part("Objects",function Extension(){var t={},e={},n=null,r=[];this.defineObject=function(t){n=t,delete this.defineObject},this.object=function(){return n},this.matchType=function(t){if(0==r.length)return!0;for(var e=!1,n=0;n<r.length;n++)if(r[n]===t){e=!0;break}return this.applyTo&&(delete this.applyTo,delete this.matchType),e},this.applyTo=function(t){if("string"==typeof t)r.push(t);else if("object"==typeof t&&t.constructor===Array)for(var e=0;e<t.length;e++)"string"==typeof t[e]&&r.push(t[e]);delete this.applyTo},this.register=function(n,r,o){t[n]||(t[n]=r),o&&(e[n]=!0)},this.wrap=function(e){for(var n in t)t.hasOwnProperty(n)&&(e[n]||(e[n]=t[n]));delete this.wrap,delete this.register,delete this.clear},this.hasProperty=function(e){var n=!1;for(var r in t)if(t.hasOwnProperty(r)&&e==r){n=!0;break}return n},this.clear=function(t){for(var n in e)e.hasOwnProperty(n)&&delete t[n]}}),$R.part("Objects",["@inject","Debug",function GraphicsAssembler(t,e){function SetSize(t,e){for(var r=0;r<o.length;r++)o[r].size(t,e);n.width(t),n.height(e),a=t,s=e}function compose(t){if(!l){if(u){var e=u.box().sprite();e.size[0]===a&&e.size[1]===s||SetSize(e.size[0],e.size[1])}l=!0}if(!c){r.clearRect(0,0,a,s);for(var i=0;i<o.length;i++)o[i].draw(r);c=!0}t.drawImage(n["export"](),0,0)}var n=t("$Canvas"),r=n.context(),o=[],i={},a=0,s=0,u=null,l=!1,c=!1;this.layer=function(n,r,a){return"number"!=typeof n?void e.warn({o:n},"Invalid order argument [{o}] is not a number."):"string"!=typeof r?void e.warn({n:r},"[{n}] is not valid name for layer"):"function"!=typeof a?void e.warn("updateFunc is not a function!"):(i[r]=t("$GraphicsAssemblerLayer"),i[r].f(a),i[r].ordering(n),i[r].update(),o.push(i[r]),o.sort(function(t,e){return t.ordering()-e.ordering()}),void(c=!1))},this.ready=function(){return c},this.box=function(t){u=t},this.size=function(t,e){t===a&&e===s||(SetSize(t,e),c=!1)},this.resize=function(){l=!1,c=!1},this.update=function(t){c=!1,i[t].update()},this.draw=compose}]),$R.part("Objects",["@inject","Debug",function GraphicsAssemblerLayer(t,e){function updateCanvas(t){s||(r.save(),r.clearRect(0,0,o,i),a&&a(r),s=!0,r.restore()),t.drawImage(n["export"](),0,0)}var n=t("$Canvas"),r=n.context(),o=0,i=0,a=null,s=!1,u=0;this.f=function(t){"function"==typeof t?(a=t,delete this.f):e.warn({f:t},"[{f}] is not a function")},this.size=function(t,e){o===t&&e===e||(n.width(t),n.height(e),o=t,i=e,s=!1)},this.ordering=function(t){return t&&"number"==typeof t&&(u=t),u},this.update=function(){s=!1},this.draw=updateCanvas}]),$R.part("Objects",function MatrixHelper(){function GrapthicsTransformMatrix(t){function multiply(t,e){var n=t[0]*e[0]+t[2]*e[1],r=t[1]*e[0]+t[3]*e[1],o=t[0]*e[2]+t[2]*e[3],i=t[1]*e[2]+t[3]*e[3],a=t[0]*e[4]+t[2]*e[5]+t[4],s=t[1]*e[4]+t[3]*e[5]+t[5];t[0]=n,t[1]=r,t[2]=o,t[3]=i,t[4]=a,t[5]=s}function invert(){for(var t=o.length-1;t>=0;t--){if(o[t].rotate){var e=Math.sin(-o[t].rotate),r=Math.cos(-o[t].rotate);multiply(n,[r,e,-e,r,0,0])}o[t].translate&&multiply(n,[1,0,0,1,-o[t].translate[0],-o[t].translate[1]]),
o[t].skew&&multiply(n,[1,Math.tan(-o[t].skew[1]),Math.tan(-o[t].skew[0]),1,0,0]),o[t].scale&&multiply(n,[1/o[t].scale[0],0,0,1/o[t].scale[1],0,0])}i=!0,o=null}function invertGlobal(){var e=t.parent();if(i||invert(),e){if(r)return r;r=[n[0],n[1],n[2],n[3],n[4],n[5]],multiply(r,e.matrix().globalInversionMatrix())}else r=n;return r}var e=[1,0,0,1,0,0],n=[1,0,0,1,0,0],r=null,o=[],i=!1;this.rotate=function(t){var n=Math.sin(t),r=Math.cos(t),i=[r,n,-n,r,0,0];return multiply(e,i),o.push({rotate:t}),this},this.translate=function(t,n){var r=[1,0,0,1,t,n];return 0===t&&0===n||(multiply(e,r),o.push({translate:[t,n]})),this},this.scale=function(t,n){if(1!==t||1!==n){var r=[t,0,0,n,0,0];multiply(e,r),o.push({scale:[t,n]})}return this},this.skew=function(t,n){if(0!==t||0!==n){var r=Math.tan(t),i=Math.tan(n),a=[1,i,r,1,0,0];multiply(e,a),o.push({skew:[t,n]})}return this},this.extract=function(){return e},this.globalInversionMatrix=invertGlobal,this.globalCursorProjection=function(t){r||invertGlobal();var e=t[0]*r[0]+t[1]*r[2]+r[4],n=t[0]*r[1]+t[1]*r[3]+r[5];return t[0]=e,t[1]=n,t},this.cursorProjection=function(t){i||invert();var e=t[0]*n[0]+t[1]*n[2]+n[4],r=t[0]*n[1]+t[1]*n[3]+n[5];return t[0]=e,t[1]=r,t}}this.objectMatrix=function(t){var e=new GrapthicsTransformMatrix(t),n=t.extension("Style"),r=t.extension("Box").box(),o=r.sprite(),i=n.get("position"),a=n.get("origin"),s=n.get("skew"),u=n.get("rotate"),l=n.get("scale"),c=n.get("translate"),f="Group"==t.type()?[i[0]+c[0]-o.margin[3],i[1]+c[1]-o.margin[0]]:[o.position[0]+c[0],o.position[1]+c[1]],h=[a[0]*o.size[0]+o.margin[3],a[1]*o.size[1]+o.margin[0]];return e.translate(h[0],h[1]),0===f[0]&&0===f[1]||e.translate(f[0],f[1]),0!==u&&e.rotate(u),0===s[0]&&0===s[1]||e.skew(s[0],s[1]),1===l[0]&&1===l[1]||e.scale(l[0],l[1]),e.translate(-h[0],-h[1]),e}}),$R.part("Objects",["Debug",function ModelHelper(Debug){this.cloneHash=function(t){return"object"!=typeof t?void Debug.error("Hash is not an object!"):JSON.parse(JSON.stringify(t))},this.cloneArray=function(array){if("object"!=typeof array||array.constructor!==Array)return void Debug.error("array is not an array!");for(var result=[],i=0;i<array.length;i++)if("object"==typeof array[i])array[i].constructor==Array?result.push(this.cloneArray(array[i])):result.push(this.cloneHash(array[i]));else if("function"==typeof array[i]){var text=array[i].toString();result.push(eval(text)),Debug.warn("You clone functions! It can be slow!")}else result.push(array[i]);return result},this.validNumericArray=function(t){var e=!0;if("object"!=typeof t||t.constructor!==Array)return!1;for(var n=0;n<t.length;n++)if("number"!=typeof t[n]){e=!1;break}return e};var blendings=["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","copy","xor","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"];this.validBlending=function(t){for(var e=!1,n=0;n<blendings.length;n++)if(blendings[n]==t){e=!0;break}return e};var sprite_regexp=/^([.\/_\da-zA-Z]+)(\[(\d+)\])$/;this.isSpriteString=function(t){return sprite_regexp.test(t)},this.readSpriteString=function(t){var e=t.match(sprite_regexp);return{url:e[1],frames:parseInt(e[3])}}}]),$R.part("Objects",[function MouseHelper(){this.circleUserCheckFunction=function(t){var e=this.matrix().globalCursorProjection([t[0],t[1]]);if(e<[0]||e[1]<0)return!1;var n=this.extension("Box").box().sprite();if(e[0]>n.size[0])return!1;if(e[1]>n.size[1])return!1;var r=n.size[0]/2,o=r,i=n.size[1]/2;return Math.pow(e[0]-o,2)+Math.pow(e[1]-i,2)<=Math.pow(r,2)&&this},this.squareUserCheckFunction=function(t){var e=this.matrix().globalCursorProjection([t[0],t[1]]),n=this.extension("Box").box().sprite();return e[0]>0&&e[0]<n.size[0]&&(e[1]>0&&e[1]<n.size[1]&&this)},this.circleCheckFunction=function(t){var e=this.matrix().globalCursorProjection([t[0],t[1]]);if(e<[0]||e[1]<0)return!1;var n=this.extension("Box").box().sprite();if(e[0]>n.size[0])return!1;if(e[1]>n.size[1])return!1;var r=n.size[0]/2,o=this.extension("Style").get("radius");return Math.pow(e[0]-r,2)+Math.pow(e[1]-r,2)<Math.pow(o,2)&&this},this.rectCheckFunction=function(t){var e=this.matrix().globalCursorProjection([t[0],t[1]]),n=this.extension("Box").box().sprite();return e[0]>0&&e[0]<n.size[0]&&(e[1]>0&&e[1]<n.size[1]&&this)}}]),$R.part("Objects",["Debug",function PathHelper(t){function getControlPoints(t,e,n,r,o,i,a){var s=Math.sqrt(Math.pow(n-t,2)+Math.pow(r-e,2)),u=Math.sqrt(Math.pow(o-n,2)+Math.pow(i-r,2)),l=a*s/(s+u),c=a*u/(s+u),f=n-l*(o-t),h=r-l*(i-e),p=n+c*(o-t),v=r+c*(i-e);return[f,h,p,v]}this.convertComplexPath=function(t){for(var e=[],n=0;n<t.length;n++)e.push([t[n][0],t[n][1]]);return e},this.convertSimplePath=function(e){if(e.length<2)return void t.error("Path should consist of at least two points!");for(var n=[],r=0;r<e.length;r++){var o=e[r][0],i=e[r][1];if("number"!=typeof o||"number"!=typeof i){t.error("Incorrect Path!"),n=void 0;break}r<e.length-1&&(n[r]||n.push([]),n[r].push(o),n[r].push(i)),0!==r&&(n[r-1].push(o),n[r-1].push(i),n[r-1].push(n[r-1][0]),n[r-1].push(n[r-1][1]),n[r-1].push(o),n[r-1].push(i))}return n},this.interpolate=function(t,e,n){for(var r=0;r<t.length;r++){var o=[],i=[t[r][0],t[r][1]],a=[t[r][2],t[r][3]],s=null;if(o=0==r?i:[t[r-1][0],t[r-1][1]],s=getControlPoints(o[0],o[1],i[0],i[1],a[0],a[1],e),0==r?(t[r][4]=s[2],t[r][5]=s[3]):(t[r-1][6]=s[0],t[r-1][7]=s[1],t[r][4]=s[2],t[r][5]=s[3]),r==t.length-1&&(o=[t[r][0],t[r][1]],i=[t[r][2],t[r][3]],a=i,s=getControlPoints(o[0],o[1],i[0],i[1],a[0],a[1],e),t[r][6]=s[0],t[r][7]=s[1]),n){var u=t[t.length-1],l=t[0],c=[[u[0],u[1],u[2],u[3],u[4],u[5],u[6],u[7]],[l[0],l[1],l[2],l[3],l[4],l[5],l[6],l[7]]];this.interpolate(c,e),t[0][4]=c[1][4],t[0][5]=c[1][5],t[t.length-1][6]=c[0][6],t[t.length-1][7]=c[0][7]}}},this.checkSimplePath=function(t){if("object"!=typeof t||t.constructor!==Array)return!1;for(var e=!0,n=0;n<t.length;n++)if("object"!=typeof t[n]||t[n].constructor!==Array||2!==t[n].length||"number"!=typeof t[n][0]||"number"!=typeof t[n][1]){e=!1;break}return e},this.comparePaths=function(t,e){var n=!0;if(t.length!==e.length)return!1;for(var r=0;r<t.length;r++)for(var o=0;o<t[r].length;o++)if(t[r][o]!==e[r][o]){n=!1;break}return n}}]),$R.part("Objects",[function AreaObjectClass(){}]),$R.part("Objects",["$MouseHelper",function CircleObjectClass(t){this.mouseCheckFunction(t.circleCheckFunction)}]),$R.part("Objects",["$Tree",function DefaultObjectType(t){t.root(this).append(this)}]),$R.part("Objects",function GroupObjectClass(){}),$R.part("Objects",["$MouseHelper",function ImageObjectClass(t){this.mouseCheckFunction(t.rectCheckFunction)}]),$R.part("Objects",function LineObjectClass(){}),$R.part("Objects",["$MouseHelper",function RectangleObjectClass(t){this.mouseCheckFunction(t.rectCheckFunction);var e=this.extension("Mouse");e.cursorTransformFunction(t.rectCursorTransformFunction)}]),$R.part("Objects",["$MouseHelper",function SpriteObjectClass(t){this.mouseCheckFunction(t.rectCheckFunction)}]),$R.part("Objects",["$MouseHelper",function TextObjectClass(t){this.mouseCheckFunction(t.rectCheckFunction)}]),$R.part("Resource",["@extend","Debug",function Audio(t,e){function createAudio(){var t=new XMLHttpRequest;t.open("GET",o,!0),t.responseType="arraybuffer",t.onload=function(t){r(1),i=this.response,n("load",[i])},t.onerror=function(){r(-2),n("error",[]),e.error({url:o},"Unable to load audio [{url}].")},t.send()}t(this,"$ResourceClass"),this.type="Audio";var n=null,r=null,o=null,i=null;this.on("init",function(t,e,i){n=e,r=i,o=t,createAudio()}),this["export"]=function(){return i}}]),$R.part("Resource",["@extend","Debug","$$config","@HTMLRoot",function Font(t,e,n,r){function getFont(){$R.font(s,a,u,l);var t=null,n=1e3,f=0,h=[c.offsetWidth,c.offsetHeight];c.style.fontFamily='"'+a+"-"+u+'", sans-serif',t=setInterval(function(){c.offsetWidth===h[0]&&c.offsetHeight===h[1]||(r.element().removeChild(c),clearInterval(t),o(1),i("load",[])),f++,f>n&&(o(-2),i("error",[]),e.warn({font:a+"-"+u},"Unable to load font [{font}]. Font pending timed out..."),r.element().removeChild(c),clearInterval(t))},50)}t(this,"$ResourceClass"),this.type="Font";var o=null,i=null,a=null,s=n.dir&&"string"==typeof n.dir?n.dir:"./fonts",u=($R.fontFormats(),null),l=null,c=document.createElement("div");c.style.fontFamily="sans-serif",c.style.fontSize="12px",c.style.lineHeight="12px",c.style.position="absolute",c.style.left="-9999px",c.style.top="-9999px",c.innerText='abcdefghijklmnopqrstuvwxyz 1234567890[!?,.<>"£$%^&*()~@#-=]',this.on("init",function(t,e,n){i=e,o=n,a=t[0],u=t[1],l=t[2],c.style.fontStyle=l,r.element().appendChild(c),getFont()}),this["export"]=function(){return a}}]),$R.part("Resource",["@extend","Debug",function Image(t,e){function CreateImage(){i=document.createElement("img"),i.addEventListener("load",function(){o(1),a=i.width,s=i.height,r("load",[])}),i.addEventListener("error",function(){o(-2),r("error",[]),e.error({url:n},"Unable to load image [{url}].")}),i.setAttribute("src",n)}t(this,"$ResourceClass");var n=null,r=null,o=null,i=null,a=0,s=0;this.type="Image",this.on("init",function(t,e,i){r=e,o=i,n=t,CreateImage()}),this.width=function(){return a},this.height=function(){return s},this["export"]=function(){return i}}]),$R.part("Resource",["@extend","Debug",function ResourceClass(t,e){function setStatus(t){return"number"!=typeof t?void e.error({val:t},"[{val}] is not valid value for status"):t>1||t<-2?void e.error({val:t},"[{val}] no such status possible!"):void(i=t)}function ResolveEvent(t,n){if(a[t]){n="object"==typeof n&&n.constructor==Array?n:[];for(var o=0;o<a[t].length;o++)a[t][o].apply(r,n)}else e.warn({e:t},"Unable to set event {e}. No such event!")}var n=null,r=this,o=!1,i=-1;this.loaded=function(){return 1==i},this.error=function(){return i==-2},this.loading=function(){return 0==i},this.url=function(t){return void 0==t?n:(void 0==n&&(n=t,i=0,o?ResolveEvent("init",[n]):(ResolveEvent("init",[n,ResolveEvent,setStatus]),o=!0)),n)};var a={init:[],load:[],error:[],loading:[]};this.on=function(t,n){var r=a[t],n="function"==typeof n&&n;return"load"==t&&1==i&&n.call(this),"error"==t&&i==-2&&n.call(this),r&&n?void a[t].push(n):void e.warn({e:t},"Unable to set handler for event [{e}].")}}]),$R.part("Resource",["@extend","Debug",function Sprite(t,e){function CreateCanvasArray(){for(var t=0,e=0;e<o;e++){g.push([]);for(var n=0;n<o;n++)t++,t<i&&g[e].push(document.createElement("canvas"))}}function SetCanvasSize(){l=Math.round(u/o),c=Math.round(s/o);for(var t=0;t<o;t++)for(var e=0;e<o;e++)if(g[t][e]){g[t][e].setAttribute("width",c),g[t][e].setAttribute("height",l);var n=g[t][e].getContext("2d");n.translate(-c*e,-l*t),n.drawImage(r,0,0)}}t(this,"$ResourceClass");var n=null,r=null,o=0,i=0,a=0,s=0,u=0,l=0,c=0,f=12,h=null,p=null,v=!1,g=[];this.type="Sprite",this.on("init",function(t,e,o){h=o,p=e,n=t,r=document.createElement("img"),r.addEventListener("load",function(){h(1),s=r.width,u=r.height,v&&(CreateCanvasArray(),SetCanvasSize()),p("load",[])}),r.addEventListener("error",function(){h(-2),p("error",[])}),r.setAttribute("src",n)}),this.ready=function(){return v},this.width=function(){return c},this.height=function(){return l},this.spriteWidth=function(){return s},this.spriteHeight=function(){return u},this.fps=function(t){return"number"!=typeof t||t<=0?(e.warn({n:t},"[{n}] is not a correct fps number"),!1):(f=t,void(a=Math.round(i/f*1e3)))};var d=!1;this.pause=function(){d=!0},this.play=function(){d=!1},this.config=function(t){if(!v){if("number"!=typeof t||t<=0)return void e.warn({rows:t},"[{rows}] is not a valid frames number");o=Math.ceil(Math.sqrt(t)),i=t,a=Math.round(i/f*1e3),v=!0,CreateCanvasArray()}},this.frames=function(){return i};var y=0,b=0,m=(new Date).getTime();this.tick=function(t){if(!d){var e=(t-m)/a;e>1&&(e=1,m=(new Date).getTime()),e<0&&(e=0);var n=Math.floor((i-1)*e);b=Math.floor(n/o),y=n-b*o}},this["export"]=function(){if(g[b][y])return g[b][y]}}]),$R.part("Sound",["@inject","Debug",function AnimationProvider(t,e){function findCompetitor(t,e){e.$$SELF=!0;for(var r=null,o=0;o<n.length;o++)if(!n[o].$$SELF&&n[o].active()&&!n[o].done()){for(var i=!1,a=0;a<t.length;a++)if(n[o].hasProperty(t[a])){i=!0;break}i&&(r||(r=[]),r.push(n[o]))}return delete e.$$SELF,r}function CheckAnimationQueue(){for(var t=[],e=0;e<n.length;e++)if(n[e].active())n[e].done()||t.push(n[e]);else{var r=n[e].properties();if(n[e].queue())findCompetitor(r,n[e])||n[e].start();else{var o=findCompetitor(r,n[e]);if(o)for(var i=0;i<o.length;i++)for(var a=0;a<r.length;a++)o[i].stop(r[a]);n[e].start()}t.push(n[e])}n=t}function CreateAnimationType1(e,r,i,a){var s={};if(s[e]=r,o[e]){var u=[{ordering:o[e].ordering(),morph:o[e],value:r}],l={};i&&"number"==typeof i&&(l.duration=i),a&&"string"==typeof a&&(l.easing=a);var c=t("$Animation");c.config(this,u,l,CheckAnimationQueue),n.push(c)}}function CreateAnimationType2(r,i,a){var s={};"object"==typeof i?s=i:"number"==typeof i?(s={duration:i},"string"==typeof a&&(s.easing=a)):"string"==typeof i&&(s={easing:i});var u={};for(var l in r)r.hasOwnProperty(l)&&(o[l]?u[l]={ordering:o[l].ordering(),morph:o[l],value:r[l]}:e.warn({type:this.type(),property:l},"Property {property} of {type} can not be animated!"));var c=[];for(var f in u)c.push(u[f]);if(c.length){c.sort(function(t,e){return t.ordering-e.ordering});var h=t("$Animation");h.config(this,c,s,CheckAnimationQueue),n.push(h)}else e.warn("No properties to animate!")}var n=[],r=!1,o={};this.morph=function(e,n,r,i){var a=t("$Morph");a.config(e,this,n,r,i),a.valid()&&(o[e]=a)},this.extractMorph=function(t){return o[t]},this.animate=function(t,n,r,o){"string"==typeof t&&n?CreateAnimationType1.apply(this,arguments):"object"==typeof t&&t.constructor!==Array?CreateAnimationType2.apply(this,arguments):e.warn("Unable to create animation. Wrong arguments"),CheckAnimationQueue()},this.animated=function(){return r},this.stop=function(t){if("string"==typeof t&&0!=t.length)for(var e=0;e<n.length;e++)n[e].stop(t)}}]),$R.part("Sound",["@inject","Debug",function Audio(t,e){function eventArgs(){return[s,u,r,o]}function createAnimationMorph(t,e){a.morph.apply(this,[e.name,0,function(n,r,o){o=e.normalizer(o),void 0!==o&&(r(o),n(t.get(e.name)))},function(n){return n=e.normalizer(n),t.set(e.name,n)}])}var n=null,r=null,o=null,i=t("$EventProvider"),a=t("$AnimationProvider"),s=this,u=null,l="";i.wrap(this),i.event("ready",eventArgs,!0),i.event("load",eventArgs,!0),i.event("error",eventArgs,!0),i.event("play",eventArgs,!1),i.event("connect",eventArgs,!1),i.event("disconnect",eventArgs,!1),i.event("end",eventArgs,!1),this.build=function(a,s){if("string"==typeof a&&a.length>0){"string"==typeof s&&"destination"!==s&&s.length>0?(r=s,n=t("$UserAudioSource").build(s),o="Sample",n.on("load",function(){i.resolve("load")}),this.play=function(){return n.play(),this},this.terminate=function(){return n.stop(),this}):"destination"===s?(n=t("$UserAudioMixer").build(a,s),this.connect=function(){return arguments[0]&&"object"==typeof arguments[0]&&arguments[0].$$SOURCE?n:this},r="["+a+"]AudioChannel",o="Channel",i.resolve("load")):void 0===s&&(n=t("$UserAudioMixer").build(a),r="["+a+"]AudioChannel",o="Channel",i.resolve("load")),n.on("error",function(){i.resolve("error")}),n.on("play",function(){i.resolve("play")}),n.on("end",function(){i.resolve("end")}),n.on("connect",function(){i.resolve("connect")}),n.on("disconnect",function(){i.resolve("disconnect")});for(var u=n.filters(),c=0;c<u.length;c++)for(var f=u[c].props(),h=0;h<f.length;h++)f[h].animated&&createAnimationMorph.apply(this,[u[c],f[h]]);l=a,i.resolve("ready")}else e.warn("Audio mixer have no name! Should be a string");return this},this.filter=function(t,r){if("string"==typeof t&&t.length>0){for(var o=null,i=n.filters(),a=0;a<i.length;a++)i[a].has(t)&&(o=i[a]);if(o){if(void 0===r)return o.get(t);o.set(t,r)}else e.warn({name:t},"Unable to set filter property [{name}]. No filter with that param!")}return this},this.connect=function(t){if(t&&"object"==typeof t&&t.$$SOURCE)return n;if("object"==typeof t&&t.type&&"function"==typeof t.type){var r=t.type();if("Channel"==o&&"Sample"==r)return e.error("Trying to connect Channel with Sample!"),this;if(t.connect&&"function"==typeof t.connect){var i=t.connect({$$SOURCE:!0});return u=t,n.connect(i),t}e.error("Unknown type of  object passed as output!")}else e.error("Unknown type of  object passed as output!");return this},this.output=function(){return u},this.animate=function(){return a.animate.apply(this,arguments),this},this.type=function(t){return"string"==typeof t?t===o:o},this.url=function(){return r},this.name=function(){return l},this.stop=function(){return a.stop.apply(this,arguments),this}}]),$R.part("Sound",["@inject","$$config","Debug",function UserAudioMixer(t,e,n){function argF(){return[this]}var r=t("$EventProvider"),o=[],i=null,a="";r.wrap(this),r.event("play",argF,!1),r.event("connect",argF,!1),r.event("ready",argF,!0),r.event("error",argF,!0),this.build=function(i,s){for(var u=e.filters&&"object"==typeof e.filters&&e.filters.constructor==Array&&e.filters.length>0?e.filters:["Delay","Gain"],l=0;l<u.length;l++){var c=t("$"+u[l]+"Node");o[o.length-1]&&o[o.length-1].connect(c),o.push(c)}if("string"==typeof i&&i.length>0?a=i:(n.warn({n:i},"[{n}] is not a valid name for channel"),r.resolve("error")),s&&"object"==typeof s&&s.connect&&"function"==typeof s.connect)this.connect(s);else if("destination"===s){var f=t("$DestinationNode");o[o.length-1].connect(f),this.connect=function(t){if(t.$$AUDIONODE)return o[0]}}return delete this.build,this},this.connect=function(t){if(t.$$AUDIONODE)return o[0];var e=t.connect({$$AUDIONODE:!0});return o[o.length-1].connect(e),i=t,this},this.output=function(){return i},this.filters=function(){return o},this.name=function(){return a}}]),$R.part("Sound",["@extend","@inject","Debug",function UserAudioSource(t,e,n){function cbArgs(){return[this]}function connectCbArgs(){return[this,a]}var r=e("$AudioSource"),o=e("$EventProvider"),i=null,a=null,s="";o.wrap(this),o.event("ready",cbArgs,!0),o.event("load",cbArgs,!0),o.event("error",cbArgs,!0),o.event("connect",connectCbArgs,!1),o.event("play",cbArgs,!1),o.event("stop",cbArgs,!1),r.on("ready",function(){o.resolve("ready")}),r.on("load",function(){o.resolve("load")}),r.on("error",function(){o.resolve("error")}),this.build=function(t){return"string"==typeof t&&t.length>0?(s=t,r.build(t),i=e("$UserAudioMixer").build("source-built-in-filter"),i.on("connect",function(){o.resolve("connect")}),r.connect(i.connect({$$AUDIONODE:!0})),delete this.build,o.resolve("ready")):(delete this.build,o.resolve("error")),this},this.filters=function(){return i?i.filters():[]},this.play=function(){return this.status("error")||this.status("ready")&&(this.status("load")?r.play():this.on("load",function(){r.play()})),this},this.stop=function(){return r.stop(),this},this.output=function(){return a},this.connect=function(t){return t&&t.constructor===i.constructor&&(a=t,i.connect(t)),this}}]),$R.part("Sound",["@audio","@extend",function DelayNode(t,e){e(this,"$AudioNode");var n=0,r=0,o=t.context().createGain(),i=t.context().createDelay(),a=t.context().createGain(),s=t.context().createBiquadFilter();o.gain.value=1,s.frequency.value=2e3,a.gain.value=r,i.delayTime.value=n,i.connect(a),a.connect(s),s.connect(i),a.connect(o),this.build("delay",[o,a],o),this.property("delay",[0,0],function(t){if("object"==typeof t&&t.constructor===Array&&2==t.length&&"number"==typeof t[0]&&"number"==typeof t[1]){var e=t[0],o=t[1];return e>1&&(e=1),e<0&&(e=0),o>.8&&(o=.8),o<0&&(o=0),n=e,r=o,i.delayTime.value=n,a.gain.value=r,[o,e]}},function(t){return[t[0],t[1]]},function(t){var e=t[0],n=t[1];return e>1&&(e=1),e<0&&(e=0),n>.8&&(n=.8),n<0&&(n=0),[n,e]})}]),$R.part("Sound",["@audio","@extend",function DestinationNode(t,e){e(this,"$AudioNode"),this.build("destination",t.context().destination,!1)}]),$R.part("Sound",["@audio","@extend",function GainNode(t,e){e(this,"$AudioNode");var n=1,r=t.context().createGain();r.gain.value=n,this.build("gain",r,r),this.property("volume",1,function(t){if("number"==typeof t)return t<0&&(t=0),t>1&&(t=1),n=t,r.gain.value=n,t},function(t){return t},function(t){return t<0&&(t=0),t>1&&(t=1),t})}]),$R.part("Sound",["@audio","@extend",function LowpassNode(t,e){e(this,"$AudioNode");var n=t.context().createBiquadFilter(),r=22050;n.type="lowpass",n.frequency.value=r,this.build("lowpass",n,n),this.property("lowpass",22050,function(t){return t<0&&(t=0),t>22050&&(t=22050),r=t,n.frequency.value=t,t},function(t){return t},function(t){return t<0&&(t=0),t>22050&&(t=22050),t})}]),$R.part("Sound",["@inject","Debug",function AudioNode(t,e){function args(){return[o]}var n=null,r=null,o=null,i=function(t,e){if(!e)for(var n=this.input(),r=0;r<n.length;r++)t.connect(n[r]);return this.output()},a=[],s=t("$EventProvider"),u="";s.wrap(this),s.event("ready",args,!0),s.event("play",args,!1),s.event("end",args,!1),s.event("connect",args,!1),s.event("disconnect",args,!1),s.event("property",args,!1),this.disconnect=function(){if(o&&n){for(var t=o.input(),e=0;e<n.length;e++)for(var r=0;r<t.length;r++)n[e].disconnect(t[r]);o=null,s.resolve("disconnect")}return this},this.connect=function(t){if(this.disconnect(),o=t,o&&n)for(var e=o.input(),r=0;r<n.length;r++)for(var i=0;i<e.length;i++)n[r].connect(e[r]);return s.resolve("connect"),this},this.build=function(t,e,o,a){return r="object"==typeof e&&e.constructor===Array?e:[e],n="object"==typeof o&&o.constructor===Array?o:[o],u=t,"function"==typeof a&&(i=a),delete this.build,s.resolve("ready"),this},this.input=function(){return r},this.output=function(){return n},this.name=function(){return u},this.play=function(t,e){a.push(t),t.addEventListener("ended",function(){var e=[];t.$$SEARCH=!0;for(var n=0;n<a.length;n++)a.$$SEARCH||e.push(a[n]);delete t.$$SEARCH,a=e}),o&&o.play(t,i.apply(this,arguments))};var l={};this.property=function(t,n,r,o,i){if("string"==typeof t){var a={name:t,value:null,getter:null,setter:null,normalizer:i,animated:"function"==typeof i};"function"==typeof o&&(a.getter=o),"function"==typeof r&&(a.setter=r),a.value=n,n&&a.setter&&(l[a.name]?e.warn({property:a},"Duplicated property [{property}]"):l[a.name]=a)}else e.warn({name:t},"Property name [{name}] is not valid!")},this.set=function(t,n){if("string"==typeof t&&t.length>0){var r=l[t].setter(n);void 0!==r?l[t].value=r:e.warn({prop:t,val:n},"[{val}] is not a valid valuen for [{prop}].")}},this.get=function(t){if("string"==typeof t&&t.length>0){if(l[t])return l[t].value;e.warn({name:t},"Object has no property [{name}]. Unable to get value.")}else e.warn("Property name has to be a string")},this.props=function(){var t=[];for(var e in l)l.hasOwnProperty(e)&&t.push(l[e]);return t},this.has=function(t){return!!l[t]}}]),$R.part("Sound",function AudioNodeSoundDispatcher(){var t=[];this.register=function(e){e.addEventListener("end",function(){e.$$SEARCH=!0;for(var n=[],r=0;r<t.length;r++)t[r].$$SEARCH||n.push(t[r]);t=n}),t.push(e)},this.reconnect=function(e){for(var n=0;n<t.length;n++)t[n].disconnect(),t[n].connect(e)}}),$R.part("Sound",["@audio","@inject","Resource","Debug",function AudioSource(t,e,n,r){function args(){return[o,i,a]}var o=null,i=null,a=null,s=e("$EventProvider"),u=[];s.wrap(this),s.event("ready",args,!0),s.event("load",args,!0),s.event("error",args,!0),s.event("connect",args,!1),s.event("disconnect",args,!1),s.event("play",!1),s.event("end",!1),this.build=function(e){return o=n.audio(e),o.on("load",function(n){t.context().decodeAudioData(n,function(t){i=t,s.resolve("load")},function(){r.error({src:e},"[{src}] audio buffer can not be decoded."),s.resolve("error")})}),o.on("error",function(){r.error({src:e},"Unable to load audio file"),s.resolve(error)}),delete this.build,this},this.disconnect=function(){return a&&(a=null,s.resolve("disconnect")),this},this.connect=function(t){return this.disconnect(),a=t,s.resolve("connect"),this},this.play=function(){if(a&&this.status("load")){var e=t.context().createBufferSource();e.buffer=i,u.push(e),a.play(e,!1),e.start(0)}return this},this.stop=function(){for(var t=0;t<u.length;t++)u[t].stop(0);return u=[],this}}]),$R.part("Sound",["Debug",function Event(t){var e=[],n=!1,r="default",o=!1,i=this;argFunct=function(){return[]},this.build=function(t,e,o){return n=!!o,"function"==typeof e&&(argFunct=e),"string"==typeof t&&t.length>0&&(r=t),delete this.build,this},this.name=function(){return r},this.active=function(){return o},this.resolve=function(){n&&(o=!0);var t=argFunct();if("object"!=typeof t||t.constructor!==Array)t=[];else for(var r=0;r<e.length;r++)e[r].apply(this,t);return this},this.callback=function(t){if("function"!=typeof t)return this;if(i.active()){var n=argFunct();return"object"==typeof n&&n.constructor===Array||(n=[]),t.apply(this,n),e.push(arguments[0]),this}return e.push(t),this}}]),$R.part("Sound",["@inject",function EventProvider(t){var e=[];this.event=function(n,r,o){var i=t("$Event");return i.build.apply(i,arguments),e[n]=i,this},this.resolve=function(t){return"object"==typeof args&&args.constructor===Array||(args=[]),e[t]&&e[t].resolve.call(e[t]),this},this.wrap=function(t){return t.on=function(n,r){e[n]&&e[n].callback.call(t,r)},t.status=function(t){return!!e[t]&&e[t].active()},this}}]),$R.part("State",function Property(){var t=null,e=[];this.set=function(n){for(var r=0;r<e.length;r++)e[r](n,t);t=n},this.onset=function(t){"function"==typeof t&&e.push(t)}}),$R.part("State",["@inject",function State(t){function GetPropertyCallback(t){return function(n,r){if(e[t])for(var o=0;o<e.length;o++)e[t][o](n,r)}}var e={},n={};this.define=function(e,r){return n[e]?void n[e].set(r):(n[e]=t("$Property"),n[e].onset(GetPropertyCallback(e)),void n[e].set(r))},this.watch=function(t,r){"string"==typeof t&&"function"==typeof r&&(e[t]||(e[t]=[]),n[t]||this.def(t,null),e[t].push(r))}}]),$R.part("Objects",["@inject","Debug",function AnimationObjectExtension(t,e){function findCompetitor(t,e){e.$$SELF=!0;for(var r=null,o=0;o<n.length;o++)if(!n[o].$$SELF&&n[o].active()&&!n[o].done()){for(var i=!1,a=0;a<t.length;a++)if(n[o].hasProperty(t[a])){i=!0;break}i&&(r||(r=[]),r.push(n[o]))}return delete e.$$SELF,r}function CheckAnimationQueue(){for(var t=[],e=0;e<n.length;e++)if(n[e].active())n[e].done()||t.push(n[e]);else{var r=n[e].properties();if(n[e].queue())findCompetitor(r,n[e])||n[e].start();else{var o=findCompetitor(r,n[e]);if(o)for(var i=0;i<o.length;i++)for(var a=0;a<r.length;a++)o[i].stop(r[a]);n[e].start()}t.push(n[e])}n=t}function CreateAnimationType1(e,r,i,a){var s=this.extension("Style"),u={};if(u[e]=r,o[e]){var l=[{ordering:s.ordering(e),morph:o[e],value:r}],c={};i&&"number"==typeof i&&(c.duration=i),a&&"string"==typeof a&&(c.easing=a);var f=t("$Animation");f.config(this,l,c,CheckAnimationQueue),n.push(f)}}function CreateAnimationType2(r,i,a){var s=this.extension("Style"),u={};"object"==typeof i?u=i:"number"==typeof i?(u={duration:i},"string"==typeof a&&(u.easing=a)):"string"==typeof i&&(u={easing:i});var l={};for(var c in r)r.hasOwnProperty(c)&&(o[c]?l[c]={ordering:s.ordering(c),morph:o[c],value:r[c]}:e.warn({type:this.type(),property:c},"Property {property} of {type} can not be animated!"));var f=[];for(var h in l)f.push(l[h]);if(f.sort(function(t,e){return t.ordering-e.ordering}),f.length){var p=t("$Animation");p.config(this,f,u,CheckAnimationQueue),n.push(p)}else e.warn("No properties to animate!")}var n=[],r=!1,o={};this.morph=function(e,n,r,i){var a=t("$Morph");a.config(e,this.object(),n,r,i),a.valid()&&(o[e]=a)},this.extractMorph=function(t){return o[t]},this.register("animate",function(t,n,r,o){"string"==typeof t&&n?CreateAnimationType1.apply(this,arguments):"object"==typeof t&&t.constructor!==Array?CreateAnimationType2.apply(this,arguments):e.warn("Unable to create animation. Wrong arguments"),CheckAnimationQueue()}),this.register("animated",function(){return r}),this.register("stop",function(t){for(var e=0;e<n.length;e++)n[e].stop(t)})}]),$R.part("Objects",["Debug",function CacheObjectExtension(t){var e={};this.value=function(n,r){return"string"!=typeof n?void t.error("Object Value Cache / name is not a string!"):"function"!=typeof r?void t.error("Object Value Cache / func is not a function"):(e[n]||(e[n]={value:r(),func:r,relevant:!0}),this.get(n))},this.purge=function(n){return"string"!=typeof n?void t.error("Object Value Cache / Can not purge cache of non string name"):void(e[n]&&(e[n].relevant=!1))},this.get=function(n){return"string"!=typeof n?void t.error("Object Value Cache / Can not get value of non-string name"):e[n]?(e[n].relevant||(e[n].value=e[n].func(),e[n].relevant=!0),e[n].value):void 0}}]),$R.part("Objects",["Debug",function DrawerObjectExtension(t){function resolve(t,e){for(var n=0;n<r[t].length;n++)r[t].apply(o,e)}var e=null,n=null,r={before:[],after:[]},o=this.object();this.f=function(n){return"function"!=typeof n?(t.error({},"ObjectDrawer / func is not a function!"),void delete this.f):(e=n,void delete this.f)},this.register("before",function(e){"function"==typeof e?r.before.push(e):t.warn("Unable to set event [before Render]. func is not a Function")}),this.register("after",function(e){"function"==typeof e?r.after.push(e):t.warn("Unable to set event [after Render]. func is not a Function")}),this.matrix=function(){return n},this.draw=function(){resolve("before",arguments),e&&e.apply(this,arguments),resolve("after",arguments)}}]),$R.part("Objects",["Debug",function LayersObjectExtension(t){var e={0:[]},n=0;this.register("layer",function(e){if(void 0===e)return n;if("number"!=typeof e||e<0)return t.warn({n:e},"Value {n} is not a number or less than 0"),this;var r=this.parent();if(r){var o=r.extension("Layers");n=e,o.place(e,this)}else t.warn({},"You try to set layer of root group!");return this}),this.place=function(t,n){n.$$LAYERSEARCHVALUE=!0;for(var r in e)if(e.hasOwnProperty(r)){for(var o=!1,i=0;i<e[r].length;i++)if(e[r][i].$$LAYERSEARCHVALUE){e[r].splice(i,1),o=!0;break}if(o)break}delete n.$$LAYERSEARCHVALUE,e[t]||(e[t]=[]),e[t].push(n)},this.remove=function(t){t.$$LAYERSEARCHVALUE=!0;for(var n in e)if(e.hasOwnProperty(n)){for(var r=!1,o=0;o<e[n].length;o++)if(e[n][o].$$LAYERSEARCHVALUE){r=!0,e[n].splice(o,1);break}if(r)break}},this.forEach=function(t){for(var n in e)for(var r=0;r<e[n].length;r++)t.apply(e[n][r],[r,n])},this.layers=function(){return e}}]),$R.part("Objects",["Debug",function MatrixObjectExtension(t){function MatrixWrapper(){return e.call(n)}var e=null,n=this.object();this.f=function(t){"function"==typeof t&&(e=t,delete this.f)},this.register("matrix",function(){return this.extension("Cache").value("transformMatrix",MatrixWrapper)}),this.purge=function(){if(n.extension("Cache").purge("transformMatrix"),"Group"==n.type()){var t=n.extension("Layers");t.forEach(function(){this.extension("Cache").purge("transformMatrix")})}}}]),$R.part("Objects",["$MouseHelper","$MouseEventDispatcher","$MouseObjectFinder","$Tree","Debug",function MouseObjectExtension(t,e,n,r,o){function GetEventArray(t){return i[t]}var i={drag:[],dragstart:[],dragend:[],mousemove:[],mouseup:[],mousedown:[],mouseenter:[],mouseleave:[]},a=!1,s=function(){return!1};this.register("on",function(t,e){if(void 0==typeof t&&void 0==typeof e){for(var n in i)i[n].$OFF=!1;return this}if("string"==typeof t&&void 0==e){var r=GetEventArray(t);return r&&(r[n].$OFF=!1),this}if("string"==typeof t&&"function"==typeof e){var r=GetEventArray(t);return r?r.push(e):o.warn({e:t},"There is no event [{e}]"),this}return GetEventArray(t)?"function"!=typeof e?(o.warn({e:t,f:e},"Unable to set event handler for {[e]}. {[f]} is not a function!"),this):this:(o.warn({e:t},"Unable to set event handler for {[e]}. No such event found!"),this)}),this.register("off",function(t,e){if(void 0===t&&void 0===e){for(var n in i)i[n].$$OFF=!0;return this}if("string"==typeof t&&void 0===e){var r=GetEventArray(t);return r&&(r.$$OFF=!0),this}if("string"==typeof t&&"function"==typeof e){
var r=GetEventArray(t);if(e.$$MOUSEFUNCSEARCH=!0,r){for(var a=null,n=0;n<r.length;n++)if(r[n].$$MOUSEFUNCSEARCH){a=n;break}return null!==a&&r.splice(a,1),this}}return GetEventArray(t)||o.warn({e:t},"Unable to uset event handler for {[e]}. no such event"),"function"!=typeof e&&o.warn({e:t,f:e},"Unable to unset function {[f]} from event {[e]}. Not a function!"),this}),this.register("mouseCheckFunction",function(e){return"string"==typeof e?(t[e+"CheckFunction"]&&(s=t[e+"UserCheckFunction"]),this):"function"!=typeof e?(o.warn({f:e},"Unable to set check function! {[f]} is not a function!"),this):(s=e,this)}),this.register("disable",function(){return a=!0,this}),this.register("enable",function(){return a=!1,this}),this.register("disabled",function(){return a}),this.check=function(t,e){return!a&&s.call(t,[e[0],e[1]])};var u=null;this.cursorTransformFunction=function(t){"function"==typeof t&&(u=t)},this.applyCursorTransform=function(t){return u?u.call(this,t):t},this.hasEvent=function(t){return i[t]&&i[t].length&&!i[t].$$OFF},this.propagate=function(t,e){var n=t.parent();if(n){var r=n.extension("Mouse");if(r.hasEvent(e.type())){var o=e.type(),i=e.originalTarget.call({$$MOUSEPROPAGATIONSETTER:n});r.resolve(n,o,i)}}},this.resolve=function(t,e,n){if(!a){var r=GetEventArray(e);if(r){if(r.$OFF)return;for(var i=0;i<r.length;i++)r[i].call(t,n);n.propagate()&&this.propagate(t,n)}else o.warn({e:e},"Unable to resolve event [{e}]. No such event!")}};for(var l in i)i[l].$$OFF=!1}]),$R.part("Objects",["Debug",function OffsetObjectExtension(t){function ObjectOffsetFunction(){var t=n.get("position"),r=[t[0],t[1]],o=e.parent();if(o){var i=o.offset();r[0]+=i[0],r[1]+=i[1]}return r}var e=this.object(),n=null,r=null;this.purge=function(){if(n&&r||(n=e.extension("Style"),r=e.extension("Cache")),r.purge("offset"),"Group"==e.type()){var t=e.extension("Layers");t.forEach(function(){this.extension("Offset").purge()})}},this.register("offset",function(){return n||(n=this.extension("Style"),r=this.extension("Cache")),r.value("offset",ObjectOffsetFunction)})}]),$R.part("Objects",["Debug","@inject",function BoxObjectExtension(t,e){function BoxWrapperFunc(){if(n&&o)return n.call(o,r),r}var n=null,r=e("$GraphicsBox");this.f=function(e){return"function"!=typeof e?void t.error("Box Extension / Box function is not a function!"):(n=e,void delete this.f)};var o=this.object();this.box=function(){return o.extension("Cache").value("box",BoxWrapperFunc)},this.purge=function(){o.extension("Cache").purge("box");var t=o.parent();t&&t.extension("Box").purge()},this.register("box",function(){return this.extension("Cache").value("box",BoxWrapperFunc).get()})}]),$R.part("Objects",["Debug",function StyleObjectExtension(t){function GetSetterFunction(r,o){return function(i){var a=o.apply(this,[i,e[r].value]),s=e[r].value;if(a||"boolean"!=typeof a){var u=[s,a];e[r].value=a,n[r]||(n[r]=[]);for(var l=0;l<n[r].length;l++)n[r][l].apply(this,u)}else t.warn("Unable to set property ["+r+"]. Invalid value!")}}function GetGetterFunction(t,n){return function(){return n.call(null,e[t].value)}}function StyleType1(e,n){var o=this;r[e]?r[e].apply(o,[n]):t.warn({property:e,type:o.type()},"Style / Object type {type} has no property {property}")}function StyleType2(n){var o=this,i=[];for(var a in n)n.hasOwnProperty(a)&&r[a]&&(r[a]?i.push({ordering:e[a].ordering,property:a,setter:r[a]}):t.warn({property:a,type:o.type()},"Style / Object type {type} has no property {property}"));if(i.length){i.sort(function(t,e){return t.ordering-e.ordering});for(var s=0;s<i.length;s++)i[s].setter.apply(o,[n[i[s].property]])}else t.warn("Style / No properties to be applied!")}function StyleType3(n){var r=this;return o[n]?o[n].apply(r,[e[n].value]):(t.warn({property:property,type:r.type()},"Style / Object type {type} has no property {property}"),this)}var e={},n=[],r={},o={};this.register("style",function(e,n){if("string"==typeof e&&void 0!==n)StyleType1.apply(this,[e,n]);else if("object"==typeof e)StyleType2.apply(this,[e]);else{if("string"==typeof e&&void 0==n)return StyleType3.apply(this,[e]);t.error("Style / Invalid style function arguments!")}return this}),this.register("watch",function(e,r){if("string"!=typeof e){if("object"!=typeof e||e.constructor!==Array)return void t.error("Style / Property is not an array or string")}else if("function"!=typeof r)return void t.error("Style / Callback is not a function!");if(e.constructor==Array)for(var o=0;o<e.length;o++)"string"==typeof e[o]?(n[e[o]]&&"object"==typeof n[e[o]]&&n[e[o]].constructor===Array||(n[e[o]]=[]),n[e[o]].push(r)):t.error({i:o},"Style / Property {i} is not a string!");else"string"==typeof e?(n[e]&&n[e].constructor===Array||(n[e]=[]),n[e].push(r)):t.error("Style / Property is not an array or string")}),this.define=function(n,i,a,s,u){return e[i]?void t.error({name:i},"Style / Duplicated Property [{name}]"):"string"!=typeof i||0==i.length?void t.error("Style / Property name is not a string!"):"function"!=typeof u||"function"!=typeof s?void t.error("Style / Unable to define property. Getter or setter is undefined!"):("number"!=typeof n&&t.error("Style / Unable to define property setter ordering!"),e[i]={ordering:n,value:a},r[i]=GetSetterFunction(i,s),void(o[i]=GetGetterFunction(i,u)))},this.get=function(n){return e[n]?e[n].value:(t.warn("Getting value of property that does not exist!"),!1)},this.ordering=function(n){return e[n]?e[n].ordering:(t.warn("Getting ordering of property that does not exist!"),!1)}}]),$R.part("Objects",["Debug","$ModelHelper","@inject","$DrawerHelper",function TextObjectExtension(t,e,n,r){this.applyTo("Text");var o=this.object();if("Text"===o.type()){var a=[],s=/((\S+\s+)|(\S+$))/g,u=o.extension("Style"),l="",c=!1,f=[1/0,1/0],h=0,p=0;this.register("lines",function(){this.update();for(var t=[],e=0;e<a.length;e++)t.push(a[e].string())}),this.register("words",function(){this.update();for(var t=[],e=0;e<a.length;e++)for(var n=a[i].words(),r=0;r<n.length;r++)t.push(n.string());return t}),this.limits=function(t,e){f[0]=t,f[1]=e,c=!0},o.watch("str",function(t,e){e!==l&&(l=e)}),o.watch(["str","fontSize","lineHeight","color","weight","style"],function(){c=!0}),this.update=function(t){if(c||t){var e=l.match(s),r=0,o=0,i=u.get("size"),f=0,v=u.get("font"),g=u.get("fontSize"),d=u.get("lineHeight"),y=u.get("weight"),b=u.get("color"),m=u.get("style");a=[];for(var w=0;w<e.length;w++){var A=e[w].match(/\n/g),x=e[w].match(/\S+/g),$=n("$TextWordClass").string(x[0]);a[o]||(a[o]=n("$TextLineClass").font(v).size(g).height(d).color(b).style(m).weight(y)),a[o].push($),r=a[o].width(),(r>=i[0]||A)&&o++,r>f&&(f=r+4)}p=a.length*u.get("lineHeight"),g>d?p+=g-d:g<d&&(p-=d-g),h=f,c=!1}return this},this.textBlockHeight=function(){return this.update(),p},this.textBlockWidth=function(){return this.update(),h},this.forEachLine=function(t){this.update();for(var e=0;e<a.length;e++)t.apply(a[e],[e,a[e]])}}}]),$R.part("Objects",["Debug",function TreeObjectExtension(t){function checkTree(t){return!!t.$$TREESEARCHVALUE||!!t.parent()&&!!checkTree(t.parent())}function treeViolation(e,n){return"Group"==e.type()?(n.$$TREESEARCHVALUE=!0,checkTree(e)?(e.$$TREESEARCHVALUE?e.parent()&&t.warn({},"You try to append group parent into itself."):t.warn({},"You try to append group parent into it's children."),delete n.$$TREESEARCHVALUE,!0):(delete n.$$TREESEARCHVALUE,!1)):"Group"!=e.type()?(t.warn({target:e.type(),object:n.type()},"Yoy try to append [{object}] into [{target}]."),!0):void 0}var e=null,n=null;this.register("append",function(e){if("Group"!==this.type())t.watch({type:this.type()}," Can not append. type[{type}] of parent is not allowed!");else if(!treeViolation(this,e)){n||(n=this.extension("Layers"));var r=e.parent(),o=e.extension("Tree");if(r){var i=r.extension("Layers"),a=e.layer();i.remove(e),n.place(a,e),o.parent(this)}else{var a=e.layer();n.place(a,e),o.parent(this)}var s=this.extension("Box");s.purge()}return this}),this.register("appendTo",function(t){return t.append(this),this}),this.register("parent",function(){return e}),this.parent=function(n){return n.type&&"Group"===n.type()||t.error("Object Tree Extension / Unable to set object as parent. Not a group!"),n?void(e=n):e}}]),$R.part("Objects",["@inject","$DrawerHelper","$PathHelper","$ModelHelper",function AreaObjectDrawer(t,e,n,r){function UpdateFill(t){var r=this.extension("Box").box().sprite(),o=this.extension("Style"),i=o.get("path");t.save(),t.translate(r.margin[3]-h,r.margin[0]-p);var a=o.get("interpolation");l||(n.interpolate(i,a,!0),l=!0),a?e.drawBezierPathFill(t,i,o):e.drawLinePathFill(t,i,o),t.restore()}function UpdateStroke(t){var o=this.extension("Box").box().sprite(),i=this.extension("Style"),a=r.cloneArray(i.get("path")),s=i.get("interpolation");t.translate(o.margin[3]-h,o.margin[0]-p),l||(n.interpolate(a,s,!0),l=!0),s&&e.drawLinePath(t,a,i),e.drawBezierPath(t,a,i)}function UpdateBg(t){var i=this.extension("Style"),a=this.extension("Box").box().sprite(),s=r.cloneArray(i.get("path")),u=i.get("interpolation");t.translate(a.margin[3]-h,a.margin[0]-p),l||(n.interpolate(s,u,!0),l=!0),u?e.drawLineBgClipPath(t,s,i,o,a):e.drawBezierBgClipPath(t,s,i,o,a)}var o=t("$GraphicsAssembler"),i=this.extension("Box"),a=this.extension("Style"),s=this.extension("Matrix"),u=this.extension("Drawer"),l=!1,c=1,f=0,h=0,p=0;o.layer(0,"fill",UpdateFill.bind(this)),o.layer(1,"bg",UpdateBg.bind(this)),o.layer(2,"stroke",UpdateStroke.bind(this)),o.box(i),this.watch("path",function(){a.get("interpolation");l=!1,i.purge(),s.purge(),o.resize(),o.update("fill"),o.update("stroke"),o.update("bg")}),this.watch("interpolation",function(t,e){l=!1,f=Math.round(40*e),o.update("fill"),o.update("stroke"),o.update("bg"),o.resize()}),this.watch("position",function(){i.purge(),s.purge()}),this.watch(["strokeStyle","strokeColor"],function(){o.update("stroke"),o.resize()}),this.watch("fill",function(){o.update("fill")}),this.watch(["bg","bgSize","bgPosition"],function(){o.update("bg")}),this.watch("strokeWidth",function(t,e){for(var n=0,r=0;r<e.length;r++)e[r]>n&&(n=e[r]);c=n/2,o.update("stroke"),i.purge(),s.purge(),o.resize()}),i.f(function(t){for(var e=a.get("position"),n=a.get("path"),r=a.get("anchor"),o=e[0],i=e[1],s=1/0,u=1/0,l=-(1/0),v=-(1/0),g=0;g<n.length;g++)n[g][0]<s&&(s=n[g][0]),n[g][2]<s&&(s=n[g][2]),n[g][1]<u&&(u=n[g][1]),n[g][3]<u&&(u=n[g][3]),n[g][0]>l&&(l=n[g][0]),n[g][2]>l&&(l=n[g][2]),n[g][1]>v&&(v=n[g][1]),n[g][3]>v&&(v=n[g][3]);s==1/0&&(s=0),u==1/0&&(u=0),l==-(1/0)&&(l=0),v==-(1/0)&&(l=0),h=s,p=u;var d=c+f,y=Math.abs(l-s),b=Math.abs(v-u);"center"==r[0]&&(o-=y?y/2:0),"right"==r[0]&&(o-=y?y:0),"middle"==r[1]&&(i-=b?b/2:0),"bottom"==r[1]&&(i-=b?b:0),t.set(o+h,i+p,y,b,d,d,d,d)}),u.f(function(t){e.transform(this,t),o.draw(t)})}]),$R.part("Objects",["$DrawerHelper","Debug","@inject",function CircleObjectDrawer(t,e,n){function UpdateStroke(t){var e=i.box().sprite();t.beginPath(),t.strokeStyle=a.get("strokeColor"),t.lineWidth=a.get("strokeWidth"),t.setLineDash(a.get("strokeStyle")),t.arc(e.size[0]/2,e.size[1]/2,a.get("radius"),0,2*Math.PI),t.stroke()}function UpdateFill(t){var e=i.box().sprite();t.beginPath(),t.fillStyle=a.get("fill"),t.arc(e.size[0]/2,e.size[1]/2,a.get("radius"),0,2*Math.PI),t.fill()}function UpdateBg(t){var e=i.box().sprite(),n=i.box().value();t.beginPath(),t.arc(e.size[0]/2,e.size[1]/2,a.get("radius"),0,Math.PI/2),t.clip();for(var o=a.get("bgPosition"),s=a.get("bgSize"),u=a.get("bg"),l=0;l<u.length;l++)if(u[l].loaded()){t.save();var c=n.size[0]*s[l][0],f=n.size[1]*s[l][1],h=n.size[0]*o[l][0],p=n.size[1]*o[l][1];t.translate(e.margin[3]+h,e.margin[0]+p),t.drawImage(u[l]["export"](),0,0,c,f),t.restore()}else u[l].on("load",function(){r.update("bg")})}var r=n("$GraphicsAssembler"),o=this.extension("Drawer"),i=this.extension("Box"),a=this.extension("Style"),s=this.extension("Matrix"),u=1;r.layer(0,"fill",UpdateFill.bind(this)),r.layer(1,"bg",UpdateBg.bind(this)),r.layer(2,"stroke",UpdateStroke.bind(this)),r.box(i),i.f(function(t){var e=a.get("radius"),n=a.get("position"),r=a.get("anchor"),o=2*e,i=n[0],s=n[1];"center"==r[0]&&(i-=e),"right"==r[0]&&(i-=o),"middle"==r[1]&&(s-=e),"bottom"==r[1]&&(s-=o),t.set(i,s,o,o,u,u,u,u)}),this.watch("radius",function(){r.update("stroke"),r.update("bg"),r.update("fill"),i.purge(),s.purge(),r.resize()}),this.watch("fill",function(){r.update("fill")}),this.watch("position",function(){i.purge()}),this.watch("strokeWidth",function(t,e){e!==t&&(u=e,i.purge(),r.update("stroke"),s.purge(),r.resize())}),this.watch(["strokeStyle","strokeColor"],function(){r.update("stoke")}),this.watch(["bg","bgPosition","bgSize"],function(){r.update("bg")}),o.f(function(e){t.transform(this,e),r.draw(e)})}]),$R.part("Objects",["Debug","$MatrixHelper",function DefaultObjectDrawer(t,e){var n=this.extension("Matrix");n.f(function(){return e.objectMatrix(this)}),this.watch(["position","rotate","translate","scale","skew"],function(){n.purge()})}]),$R.part("Objects",["$DrawerHelper",function GroupObjectDrawer(t){var e=this.extension("Drawer"),n=this.extension("Layers"),r=this.extension("Box"),o=this.extension("Style");r.f(function(t){var e=1/0,r=1/0,i=-(1/0),a=-(1/0);n.forEach(function(){var t=this.extension("Box").box().value();t.position[0]<e&&(e=t.position[0]),t.position[1]<r&&(r=t.position[1]),t.position[0]+t.size[0]>i&&(i=t.position[0]+t.size[0]),t.position[1]+t.size[1]>a&&(a=t.position[1]+t.size[1])});var s=o.get("position");e===1/0&&(e=0),i===-(1/0)&&(i=0),r===1/0&&(r=0),a===-(1/0)&&(a=0),t.set(e+s[0],r+s[1],i-e,a-r,0,0,0,0)});var i=[0,0];this.watch("position",function(t,e){i=e,r.purge()}),e.f(function(e){e.save(),e.globalAlpha*=o.get("opacity"),t.transform(this,e),n.forEach(function(){var t=this.extension("Drawer"),n=this.type();if("Group"==n)t.draw.call(this,e);else{var r=this.extension("Style");e.save(),e.globalCompositeOperation=r.get("blending"),e.globalAlpha*=r.get("opacity"),t.draw.call(this,e),e.restore()}}),e.restore()})}]),$R.part("Objects",["$DrawerHelper","Resource",function ImageObjectDrawer(t,e){var n=this.extension("Style"),r=this.extension("Box"),o=this.extension("Drawer"),i=this.extension("Matrix"),a=null,s=null,u=null;this.watch("src",function(t,n){t!==n&&(u=e.image(n),u.on("load",function(){null==a&&(a=u.width()),null==s&&(s=u.height()),i.purge(),r.purge()}))}),this.watch("size",function(t,e){t[0]===e[0]&&t[1]===e[1]||(a=e[0],s=e[1],r.purge())}),this.watch("position",function(t,e){t[0]===e[0]&&t[1]===e[1]||r.purge()}),r.f(function(t){var e=n.get("position"),r=n.get("anchor"),o=e[0],i=e[1];"center"==r[0]&&(o-=a?a/2:0),"right"==r[0]&&(o-=a?a:0),"middle"==r[1]&&(i-=s?s/2:0),"bottom"==r[1]&&(i-=s?s:0),t.set(o,i,a?a:0,s?s:0,0,0,0,0)}),o.f(function(e){u&&u.loaded()&&!u.error()&&null!==a&&null!==s&&a>0&&s>0&&(t.transform(this,e),e.drawImage(u["export"](),0,0,a,s))})}]),$R.part("Objects",["@inject","Debug","$DrawerHelper","$PathHelper",function LineObjectDrawer(t,e,n,r){function UpdateCanvas(){var t=o.box().sprite(),e=i.get("path"),s=i.get("interpolation");if(a.width()!==t.size[0]||a.height()!==t.size[1]){var c=t.size[0],f=t.size[1];a.width(c),a.height(f)}g.clearRect(0,0,t.size[0],t.size[1]),g.save(),g.fillStyle="rgba(255,0,0,.5)",g.beginPath(),g.rect(0,0,t.size[0],t.size[1]),g.fill(),g.restore(),l||(r.interpolate(e,s),l=!0),g.save(),g.translate(t.margin[3]-p,t.margin[0]-v),s>0?e.length>0&&n.drawBezierPath(g,e,i):e.length>0&&n.drawLinePath(g,e,i),g.restore(),u=!1}var o=this.extension("Box"),i=this.extension("Style"),a=t("$Canvas"),s=this.extension("Matrix"),u=!1,l=!1,c=1,f=0,h=this.extension("Drawer"),p=0,v=0;o.f(function(t){for(var e=i.get("position"),n=i.get("path"),r=i.get("anchor"),o=e[0],a=e[1],s=1/0,u=1/0,l=-(1/0),h=-(1/0),g=0;g<n.length;g++)n[g][0]<s&&(s=n[g][0]),n[g][2]<s&&(s=n[g][2]),n[g][1]<u&&(u=n[g][1]),n[g][3]<u&&(u=n[g][3]),n[g][0]>l&&(l=n[g][0]),n[g][2]>l&&(l=n[g][2]),n[g][1]>h&&(h=n[g][1]),n[g][3]>h&&(h=n[g][3]);s==1/0&&(s=0),u==1/0&&(u=0),l==-(1/0)&&(l=0),h==-(1/0)&&(l=0),p=s,v=u;var d=c+f,y=Math.abs(l-s),b=Math.abs(h-u);"center"==r[0]&&(o-=y?y/2:0),"right"==r[0]&&(o-=y?y:0),"middle"==r[1]&&(a-=b?b/2:0),"bottom"==r[1]&&(a-=b?b:0),t.set(o+p,a+v,y,b,d,d,d,d)}),this.watch("path",function(){var t=i.get("interpolation");0!==t&&(l=!1),o.purge(),s.purge(),u=!0}),this.watch("position",function(){o.purge()}),this.watch("strokeWidth",function(t,e){for(var n=0,r=0;r<e.length;r++)e[r]>n&&(n=e[r]);c=n/2,u=!0,o.purge(),s.purge()}),this.watch("interpolation",function(t,e){t!==e&&(l=!1),f=Math.round(20*e),o.purge(),s.purge(),u=!0}),this.watch(["strokeStyle","strokeColor"],function(){u=!0});var g=a.context();h.f(function(t){u&&UpdateCanvas.call(this),n.transform(this,t),t.drawImage(a["export"](),0,0)})}]),$R.part("Objects",["@inject","$DrawerHelper",function RectangleObjectDrawer(t,e){function UpdateBg(t){var e=i.box(),o=e.value(),a=e.sprite();t.moveTo(a.margin[3],a.margin[0]),t.beginPath(),t.lineTo(o.size[0]+a.margin[3],a.margin[0]),t.lineTo(o.size[0]+a.margin[3],o.size[1]+a.margin[0]),t.lineTo(a.margin[3],o.size[1]+a.margin[0]),t.lineTo(a.margin[3],a.margin[0]),t.clip();for(var s=r.get("bgPosition"),u=r.get("bgSize"),l=r.get("bg"),c=0;c<l.length;c++)if(l[c].loaded()){t.save();var f=o.size[0]*u[c][0],h=o.size[1]*u[c][1],p=o.size[0]*s[c][0],v=o.size[1]*s[c][1];t.translate(a.margin[3]+p,a.margin[0]+v),t.drawImage(l[c]["export"](),0,0,f,h),t.restore()}else l[c].on("load",function(){n.update("bg")})}function UpdateStroke(t){var e=r.get("strokeColor"),n=r.get("strokeWidth"),o=r.get("strokeStyle"),a=r.get("cap"),s=i.box(),u=s.value(),l=s.sprite();t.moveTo(l.margin[3],l.margin[0]),t.lineCap=a,t.strokeStyle=e[0],t.lineWidth=n[0],t.setLineDash(o[0]),t.lineTo(u.size[0]+l.margin[3],l.margin[0]),t.stroke(),t.strokeStyle=e[1],t.lineWidth=n[1],t.setLineDash(o[1]),t.lineTo(u.size[0]+l.margin[3],u.size[1]+l.margin[0]),t.stroke(),t.strokeStyle=e[2],t.lineWidth=n[2],t.setLineDash(o[2]),t.lineTo(l.margin[3],u.size[1]+l.margin[0]),t.stroke(),t.strokeStyle=e[3],t.lineWidth=n[3],t.setLineDash(o[3]),t.lineTo(l.margin[3],l.margin[0]),t.stroke()}function UpdateFill(t){var e=r.get("fill"),n=i.box(),o=n.value(),a=n.sprite();t.rect(a.margin[3],a.margin[0],o.size[0],o.size[1]),t.fillStyle=e,t.fill()}var n=t("$GraphicsAssembler"),r=this.extension("Style"),o=this.extension("Drawer"),i=this.extension("Box"),a=this.extension("Matrix"),s=[2,2,2,2];n.layer(0,"fill",UpdateFill.bind(this)),n.layer(1,"bg",UpdateBg.bind(this)),n.layer(2,"stroke",UpdateStroke.bind(this)),n.box(i),i.f(function(t){var e=r.get("position"),n=r.get("size"),o=r.get("anchor"),i=e[0],a=e[1];"center"==o[0]&&(i-=n[0]/2),"right"==o[0]&&(i-=n[0]),"middle"==o[1]&&(a-=n[1]/2),"bottom"==o[1]&&(a-=n[1]),t.set(i,a,n[0],n[1],s[0],s[1],s[2],s[3])}),o.f(function(t){e.transform(this,t),n.draw(t)}),this.watch("size",function(t,e){n.update("fill"),n.update("stroke"),n.update("bg"),n.resize(),a.purge()}),this.watch("strokeWidth",function(t,e){s[0]=e[0],s[1]=e[1],s[2]=e[2],s[3]=e[3],i.purge(),n.resize(),n.update("stroke"),a.purge()}),this.watch(["position","size"],function(){i.purge(),a.purge()}),this.watch(["bg","bgSize","bgPosition"],function(){n.update("bg")}),this.watch(["strokeStyle","strokeColor"],function(){n.update("stroke")}),this.watch(["fill"],function(){n.update("fill")})}]),$R.part("Objects",["$DrawerHelper","$ModelHelper","Resource",function SpriteObjectDrawer(t,e,n){var r=this.extension("Style"),o=this.extension("Box"),i=this.extension("Drawer"),a=this.extension("Matrix"),s=null,u=null,l=null;o.f(function(t){var e=r.get("position"),n=r.get("anchor"),o=e[0],i=e[1];"center"==n[0]&&(o-=s?s/2:0),"right"==n[0]&&(o-=s?s:0),"middle"==n[1]&&(i-=u?u/2:0),"bottom"==n[1]&&(i-=u?u:0),t.set(o,i,s?s:0,u?u:0,0,0,0,0)}),i.f(function(e){l&&l.loaded()&&!l.error()&&l.ready()&&null!==s&&null!==u&&s>0&&u>0&&(t.transform(this,e),e.drawImage(l["export"](),0,0,s,u))}),this.watch("src",function(t,r){if(r!==t){var i=e.readSpriteString(r);l=n.sprite(i.url),l.config(i.frames),l.on("load",function(){null==s&&(s=l.width()),null==u&&(u=l.height()),a.purge(),o.purge()})}}),this.watch("size",function(t,e){t[0]===e[0]&&t[1]===e[1]||(s=e[0],u=e[1],o.purge())}),this.watch("position",function(t,e){t[0]===e[0]&&t[1]===e[1]||o.purge()})}]),$R.part("Objects",["@inject","$DrawerHelper","Resource",function TextObjectDrawer(t,e,n){function UpdateTextLayer(t){r.update();var e=o.get("lineHeight"),n=(o.get("color"),o.get("fontSize")),i=o.get("align");t.beginPath();var a=e-n/5;n<e?a-=e-n:a+=n-e,r.forEachLine(function(n){t.beginPath();var o=a+n*e;t.font=this.extractFontString(),t.fillStyle=this.color(),"center"==i?t.fillText(this.string(),(r.textBlockWidth()-this.width())/2,o):"right"==i?t.fillText(this.string(),r.textBlockWidth()-this.width()-2,o):t.fillText(this.string(),2,o)})}function getFontFile(){var t="oblique"===f?"normal":f,e=n.font(l,c,t);e.on("load",function(){u=!0,i.purge(),s.purge(),r.update(!0)}),e.on("error",function(){u=!0,i.purge(),s.purge(),r.update(!0)})}function drawText(t){u&&(h.size(r.textBlockWidth(),r.textBlockHeight()),h.update("text"),u=!1),e.transform(this,t),h.draw(t)}var r=this.extension("Text"),o=this.extension("Style"),i=this.extension("Box"),a=this.extension("Drawer"),s=this.extension("Matrix"),u=!1,l=o.get("font"),c=o.get("weight"),f=o.get("style"),h=t("$GraphicsAssembler");h.layer(0,"text",UpdateTextLayer),this.watch(["str","style","font","weight","size","color","fontSize","lineHeight"],function(){u=!0,i.purge(),s.purge()}),this.watch("font",function(t,e){l=e,getFontFile()}),this.watch("style",function(t,e){f=e,getFontFile()}),this.watch("weight",function(t,e){c=e,getFontFile()}),this.watch("anchor",function(){i.purge(),s.purge()}),i.f(function(t){var e=o.get("position"),n=o.get("anchor"),i=e[0],a=e[1];"center"==n[0]&&(i-=r.textBlockWidth()/2),"right"==n[0]&&(i-=r.textBlockWidth()),"middle"==n[1]&&(a-=r.textBlockHeight()/2),"bottom"==n[1]&&(a-=r.textBlockHeight()),t.set(i,a,r.textBlockWidth(),r.textBlockHeight(),0,0,0,0)}),a.f(drawText)}]),$R.part("Objects",["@extend","$ModelHelper","$PathHelper","Debug",function AreaObjectModel(t,e,n,r){function SyncPathProperty(t,e){for(var n=0;n<t.length;n++)e[n]||e.push(e[e.length-1]);t.length<e.length&&e.splice(t.length-1,e.length-t.length)}t(this,"$DefaultObjectModel"),t(this,"$GlobalBackgroundModel"),t(this,"$DefaultFreeStrokeModel");var o=this.extension("Style");this.extension("Animation");o.define(0,"path",[[0,0,0,0,0,0,0,0]],function(t){if(n.checkSimplePath(t)){var e=o.get("path"),i=n.convertSimplePath(t);return i[0][0]===i[i.length-1][2]&&i[0][1]===i[i.length-1][3]||i.push([i[i.length-1][2],i[i.length-1][3],i[0][0],i[0][1],i[i.length-1][2],i[i.length-1][3],i[0][0],i[0][1]]),e.length!==i.length&&(SyncPathProperty(i,o.get("strokeStyle")),SyncPathProperty(i,o.get("strokeWidth")),SyncPathProperty(i,o.get("strokeColor"))),i}return r.warn("Area Model / Invalid value for area path!"),!1},function(t){return n.convertComplexPath(t)})}]),$R.part("Objects",["@extend","$ColorHelper","$ModelHelper","Debug",function CircleObjectModel(t,e,n,r){t(this,"$DefaultObjectModel"),t(this,"$GlobalBackgroundModel");var o=this.extension("Style"),i=this.extension("Animation");o.define(0,"radius",0,function(t){if("number"==typeof t)return t<0&&(t=0),t},function(t){return t}),i.morph("radius",0,function(t,e,n){"number"==typeof n?(n<0&&(n=0),t(this.style("radius")),e(n)):r.warn({v:n},"[{v}] is not a valid radius value")},function(t){return t<0&&(t=0),t}),o.define(0,"strokeWidth",1,function(t){if("number"==typeof t)return t<0&&(t=0),t},function(t){return t}),i.morph("strokeWidth",0,function(t,e,n){"number"==typeof n&&(n<0&&(n=0),t(this.style("strokeWidth")),e(n))},function(t){return t<0&&(t=0),t}),o.define(0,"strokeColor","rgba(0,0,0,1)",function(t){return"string"==typeof t?e.colorToArray(t)?t:(r.warn({val:t},"[{val}] is not a valid strokeColor value"),!1):"object"==typeof t&&t.constructor==Array?e.isColor(t)?e.arrayToColor(t):(r.warn({val:t},"[{val}] is not a valid strokeColor value"),!1):void 0},function(t){return e.colorToArray(t)}),i.morph("strokeColor",0,function(t,o,i){if("string"==typeof i){var a=e.colorToArray(i);a?(t(this.style("strokeColor")),o(a)):r.warn({v:i},"[{v}] is not a valid value for strokeColor")}else"object"==typeof i&&i.constructor==Array&&e.isColor(i)?(t(this.style("strokeColor")),o(n.cloneArray(i))):r.warn({v:i},"[{v}] is not a valid value for strokeColor")},function(t){return e.normalize(t),t}),o.define(0,"strokeStyle",[1,0],function(t){if("object"==typeof t&&t.constructor==Array){if(n.validNumericValue(t)){if(2!=t.length)return r.warn({val:t},"[{val}] is not a valid strokeStyle value."),!1;for(var e=0;e<t.length;e++)t[e]<0&&(t[e]=0);return n.cloneArray(t)}return r.warn({val:t},"[{val}] is not a valid strokeStyle value."),!1}return r.warn({val:t},"[{val}] is not a valid strokeStyle value"),!1},function(t){return n.cloneArray(t)}),i.morph("strokeStyle",0,function(t,e,o){"object"==typeof o&&o.constructor===Array&&n.validNumericArray(o)&&2==o.length?(t(this.style("strokeStyle")),e(n.cloneArray(o))):r.warn({v:o},"[{v}] is not a valid value for strokeColor")},function(t){return t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),t})}]),$R.part("Objects",["$ModelHelper","$PathHelper","Debug",function DefaultObjectModel(t,e,n){var r=this.extension("Style"),o=this.extension("Animation");r.define(2,"position",[0,0],function(e){return t.validNumericArray(e)&&2==e.length?t.cloneArray(e):(n.warn("Invalid numeric array for position!"),!1)},function(e){return t.cloneArray(e)}),o.morph("position",2,function(e,r,o){t.validNumericArray(o)&&2==o.length?(e(this.style("position")),r(t.cloneArray(o))):n.warn({v:o},"Invalid value for position")},function(t){return t}),r.define(0,"rotate",0,function(t){if("number"==typeof t)return t<-360&&(t+=360),t>360?(t-=360,t=t*Math.PI/180):t*Math.PI/180},function(t){return t*(180/Math.PI)}),o.morph("rotate",0,function(t,e,r){"number"==typeof r?(t(this.style("rotate")),e(r)):n.warn({v:r},"Is not a valid value to animate rotate")},function(t){return t}),r.define(0,"translate",[0,0],function(e){return t.validNumericArray(e)&&2==e.length?t.cloneArray(e):(n.warn("Invalid numeric array for translate!"),!1)},function(e){return t.cloneArray(e)}),o.morph("translate",0,function(e,r,o){t.validNumericArray(o)&&2==o.length?(e(this.style("translate")),r(t.cloneArray(o))):n.warn({v:o},"Invalid value for translate")},function(t){return t}),r.define(0,"opacity",1,function(t){return"number"==typeof t?(t<0&&(t=0),t>1&&(t=1),t):(n.warn("Opacity value is not a number"),!1)},function(t){return t}),o.morph("opacity",0,function(t,e,r){"number"==typeof r?(r<0&&(r=0),r>1&&(r=1),t(this.style("opacity")),e(r)):n.warn({v:r},"Invalid value for translate")},function(t){return t<0&&(t=0),t>1&&(t=1),t}),r.define(0,"scale",[1,1],function(e){return"number"==typeof e?e>0?[e,e]:[0,0]:t.validNumericArray(e)&&2==e.length?t.cloneArray(e):(n.warn("Unknown type of value for scale!"),!1)},function(e){return t.cloneArray(e)}),o.morph("scale",0,function(e,r,o){"number"==typeof o?(o<0&&(o=0),o>1&&(o=1),e(this.style("scale")),r([o,o])):t.validNumericArray(o)&&2==o.length?(e(this.style("scale")),r(t.cloneArray(o))):n.warn({v:o},"Invalid value for scale")},function(t){return t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),t}),r.define(0,"skew",[0,0],function(e){if("number"==typeof e){e>360&&(e-=360),e<-360&&(e+=360);var r=e*Math.PI/180;return console.log(e,r),[r,r]}if(t.validNumericArray(e)&&2==e.length){e[0]>360&&(e[0]=e[1]-360),e[1]<-360&&(e[1]=e[1]+360);var o=e[0]*Math.PI/180,i=e[1]*Math.PI/180;return[o,i]}n.warn({v:e},"Ubknown value format for skew. [{v}]")},function(e){return t.cloneArray(e)}),o.morph("skew",0,function(e,r,o){"number"==typeof o?(e(this.style("skew")),r([o,o])):t.validNumericArray(o)&&2==o.length?(e(this.style("skew")),r(t.cloneArray(o))):n.warn({v:o},"Invalid value for skew")},function(t){return t}),r.define(0,"origin",[.5,.5],function(e){return"object"==typeof e&&e.constructor==Array?t.validNumericArray(e)&&2==e.length?[e[0],e[1]]:(n.warn("Unknown format of value for origin. Invalid Array!"),!1):(n.warn("Unknown type of value for origin"),!1)},function(e){t.cloneArray(e)}),o.morph("origin",0,function(e,r,o){t.validNumericArray(o)&&2==o.length?(e(this.style("origin")),r(t.cloneArray(o))):n.warn({v:o},"Invalid value for origin")},function(t){return t}),r.define(2,"cap","round",function(t){return"string"==typeof t?"round"==t||"butt"==t||"square"==t?t:(n.error({val:t},"{val} is incorrect value for line cap property!"),!1):void n.error("Cap property is a string!")},function(t){return t}),"Group"!==this.type()&&(r.define(0,"blending","source-over",function(e){return t.validBlending(e)?e:(n.warn({val:e}," [{val}] is not a valid blending!"),!1)},function(t){return t}),r.define(1,"anchor",["left","top"],function(t){return"object"==typeof t&&t.constructor==Array&&2==t.length?"left"!=t[0]&&"center"!=t[0]&&"right"!=t[0]||"top"!=t[1]&&"middle"!=t[1]&&"bottom"!=t[1]?(n.warn({v:t},'[{v}] is not a valid value. Array ["left" || "center" || "right" , "top" || "middle" || "bottom" ] is required format.'),!1):[t[0],t[1]]:(n.warn({v:t},"[{v}] is not a valid anchor value for text element"),!1)},function(t){return[t[0],t[1]]}))}]),$R.part("Objects",["$ModelHelper","$ColorHelper","Debug",function DefaultFreeStrokeModel(t,e,n){var r=this.extension("Style");r.define(1,"interpolation",0,function(t){return t>.4&&(t=.4),t<0&&(t=0),t},function(t){return t}),r.define(2,"strokeColor",["rgba(0,0,0,1)"],function(t){if("string"==typeof t){if(e.colorToArray(t)){for(var o=r.get("path"),i=[],a=0;a<o.length;a++)i[a]=t;return i}return n.warn({val:t},"Line Model / {val} is not a color!"),!1}if("object"==typeof t&&t.constructor==Array){for(var o=r.get("path"),s=r.get("strokeColor"),i=[],a=0;a<o.length;a++)t[a]?"string"==typeof t[a]?e.colorToArray(t[a])?i.push(t[a]):s[a]?(i.push(s[a]),n.warn({val:t[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):("object"==typeof t[a]||t[a].constructor==Array)&&e.isColor(t[a])?i.push(e.arrayToColor(t[a])):s[a]?(i.push(s[a]),n.warn({val:t[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):s[a]?(i.push(s[a]),n.warn({val:t[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!"));return i.length?i:(n.warn({val:t},"Line Model / {val} is not a color!"),!1)}if("object"==typeof t){for(var o=r.get("path"),s=r.get("strokeColor"),i=[],a=0;a<o.length;a++)t[a]?"string"==typeof t[a]?e.colorToArray(t[a])?i.push(t[a]):s[a]?(i.push(s[a]),n.warn({val:t[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):("object"==typeof t[a]||t[a].constructor==Array)&&e.isColor(t[a])?i.push(e.arrayToColor(t[a])):s[a]?(i.push(s[a]),n.warn({val:t[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):s[a]?(i.push(s[a]),n.warn({val:t[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!"));return i.length?i:(n.warn({val:t},"Line Model / {val} is not a color!"),!1)}return n.warn("Line Model / Wrong type of value"),!1},function(t){for(var n=[],r=0;r<t.length;r++)n.push(e.colorToArray(t[r]));return n}),r.define(2,"strokeWidth",[1],function(t){if("number"==typeof t){for(var e=r.get("path"),o=[],i=0;i<e.length;i++)o.push(t);return o}if("object"==typeof t&&t.constructor==Array){for(var e=r.get("path"),a=r.get("strokeWidth"),o=[],i=0;i<e.length;i++)"number"==typeof t[i]?o.push(t[i]):a[i]?(o.push(a[i]),n.warn({val:t[i]},"Line Model / {val} is not a number!")):(o.push(a[a.length-1]),n.warn({val:t[i]},"Line Model / {val} is not a number!"));
return o}if("object"==typeof t){for(var e=r.get("path"),a=r.get("strokeWidth"),o=[],i=0;i<e.length;i++)t[i]?"number"==typeof t[i]?o.push(t[i]):a[i]?(o.push(a[i]),n.warn({val:t[i]},"Line Model / {val} is not a number!")):(o.push(a[a.length-1]),n.warn({val:t[i]},"Line Model / {val} is not a number!")):a[i]?(o.push(a[i]),n.warn({val:t[i]},"Line Model / {val} is not a number!")):o.push(a[a.length-1]);return o}n.warn({val:t},"Line Model / {val} is not valid value for strokeWidth!")},function(e){return t.cloneArray(e)}),r.define(2,"strokeStyle",[[1,0]],function(e){if("object"==typeof e&&e.constructor==Array){if(t.validNumericArray(e)){for(var o=[],i=r.get("path"),a=0;a<i.length;a++)o.push(t.cloneArray(e));return o}for(var o=[],i=r.get("path"),s=r.get("strokeStyle"),a=0;a<i.length;a++)e[a]?t.validNumericArray(e[a])?o.push(e[a]):(s[a]?o.push(s[a]):o.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a valid value for strokeStyle!")):s[a]?o.push(s[a]):o.push(s[s.length-1]);return o}if("object"==typeof e){for(var o=[],s=r.get("strokeStyle"),i=r.get("path"),a=0;a<i.length;a++)e[a]?t.validNumericArray(e[a])?o.push(e[a]):(s[a]?o.push(s[a]):o.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a valid value for strokeStyle!")):s[a]?o.push(s[a]):o.push(s[s.length-1]);return o}},function(e){return t.cloneArray(e)})}]),$R.part("Objects",["$ModelHelper","$ColorHelper","Debug","Resource",function GlobalBackgroundModel(t,e,n,r){function SyncBgProperty(e,n,r){for(var o=0;o<e.length;o++)n[o]||n.push(t.cloneArray(r));e.length<n.length&&n.splice(e.length-1,n.length-path.length)}var o=this.extension("Style"),i=this.extension("Animation");o.define(0,"fill","rgba(0,0,0,1)",function(t){return"string"==typeof t?e.colorToArray(t)?t:(n.warn({val:t},"[{val}] is not a valid color!"),!1):"object"==typeof t&&t.constructor==Array?e.isColor(t)?e.arrayToColor(t):(n.warn({val:t},"[{val}] is not a valid color"),!1):(n.warn({val:t},"[{val}] is not a valid color!"),!1)},function(t){return e.colorToArray(t)}),i.morph("fill",0,function(r,o,i){if("string"==typeof i){var a=e.colorToArray(i);a?(r(this.style("fill")),o(a)):n.warn({v:i},"[{v}] is not avalid color!")}else"object"==typeof i&&i.constructor===Array?e.isColor(i)&&(r(this.style("fill")),o(t.cloneArray(i))):n.warn({v:i},"[{v}] is not a valid color!")},function(t){return e.normalize(t),t}),o.define(0,"bg",[],function(e){if("string"==typeof e){if(t.isSpriteString(e)){var i=t.readSpriteString(e),a=r.sprite(i.url);return a.config(i.frames),[a]}return[r.image(e)]}if("object"==typeof e||e.constructor==Array){if(2==e.length&&"string"==typeof e[0]&&"number"==typeof e[1]){if(e[1]>0){var a=r.sprite(e[0]);return a.config(e[1]),[a]}return!1}for(var s=[],u=0;u<e.length;u++)if("string"==typeof e[u])if(t.isSpriteString(e[u])){var i=t.readSpriteString(e[u]),a=r.sprite(i.url);a.config(i.frames),s.push(e)}else s.push(r.image(e[u]));else if("object"==typeof e[u]&&e[u].constructor==Array){if(2==e[u].length&&"string"==typeof e[u][0]&&"number"==typeof e[u][1])if(e[u][1]>0){var a=r.sprite(e[u][0]);a.config(e[u][1]),s.push(a)}else n.warn({val:e[u],i:u},"[{i}][{val}] is not a valid bg value. Skipped.")}else n.warn({val:e[u],i:u},"[{i}][{val}] is not a valid bg value. Skipped");return s}if("object"==typeof e){for(var l=o.get("bg"),s=[],u=0;u<l.length;u++)if(e[u])if("object"==typeof e[u]&&e[u].constructor==Array)if("string"==typeof e[u][0]&&"number"==typeof e[u][1]){var a=r.sprite(e[u][0]);a.config(e[u][1]),s.push(a)}else n.warn({val:e[u],i:u},"[{i}][{val}] is not a valid bg array value.");else if("string"==typeof e[u])if(t.isSpriteString(e[u])){var i=t.readSpriteString(e[u]),a=r.sprite(i.url);a.config(i.frames),s.push(e)}else s.push(r.image(e[u]));else s.push(l[u]),n.warn({val:e[u],i:u},"[{i}][{val}] is not a valid value for bg.");else s.push(l[u]);return s}return n.warn({val:e},"[{val}] is not valid value for bg"),!1},function(t){for(var e=[],r=0;r<t.length;r++)"Image"==t[r].type?e.push(t[r].url()):"Sprite"==t[r].type?e.push(t[r].url()+"["+t[r].frames()+"]"):n.error({val:t[r],i:r}+"[{i}][{val}] Unknown type of the background object container. Critical error.");return e});var a=[0,0];o.define(2,"bgPosition",[a],function(e){if("object"==typeof e&&e.constructor==Array){if(t.validNumericArray(e)&&2==e.length){for(var r=o.get("bg"),i=[],s=[e[0],e[1]],u=0;u<r.length;u++)i.push(s);return i}for(var i=[],r=o.get("bg"),l=o.get("bgPosition"),u=0;u<r.length;u++)e[u]?t.validNumericArray(e[u])&&2==e[u].length?i.push([e[0],e[1]]):(l[u]?i.push(l[u]):i.push(t.cloneArray(a)),n.warn({i:u,val:e[u]},"[{i}][{val}] is not a valid bgposition value")):l[u]?i.push(l[u]):i.push(t.cloneArray(a));return i}if("object"==typeof e){for(var i=[],r=o.get("bg"),l=o.get("bgPosition"),u=0;u<r.length;u++)e.hasOwnProperty(u)?l[u]?t.validNumericValue()&&2==e[u].length?i.push([e[0],e[1]]):(i.push(l[u]),n.warn({i:u,val:e[u]},"[{i}][{val}] is not a valid bgposition value")):i.push(t.cloneArray(a)):l[u]?i.push(l[u]):i.push(t.cloneArray(a));return i}n.warn({val:e},"[{val}] is not a valid bgposition value")},function(e){return t.cloneArray(e)});var s=[1,1];o.define(1,"bgSize",[s],function(e){if("object"==typeof e&&e.constructor==Array){if(2==e.length&&t.validNumericArray(e)){for(var r=o.get("bg"),i=[],a=[e[0],e[1]],u=0;u<r.length;u++)i.push(a);return i}for(var r=o.get("bg"),l=o.get("bgSize"),i=[],u=0;u<r.length;u++)2==e[u].length&&t.validNumericArray(e[u])?i.push(e[u][0],e[u][1]):(l[u]?i.push(l[u]):i.push(t.cloneArray(s)),n.warn({val:e[u],i:u},"[{i}][{val}] is not a valid bgsize value"));return i}if("object"==typeof e){for(var r=o.get("bg"),l=o.get("bgSize"),i=[],u=0;u<r.length;u++)e.hasOwnProperty(u)?"object"==typeof e[u]&&e[u].constructor==Array&&2==e[u].length&&t.validNumericArray(e[u])?i.push([e[u][0],e[u][1]]):(l[u]?i.push(l[u]):i.push(t.cloneArray(s)),n.warn({val:e[u],i:u},"[{i}][{val}] is not a valid bgsize value.")):l[u]?i.push(l[u]):i.push(t.cloneArray(s));return i}},function(e){return t.cloneArray(e)}),this.watch("bg",function(t,e){t.length!==e.length&&(SyncBgProperty(e,o.get("bgPosition"),a),SyncBgProperty(e,o.get("bgSize"),s))})}]),$R.part("Objects",["$ModelHelper",function GlobalSizeModel(t){var e=this.extension("Animation"),n=this.extension("Style");e.morph("size",1,function(e,n,r){"number"==typeof r?(r<0&&(r=0),e(this.style("size")),n([r,r])):"object"==typeof r&&r.constructor==Array&&t.validNumericArray(r)&&2==r.length?(r[0]<0&&(r[0]=0),r[1]<0&&(r[1]=0),e(this.style("size")),n(t.cloneArray(r))):Debug.warn({v:r},"[{v}] is not valid value for size")},function(t){return t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),t}),n.define(1,"size",[0,0],function(e){return"number"==typeof e?(e<0&&(e=0),[e,e]):"object"==typeof e&&e.constructor==Array&&2==e.length&&t.validNumericArray(e)?(e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),[e[0],e[1]]):(Debug.warn({val:e},"[{val}] is not valid value for size!"),!1)},function(e){return t.cloneArray(e)})}]),$R.part("Objects",["@extend",function GroupObjectModel(t){t(this,"$DefaultObjectModel")}]),$R.part("Objects",["@extend","Debug",function ImageObjectModel(t,e){t(this,"$DefaultObjectModel"),t(this,"$GlobalSizeModel");var n=this.extension("Style");n.define(0,"src",null,function(t){return"string"==typeof t?t:(e.warn({val:t},"[{val}] is not a valid src value"),!1)},function(t){return t})}]),$R.part("Objects",["@extend","$ModelHelper","$PathHelper","$ColorHelper","Debug",function LineObjectModel(t,e,n,r,o){function SyncPathProperty(t,e){for(var n=0;n<t.length;n++)e[n]||e.push(e[e.length-1])}t(this,"$DefaultObjectModel"),t(this,"$DefaultFreeStrokeModel");var i=this.extension("Style");i.define(0,"path",[[0,0,0,0,0,0,0,0]],function(t){if(n.checkSimplePath(t)){var e=i.get("path"),r=n.convertSimplePath(t);return e.length!==r.length&&(SyncPathProperty(r,i.get("strokeStyle")),SyncPathProperty(r,i.get("strokeWidth")),SyncPathProperty(r,i.get("strokeColor"))),r}return o.warn("Line Model / Invalid value for path!"),!1},function(t){return n.convertComplexPath(t)})}]),$R.part("Objects",["@extend","$ModelHelper","$ColorHelper","Debug",function RectangleObjectModel(t,e,n,r){t(this,"$DefaultObjectModel"),t(this,"$GlobalBackgroundModel"),t(this,"$GlobalSizeModel");var i=this.extension("Style"),a=this.extension("Animation");i.define(0,"strokeColor",["rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)"],function(t){if("string"==typeof t)return n.colorToArray(t)?[t,t,t,t]:(r.warn({value:val}," [{val} is not a valid stroke string"),!1);if("object"==typeof t&&t.constructor==Array){for(var e=i.get("strokeColor"),o=[],a=0;a<e.length;a++)t[a]?"string"==typeof t[a]?n.colorToArray(t[a])?o.push(t[a]):(o.push(e[a]),r.warn({val:t[a]},"[{val}] is not a valid stroke color value!")):"object"==typeof t[a]&&t[a].constructor==Array?n.isColor(t[a])?o.push(n.arrayToColor(t[a])):(o.push(e[a]),r.warn({val:t[a]},"[{val}] is not a valid stroke color value")):(o.push(e[a]),r.warn({val:t[a]},"[{val}] is not a valid color value")):o.push(e[a]);return o}if("object"==typeof t){for(var e=i.get("strokeColor"),o=[],a=0;a<e.length;a++)t.hasOwnProperty(a)?"string"==typeof t[a]?n.colorToArray(t[a])?o.push(t[a]):(o.push(e[a]),r.warn({val:t[a]},"[{val}] is not a valid color value")):"object"==typeof t[a]&&t[a].constructor===Array&&n.isColor(t[a])?o.push(n.arrayToColor(t[a])):(o.push(e[a]),r.warn({val:t[a]},"[{val}] is not a valid color value")):o.push(e[a]);return o}return r.warn({val:t},"[{val}] is not a valid value for strokeColor!"),!1},function(t){for(var e=[],r=0;r<t.length;r++)e.push(n.colorToArray(t[r]));return e}),a.morph("strokeColor",0,function(t,o,i){if("string"==typeof i){var a=n.colorToArray(i[c]);a?(o([e.cloneArray(a),e.cloneArray(a),e.cloneArray(a),e.cloneArray(a)]),t(this.style("strokeColor"))):r.warn({v:i},"{v} is not a valid color!")}else if("object"==typeof i&&i.constructor==Array)if(n.isColor(i))o([e.cloneArray(i),e.cloneArray(i),e.cloneArray(i),e.cloneArray(i)]),t(this.style("strokeColor"));else{for(var s=this.style("strokeColor"),u=[],l=!1,c=0;c<s.length;c++)if("string"==typeof i[c]){var a=n.colorToArray(i[c]);a?(u.push(a),l=!0):u.push(f[c])}else"object"==typeof i[c]&&i[c].constructor==Array&&i[c]&&n.isColor(i[c])?(u.push(e.cloneArray(i[c])),l=!0):u.push(f[c]);l?(t(s),o(u)):r.warn({v:i},"[{v}] is not a valid value for strokeColor")}else if("object"==typeof i){for(var f=this.style("strokeColor"),u=[],l=!1,c=0;c<f.length;c++)if("string"==typeof i[c]){var a=n.colorToArray(i[c]);a?(u.push(a),l=!0):u.push(f[c])}else"object"==typeof i[c]&&i[c].constructor==Array&&n.isColor(i[c])?(u.push(e.cloneArray(i[c])),l=!0):u.push(f[c]);l?(t(f),o(u)):r.warn({v:i},"[{v}] is not a valid value for strokeColor!")}},function(t){for(var e=0;e<t.length;e++)n.normalize(t[e]);return t}),i.define(0,"strokeWidth",[1,1,1,1],function(t){if("number"==typeof t)return[t,t,t,t];if("object"==typeof t&&t.constructor==Array){for(var e=i.get("strokeWidth"),n=[],o=0;o<e.length;o++)t[o]?"number"==typeof t[o]?n.push(t[o]):(n.push(e[o]),r.warn({val:t}," [{val}] is not a valid stroke width value")):n.push(e[o]);return n}if("object"==typeof t){for(var n=[],e=i.get("strokeWidth"),o=0;o<e.length;o++)t.hasOwnProperty(o)?"number"==typeof t[o]?n.push(t[o]):(r.warn({val:t},"[{val}] is not a valid value for strokeWidth"),n.push(e[o])):n.push(e[o]);return n}return r.warn({val:t}," [{val}] is not a valid strokeWidth value"),!1},function(t){return e.cloneArray(t)}),a.morph("strokeWidth",0,function(t,e,n){if("number"==typeof n)e([n,n,n,n]),t(this.style("strokeWidth"));else if("object"==typeof n&&n.constructor==Array){for(var o=this.style("strokeWidth"),i=[],a=0;a<o.length;a++)n[a]&&"number"==typeof n[a]?i.push(n[a]):i.push(o[a]);e(i),t(o)}else if("object"==typeof n){for(var o=this.style("strokeWidth"),i=[],s=!1,a=0;a<o.length;a++)n[a]&&"number"==typeof n[a]?(i.push(n),s=!0):i.push(o[a]);s?(e(i),t(o)):r.warn({v:n}," [{v}] is not a valid strokeWidth object")}else r.warn({v:n}," [{v}] is not a valid value for strokeWidth")},function(t){return t}),i.define(0,"strokeStyle",[[1,0],[1,0],[1,0],[1,0]],function(t){if("object"!=typeof t)return r.warn({val:t}," [{val}] is not valid strokeStyle value"),!1;if(t.constructor!=Array){for(var n=[],o=i.get("strokeStyle"),a=0;a<o.length;a++)t.hasOwnProperty(a)?"object"==typeof t[a]&&t[a].constructor==Array?e.validNumericArray(t[a])&&2==t[a].length?n.push(e.cloneArray(t[a])):(n.push(o[a]),r.warn({val:t[a]},"[{val}] is not a valid strokeStyle value")):(n.push(o[a]),r.watch({val:t[a]}," [{val}] is not a valid strokeStyle value")):n.push(o[a]);return n}if(!e.validNumericArray(t)){for(var n=[],o=i.get("strokeStyle"),a=0;a<o.length;a++)t[a]?e.validNumericArray(t[a])&&2==t.length?n.push(e.cloneArray(t[a])):(n.push(o[a]),r.warn({val:t[a]}," [{val}] is not a valid stroke style value")):n.push(o[a]);return n}return 2==t.length?[t,t,t,t]:void r.warn({v:t}," [{v}] is not a valid value for stroke width!")},function(t){return e.cloneArray(t)}),a.morph("strokeStyle",0,function(t,n,i){if("object"==typeof i)if(i.constructor==Array)if(e.validNumericArray(i))2==i.length?(t(this.style("strokeStyle")),n(e.cloneArray(i),e.cloneArray(i),e.cloneArray(i),e.cloneArray(i))):r.warn({v:i}," [{v}] is not a valid strokeStyle value!");else{for(var a=this.style("strokeStylr"),s=[],u=!1,l=0;l<a.length;l++)i[l]&&e.validNumericArray(i[l])&&2==i[l].length?(s.push(e.cloneArray(i[l])),u=!0):s.push(a[l]);u?(t(a),n(s)):r.warn({v:i},"[{v}] is not a valid strokeStyle value")}else{for(var a=this.style("strokeStyle"),s=[],u=!1,l=0;l<a.length;l++)i[l]&&e.validNumericArray(i[l])&&2==i[l].length?(s.push(e.cloneArray(i[o])),u=!0):s.push(a[l]);u?(t(a),n(s)):r.warn({v:i},"[{v}] is not a valid strokeStyleValue")}else r.warn({v:i},"[{v}] is not a valid strokeStyleValue")},function(t){return t})}]),$R.part("Objects",["@extend","$ModelHelper","Debug",function SpriteObjectModel(t,e,n){t(this,"$DefaultObjectModel"),t(this,"$GlobalSizeModel");var r=this.extension("Style");r.define(0,"src",null,function(t){return"string"==typeof t?e.isSpriteString(t)?t:(n.warn({val:t},"[{val}] is not a valid value for sprite src"),!1):"object"==typeof t&&t.constructor==Array?"string"==typeof t[0]&&"number"==typeof t[1]&&t[1]>0?t[0]+"["+t[1]+"]":(n.warn({val:t},"[{val}] is not a valid sprite src"),!1):void n.warn({val:t},"[{val}] is not a valid sprite src")},function(t){return t})}]),$R.part("Objects",["@extend","$ModelHelper","$ColorHelper","Debug",function TextObjectModel(t,e,n,r){t(this,"$DefaultObjectModel");var o=this.extension("Style"),i=this.extension("Text"),a=this.extension("Animation");o.define(1,"size",["auto","auto"],function(t){if("string"==typeof t&&"auto"==t)return i.limits(1/0,1/0),[t,t];if("number"==typeof t)return i.limits(t,t),[t,t];if("object"==typeof t&&t.constructor===Array&&2==t.length){for(var e=!0,n=0;n<t.length;n++)if("string"!=typeof t[n]&&"number"!=typeof t[n]||"string"==typeof t[n]&&"auto"!==t[n]){e=!1;break}return e?("number"==typeof t[0]&&t[0]<0&&(t[0]=0),"number"==typeof t[1]&&t[1]<0&&(t[1]=0),i.limits("auto"===t[0]?1/0:t[0],"auto"===t[1]?1/0:t[1]),[t[0],t[1]]):(r.warn({v:t},"[{v}] is not a valid size array"),!1)}return r.warn({v:t},"[{v}] is not a valid value for size"),!1},function(t){return[t[0],t[1]]}),o.define(1,"str","",function(t){return"string"==typeof t&&t},function(t){return t}),o.define(1,"font","sans-serif",function(t){if("string"==typeof t)return t},function(t){return t}),o.define(1,"weight",400,function(t){return"number"==typeof t&&(t<100&&(t=100),t>900&&(t=900),t%100!==0&&(t-=t%100),t)},function(t){return t}),o.define(1,"style","normal",function(t){return"string"==typeof t&&("normal"==t||"italic"==t||"oblique"==t)&&t},function(t){return t}),o.define(1,"lineHeight",14,function(t){if("number"==typeof t)return t<0&&(t=0),t},function(t){return t}),o.define(1,"fontSize",14,function(t){if("number"==typeof t)return t<0&&(t=0),t},function(t){return t}),o.define(1,"color","rgba(0,0,0,1)",function(t){return"string"==typeof t?n.colorToArray(t)?t:(r.warn({val:t},"[{val}] is not a valid color!"),!1):"object"==typeof t&&t.constructor==Array?n.isColor(t)?n.arrayToColor(t):(r.warn({val:t},"[{val}] is not a valid color"),!1):(r.warn({val:t},"[{val}] is not a valid color!"),!1)},function(t){return n.colorToArray(t)}),o.define(1,"align","left",function(t){return"center"===t||"left"===t||"right"===t?t:(r.warn({v:t},"[{v}] is not a proper value for aling text property"),!1)},function(t){return t}),a.morph("color",1,function(t,o,i){if("string"==typeof i){var a=n.colorToArray(i);a?(t(this.style("fill")),o(a)):r.warn({v:i},"[{v}] is not avalid color!")}else"object"==typeof i&&i.constructor===Array?n.isColor(i)&&(t(this.style("fill")),o(e.cloneArray(i))):r.warn({v:i},"[{v}] is not a valid color!")},function(t){return n.normalize(t),t})}]),$R.part("Sound",["$AnimationHelper","Morphine",function Animation(t,e){function Resolve(t){if(t==p)for(var e=0;e<a.length;e++)l.hasOwnProperty(a[e].morph.property())&&l[a[e].morph.property()].apply(u,[n,a[e].result]);else if(t==v){i=!0;for(var r={},e=0;e<a.length;e++)r[a[e].morph.property()]=a[e].result;g.done(1,r),h()}}var n=0,r=null,o=null,i=!1,a=null,s=null,u=null,l=null,c=!1,f=!1,h=null,p="type",v="complete",g=null;this.target=function(){return u},this.queue=function(){return c},this.active=function(){return f},this.done=function(){return i},this.hasProperty=function(t){for(var e=0,n=0;n<a.length;n++)if(a[n].morph.property()==t){e=n+1;break}return e},this.properties=function(){for(var t=[],e=0;e<a.length;e++)t.push(a[e].morph.property());return t},this.stop=function(t){if(t){var e=this.hasProperty(t);e&&(e-=1,a.splice(e,1))}else a=[]},this.start=function(){f=!0;for(var n=[],i=0;i<a.length;i++){var u=a[i].morph.get(a[i].value);void 0!==u&&u.start()!==!1&&u.end()!==!1&&n.push(a[i])}a=n;var l=t.getTickFunction();s=e.create(0,1,function(t,e){if(0==a.length)Resolve(v),s.stop();else{for(var n=0;n<a.length;n++)a[n].result=l(e,a[n].morph.start(),a[n].morph.end()),a[n].morph.apply(t,a[n].result);Resolve(p),1==t&&Resolve(v)}},o,r,0)},this.config=function(e,n,i,s){t.normalizeConfig(i),r=i.duration,o=i.easing,l=i.step,c=i.queue,h=s,a=n,u=e,g=i}}]),$R.part("Sound",function AnimationHelper(){function TickVal(t,e,n){var r=!1,o=!1;if("function"==typeof e&&(r=e()),"function"==typeof n&&(o=n()),e.constructor===Array)for(var i=[],a=0;a<e.length;a++)i.push(TickVal(t,e[a],n[a]));else if("object"==typeof e){var i={};for(var s in e)i[s]=TickVal(t,e[s],n[s])}else if("number"==typeof e||"function"==typeof e){var u=o===!1?n:o,l=r===!1?e:r,c=u-l;if(t>=1)var f=u;else var f=l+c*t;var i=f}return i}this.normalizeConfig=function(t){t.duration="number"==typeof t.duration&&t.duration>0?t.duration:1e3,t.queue=!!t.queue,t.step="object"==typeof t.step?t.step:{},t.easing="string"==typeof t.easing?t.easing:"linear",t.done="function"==typeof t.done?t.done:function(){}},this.getTickFunction=function(){return TickVal}}),$R.part("Sound",["Debug",function Morph(t){function SetStartValue(t){e=t}function SetEndValue(t){n=t}var e,n,r=null,o=null,i=null,a=null,s=!1,u=0;this.start=function(){return e},this.end=function(){return n},this.property=function(){return r},this.ordering=function(){return u},this.get=function(t){return o.apply(a,[SetStartValue,SetEndValue,t]),this},this.valid=function(){return s},this.apply=function(t,e){a.filter(r,i.apply(a,[e,t]))},this.config=function(e,n,l,c,f){return"string"!=typeof e?void t.error({name:e},"Unable to config Morph. arg1 [{name}] is not a string!"):"object"!=typeof n?void t.error({name:e},"Unable to config Morph. arg3 is not an object!"):"function"!=typeof c?void t.error({name:e},"Unable to config Morph. arg4 is not a function!"):"number"!=typeof l?void t.error({name:e},"Unable to config Morph. arg2 is not a number!"):"function"!=typeof f?void t.error({name:e},"Unable to config Morph. arg5 is not a function!"):(r=e,o=c,i=f,u=l,a=n,void(s=!0))}}]),$R.part("Objects",["$AnimationHelper","Morphine",function Animation(t,e){function Resolve(t){if(t==p)for(var e=0;e<a.length;e++)l.hasOwnProperty(a[e].morph.property())&&l[a[e].morph.property()].apply(u,[n,a[e].result]);else if(t==v){i=!0;for(var r={},e=0;e<a.length;e++)r[a[e].morph.property()]=a[e].result;g.done(1,r),h()}}var n=0,r=null,o=null,i=!1,a=null,s=null,u=null,l=null,c=!1,f=!1,h=null,p="type",v="complete",g=null;this.target=function(){return u},this.queue=function(){return c},this.active=function(){return f},this.done=function(){return i},this.hasProperty=function(t){for(var e=0,n=0;n<a.length;n++)if(a[n].morph.property()==t){e=n+1;break}return e},this.properties=function(){for(var t=[],e=0;e<a.length;e++)t.push(a[e].morph.property());return t},this.stop=function(t){if(t){var e=this.hasProperty(t);e&&(e-=1,a.splice(e,1))}else a=[]},this.start=function(){f=!0;for(var n=[],i=0;i<a.length;i++){var u=a[i].morph.get(a[i].value);void 0!==u&&u.start()!==!1&&u.end()!==!1&&n.push(a[i])}a=n;var l=t.getTickFunction();s=e.create(0,1,function(t,e){if(0==a.length)Resolve(v),s.stop();else{for(var n=0;n<a.length;n++)a[n].result=l(e,a[n].morph.start(),a[n].morph.end()),a[n].morph.apply(t,a[n].result);Resolve(p),1==t&&Resolve(v)}},o,r,0)},this.config=function(e,n,i,s){t.normalizeConfig(i),r=i.duration,o=i.easing,l=i.step,c=i.queue,h=s,a=n,u=e,g=i}}]),$R.part("Objects",function AnimationHelper(){function TickVal(t,e,n){var r=!1,o=!1;if("function"==typeof e&&(r=e()),"function"==typeof n&&(o=n()),e.constructor===Array)for(var i=[],a=0;a<e.length;a++)i.push(TickVal(t,e[a],n[a]));else if("object"==typeof e){var i={};for(var s in e)i[s]=TickVal(t,e[s],n[s])}else if("number"==typeof e||"function"==typeof e){var u=o===!1?n:o,l=r===!1?e:r,c=u-l;if(t>=1)var f=u;else var f=l+c*t;var i=f}return i}this.normalizeConfig=function(t){t.duration="number"==typeof t.duration&&t.duration>0?t.duration:1e3,t.queue=!!t.queue,t.step="object"==typeof t.step?t.step:{},t.easing="string"==typeof t.easing?t.easing:"linear",t.done="function"==typeof t.done?t.done:function(){}},this.getTickFunction=function(){return TickVal}}),$R.part("Objects",["Debug",function Morph(t){function SetStartValue(t){e=t}function SetEndValue(t){n=t}var e,n,r=null,o=null,i=null,a=null,s=!1,u=0;this.start=function(){return e},this.end=function(){return n},this.property=function(){return r},this.ordering=function(){return u},this.get=function(t){return o.apply(a,[SetStartValue,SetEndValue,t]),this},this.valid=function(){return s},this.apply=function(t,e){a.style(r,i.apply(a,[e,t]))},this.config=function(e,n,l,c,f){return"string"!=typeof e?void t.error({name:e},"Unable to config Morph. arg1 [{name}] is not a string!"):"object"!=typeof n?void t.error({name:e},"Unable to config Morph. arg3 is not an object!"):"function"!=typeof c?void t.error({name:e},"Unable to config Morph. arg4 is not a function!"):"number"!=typeof l?void t.error({name:e},"Unable to config Morph. arg2 is not a number!"):"function"!=typeof f?void t.error({name:e},"Unable to config Morph. arg5 is not a function!"):(r=e,o=c,i=f,u=l,a=n,void(s=!0))}}]),$R.part("Objects",["Canvas","@app","$MouseObjectFinder",function MouseEventDispatcher(t,e,n){function DefaultREvent(t,e){var n=t,r=!0,o=e,i=e;this.type=function(){return n},this.date=new Date,this.stopPropagation=function(){r=!1},this.propagate=function(){return r},this.target=function(){return o},this.propagated=function(){o.$$PROPAGATIONSEARCH=!0;var t=i.$$PROPAGATIONSEARCH;return delete o.$$PROPAGATIONSEARCH,!!t&&t},this.originalTarget=function(){if(this.$$MOUSEPROPAGATIONSETTER){var t=getEventByType(n,o);return t.originalTarget.call({$$RESETTARGET:this.$$MOUSEPROPAGATIONSETTER}),t}return this.$$RESETTARGET&&(o=this.$$RESETTARGET),i}}function MouseEvent(t,e){DefaultREvent.apply(this,[t,e]),this.cursor=[i.current[0],i.current[1]]}function DragEvent(t,e){DefaultREvent.apply(this,[t,e]),this.drag={start:[a.start[0],a.start[1]],current:[a.current[0],a.current[1]],delta:[a.delta[0],a.delta[1]]}}function getEventByType(t,e){return"mousemove"==t||"mouseleave"==t||"mouseenter"==t||"mousedown"==t||"mouseup"==t?new MouseEvent(t,e):"dragstart"==t||"dragend"==t||"dragmove"==t?new DragEvent(t,e):void 0}function Dispatch(t,e){var n=e.extension("Mouse");n&&n.hasEvent(t)&&n.resolve(e,t,getEventByType(t))}function resolveEventByType(t){"mouseenter"!=t&&"drastart"!=t&&"dragend"!=t&&"dragmove"!=t&&"mousemove"!=t&&"mouseup"!=t&&"mousedown"!=t||!r.current||Dispatch(t,r.current),"mouseleave"==t&&r.previous&&Dispatch(t,r.previous)}function DispatchEvents(){if(o.current!==o.old&&o.current&&resolveEventByType("mousedown"),i.old[0]!==i.current[0]||i.old[1]!==i.current[1]){if(r.current&&!r.previous)resolveEventByType("mouseenter");else if(!r.current&&r.previous)resolveEventByType("mouseleave");else if(r.current&&r.previous){r.current.$$MOUSESEARCH=!0;var t=!1;r.previous.$$MOUSESEARCH||(t=!0),delete r.current.$$MOUSESEARCH,t&&(resolveEventByType("mouseleave"),resolveEventByType("mouseenter"))}o.current&&o.current!==o.old?(a.start[0]=i[0],a.start[1]=i[1],resolveEventByType("dragstart")):o.current&&o.current==o.old?(a.current[0]=i[0],a.current[1]=i[1],a.delta[0]=a.start[0]-a.current[0],a.delta[1]=a.start[1]-a.current[1],resolveEventByType("dragmove")):o.current||o.current===o.old?o.current||o.current!=o.old||resolveEventByType("mousemove"):(a.current[0]=i[0],a.current[1]=i[1],a.delta[0]=a.start[0]-a.current[0],a.delta[1]=a.start[1]-a.current[1],resolveEventByType("dragend"))}o.current===o.old||o.current||resolveEventByType("mouseup"),r.previous=r.current,o.old=o.current,i.old[0]=i.current[0],i.old[1]=i.current[1]}function UpdateTargets(){r.previous=r.current,r.current=n.check(i.current)}function onAppTick(){if(c=!c){if(s)return;UpdateTargets(),DispatchEvents()}}var r={current:null,previous:null},o={current:!1,previous:!1},i={old:[0,0],current:[0,0]},a={start:[0,0],current:[0,0],delta:[0,0]},s=!0,u=!1,l=!1;t.on("mousedown",function(){u&&l&&(o.previous=o.current,o.current=!0,s=!1)}),t.on("mouseup",function(){u&&l&&(o.previous=o.current,o.current=!1,s=!1)}),t.on("mousemove",function(t){u&&l&&(i.current[0]=t.mouse.position[0],i.current[1]=t.mouse.position[1],s=!1)}),t.on("mouseleave",function(){l=!1}),t.on("mouseenter",function(){l=!0});var c=!1;e.$("tick",onAppTick),e.$on("start",function(){u=!0}),e.$on("stop",function(){u=!1}),e.$on("error",function(){u=!1})}]),$R.part("Objects",["$Tree","Debug",function MouseObjectFinder(t,e){function CheckElement(t,e){if("Group"==t.type()){var n=null,r=t.extension("Layers");return r.forEach(function(){if(!this.disabled())if("Group"==this.type()){var t=CheckElement(this,e);t&&(n=t)}else{var r=this.extension("Mouse"),t=r.check(this,e);t&&(n=t)}}),n}}this.check=function(n){var r=t.root();return r?"object"!=typeof n||n.constructor!==Array||2!==n.length||"number"!=typeof n[0]||"number"!=typeof n[1]?(e.warn({c:n},"ObjectFinder ; {[c]} is not a valid cursor value."),null):CheckElement(r,n):null}}]),$R.part("Objects",function GraphicsBox(){var t={size:[0,0],position:[0,0]},e={margin:[0,0,0,0],position:[0,0],size:[0,0]};this.get=function(){return{size:[t.size[0],t.size[1]],position:[t.position[0],t.position[1]]}},this.set=function(n,r,o,i,a,s,u,l){t.size[0]=o,t.size[1]=i,t.position[0]=n,t.position[1]=r,e.margin[0]=a,e.margin[1]=s,e.margin[2]=u,e.margin[3]=l,e.size[0]=l+o+s,e.size[1]=a+i+u,e.position[0]=n-l,e.position[1]=r-a},this.value=function(){return t},this.sprite=function(){return e}}),$R.part("Objects",["@extend","@inject","$DrawerHelper",function TextLineClass(t,e,n){function getWidth(){if(s){r=0;for(var t=0;t<o.length;t++)r+=o[t].width();return s=!1,r}return r}t(this,"$TextElementClass");var r=0,o=[],i=e("$TextSpaceClass"),a=0,s=!1;this.width=function(){return n.measureText(getWidth)},this.length=function(){return a},this.words=function(t){if(t&&"object"==typeof t&&t.constructor==Array){for(var e=0;e<t.length;e++)o.push(t[e].size(this.size()).height(this.height()).style(this.style()).weight(this.weight()).color(this.color()).font(this.font()));a=o.length;for(var n=[],e=0;e<o.length;e++)n.push(o[e]);return this.propertyChanged("string",n),this}return s=!0,o},this.push=function(t){return o.length>0&&o.push(i),o.push(t.size(this.size()).height(this.height()).style(this.style()).weight(this.weight()).color(this.color()).font(this.font())),s=!0,this},this.string=function(){for(var t="",e=0;e<o.length;e++)t+=o[e].string();return t},this.onPropertyChange(function(t,e){"string"!==t&&i[t](e)})}]),$R.part("Objects",["@extend","$DrawerHelper",function TextSpaceClass(t,e){function getWidth(t){return t.font=r.extractFontString(),t.measureText(n).width}t(this,"$TextElementClass");var n=" ",r=this;this.string=function(){return n},this.width=function(t){return e.measureText(getWidth)}}]),$R.part("Objects",["$ColorHelper",function TextElementClass(t){function resolve(t,e){for(var n=0;n<s.length;n++)s[n].apply(u,[t,e])}var e="rgba(0,0,0,1)",n="sans-serif",r=400,o=14,i=14,a="normal",s=[],u=this;this.size=function(t){return"number"==typeof t?(t<0&&(t=0),o=t,resolve("size",o),this):o},this.height=function(t){return"number"==typeof t?(t<0&&(t=0),i=t,resolve("height",i),this):i},this.weight=function(t){return"number"==typeof t?(t<100&&(t=100),t>900&&(t=900),t%100!==0&&(t-=t%100),r=t,resolve("weight",r),this):r},this.font=function(t){return"string"==typeof t&&t.length>0?(n=t,resolve("font",n),this):n},this.color=function(n){return"string"==typeof n?(t.colorToArray(n)&&(e=n,resolve("color",e)),this):e},this.style=function(t){return"normal"===t||"italic"===t||"oblique"===t?(a=t,resolve("style",a),this):a},this.extractFontString=function(){return a+" "+o+'px "'+n+"-"+r+'"'},this.onPropertyChange=function(t){"function"==typeof t&&s.push(t)},this.propertyChanged=function(t,e){resolve(t,e)}}]),$R.part("Objects",["$ColorHelper","@extend","$DrawerHelper",function TextWordClass(t,e,n){function getWidth(t){return t.font=o.extractFontString(),t.measureText(r).width}e(this,"$TextElementClass");var r="",o=this;this.string=function(t){return"string"==typeof t?(r=t,this.propertyChanged("string",t),this):r},this.width=function(){return n.measureText(getWidth)},this.draw=function(t,e,n){return"number"!=typeof e&&(e=0),"number"!=typeof n&&(n=0),t.save(),t.fillStyle=this.color(),t.font=this.extractFontString(),t.fillText(r,e,n),t.restore(),this}}]),$R.ext(["@Canvas","@HTMLRoot","$$config","Debug","Container",function Canvas(t,e,n,r,o){function GetParentSize(){t.element().setAttribute("width",0),t.element().setAttribute("height",0);var n=window.getComputedStyle(e.element(),null);v=parseInt(n.getPropertyValue("height")),p=parseInt(n.getPropertyValue("width"))}function CompareOnResize(){if("%"==u||"%"==l){var e=!1;return GetParentSize(),"%"==u&&(t.element().setAttribute("width",Math.floor(p*(a/100))),e=!0),"%"==l&&(t.element().setAttribute("height",Math.floor(v*(s/100))),e=!0),"px"==u&&t.element().setAttribute("width",a),"px"==l&&t.element().setAttribute("height",s),e}return t.element().setAttribute("width",a),t.element().setAttribute("height",s),!1}function GetCanvasOffset(e){var n=e?"offsetLeft":"offsetTop",r=0,o=t.element();do isNaN(o[n])||(r+=o[n]);while(o=o.offsetParent);return r}function WindowResizeCallback(){if(CompareOnResize()){c[0]=GetCanvasOffset(0),c[1]=GetCanvasOffset(1);for(var t=0;t<i.length;t++)i[t](a,s);ResolveCanvasEventArray("canvasresize",[new RCanvasResizeEvent])}}function GetCanvasEventArray(t){return g[t]}function ResolveCanvasEventArray(e,n){if("object"!=typeof n||n.constructor!==Array)return void r.warn({e:e},"Canvas : unable to resolve event array [{e}]. Data is not an array!");var o=GetCanvasEventArray(e);if(!o)return void r.warn({e:e},"Unable to resolve event [{e}] no such event!");for(var i=0;i<o.length;i++)o[i].apply(t.element(),n)}function GetMouseRelativePosition(t){return[t.pageX-c[0]-f[0],t.pageY-c[1]-f[1]]}function RCanvasMouse(t){this.page=[t.pageX,t.pageY],this.sceen=[t.pageX-f[0],t.pageY-f[1]],this.position=GetMouseRelativePosition(t)}function RCanvasMouseEvent(e){this.original=e,this.type=e.type,this.mouse=new RCanvasMouse(e),this.canvas=t.element()}function RCanvasResizeEvent(){
this.type="canvasresize",this.canvas=t.element(),this.offset=[c[0],c[1]],this.size=[a,s],this.original=[a,s],this.units=[u,l],"%"==u&&(this.size[0]=p*(a/100)),"%"==l&&(this.size[1]=v*(s/100))}var i=[],a=0,s=0,u="px",l="px",c=[0,0],f=[0,0];if(n){var h=[n.width?n.width:1e3,n.height?n.height:800];"number"==typeof h[0]?a=h[0]:"string"==typeof h[0]?h[0].match(/^[\d]+%$/)?(a=parseInt(h[0]),u="%"):(a=1e3,u="px",r.warn({width:h[0]},"{width} is not a valid value for canvas.size[0]. Width set as 1000px")):(a=1e3,r.warn({width:h[0]},"{width} is not a valid value for canvas.size[0]. Width set as 1000px")),"number"==typeof h[1]?s=h[1]:"string"==typeof h[1]&&h[1].match(/^[\d]+%$/)?(s=parseInt(h[1]),l="%"):(s=800,r.warn({height:h[1]},"{height} is not a valid value for canvas.size[1]. Width set as 800px"))}var p=0,v=0;this.resize=function(t){"function"==typeof t&&i.push(t)},this.width=function(){return"%"==u?p*(a/100):a},this.height=function(){return"%"==u?v*(s/100):s};var g={mousemove:[],mousedown:[],mouseup:[],mouseleave:[],mouseenter:[],canvasresize:[]};this.on=function(t,e){var n=GetCanvasEventArray(t);return n?("function"!=typeof e&&r.warn({f:t},"Canvas : Unable to set event handler [{f}]"),void n.push(e)):void r.warn({e:t},"Canvas : Unable to set event handler for event [{e}]")},t.element().addEventListener("mousemove",function(t){ResolveCanvasEventArray("mousemove",[new RCanvasMouseEvent(t)])}),t.element().addEventListener("mousedown",function(t){ResolveCanvasEventArray("mousedown",[new RCanvasMouseEvent(t)])}),t.element().addEventListener("mouseup",function(t){ResolveCanvasEventArray("mouseup",[new RCanvasMouseEvent(t)])}),t.element().addEventListener("mouseleave",function(t){ResolveCanvasEventArray("mouseleave",[new RCanvasMouseEvent(t)])}),t.element().addEventListener("mouseenter",function(t){ResolveCanvasEventArray("mouseenter",[new RCanvasMouseEvent(t)])}),window.addEventListener("scroll",function(){f[1]=window.pageXOffset||document.documentElement.scrollLeft,f[0]=window.pageYOffset||document.documentElement.scrollTop}),window.addEventListener("resize",WindowResizeCallback),o.on("hide",WindowResizeCallback),o.on("show",WindowResizeCallback),WindowResizeCallback()}]),$R.ext(["@HTMLRoot","$$config","Debug",function Container(t,e,n){function resolve(t){if(u[t])for(var e=0;e<u[t].length;e++)u[t][e].call(c)}function hide(){style({display:!1}),f=null}function style(e){e.display&&(e.display===!0&&t.show(),e.display===!1&&t.hide()),(e.blur||void 0!==e.opacity)&&setTimeout(function(){void 0!==e.blur&&(r.style.filter="blur("+e.blur+"px)"),void 0!==e.opacity&&(r.style.opacity=e.opacity)},1)}var r=t.element(),o=!1,i=!1,a=1e3,s="ease",u={show:[],hide:[],blurout:[],blurin:[]},l=e.z&&"number"==typeof e.z&&e.z>0?e.z:0,c=this,f=null;r.style.transition="opacity "+a+"s "+s+",filter "+a+"s",r.style.zIndex=l,style({display:"none",blur:0,opacity:0}),this.on=function(t,e){"string"==typeof t&&t.length>0?"object"==typeof u[t]&&u[t].constructor===Array?"function"==typeof e?u[t].push(e):n.warn({event:t},"Unable to set callback for [{event}]. Func is not a function"):n.warn({event:t},"Unable to set callback for event [{event}]. No such event"):n.warn("Unable to set event. Event identifier is not a string or empty")},this.show=function(){this.visible()||(f&&clearTimeout(f),style({display:!0,opacity:1}),o=!0,resolve("show"))},this.hide=function(){this.visible()&&(f&&clearTimeout(f),style({display:!0,opacity:0}),f=setTimeout(hide,1e3*a),o=!1,resolve("hide"))},this.blur=function(){this.blurred()||(style({blur:5}),i=!0)},this.focus=function(){this.blurred()&&(style({blur:0}),i=!1)},this.visible=function(){return o},this.blurred=function(){return i},this.background=function(t){"string"==typeof t&&t.length&&(r.style.background=t)}}]),$R.ext(["$$config",function Debug(t){function ResolveEvent(t,e){var n=null;"error"==t&&(n=o),"message"==t&&(n=i);for(var r=0;r<n.length;r++)n[r](e)}function GetMessage(t,o){o=o.toString();var i=o.match(n),a={};if(i)for(var s=0;s<i.length;s++){var u=i[s].match(r)[0];u&&(a[u]={replace:i[s],data:t[u].toString()})}for(var l in a)a.hasOwnProperty(l)&&(o=o.replace(a[l].replace,a[l].data));return o=e+o}var e="$R [Debug] : ",n=/{[a-zA-Z]+}/g,r=/[a-zA-Z]+/g;warnings=void 0==t.warnings||!!t.warnings;var o=[],i=[];this.on=function(t,e){"function"==typeof e&&("error"==t&&o.push(e),"message"==t&&i.push(e))},this.error=function(t,e){throw"string"==typeof t&&(e=t,t={}),e=GetMessage(t,e),ResolveEvent("error",e),new Error(e)},this.warn=function(t,e){warnings&&("string"==typeof t&&(e=t,t={}),e=GetMessage(t,e),ResolveEvent("message",e),console.warn(e))}}]),$R.ext(["Debug",function Easings(t){var e={_:function(t,e,n,r){return n*(t/=r)*t*t+e},linear:function(t,e,n,r){return t/=r,e+n*t},linearSoft:function(t,e,n,r){var o=(t/=r)*t,i=o*t;return e+n*(4*i*o+-10*o*o+8*i+-2*o+t)},linearSoftOut:function(t,e,n,r){var o=(t/=r)*t,i=o*t;return e+n*(-3*i*o+11*o*o+-14*i+6*o+t)},linearSoftIn:function(t,e,n,r){var o=(t/=r)*t,i=o*t;return e+n*(-1*i*o+2*i)},easeInQuad:function(t,e,n,r){n*(t/=r)*t+e;return n*(t/=r)*t+e},easeOutQuad:function(t,e,n,r){return-n*(t/=r)*(t-2)+e},easeInOutQuad:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e},easeInCubic:function(t,e,n,r){return n*(t/=r)*t*t+e},easeOutCubic:function(t,e,n,r){return n*((t=t/r-1)*t*t+1)+e},easeInOutCubic:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t*t+e:n/2*((t-=2)*t*t+2)+e},easeInQuart:function(t,e,n,r){return n*(t/=r)*t*t*t+e},easeOutQuart:function(t,e,n,r){return-n*((t=t/r-1)*t*t*t-1)+e},easeInOutQuart:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t*t*t+e:-n/2*((t-=2)*t*t*t-2)+e},easeInQuint:function(t,e,n,r){return n*(t/=r)*t*t*t*t+e},easeOutQuint:function(t,e,n,r){return n*((t=t/r-1)*t*t*t*t+1)+e},easeInOutQuint:function(t,e,n,r){return(t/=r/2)<1?n/2*t*t*t*t*t+e:n/2*((t-=2)*t*t*t*t+2)+e},easeInSine:function(t,e,n,r){return-n*Math.cos(t/r*(Math.PI/2))+n+e},easeOutSine:function(t,e,n,r){return n*Math.sin(t/r*(Math.PI/2))+e},easeInOutSine:function(t,e,n,r){return-n/2*(Math.cos(Math.PI*t/r)-1)+e},easeInExpo:function(t,e,n,r){return 0==t?e:n*Math.pow(2,10*(t/r-1))+e},easeOutExpo:function(t,e,n,r){return t==r?e+n:n*(-Math.pow(2,-10*t/r)+1)+e},easeInOutExpo:function(t,e,n,r){return 0==t?e:t==r?e+n:(t/=r/2)<1?n/2*Math.pow(2,10*(t-1))+e:n/2*(-Math.pow(2,-10*--t)+2)+e},easeInCirc:function(t,e,n,r){return-n*(Math.sqrt(1-(t/=r)*t)-1)+e},easeOutCirc:function(t,e,n,r){return n*Math.sqrt(1-(t=t/r-1)*t)+e},easeInOutCirc:function(t,e,n,r){return(t/=r/2)<1?-n/2*(Math.sqrt(1-t*t)-1)+e:n/2*(Math.sqrt(1-(t-=2)*t)+1)+e},easeInBack:function(t,e,n,r,o){return void 0==o&&(o=1.70158),n*(t/=r)*t*((o+1)*t-o)+e},easeOutBack:function(t,e,n,r,o){return void 0==o&&(o=1.70158),n*((t=t/r-1)*t*((o+1)*t+o)+1)+e},easeInOutBack:function(t,e,n,r,o){return void 0==o&&(o=1.70158),(t/=r/2)<1?n/2*(t*t*(((o*=1.525)+1)*t-o))+e:n/2*((t-=2)*t*(((o*=1.525)+1)*t+o)+2)+e},easeOutBounce:function(t,e,n,r){return(t/=r)<1/2.75?n*(7.5625*t*t)+e:t<2/2.75?n*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?n*(7.5625*(t-=2.25/2.75)*t+.9375)+e:n*(7.5625*(t-=2.625/2.75)*t+.984375)+e}};this.get=function(n){return e[n]?e[n]:(t.error({name:n},"Easings / Unable to get undefined easing [{name}]. Linear easing function provided."),e.linear)}}]),$R.ext(["@app","@Canvas","@inject","Debug",function Keyboard(t,e,n,r){function OnAppTick(){for(var t=0;t<u.length;t++)u[t]();u=[]}function getQueueFunc(t){return function(){var e=t.keyCode;if(o[e]&&o[e][t.type])for(var r=0;r<o[e][t.type].length;r++){var i=n("$KeyboardEvent").build(t);o[e][t.type][r].apply(i,[e,t.type])}}}var o={},i=!1,a=!0,s=!0,u=[];this.keydown=function(t,e){return this.on(t,"keydown",e)},this.keyup=function(t,e){return this.on(t,"keyup",e)},this.disable=function(){return a=!1,this},this.enable=function(){return a=!0,this},this.on=function(t,e,n){return"number"==typeof t&&"string"==typeof e?"keyup"===e||"keydown"===e?"function"==typeof n?(o[t]||(o[t]={}),o[e]||(o[t][e]=[]),o[t][e].push(n)):r.warn("Event callback is not a function"):r.warn({e:e},"No such type of event as [{e}]"):r.warn({c:t},"Wrong key code [{c}]"),this};var l=!1;e.element().addEventListener("mousedown",function(){l=!0}),window.addEventListener("mousedown",function(){s=!!l,l=!1}),window.addEventListener("keydown",function(t){i&&a&&s&&u.push(getQueueFunc(t))}),window.addEventListener("keyup",function(t){i&&a&&s&&u.push(getQueueFunc(t))}),t.$on("start",function(){i=!0}),t.$on("stop",function(){i=!1}),t.$("tick",OnAppTick)}]),$R.part("Keyboard",[function KeyboardEvent(){var t=null,e=!1,n=!1,r=!1,o=!1,i=null;this.build=function(a){return t=a.keyCode,e=a.ctrlKey,n=a.altKey,r=a.shiftKey,o=a,i=a.type,delete this.build,this},this.type=function(t){return"string"==typeof t?i===t:i},this.code=function(){return t},this.shift=function(){return r},this.alt=function(){return n},this.ctrl=function(){return e},this.original=function(){return o}}]),$R.ext(["@inject","Easings","@app","Debug",function Morphine(t,e,n,r){var o=[];this.create=function(n,i,a,s,u,l){if("number"!=typeof n||"number"!=typeof i)return void r.error({},"Morphine / Unable to create. Start value is wrong!");if("function"!=typeof a)return void r.error({},"Morphine / Unable to create. End value is wrong!");if("string"!=typeof s)return void r.error({},"Morphine / Unable to create. Easing is not a string!");("number"!=typeof u||u<=0)&&r.error({},"Morphine / Unable to create. Duration is less than 0 or not a number");var c=e.get(s);c||r.error({easing:s}," Morphine / Unable to create. No such easing {easing}");var f=t("$Morphine"),h=f.config(n,i,a,u,c,l);return h&&"function"==typeof h?(h.$m=f,o.push(h),f):void r.error({},"Morphine / Unable to config morphine. Due to some error.")},n.$("tick",function(t){for(var t=t.getTime(),e=[],n=0;n<o.length;n++)o[n].$m.done()||(o[n](t),e.push(o[n]));o=e})}]),$R.part("Objects",["@extend","@inject",function Graphics(t,e){var n=null,r=["Cache","Style","Box","Animation","Matrix","Drawer","Layers","Tree","Mouse","Text"],o={};this.extension=function(t){return o[t]},this.type=function(){return n},this.defineType=function(i){if("string"==typeof i){delete this.defineType,n=i;for(var a=0;a<r.length;a++)o[r[a]]=e("$Extension"),o[r[a]].defineObject(this),t(o[r[a]],"$"+r[a]+"ObjectExtension"),o[r[a]].matchType(n)?o[r[a]].wrap(this):delete o[r[a]];t(this,"$"+i+"ObjectModel"),t(this,"$DefaultObjectDrawer"),t(this,"$"+i+"ObjectDrawer"),t(this,"$DefaultObjectType"),t(this,"$"+i+"ObjectClass")}}}]),$R.ext(["@inject","$Tree","@app",function Objects(t,e,n){function InjectByType(e){var n=t("$Graphics");return n.defineType(e),n}this.group=function(){return InjectByType("Group")},this.line=function(){return InjectByType("Line")},this.rect=function(){return InjectByType("Rectangle")},this.circle=function(){return InjectByType("Circle")},this.image=function(){return InjectByType("Image")},this.sprite=function(){return InjectByType("Sprite")},this.text=function(){return InjectByType("Text")},this.area=function(){return InjectByType("Area")},this.group()}]),$R.ext(["@app","@inject","Debug",function Resource(t,e,n){function GetResourceByURL(t,e){"font"===t&&(e=e[0]);var n=null,r=o[t+"s"];if(!r)return n;for(var i=0;i<r.length;i++)if(r[i].url()===e){n=r[i];break}return n}function InjectByType(t,n){var a=GetResourceByURL(t,n);if(a)return a;var s=t,u=e("$"+t.charAt(0).toUpperCase()+t.slice(1));return u.on("load",function(){i--,ResolveEvent("load",[this,i,r.length])}),u.on("error",function(){i--,ResolveEvent("error",[this,i,r.length])}),u.url(n),o[s+"s"].push(u),r.push(u),i++,ResolveEvent("add",[u,i,r.length]),u}function ResolveEvent(t,e){var n=s[t];if(n)for(var r=0;r<n.length;r++)n[r].apply(a,e)}var r=[],o={images:[],sprites:[],fonts:[],audios:[]},i=0,a=this;this.image=function(t){return InjectByType("image",t)},this.sprite=function(t){return InjectByType("sprite",t)},this.audio=function(t){return InjectByType("audio",t)},this.font=function(t,e,n){return InjectByType("font",[t,e,n])};var s={load:[],error:[],add:[]};this.on=function(t,e){if("string"==typeof t){var r=s[t];r?"function"==typeof e?r.push(e):n.warn({event:t},"Unable to set event [{event}] callback. func is not a function!"):n.warn({event:t},"Unable to set event [{event}]. No such event")}else n.warn("Unable to set event callback. Event name is not a string")},this.off=function(t,e){if("string"==typeof t){var r=s[t];if(r){if("function"==typeof e){var o=[];e.$$SEARCH=!0;for(var i=0;i<r.length;i++)r[i].$$SEARCH||o.push(r[i]);delete e.$$SEARCH,s[t]=o}}else n.warn({event:t},"Unable to unset callback for event [{event}]. No such event")}else n.warn("Unable to unset event. Event is not a string")},this.list=function(){return[].concat(o.images).concat(o.audios).concat(o.fonts).concat(o.sprites)},t.$("tick",function(t){t=t.getTime();for(var e=0;e<o.sprites.length;e++)o.sprites[e].ready()&&1==o.sprites[e].loaded()&&o.sprites[e].tick(t)})}]),$R.ext(["@audio","@inject","Debug",function Sound(t,e,n){var r=e("$Audio").build("$$DESTINATION","destination"),o={},i=0,a=0,s={$$DESTINATION:r};this.sample=function(t,r,a){if("string"==typeof t&&t.length>0){if(o[t])return o[t];"string"==typeof a&&0!=a.length||(a="UserSound["+i+"]"),i++;var s=e("$Audio").build(a,t);"string"==typeof r&&0!=r.length||(r="$$DESTINATION");var u=this.channel(r);return s.connect(u),o[s.url()]=s,s}n.warn({url:t},"[{url}] is not valid audio url or empty.")},this.channel=function(t){if("string"==typeof t&&t.length>0){if(s[t])return s[t];var n=e("$Audio").build(t);return n.connect(r),s[t]=n,a++,n}},this.channels=function(t){var e={},t=!!t;for(var n in s)s.hasOwnProperty(n)&&"$$DESTINATION"!==n&&(t?e[n.url()]=n[n]:e[n]=s[n]);return e},this.sounds=function(t){var e={},t=!!t;for(var n in o)o.hasOwnProperty(n)&&(t?e[n]=o[n]:e[o[n].name()]=o[n]);return e},this.destination=function(){return s.$$DESTINATION}}]),$R.ext(["@inject",function State(t){function ParseAddress(t){var e=t.match(/^([a-zA-Z]+).([a-zA-Z]+)$/),n=e[0],r=e[1];if(n&&r)return{state:n,prop:r}}var e={};this.watch=function(n,r){"function"==typeof r&&(n=ParseAddress(n),n&&(e[n.state]||(e[n.state]=t("$State")),e[n.prop].when(n.prop,r)))},this.define=function(n,r){n=ParseAddress(n),n&&(e[n.state]||(e[n.state]=t("$State")),e[n.state].define(n.prop,r))}}]);
//# sourceMappingURL=data:application/json;base64,
