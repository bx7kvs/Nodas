function Reflect(){}function Core(e){new Injection(e);for(var t=!0,n=0;n<expect.length;n++)if(!modules[expect[n]]){t=!1;break}return t&&BuildCore(),Core}function getRouteFunction(e){return function routeFunction(){var t=e.apply(Reflect,arguments);return void 0!==t?Reflect:t}.bind(core)}function BuildCore(){Core.get("Root");for(var e in properties)properties.hasOwnProperty(e)&&(core[e]=properties[e])}function Injection(e){if("function"!=typeof e||!e.name)throw new Error("Unable to createinjection. Constructor is not a named function!");modules[e.name]=this;var t=null;this.create=function(t){var n=[null];if(t&&"object"==typeof t&&t.constructor===Array)for(var r=0;r<t.length;r++)n.push(t[r]);return new(Function.prototype.bind.apply(e,n))},this.get=function(){if(t)return t;var e=this.create.apply(this,arguments[0]);return t=e,e},this.is=function(t){return t.constructor===e},this.extend=function(t,n){return"object"==typeof n&&n.constructor===Array?(e.apply(t,n),t):(e.call(t),t)}}var modules={},properties={},core=new Reflect,expect=["Application","Audio","Canvas","Classes","Config","Container","Fonts","Helpers","Injection","Root","Services","Source","Ticker"];Core.get=function(e,t){if("string"==typeof e){if(modules[e])return modules[e].get.apply(modules[e],t);throw new Error("Module ["+e+"] was not found")}throw new Error("Module name is not a string. Wrong arguments")},Core.is=function(e,t){if("string"==typeof t&&modules[t])return modules[t].is(e)},Core.inject=function(e,t){if("string"==typeof e){if(modules[e])return modules[e].create(t);throw new Error("Nodule ["+e+"] was not found.")}throw new Error("Module name is not a string. Wrong Arguments")},Core.extend=function(e,t,n){if("string"==typeof modules[e]){if("object"==typeof t)return modules[e].extend(t,n);throw new Error("Unable to extend target of tyoe ["+typeof t+"] bu module constructor ["+e+"].")}},Core.define=function(e,t){if(core||(core=new Reflect),"string"==typeof e){if(void 0!==properties[e])throw new Error("Unable to define property ["+e+"]. Already defined!");return"function"==typeof e?properties[e]=getRouteFunction(t):null===e&&"undefined"==typeof e&&"object"==typeof e||(properties[e]=t),core}},window.$R=core,Core(function Application(e,t,n){var r=this;n.define("fps",58.8,{isNumber:!0,greater:0,under:61}).watch(function(e){t.fps(e)}),n.define("canvas",null,{isString:!0}).watch(function(t){e.element(t)}),this.$=function(e,t){if("string"!=typeof e)throw new Error("Unable to set API method. Name is not a string.");if("$"===e.charAt(0))throw new Error("Unable to set API function. Function name starts with $");if(this[e])throw new Error("Application API property ["+e+"] duplication!");if("function"!=typeof t)throw new Error("Application API property ["+e+"] value is not a function");this[e]=function(){var e=t.apply(this,arguments);return void 0!==e?e:r}},this.stop=function(){return t.stop(),this},this.start=function(){return t.start(),this},this.config=function(e,t){if("string"==typeof e)if("undefined"!=typeof t&&"function"!=typeof t)n.set(e,t);else{if("function"!=typeof t)return n.get(e);n.watch(e,t)}else{if("object"!=typeof e||e.constructor===Array)throw new Error("Unable to config application. Config format is invalid");for(var r in e)e.hasOwnProperty(r)&&n.set(r,e[r])}return this}}),Core(function Audio(){var e=new AudioContext;this.context=function(){return e}}),Core(function Canvas(e){function DrawScene(e,t){if(u){for(var r=[n,e,t],o=0;o<s.length;o++)try{s[o].f.apply(a,r)}catch(i){throw console.error(i),new Error("Error emerged while drawing. \nQueue          : ["+s[o].o+"]\nQueue Ordering : ["+o+"]\nQueue Member   : ["+s[o].f.name+"]\nMessage        : "+i.message)}for(var c in s)for(var o=0;o<s[c].length;o++);}}function resolve(e){for(var t=0;t<e.length;t++)e[t].call(a)}var t=null,n=null,r=[800,600],o=[],i=[],a=this,s=[],u=!1;e.queue(0,DrawScene),this.element=function(e){if("string"==typeof e){var o=document.getElementById(e);if(!o||!o.getContext)throw new Error("Element with id [#"+e+"] was not found or not a canvas");var a=o.getContext("2d");if(!a)throw new Error("Element with id [#"+e+"] is not a canvas. Can not get 2d context.");o.setAttribute("width",r[0]),o.setAttribute("height",r[1]),n=a,t=o,u=!0,resolve(i)}else{if(!(e instanceof HTMLElement))return t;if(!e.getContext)throw new Error("Element is not a Canvas");var a=e.getContext("2d");if(!a)throw new Error("Element is not a Canvas. Can not get 2d context.");e.setAttribute("width",r[0]),e.setAttribute("height",r[1]),t=e,n=a,u=!0,resolve(i)}},this.queue=function(e,t){if("function"==typeof e){if(!e.name)throw new Error("Unable to enqueue callback. Provide a named function");s.push({o:0,f:t})}else{if("number"!=typeof e)throw new Error("Unable to enqueue callback. Wrong arguments.");if("function"!=typeof t)throw new Error("Unable to enqueue callback. Provide a named function");if(!t.name)throw new Error("Unable to enqueue callback. Provide a named function.");s.push({o:e,f:t})}return s.sort(function(e,t){return e.o>t.o}),this},this.size=function(e,n){return"number"==typeof e&&"number"==typeof n&&(e<0&&(e=0),n<0&&(n=0),r[0]===e&&r[1]===e||(r[0]=e,r[1]=n,t.setAttribute("width",e),t.setAttribute("height",n),resolve(o))),[r[0],r[1]]},this.resize=function(e){if("function"==typeof e)return o.push(e),this;throw new Error("Unable to set ressize callback. f argument is not a function")},this["switch"]=function(e){if("function"==typeof e)return i.push(e),this;throw new Error("Unable to set switch callback. f argument is not a function")},this.ready=function(){return u}}),Core(function Classes(){function cls(e){try{var r=Core.inject("Injection",[e]);n[r.name()]&&console.warn("Global Class Library class ["+r.name()+"] has been overwritten.");for(var o in t)t.hasOwnProperty(o)&&t[o][r.name()]&&console.warn("Application ["+o+"] Class ["+r.name()+"] overrides global class.");n[r.name()]=r}catch(i){throw new Error("Unable to create class injection.")}}var e={},t={},n={};cls.app=function(e,r){if("string"!=typeof e)throw new Error("Unable to register ApplicationClass injection. App id is not a string.");t[e]||(t[e]={});try{var o=Core.inject("Injection",[r]);n[o.name()]&&console.warn("Application ["+e+"] Class ["+o.name()+"] overrides global class."),t[e][o.name()]=o}catch(i){throw new Error("Unable to create and register ApplicationClass for app ["+e+"].")}},cls.sys=function(t){try{var n=Core.inject("Injection",[t]);e[n.name()]&&console.warn("System Class ["+n.name()+"] override."),e[n.name()]=n}catch(r){throw new Error("Unable to register SystemClass injection")}},this.getApplicationClasses=function(e){if("string"==typeof e){var r=Core.inject("Container",[n]);return t[e]?(r.source(r,"."),r.merge(t),r):(r.source(r,"."),r)}throw new Error("Unable to get application classes container. App id is not a string.")},this.getSystemClasses=function(){var t=Core.inject("Container",[e]);return t.source(t,"."),t},Core.define("class",cls)}),Core(function Config(){function Property(e,n,r){function checkValue(e){for(var n=!0,r=0;r<o;r++)if(!t[o[r].f](e,o.args)){n=!1;break}return n}var o=[],i=[];this.get=function(){var e=n;if(t.isArray(e)){e=[];for(var r=0;r<n.length;r++)e.push(n[r])}return e},this.name=function(){return e},this.set=function(e){if(checkValue(e))if(t.isArray(e)){n=[];for(var r=0;r<e.length;r++)n.push(e[r])}else n=e;for(var r=0;r<i.length;r++)i[r].call(this,this.get());return this.get()},this.watch=function(e){if("function"!=typeof e)throw new Error("Can not set config property watcher. Argument f is not a function.");return i.push(e),n};for(var a in r)if(r.hasOwnProperty(a)){if(void 0===r[a])throw new Error("Wrong parameter for config property ["+a+"]");if(!t[a])throw new Error("No such config value checker as ["+a+"]");o.push({f:a,args:[r[a]]})}if("object"==typeof n&&null!==n&&!t.isArray(n))throw new Error("Objects are not supported as config property value!");if(!checkValue(n))throw new Error("Initial ["+e+"]'s value does not meet config requirements.")}var e={},t={isNumber:function(e){return"number"==typeof e},isString:function(e){return"string"==typeof e},isArray:function(e){return"object"==typeof e&&e.constructor===Array},custom:function(e,t){if("function"==typeof t[0])return t[0](e)},under:function(e,n){return t.isNumber(e)&&e<n[0]},greater:function(e,n){return t.isNumber(e)&&e>n[0]},eq:function(e,n){return t.isNumber(e)&&e===n[0]},isBool:function(e){return"boolean"==typeof e}};this.define=function(t,n,r){if("string"!=typeof t)throw new Error("Unable to define config property. Property name is not a string.");if(void 0===n)throw new Error("Config property value can not be undefined.");if(e[t])console.warn("Config property duplication on property name ["+t+"]");else try{e[t]=new Property(t,n,r)}catch(o){throw console.error("Unable to create config property ["+t+"]"),o}return e[t]},this.set=function(t,n){if("string"==typeof t&&e[t])return e[t].set(n);throw new Error("Unable to set property ["+t+"]. No such property.")},this.get=function(t){if("string"==typeof t)return e[t].get();throw new Error("Unable to get property ["+t+"]. No such property.")},this.watch=function(t,n){if("string"==typeof t){if("function"==typeof n){if(e[t])return e[t].watch(n);throw new Error("No such property as ["+t+"] to watch.")}throw new Error("Watcher callback is not a function")}throw new Error("Unable to watch config property. Property name is invalid or undefined")}}),Core(function Container(e,t){var n={},r={},o={};if(this.list=function(){return n},this.injection=function(e){var t=null,r=[];if("function"==typeof e){if(!e.name||!e.name.length)throw new Error("Anonymous function can not be injection constructor.");t=e}else{if("object"!=typeof e||e.constructor!==Array)throw new Error("Unknown type of injection config.");for(var o=0;o<e.length;o++){if("string"!=typeof e[o]||!e[o].length){if("function"==typeof e[o]&&e[o].name){t=e[o];break}throw new Error("Unknown type of injection name or constructor.")}r.push(e[o])}}r.push(t),n[t.name]&&console.warn("Injection ["+t.name+"] duplicated and has been overwritten"),n[t.name]=Core.inject("Injection",[r])},this.merge=function(t,r){if(t)try{for(var o in t)t.hasOwnProperty(o)&&Core.is(t[o],"Injection")&&(n[t[o].name()]&&console.warn("Injection ["+o+"] has been merged.s"),r?n[e[o].name()]=e[o].clone():n[e[o].name()]=e[o])}catch(i){throw new Error("Unable to merge libs.")}},this.source=function(e,t){if(e&&"object"==typeof e)if(Core.is(e,"Container")){if(t||(t=!1),"string"==typeof t&&t.length||t===!1){e.$$LOOP=!0;var n=!1;this.$LOOP&&(n=!0),delete e.$$LOOOP,r[t?t:"$$noprefix"]=Core.inject("Source",[t,e,n])}}else if(e.constructor===Array){for(var o=!0,n=[],i=0;i<e.length;i++)"object"==typeof e[i]&&Core.is(e[i],"Container")?(e[i].$$LOOOP=!0,this.$$LOOOP?n.push(!0):n.push(!1),delete e[i].$$LOOOP):o=!1;if(!o)throw new Error("Source container config is not valid. One of the containers provided is not an InjectionContainer instance");t||(t=!1),("string"==typeof t&&t.length||t===!1)&&(r[t?t:"$$noprefix"]=Core.inject("Source",[t,e,n]))}},this.clone=function(){var e={};for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t].clone());var o=Core.inject("Container",[e]);for(var i in r){for(var a=r[i].containers(),s=r[i].loop(),u=r[i].prefix(),c=[],l=0;l<a.length;l++)s[l]?c.push(o):c.push(a[l].clone());o.source(c,u)}return o},this.findSourceByPrefix=function(e){return e===!1?r.$$noprefix:"string"==typeof e?r[e]:null},this.findSourceByInjectionName=function(e){var t=null;if(o[e])return o[e];for(var n in r)if(r.hasOwnProperty(n)&&r[n].prefix()&&r[n].has(e)){t=r[n],o[e]=t;break}if(!t&&r.$$noprefix&&r.$$noprefix.has(e)&&(t=r.$$noprefix,o[e]=t),!t)throw new Error("Unable to find source containing injection ["+e+"]. ");return t},this.resolve=function(e,t){if("extend"===t){if(n[e]){for(var r={dependencies:[],$constructor:n[e].$constructor()},o=n[e].dependencies(),i=0;i<o.length;i++)if("@extend"===o[i])r.dependencies.push(n[e].extend(this));else if("@inject"===o[i])r.dependencies.push(n[e].inject(this));else{var a=this.findSourceByInjectionName(o[i]);if(!a)throw new Error("No source found containing ["+o[i]+"] for ["+e+"].");r.dependencies.push(a.resolve(o[i]))}return r}throw new Error("Unable to inject ["+e+"] no such injection found")}if(this.has(e)){for(var o=n[e].dependencies(),s=[],u=0;u<o.length;u++)if("@extend"===o[u])s.push(n[e].extend(this));else if("@inject"===o[u])s.push(n[e].inject(this));else{var c=this.findSourceByInjectionName(o[u]);if(!c)throw new Error("Injection ["+o[u]+"] for ["+e+"] source was not found.");s.push(c.resolve(o[u]))}return n[e].create(s,t)}throw new Error("Injection ["+e+"] was not found in library!")},this.resolveDirectInjection=function(e){var t=this.findSourceByInjectionName(e);return t?t.resolve(e,!0):t},this.has=function(e){return!!n[e]},this.get=function(e){return n[e]?n[e]:null},Core.is(e,"Injection"))n[e.name()]=e.clone();else if("object"==typeof e)for(var i in e)e.hasOwnProperty(i)&&Core.is(e[i],"Injection")&&(t?n[e[i].name()]=e[i]:n[e[i].name()]=e[i].clone());else if(void 0!==e)throw new Error("Unable to create container. Wrong arguments. Lib is Injection or object")}),Core(function Fonts(e,t){function fontString(t){if(!o)return!1;for(var n="",r=0;r<t.weight.length;r++)for(var u=0;u<t.style.length;u++){for(var c=e.get("fontDir")+"/"+t.name+"-"+t.weight[r]+"-"+t.style[u],l='@font-face {font-family: "'+s.format(t.name)+"-"+t.weight[r]+'";src:',f=0;f<i.length;f++)l+=a[i[f]](c,t.name,t.style[u]),l+=f<i.length-1?",":";";l+="font-weight: "+t.weight[r]+";",l+="font-style:"+t.style[u]+";}",t[t.weight[r]+"-"+t.style[u]]=l,n+=t[t.weight[r]+"-"+t.style[u]]}return n}function update(e){var t="";for(var o in r)r.hasOwnProperty(o)&&(t+=fontString(r[o],e));n.innerHTML=t}function inArray(e,t){for(var n=!1,r=0;r<e.length;r++)if(e[r]===t){n=!0;break}return n}var n=document.createElement("style"),r={},o=!1,i=e.define("fontFormats",["eot","svg","ttf","woff"],{isArray:!0,custom:function(e){for(var t=!0,n=0;n<e.length();n++)if("eot"!==e[n]||"svg"!==e[n]||"ttf"!==e[n]||"woff"!==e[n]){t=!1;break}return t}}).watch(function(e){o=!0,i=e,update()}),a={eot:function(e){return'url("'+e+'.eot?#iefix") format("embedded-opentype")'},woff:function(e){return'url("'+e+'.woff") format("woff")'},ttf:function(e){return'url("'+e+'.ttf") format("truetype")'},svg:function(e,t,n){return'url("'+e+".svg#"+t+"-"+(n.charAt(0).toUpperCase()+n.slice(1))+'") format("svg")'}},s=this;e.define("fontDir","./fonts",{isString:!0}),document.getElementsByTagName("head")[0].appendChild(n),this.font=function(e,t,n,o){r[t]||(r[t]={name:t}),r[t].weight||(r[t].weight=[]),r[t].style||(r[t].style=[]),inArray(r[t].weight,n)||r[t].weight.push(n),inArray(r[t].style,o)||r[t].style.push(o),update(e)},this.format=function(e){return t+"-"+e},this.formats=function(){for(var e=[],t=0;t<i.length;t++)e.push(i[t]);return e}}),Core(function Helpers(){function helper(t){try{var n=Core.inject("Injection",[t]);e[n.name()]&&console.warn("helper ["+n.name()+"] override."),e[n.name()]=n}catch(r){throw new Error("Unable to create Helper.")}}var e={},t={};Core.define("helper",helper),helper.system=function(n,r){try{var o=Core.inject("Injection",[n]);t[o.name()]&&console.warn("System Helper ["+o.name()+"] Duplicate declaration override."),t[o.name()]=o,r&&(e[o.name()]?console.warn("System Helper ["+o.name()+"] overrides user helper. Skipped system helper."):e[o.name()]=o)}catch(i){}},this.getSystemHelpers=function(e){var n=Core.inject("Container",[t]);return n.source(n,"+"),n.source(e,"@"),n},this.getPublicHelpers=function(t){var n=Core.inject("Container",[e]);return n.source(n,"+"),n.source(t,"@"),n}}),Core(function Injection(e,t){var n=e,r=null,o=[],i=this;if(t){if("object"!=typeof e)throw new Error("Unable to create PreResolvedInjection! con argument is not an object!");n=e.constructor,r=e,o=[]}else{if("function"==typeof e&&e.name)n=e;else if("object"==typeof e&&e.constructor===Array)for(var a=0;a<e.length;a++)if("string"==typeof e[a]&&e[a].length)o.push(e[a]);else if("function"==typeof e[a]&&e[a].name){n=e[a];break}if(!n)throw new Error("Injection constructor undefined!")}this.name=function(){return n.name},this.dependencies=function(){for(var e=[],t=0;t<o.length;t++)e.push(o[t]);return e},this.extend=function(e){if(t)throw new Error("You can not extend with ["+n.name+"]!");return function(t,n){if("object"!=typeof t)throw new Error("Extend target should be an object!");if("string"!=typeof n)throw new Error("Extend class name should be a string!");var r=e.findSourceByInjectionName(n);if(!r)throw new Error("Unable to find injection ["+n+"] for ["+i.name()+"]");var o=r.resolveInjectionDependancies(n);o.$constructor.apply(t,o.dependencies)}},this.inject=function(e){if(t)throw new Error("You can not inject ["+n.name+"] directly");return function(t){return e.resolveDirectInjection(t)}},this.create=function(e,o){return t?r:o?(e.unshift(null),new(Function.prototype.bind.apply(n,e))):(r||(e.unshift(null),r=new(Function.prototype.bind.apply(n,e))),r)},this.$constructor=function(){return n},this.clone=function(){return new Injection(e,t)}}),Core(function Root(){function createApplication(o){var i=Core.inject("Container",[e[o]]),a=Core.inject("Ticker"),s=Core.inject("Canvas",[a]),u=Core.inject("Audio",[]),c=Core.inject("Config",[o]),l=Core.inject("Fonts",[c,o]),f=Core.inject("Application",[s,a,c]),h={};h.Ticker=Core.inject("Injection",[a,!0]),h.Canvas=Core.inject("Injection",[s,!0]),h.API=Core.inject("Injection",[f,!0]),h.Fonts=Core.inject("Injection",[l,!0]),h.Config=Core.inject("Injection",[c,!0]),h.Audio=Core.inject("Injection",[u,!0]);var p=Core.inject("Container",[h]),v=r.getSystemHelpers(p),g=r.getPublicHelpers(p),d=n.getApplicationClasses(o),y=n.getSystemClasses(o),m=t.getApplicationServices(v,y,p);i.source(m,!1),i.source(d,"."),i.source(g,"+"),i.source(p,"@");for(var b=0;b<m.length;b++)for(var w=m[b].list(),C=0;C<w.length;C++)m[b].resolve(w[C]);return i.resolve(o),f}var e={},t=Core.get("Services"),n=Core.get("Classes"),r=Core.get("Helpers");Core.define("app",function(t){try{var n=Core.inject("Injection",[t]);e[n.name()]&&console.warn("Application ["+n.name()+"] override. Remove duplicates"),e[n.name()]=n}catch(r){throw console.error("Unable to register Application constructor."),r}}),Core.define("run",function(t){if("string"==typeof t){if(e[t])return createApplication(t);throw new Error("Application ["+t+"] not found.")}throw new Error("Unable to get app. App Id is not a string")})}),Core(function Services(){function service(t){if("object"==typeof t&&t.constructor===Array){for(var n=null,r=0;r<t.length;r++)if("function"==typeof t[r])n=t[r].name;else if("string"!=typeof t[r])throw new Error("Unable to create service. Invalid config");n&&(e[n]&&console.warn("Duplicate declaration. Service ["+n+"] has been overwritten"),e[n]=Core.inject("Injection",[t]))}else if("function"==typeof t){if(!t.name)throw new Error("Unable to create service. Constructor is not a named function.");e[t.name]&&console.warn("Duplicate declaration. Service ["+n+"] has been overwritten"),e[t.name]=Core.inject("Injection",[t])}}function plugin(e,t){if("string"!=typeof e)throw new Error("Unable to create plugin. Invalid arguments.");if("object"==typeof t&&t.constructor===Array){for(var r=null,o=0;o<t.length;o++)if("function"==typeof t[o])r=t[o].name;else if("string"!=typeof t[o])throw new Error("Unable to create plugin. Invalid constructor arguments");if(!r)throw new Error("Unable to create plugin. Constructor is not a named function");n[e]||(n[e]={}),n[e][r]&&console.warn("Plugin duplicated. ["+r+"] has been overwritten"),n[e][r]=Core.inject("Injection",[t])}}function getPluginManager(e){function Plugins(){for(var t=[],n=0;n<e.length;n++){var r=e[n].list();for(var o in r)r[o].$constructor()!==Plugins&&t.push(o)}this.each=function(e){for(var n=0;n<t.length;n++)e(t[n]);return this},this.list=function(){for(var e=[],n=0;n<t.length;n++)e.push(t[n]);return e}}return Core.inject("Container",[Core.inject("Injection",[Plugins])])}var e={},t={},n={},r={};plugin["class"]=function(e,t,n){if("string"==typeof e){if("string"!=typeof t)throw new Error("Unable to create plugin. Invalid arguments.");if("object"==typeof n&&n.constructor===Array){for(var o=null,i=0;i<n.length;i++)if("function"==typeof n[i])o=n[i].name;else if("string"!=typeof n[i])throw new Error("Unable to create plugin class. Invalid constructor arguments");if(!o)throw new Error("Unable to create plugin. Constructor is not a named function");r[e]||(r[e]={}),r[e][t]||(r[e][t]={}),r[e][t][o]&&console.warn("Plugin class duplicated. ["+o+"] has been overwritten"),r[e][t][o]=Core.inject("Injection",[n])}else{if("function"!=typeof n)throw new Error("Unable to register plugin class. Invalid arguments");n.name&&(r[e]||(r[e]={}),r[e][t]||(r[e][t]={}),r[e][t][n.name]&&console.warn("Plugin class duplicated. ["+n.name+"] has been overwritten"),r[e][t][n.name]=Core.inject("Injection",[n]))}}},service["class"]=function(e,n){var r=null;if("string"!=typeof e)throw new Error("Unable to create class. Invalid arguments");if("function"==typeof n){if(!n.name)throw new Error("Unable to create class for extension ["+e+"]. Constructor is not a named function");t[e]||(t[e]={}),t[e][n.name]=Core.inject("Injection",[n])}else if("object"==typeof n&&n.constructor===Array){for(var o=0;o<n.length;o++)if("function"==typeof n[o])r=n[o].name;else if("string"!=typeof n[o])throw new Error("Unable to create class for service["+e+"]. Invalid config.");r&&(t[e]||(t[e]={}),t[e][r]&&console.warn("Duplicate declaration. Class ["+r+"] for extension ["+e+"] has been overwritten"),t[e][r]=Core.inject("Injection",[n]))}},Core.define("service",service),Core.define("plugin",plugin),this.getApplicationServices=function(o,i,a){var s,u,c={},l={},f={},h={};for(var p in e)if(e.hasOwnProperty(p)){s=Core.inject("Container",[e[p]]);var v=[];if(n[p])for(var g in n[p])if(n[p].hasOwnProperty(g)){if(u=Core.inject("Container",[n[p][g]]),f[p]||(f[p]={}),f[p][g]=u,r[p][g]){var d=Core.inject("Container",[r[p][g]]);h[p]||(h[p]={}),h[p][g]=d,u.source(d,"$"),d.source(d,"$"),d.source(i,"."),d.source(o,"+")}u.source(i,"."),u.source(o,"+"),v.push(u)}if(v.push(getPluginManager(v)),s.source(v,"<"),s.source(i,"."),s.source(o,"+"),s.source(a,"@"),t[p]){var y=Core.inject("Container",[t[p]]);s.source(y,"$"),y.source(y,"$"),y.source(i,"."),y.source(v,"<"),y.source(o,"+"),y.source(a,"@"),l[p]=y}else l[p]=null;c[p]=s}for(var m in c)if(c.hasOwnProperty(m)){var b=[];for(var w in c)c.hasOwnProperty(w)&&m!==w&&b.push(c[w]);if(c[m].source(b,!1),l[m]&&l[m].source(b,!1),f[m])for(var C in f[m])f[m].hasOwnProperty(C)&&f[m][C].source(b,!1);if(h[m])for(var A in h[m])h[m].hasOwnProperty(A)&&h[m][A].source(b,!1)}var x=[];for(var j in c)c.hasOwnProperty(j)&&x.push(c[j]);return o.source(x,!1),x}}),Core(function Source(e,t,n){function stripPrefix(t){if(e){for(var n="",o=0;o<t.length;o++)o>=r.length&&(n+=t[o]);return n}return t}var r=!!e&&e,o=[],i={},a={};if("object"==typeof t)if(Core.is(t,"Container"))o=[t];else{if(t.constructor!==Array)throw new Error("Invalid type if container!");for(var s=!0,u=0;u<t.length;u++){if(!Core.is(t[u],"Container")){s=!1;break}o.push(t[u])}if(0===t.length&&(s=!1),!s)throw new Error("Container array is empty!")}this.check=function(t){if(a[t])return a[t];var n=!0;if(e)for(var r=0;r<e.length;r++)t[r]&&t[r]===e[r]||(n=!1);return a[t]=n,n},this.has=function(e){var t=!1;if(i[e])return!0;if(this.check(e))for(var n=0;n<o.length;n++){var r=stripPrefix(e);if(o[n].has(r)){t=!0,i[e]=o[n];break}}return t},this.loop=function(){return n},this.containers=function(){return o},this.source=function(){for(var e=0;e<o.length;e++)o[e].source.apply(o[e],arguments)},this.prefix=function(e){return void 0!==e?e===r:r},this.resolve=function(e,t){var n=null;if(this.has(e)){var r=null,a=stripPrefix(e);i[e]&&(r=i[e]);for(var s=0;s<o.length;s++)o[s].has(a)&&(r=o[s]);r&&(n=r.resolve(a,t))}return n},this.resolveInjectionDependancies=function(e){var t=null,n=null;if(i[e])return n=stripPrefix(e),i[e].resolve(n,"extend");if(this.has(e)){n=stripPrefix(e);for(var r=0;r<o.length;r++)o[r].has(n)&&(t=o[r],i[e]=o[r]);if(t)return t.resolve(n,"extend")}}}),Core(function Ticker(){function resolve(e,t){var n=[];if("object"==typeof t&&t.constructor===Array?n=t:void 0!==t&&n.push(t),"string"!=typeof e||!e.length)throw new Error("Unable to resolve event. Event parameter is not a string or empty");if(!s[e])throw new Error("Unable to resolve event ["+e+"]. No such event.");for(var r=0;r<s[e].length;r++)s[e][r].apply(u,n)}var e=(1e3/58.8).toFixed(2),t=[],n=0,r=[null,0],o=function(){for(var e=0;e<t.length;e++)try{t[e].f.apply(u,r)}catch(o){throw new Error("Error emerged while resolving callbacks.\nQueue   : ["+t[e].o+"]\nOrder   : ["+e+"]\nName    : ["+t[e].f.name+"].\nMessage : "+o.message)}n++},i=function(){r[0]=new Date,r[1]=n;try{o()}catch(e){throw clearInterval(a),resolve("error",e),new Error("Unable to run ticker anymore. Error emerged during app ticker progress.\n Frame :"+n+"\nDate  : "+r[0]+"\n"+e.message)}},a=null,s={stop:[],start:[],error:[]},u=this;this.on=function(e,t){if("string"!=typeof e||!e.length)throw new Error("Unable to set event. Event argument is not a string or empty.");if(!s[e])throw new Error("Unable to set event ["+e+"] handler. No such event.");if("function"!=typeof t)throw new Error("Unable to set event ["+e+"]. Callback is not a function.");return s[e].push(t),this},this.stop=function(){return a&&(n=0,clearInterval(a),a=null,resolve("stop",this)),this},this.start=function(){return a||(a=setInterval(i,e),resolve("start",this)),this},this.fps=function(t){return"number"!=typeof t?(1e3/e).toFixed(2):(t>60&&(t=60),t<=0&&(t=1),e=(1e3/t).toFixed(2),a&&(this.stop(),this.start()),this)},this.queue=function(e,n){if("function"==typeof e){if(!e.name)throw new Error("Unable to set callback. Callback is not a named function.");t.push({o:0,f:n})}else{if("number"!=typeof e)throw new Error("Unable to create callback. Wrong arguments passed");if("function"!=typeof n)throw new Error("Unable to queue. callback is not a function");if(!n.name)throw new Error("Unable to set callback. Callback is not a named function.");t.push({o:e,f:n})}return t.sort(function(e,t){return e.o>t.o}),this}}),$R.plugin("Objects",["@inject","Debug",function Animation(e,t){function findCompetitor(e,t){t.$$SELF=!0;for(var r=null,o=0;o<n.length;o++)if(!n[o].$$SELF&&n[o].active()&&!n[o].done()){for(var i=!1,a=0;a<e.length;a++)if(n[o].hasProperty(e[a])){i=!0;break}i&&(r||(r=[]),r.push(n[o]))}return delete t.$$SELF,r}function CheckAnimationQueue(){for(var e=[],t=0;t<n.length;t++)if(n[t].active())n[t].done()||e.push(n[t]);else{var r=n[t].properties();if(n[t].queue())findCompetitor(r,n[t])||n[t].start();else{var o=findCompetitor(r,n[t]);if(o)for(var i=0;i<o.length;i++)for(var a=0;a<r.length;a++)o[i].stop(r[a]);n[t].start()}e.push(n[t])}n=e}function CreateAnimationType1(t,r,i,a){var s=this.extension("Style"),u={};if(u[t]=r,o[t]){var c=[{ordering:s.ordering(t),morph:o[t],value:r}],l={};i&&"number"==typeof i&&(l.duration=i),a&&"string"==typeof a&&(l.easing=a);var f=e("$Animation");f.config(this,c,l,CheckAnimationQueue),n.push(f)}}function CreateAnimationType2(r,i,a){var s=this.extension("Style"),u={};"object"==typeof i?u=i:"number"==typeof i?(u={duration:i},"string"==typeof a&&(u.easing=a)):"string"==typeof i&&(u={easing:i});var c={};for(var l in r)r.hasOwnProperty(l)&&(o[l]?c[l]={ordering:s.ordering(l),morph:o[l],value:r[l]}:t.warn({type:this.type(),property:l},"Property {property} of {type} can not be animated!"));var f=[];for(var h in c)f.push(c[h]);if(f.sort(function(e,t){return e.ordering-t.ordering}),f.length){var p=e("$Animation");p.config(this,f,u,CheckAnimationQueue),n.push(p)}else t.warn("No properties to animate!")}var n=[],r=!1,o={};this.morph=function(t,n,r,i){var a=e("$Morph");a.config(t,this.object(),n,r,i),a.valid()&&(o[t]=a)},this.extractMorph=function(e){return o[e]},this.register("animate",function(e,n,r,o){"string"==typeof e&&n?CreateAnimationType1.apply(this,arguments):"object"==typeof e&&e.constructor!==Array?CreateAnimationType2.apply(this,arguments):t.warn("Unable to create animation. Wrong arguments"),CheckAnimationQueue()}),this.register("animated",function(){return r}),this.register("stop",function(e){for(var t=0;t<n.length;t++)n[t].stop(e)})}]),$R.plugin("Objects",["Debug","@inject",function Box(e,t){function BoxWrapperFunc(){if(n&&o)return n.call(o,r),r}var n=null,r=t("$Box");this.f=function(t){return"function"!=typeof t?void e.error("Box Extension / Box function is not a function!"):(n=t,void delete this.f)};var o=this.object();this.box=function(){return o.extension("Cache").value("box",BoxWrapperFunc)},this.purge=function(){o.extension("Cache").purge("box");var e=o.parent();e&&e.extension("Box").purge()},this.register("box",function(){return this.extension("Cache").value("box",BoxWrapperFunc).get()})}]),$R.plugin("Objects",["Debug",function Cache(e){var t={};this.value=function(n,r){return"string"!=typeof n?void e.error("Object Value Cache / name is not a string!"):"function"!=typeof r?void e.error("Object Value Cache / func is not a function"):(t[n]||(t[n]={value:r(),func:r,relevant:!0}),this.get(n))},this.purge=function(n){return"string"!=typeof n?void e.error("Object Value Cache / Can not purge cache of non string name"):void(t[n]&&(t[n].relevant=!1))},this.get=function(n){return"string"!=typeof n?void e.error("Object Value Cache / Can not get value of non-string name"):t[n]?(t[n].relevant||(t[n].value=t[n].func(),t[n].relevant=!0),t[n].value):void 0}}]),$R.plugin("Objects",["Debug",function Drawer(e){function resolve(e,t){for(var n=0;n<r[e].length;n++)r[e].apply(o,t)}var t=null,n=null,r={before:[],after:[]},o=this.object();this.f=function(n){return"function"!=typeof n?(e.error({},"ObjectDrawer / func is not a function!"),void delete this.f):(t=n,void delete this.f)},this.register("before",function(t){"function"==typeof t?r.before.push(t):e.warn("Unable to set event [before Render]. func is not a Function")}),this.register("after",function(t){"function"==typeof t?r.after.push(t):e.warn("Unable to set event [after Render]. func is not a Function")}),this.matrix=function(){return n},this.draw=function(){resolve("before",arguments),t&&t.apply(this,arguments),resolve("after",arguments)}}]),$R.plugin("Objects",["Debug",function Layers(e){var t={0:[]},n=0;this.register("layer",function(t){if(void 0===t)return n;if("number"!=typeof t||t<0)return e.warn({n:t},"Value {n} is not a number or less than 0"),this;var r=this.parent();if(r){var o=r.extension("Layers");n=t,o.place(t,this)}else e.warn({},"You try to set layer of root group!");return this}),this.place=function(e,n){n.$$LAYERSEARCHVALUE=!0;for(var r in t)if(t.hasOwnProperty(r)){for(var o=!1,i=0;i<t[r].length;i++)if(t[r][i].$$LAYERSEARCHVALUE){t[r].splice(i,1),o=!0;break}if(o)break}delete n.$$LAYERSEARCHVALUE,t[e]||(t[e]=[]),t[e].push(n)},this.remove=function(e){e.$$LAYERSEARCHVALUE=!0;for(var n in t)if(t.hasOwnProperty(n)){for(var r=!1,o=0;o<t[n].length;o++)if(t[n][o].$$LAYERSEARCHVALUE){r=!0,t[n].splice(o,1);break}if(r)break}},this.forEach=function(e){for(var n in t)for(var r=0;r<t[n].length;r++)e.apply(t[n][r],[r,n])},this.layers=function(){return t}}]),$R.plugin("Objects",["Debug",function Matrix(e){function MatrixWrapper(){return t.call(n)}var t=null,n=this.object();this.f=function(e){"function"==typeof e&&(t=e,delete this.f)},this.register("matrix",function(){return this.extension("Cache").value("transformMatrix",MatrixWrapper)}),this.purge=function(){if(n.extension("Cache").purge("transformMatrix"),"Group"===n.type()){var e=n.extension("Layers");e.forEach(function(){this.extension("Cache").purge("transformMatrix")})}}}]),$R.plugin("Objects",["+Mouse","Dispatcher","Tree","Debug",function Mouse(e,t,n,r){function GetEventArray(e){return o[e]}var o={dragmove:[],dragstart:[],dragend:[],mousemove:[],mouseup:[],mousedown:[],mouseenter:[],mouseleave:[]},i=!1,a=function(){return!1};this.register("on",function(e,t){
if(void 0===typeof e&&void 0===typeof t){for(var n in o)o[n].$OFF=!1;return this}if("string"==typeof e&&void 0===t){var i=GetEventArray(e);return i&&(i[n].$OFF=!1),this}if("string"==typeof e&&"function"==typeof t){var i=GetEventArray(e);return i?i.push(t):r.warn({e:e},"There is no event [{e}]"),this}return GetEventArray(e)?"function"!=typeof t?(r.warn({e:e,f:t},"Unable to set event handler for {[e]}. {[f]} is not a function!"),this):this:(r.warn({e:e},"Unable to set event handler for {[e]}. No such event found!"),this)}),this.register("off",function(e,t){if(void 0===e&&void 0===t){for(var n in o)o[n].$$OFF=!0;return this}if("string"==typeof e&&void 0===t){var i=GetEventArray(e);return i&&(i.$$OFF=!0),this}if("string"==typeof e&&"function"==typeof t){var i=GetEventArray(e);if(t.$$MOUSEFUNCSEARCH=!0,i){for(var a=null,n=0;n<i.length;n++)if(i[n].$$MOUSEFUNCSEARCH){a=n;break}return null!==a&&i.splice(a,1),this}}return GetEventArray(e)||r.warn({e:e},"Unable to uset event handler for {[e]}. no such event"),"function"!=typeof t&&r.warn({e:e,f:t},"Unable to unset function {[f]} from event {[e]}. Not a function!"),this}),this.register("mouseCheckFunction",function(t){return"string"==typeof t?(e[t+"CheckFunction"]&&(a=e[t+"UserCheckFunction"]),this):"function"!=typeof t?(r.warn({f:t},"Unable to set check function! {[f]} is not a function!"),this):(a=t,this)}),this.register("disable",function(){return i=!0,this}),this.register("enable",function(){return i=!1,this}),this.register("disabled",function(){return i}),this.check=function(e,t){return!i&&a.call(e,[t[0],t[1]])};var s=null;this.cursorTransformFunction=function(e){"function"==typeof e&&(s=e)},this.applyCursorTransform=function(e){return s?s.call(this,e):e},this.hasEvent=function(e){return o[e]&&o[e].length&&!o[e].$$OFF},this.propagate=function(e,t){var n=e.parent();if(n){var r=n.extension("Mouse");if(r.hasEvent(t.type())){var o=t.type(),i=t.originalTarget.call({$$MOUSEPROPAGATIONSETTER:n});r.resolve(n,o,i)}}},this.resolve=function(e,t,n){if(!i){var o=GetEventArray(t);if(o){if(o.$OFF)return;for(var a=0;a<o.length;a++)o[a].call(e,n);n.propagate()&&this.propagate(e,n)}else r.warn({e:t},"Unable to resolve event [{e}]. No such event!")}};for(var u in o)o[u].$$OFF=!1}]),$R.plugin("Objects",["Debug",function Offset(e){function ObjectOffsetFunction(){var e=n.get("position"),r=[e[0],e[1]],o=t.parent();if(o){var i=o.offset();r[0]+=i[0],r[1]+=i[1]}return r}var t=this.object(),n=null,r=null;this.purge=function(){if(n&&r||(n=t.extension("Style"),r=t.extension("Cache")),r.purge("offset"),"Group"==t.type()){var e=t.extension("Layers");e.forEach(function(){this.extension("Offset").purge()})}},this.register("offset",function(){return n||(n=this.extension("Style"),r=this.extension("Cache")),r.value("offset",ObjectOffsetFunction)})}]),$R.plugin("Objects",["Debug",function Style(e){function GetSetterFunction(r,o){return function(i){var a=o.apply(this,[i,t[r].value]),s=t[r].value;if(a||"boolean"!=typeof a){var u=[s,a];t[r].value=a,n[r]||(n[r]=[]);for(var c=0;c<n[r].length;c++)n[r][c].apply(this,u)}else e.warn("Unable to set property ["+r+"]. Invalid value!")}}function GetGetterFunction(e,n){return function(){return n.call(null,t[e].value)}}function StyleType1(t,n){var o=this;r[t]?r[t].apply(o,[n]):e.warn({property:t,type:o.type()},"Style / Object type {type} has no property {property}")}function StyleType2(n){var o=this,i=[];for(var a in n)n.hasOwnProperty(a)&&r[a]&&(r[a]?i.push({ordering:t[a].ordering,property:a,setter:r[a]}):e.warn({property:a,type:o.type()},"Style / Object type {type} has no property {property}"));if(i.length){i.sort(function(e,t){return e.ordering-t.ordering});for(var s=0;s<i.length;s++)i[s].setter.apply(o,[n[i[s].property]])}else e.warn("Style / No properties to be applied!")}function StyleType3(n){var r=this;return o[n]?o[n].apply(r,[t[n].value]):(e.warn({property:property,type:r.type()},"Style / Object type {type} has no property {property}"),this)}var t={},n=[],r={},o={};this.register("style",function(t,n){if("string"==typeof t&&void 0!==n)StyleType1.apply(this,[t,n]);else if("object"==typeof t)StyleType2.apply(this,[t]);else{if("string"==typeof t&&void 0===n)return StyleType3.apply(this,[t]);e.error("Style / Invalid style function arguments!")}return this}),this.register("watch",function(t,r){if("string"!=typeof t){if("object"!=typeof t||t.constructor!==Array)return void e.error("Style / Property is not an array or string")}else if("function"!=typeof r)return void e.error("Style / Callback is not a function!");if(t.constructor===Array)for(var o=0;o<t.length;o++)"string"==typeof t[o]?(n[t[o]]&&"object"==typeof n[t[o]]&&n[t[o]].constructor===Array||(n[t[o]]=[]),n[t[o]].push(r)):e.error({i:o},"Style / Property {i} is not a string!");else"string"==typeof t?(n[t]&&n[t].constructor===Array||(n[t]=[]),n[t].push(r)):e.error("Style / Property is not an array or string")}),this.define=function(n,i,a,s,u){return t[i]?void e.error({name:i},"Style / Duplicated Property [{name}]"):"string"!=typeof i||0===i.length?void e.error("Style / Property name is not a string!"):"function"!=typeof u||"function"!=typeof s?void e.error("Style / Unable to define property. Getter or setter is undefined!"):("number"!=typeof n&&e.error("Style / Unable to define property setter ordering!"),t[i]={ordering:n,value:a},r[i]=GetSetterFunction(i,s),void(o[i]=GetGetterFunction(i,u)))},this.get=function(n){return t[n]?t[n].value:(e.warn("Getting value of property that does not exist!"),!1)},this.ordering=function(n){return t[n]?t[n].ordering:(e.warn("Getting ordering of property that does not exist!"),!1)}}]),$R.plugin("Objects",["Debug","+Model","@inject",function Text(e,t,n,r){this.applyTo("Text");var o=this.object();if("Text"===o.type()){var a=[],s=/((\S+\s+)|(\S+$))/g,u=o.extension("Style"),c="",l=!1,f=[1/0,1/0],h=0,p=0;this.register("lines",function(){this.update();for(var e=[],t=0;t<a.length;t++)e.push(a[t].string())}),this.register("words",function(){this.update();for(var e=[],t=0;t<a.length;t++)for(var n=a[i].words(),r=0;r<n.length;r++)e.push(n.string());return e}),this.limits=function(e,t){f[0]=e,f[1]=t,l=!0},o.watch("str",function(e,t){t!==c&&(c=t)}),o.watch(["str","fontSize","lineHeight","color","weight","style"],function(){l=!0}),this.update=function(e){if(l||e){var t=c.match(s),r=0,o=0,i=u.get("size"),f=0,v=u.get("systemFont"),g=u.get("fontSize"),d=u.get("lineHeight"),y=u.get("weight"),m=u.get("color"),b=u.get("style");a=[];for(var w=0;w<t.length;w++){var C=t[w].match(/\n/g),A=t[w].match(/\S+/g),x=n("$TextWordClass").string(A[0]);a[o]||(a[o]=n("$TextLineClass").font(v).size(g).height(d).color(m).style(b).weight(y)),a[o].push(x),r=a[o].width(),(r>=i[0]||C)&&o++,r>f&&(f=r+4)}p=a.length*u.get("lineHeight"),g>d?p+=g-d:g<d&&(p-=d-g),h=f,l=!1}return this},this.textBlockHeight=function(){return this.update(),p},this.textBlockWidth=function(){return this.update(),h},this.forEachLine=function(e){this.update();for(var t=0;t<a.length;t++)e.apply(a[t],[t,a[t]])}}}]),$R.plugin("Objects",["Debug",function Tree(e){function checkTree(e){return!!e.$$TREESEARCHVALUE||!!e.parent()&&!!checkTree(e.parent())}function treeViolation(t,n){return"Group"===t.type()?(n.$$TREESEARCHVALUE=!0,checkTree(t)?(t.$$TREESEARCHVALUE?t.parent()&&e.warn({},"You try to append group parent into itself."):e.warn({},"You try to append group parent into it's children."),delete n.$$TREESEARCHVALUE,!0):(delete n.$$TREESEARCHVALUE,!1)):"Group"!==t.type()?(e.warn({target:t.type(),object:n.type()},"Yoy try to append [{object}] into [{target}]."),!0):void 0}var t=null,n=null;this.register("append",function(t){if("Group"!==this.type())e.watch({type:this.type()}," Can not append. type[{type}] of parent is not allowed!");else if(!treeViolation(this,t)){n||(n=this.extension("Layers"));var r=t.parent(),o=t.extension("Tree");if(r){var i=r.extension("Layers"),a=t.layer();i.remove(t),n.place(a,t),o.parent(this)}else{var a=t.layer();n.place(a,t),o.parent(this)}var s=this.extension("Box");s.purge()}return this}),this.register("appendTo",function(e){return e.append(this),this}),this.register("parent",function(){return t}),this.parent=function(n){return n.type&&"Group"===n.type()||e.error("Object Tree Extension / Unable to set object as parent. Not a group!"),n?void(t=n):t}}]),$R.service(["@Canvas","@Config","Debug",function Canvas(Canvas,e,t){function compareOnResize(e){if("%"!==a&&"%"!==s)return i[0]=r,i[1]=o,Canvas.size(i[0],i[1]),!1;var t=h,n=p;Canvas.size(0,0),v&&clearTimeout(v),v=setTimeout(function(){var u=Canvas.element().parentNode,c=window.getComputedStyle(u,null);p=parseInt(c.getPropertyValue("height")),h=parseInt(c.getPropertyValue("width")),t!==h&&"%"===a&&t!==h&&(i[0]=Math.floor(h*(r/100))),n!==p&&"%"===s&&(i[1]=Math.floor(p*(o/100))),Canvas.size(i[0],i[1]),v=null,e()},200)}function GetCanvasOffset(e){var t=e?"offsetLeft":"offsetTop",n=0,r=Canvas.element();do isNaN(r[t])||(n+=r[t]);while(r=r.offsetParent);return n}function WindowResizeCallback(){l&&compareOnResize(function(){u[0]=GetCanvasOffset(0),u[1]=GetCanvasOffset(1);for(var e=0;e<n.length;e++)n[e](i[0],i[1]);ResolveCanvasEventArray("canvasresize",[new RCanvasResizeEvent])})}function CanvasSwitchCallback(){u[0]=GetCanvasOffset(0),u[1]=GetCanvasOffset(1),ResolveCanvasEventArray("canvasswitch",[new RCanvasSwitchEvent]),WindowResizeCallback()}function GetCanvasEventArray(e){return g[e]}function ResolveCanvasEventArray(e,n){if("object"!=typeof n||n.constructor!==Array)return void t.warn({e:e},"Canvas : unable to resolve event array [{e}]. Data is not an array!");var r=GetCanvasEventArray(e);if(!r)return void t.warn({e:e},"Unable to resolve event [{e}] no such event!");for(var o=0;o<r.length;o++)r[o].apply(f,n)}function GetMouseRelativePosition(e){return[e.pageX-u[0]-c[0],e.pageY-u[1]-c[1]]}function RCanvasMouse(e){this.page=[e.pageX,e.pageY],this.sceen=[e.pageX-c[0],e.pageY-c[1]],this.position=GetMouseRelativePosition(e)}function RCanvasMouseEvent(e){this.original=e,this.type=e.type,this.mouse=new RCanvasMouse(e),this.canvas=f}function RCanvasResizeEvent(){this.type="canvasresize",this.canvas=f,this.offset=[u[0],u[1]],this.size=[r,o],this.original=[r,o],this.units=[a,s],"%"===a&&(this.size[0]=h*(r/100)),"%"===s&&(this.size[1]=p*(o/100))}function RCanvasSwitchEvent(){this.type="canvasswitch",this.canvas=f,this.offset=[u[0],u[1]],this.size=[r,o],this.original=[r,o],this.units=[a,s],"%"===a&&(this.size[0]=h*(r/100)),"%"===s&&(this.size[1]=p*(o/100))}var n=[],r=0,o=0,i=[0,0],a="px",s="px",u=[0,0],c=[0,0],l=Canvas.element(),f=this;e.define("size",[0,0],{isArray:!0,custom:function(e){if(!("string"!=typeof e[0]&&typeof e[0]!==Array||"string"!=typeof e[0]&&"number"!=typeof e[1]))return!0}}).watch(function(e){"number"==typeof e[0]?r=e[0]:"string"==typeof e[0]?e[0].match(/^[\d]+%$/)?(r=parseInt(e[0]),a="%"):(r=1e3,a="px",t.warn({width:e[0]},"{width} is not a valid value for canvas.size[0]. Width set as 1000px")):(r=1e3,t.warn({width:e[0]},"{width} is not a valid value for canvas.size[0]. Width set as 1000px")),"number"==typeof e[1]?o=e[1]:"string"==typeof e[1]&&e[1].match(/^[\d]+%$/)?(o=parseInt(e[1]),s="%"):(o=800,t.warn({height:e[1]},"{height} is not a valid value for canvas.size[1]. Width set as 800px")),WindowResizeCallback()});var h=0,p=0,v=null;this.resize=function(e){"function"==typeof e&&n.push(e)},this.width=function(){return"%"===a?h*(r/100):r},this.height=function(){return"%"===a?p*(o/100):o};var g={mousemove:[],mousedown:[],mouseup:[],mouseleave:[],mouseenter:[],canvasresize:[],canvasswitch:[]};this.on=function(e,n){var r=GetCanvasEventArray(e);return r?("function"!=typeof n&&t.warn({f:e},"Canvas : Unable to set event handler [{f}]"),void r.push(n)):void t.warn({e:e},"Canvas : Unable to set event handler for event [{e}]")};var d={mousemove:function(e){ResolveCanvasEventArray("mousemove",[new RCanvasMouseEvent(e)])},mousedown:function(e){ResolveCanvasEventArray("mousedown",[new RCanvasMouseEvent(e)])},mouseup:function(e){ResolveCanvasEventArray("mouseup",[new RCanvasMouseEvent(e)])},mouseleave:function(e){ResolveCanvasEventArray("mouseleave",[new RCanvasMouseEvent(e)])},mouseenter:function(e){ResolveCanvasEventArray("mouseenter",[new RCanvasMouseEvent(e)])}};Canvas["switch"](function(){if(l)for(var e in d)d.hasOwnProperty(e)&&l.removeEventListener(e,d[e]);l=this.element();for(var e in d)d.hasOwnProperty(e)&&l.addEventListener(e,d[e]);CanvasSwitchCallback()}),window.addEventListener("scroll",function(){c[1]=window.pageXOffset||document.documentElement.scrollLeft,c[0]=window.pageYOffset||document.documentElement.scrollTop}),window.addEventListener("resize",WindowResizeCallback)}]),$R.service(["@Config",function Debug(e){function ResolveEvent(e,t){var n=null;"error"===e&&(n=i),"message"===e&&(n=a);for(var r=0;r<n.length;r++)n[r](t)}function GetMessage(e,o,i){o=o.toString();var a=o.match(n),s={};if(a)for(var u=0;u<a.length;u++){var c=a[u].match(r)[0];c&&(s[c]={replace:a[u],data:e[c].toString()})}for(var l in s)s.hasOwnProperty(l)&&(o=o.replace(s[l].replace,s[l].data));return o=t+o,i&&i.constructor&&i.constructor.name&&(o="["+i.constructor.name+"] : "+o),o}var t="$R [Debug] : ",n=/{[a-zA-Z]+}/g,r=/[a-zA-Z]+/g,o=e.define("warnings",!1,{isBool:!0},function(e){o=e}),i=[],a=[];this.on=function(e,t){"function"==typeof t&&("error"===e&&i.push(t),"message"===e&&a.push(t))},this.error=function(e,t,n){throw"string"==typeof e&&(n=t,t=e,e={}),t=GetMessage(e,t,n),ResolveEvent("error",t),new Error(t)},this.warn=function(e,t,n){o&&("string"==typeof e&&(n=t,t=e,e={}),t=GetMessage(e,t,n),ResolveEvent("message",t),console.warn(t))}}]),$R.service(["@Canvas","Canvas","@Ticker","$Finder",function Dispatcher(e,t,n,r){function DefaultREvent(e,t){var n=e,r=!0,o=t,i=t;this.type=function(){return n},this.date=new Date,this.stopPropagation=function(){r=!1},this.propagate=function(){return r},this.target=function(){return o},this.propagated=function(){o.$$PROPAGATIONSEARCH=!0;var e=i.$$PROPAGATIONSEARCH;return delete o.$$PROPAGATIONSEARCH,!!e&&e},this.originalTarget=function(){if(this.$$MOUSEPROPAGATIONSETTER){var e=getEventByType(n,o);return e.originalTarget.call({$$RESETTARGET:this.$$MOUSEPROPAGATIONSETTER}),e}return this.$$RESETTARGET&&(o=this.$$RESETTARGET),i}}function MouseEvent(e,t){DefaultREvent.apply(this,[e,t]),this.cursor=[a.current[0],a.current[1]]}function DragEvent(e,t){DefaultREvent.apply(this,[e,t]),this.drag={start:[s.start[0],s.start[1]],current:[s.current[0],s.current[1]],delta:[s.delta[0],s.delta[1]]}}function getEventByType(e,t){return"mousemove"===e||"mouseleave"===e||"mouseenter"===e||"mousedown"===e||"mouseup"===e?new MouseEvent(e,t):"dragstart"===e||"dragend"===e||"dragmove"===e?new DragEvent(e,t):void 0}function Dispatch(e,t){var n=t.extension("Mouse");n&&n.hasEvent(e)&&n.resolve(t,e,getEventByType(e))}function resolveEventByType(e){"mouseenter"!==e&&"drastart"!==e&&"dragend"!==e&&"dragmove"!==e&&"mousemove"!==e&&"mouseup"!==e&&"mousedown"!==e||!o.current||Dispatch(e,o.current),"mouseleave"!==e&&"dragend"!==e||!o.previous||Dispatch(e,o.previous)}function resolveDragStart(){f=!0,s.start[0]=a.current[0],s.start[1]=a.current[1],resolveEventByType("dragstart")}function resolveDragEnd(){s.current[0]=a.current[0],s.current[1]=a.current[1],s.delta[0]=s.start[0]-s.current[0],s.delta[1]=s.start[1]-s.current[1],resolveEventByType("dragend"),f=!1}function DispatchEvents(){if(i.current!==i.old&&i.current&&resolveEventByType("mousedown"),i.current&&i.current!==i.old&&!f&&resolveDragStart(),a.old[0]!==a.current[0]||a.old[1]!==a.current[1]){if(o.current&&!o.previous&&resolveEventByType("mouseenter"),!o.current&&o.previous&&(resolveEventByType("mouseleave"),resolveDragEnd()),o.current&&o.previous){o.current.$$MOUSESEARCH=!0;var e=!1;o.previous.$$MOUSESEARCH||(e=!0),delete o.current.$$MOUSESEARCH,e&&(resolveDragEnd(),resolveEventByType("mouseleave"),resolveEventByType("mouseenter"),resolveDragStart())}i.current&&i.current===i.old&&f&&(s.current[0]=a.current[0],s.current[1]=a.current[1],s.delta[0]=s.start[0]-s.current[0],s.delta[1]=s.start[1]-s.current[1],resolveEventByType("dragmove")),i.current||i.current!==i.old||resolveEventByType("mousemove")}!i.current&&i.current!==i.old&&f&&resolveDragEnd(),i.current||i.current===i.old||(resolveEventByType("mouseup"),f=!1),o.previous=o.current,i.old=i.current,a.old[0]=a.current[0],a.old[1]=a.current[1]}function UpdateTargets(){o.previous=o.current,o.current=r.check(a.current)}function eventDispatcherTick(){if(h=!h){if(u)return;UpdateTargets(),DispatchEvents()}}var o={current:null,previous:null},i={current:!1,previous:!1},a={old:[0,0],current:[0,0]},s={start:[0,0],current:[0,0],delta:[0,0]},u=!0,c=!1,l=!1,f=!1;t.on("mousedown",function(){c&&l&&(i.previous=i.current,i.current=!0,u=!1)}),t.on("mouseup",function(){c&&l&&(i.previous=i.current,i.current=!1,u=!1)}),t.on("mousemove",function(e){c&&l&&(a.current[0]=e.mouse.position[0],a.current[1]=e.mouse.position[1],u=!1)}),t.on("mouseleave",function(){l=!1}),t.on("mouseenter",function(){l=!0});var h=!1;e.queue(-1,eventDispatcherTick),n.on("start",function(){c=!0}),n.on("stop",function(){c=!1}),n.on("error",function(){c=!1})}]),$R.service(["@app","@Canvas","@inject","Debug",function Keyboard(e,t,n,r){function OnAppTick(){for(var e=0;e<u.length;e++)u[e]();u=[]}function getQueueFunc(e){return function(){var t=e.keyCode;if(o[t]&&o[t][e.type])for(var r=0;r<o[t][e.type].length;r++){var i=n("$KeyboardEvent").build(e);o[t][e.type][r].apply(i,[t,e.type])}}}var o={},i=!1,a=!0,s=!0,u=[];this.keydown=function(e,t){return this.on(e,"keydown",t)},this.keyup=function(e,t){return this.on(e,"keyup",t)},this.disable=function(){return a=!1,this},this.enable=function(){return a=!0,this},this.on=function(e,t,n){return"number"==typeof e&&"string"==typeof t?"keyup"===t||"keydown"===t?"function"==typeof n?(o[e]||(o[e]={}),o[t]||(o[e][t]=[]),o[e][t].push(n)):r.warn("Event callback is not a function"):r.warn({e:t},"No such type of event as [{e}]"):r.warn({c:e},"Wrong key code [{c}]"),this};var c=!1;t.element().addEventListener("mousedown",function(){c=!0}),window.addEventListener("mousedown",function(){s=!!c,c=!1}),window.addEventListener("keydown",function(e){i&&a&&s&&u.push(getQueueFunc(e))}),window.addEventListener("keyup",function(e){i&&a&&s&&u.push(getQueueFunc(e))}),e.$on("start",function(){i=!0}),e.$on("stop",function(){i=!1}),e.$("tick",OnAppTick)}]),$R.service["class"]("Keyboard",[function KeyboardEvent(){var e=null,t=!1,n=!1,r=!1,o=!1,i=null;this.build=function(a){return e=a.keyCode,t=a.ctrlKey,n=a.altKey,r=a.shiftKey,o=a,i=a.type,delete this.build,this},this.type=function(e){return"string"==typeof e?i===e:i},this.code=function(){return e},this.shift=function(){return r},this.alt=function(){return n},this.ctrl=function(){return t},this.original=function(){return o}}]),$R.service(["@inject","+Easing","@Canvas","Debug",function Morphine(e,t,n,r){var o=[];this.create=function(n,i,a,s,u,c){if("number"!=typeof n||"number"!=typeof i)return void r.error({},"Morphine / Unable to create. Start value is wrong!");if("function"!=typeof a)return void r.error({},"Morphine / Unable to create. End value is wrong!");if("string"!=typeof s)return void r.error({},"Morphine / Unable to create. Easing is not a string!");("number"!=typeof u||u<=0)&&r.error({},"Morphine / Unable to create. Duration is less than 0 or not a number");var l=t.get(s);l||r.error({easing:s}," Morphine / Unable to create. No such easing {easing}");var f=e("$Morphine"),h=f.config(n,i,a,u,l,c);return h&&"function"==typeof h?(h.$m=f,o.push(h),f):void r.error({},"Morphine / Unable to config morphine. Due to some error.")},n.queue(-2,function processMorphines(e,t){for(var t=t.getTime(),n=[],r=0;r<o.length;r++)o[r].$m.done()||(o[r](t),n.push(o[r]));o=n})}]),$R.service["class"]("Objects",["@extend","@inject","<Plugins",function Graphics(e,t,n){var r=null,o={};this.extension=function(e){return o[e]},this.type=function(){return r},this.defineType=function(i){if("string"==typeof i){delete this.defineType,r=i;for(var a=n.list(),s=0;s<a.length;s++)o[a[s]]=t("$Plugin"),o[a[s]].defineObject(this),e(o[a[s]],"<"+a[s]),o[a[s]].matchType(r)?o[a[s]].wrap(this):delete o[a[s]];e(this,"$"+i+"ObjectModel"),e(this,"$DefaultObjectDrawer"),e(this,"$"+i+"ObjectDrawer"),e(this,"$DefaultObjectType"),e(this,"$"+i+"ObjectClass")}}}]),$R.service(["@inject","Tree",function Objects(e,t){function InjectByType(t,n){var r=e("$Graphics");return r.defineType(t),n&&n.length&&r.style.apply(r,n),r}this.group=function(){return InjectByType("Group",arguments)},this.line=function(){return InjectByType("Line",arguments)},this.rect=function(){return InjectByType("Rectangle",arguments)},this.circle=function(){return InjectByType("Circle",arguments)},this.image=function(){return InjectByType("Image",arguments)},this.sprite=function(){return InjectByType("Sprite",arguments)},this.text=function(){return InjectByType("Text",arguments)},this.area=function(){return InjectByType("Area",arguments)},t.root(this.group())}]),$R.service(["@Canvas","@inject","Debug",function Resource(e,t,n){function GetResourceByURL(e,t){"font"===e&&(t=t[0]);var n=null,r=o[e+"s"];if(!r)return n;for(var i=0;i<r.length;i++)if(r[i].url()===t){n=r[i];break}return n}function InjectByType(e,n){var a=GetResourceByURL(e,n);if(a)return a;var s=e,u=t("$"+e.charAt(0).toUpperCase()+e.slice(1));return u.on("load",function(){i--,ResolveEvent("load",[this,i,r.length])}),u.on("error",function(){i--,ResolveEvent("error",[this,i,r.length])}),u.url(n),o[s+"s"].push(u),r.push(u),i++,ResolveEvent("add",[u,i,r.length]),u}function preloadRequest(e){if(e.images&&e.images.constructor===Array)for(var t=0;t<e.images.length;t++)"string"==typeof e.images[t]&&(/^([./_\da-zA-Z]+)(\[(\d+)\])$/.test(e.images[t])?a.sprite(e.images[t]):a.image(e.images[t]));if(e.audio&&e.constructor===Array)for(var t=0;t<e.audio.length;t++)"string"==typeof e.audio[t]&&a.audio(e.audio[t]);if(e.fonts&&e.fonts.constructor===Array)for(var t=0;t<e.fonts.length;t++)if(e.fonts[t]&&"object"==typeof e.fonts[t]&&"string"==typeof e.fonts[t].name&&e.fonts[t].name.length){var n=e.fonts[t].weight&&"number"==typeof e.fonts[t].weight?e.fonts[t].weight:400,r="italic"===e.fonts[t].style?e.fonts[t].style:"normal";a.font(e.fonts[t].name,n,r)}}function ResolveEvent(e,t){var n=u[e];if(n)for(var r=0;r<n.length;r++)n[r].apply(a,t)}var r=[],o={images:[],sprites:[],fonts:[],audios:[]},i=0,a=this,s=null;this.image=function(e){return InjectByType("image",e)},this.sprite=function(e){return InjectByType("sprite",e)},this.audio=function(e){return InjectByType("audio",e)},this.preload=function(e){preloadRequest(e)},this.preloadByUrl=function(e){s&&s.abort(),"string"==typeof e&&e.length>0&&(s=new XMLHttpRequest,s.addEventListener("load",function(){var t={};try{t=JSON.parse(response.responseText)}catch(r){n.error({url:e},"Unable to parse JSON from [{url}]. Unknown response format.")}preloadRequest(t)}),s.addEventListener("error",function(){n.error({url:e},"Unable to get resources from [{url}] to preload. Server error."),preloadRequest({})}),s.addEventListener("abort",function(){n.warn({url:e},"Unable to get resources from [{url}] to preload. Request aborted."),preloadRequest({})}),s.open("GET",e,!0),s.setRequestHeader("Content-Type","application/json"),s.send())},this.font=function(e,t,n){return InjectByType("font",[e,t,n])};var u={load:[],error:[],add:[]};this.on=function(e,t){if("string"==typeof e){var r=u[e];r?"function"==typeof t?r.push(t):n.warn({event:e},"Unable to set event [{event}] callback. func is not a function!"):n.warn({event:e},"Unable to set event [{event}]. No such event")}else n.warn("Unable to set event callback. Event name is not a string")},this.off=function(e,t){if("string"==typeof e){var r=u[e];if(r){if("function"==typeof t){var o=[];t.$$SEARCH=!0;for(var i=0;i<r.length;i++)r[i].$$SEARCH||o.push(r[i]);delete t.$$SEARCH,u[e]=o}}else n.warn({event:e},"Unable to unset callback for event [{event}]. No such event")}else n.warn("Unable to unset event. Event is not a string")},this.list=function(){return[].concat(o.images).concat(o.audios).concat(o.fonts).concat(o.sprites)},e.queue(-2,function updateResources(e,t){for(var n=t.getTime(),r=0;r<o.sprites.length;r++)o.sprites[r].ready()&&1===o.sprites[r].loaded()&&o.sprites[r].tick(n)})}]),$R.service(["@Audio","@inject","@Config","Debug",function Sound(e,t,n,r){n.define("filters",["Delay","Gain"],{isArray:!0});var o=t("$Audio").build("$$DESTINATION","destination"),i={},a=0,s=0,u={$$DESTINATION:o};this.sample=function(e,n,o){if("string"==typeof e&&e.length>0){if(i[e])return i[e];"string"==typeof o&&0!==o.length||(o="UserSound["+a+"]"),a++;var s=t("$Audio").build(o,e);"string"==typeof n&&0!==n.length||(n="$$DESTINATION");var u=this.channel(n);return s.connect(u),i[s.url()]=s,s}r.warn({url:e},"[{url}] is not valid audio url or empty.")},this.channel=function(e){if("string"==typeof e&&e.length>0){if(u[e])return u[e];var n=t("$Audio").build(e);return n.connect(o),u[e]=n,s++,n}},this.channels=function(e){var t={},e=!!e;for(var n in u)u.hasOwnProperty(n)&&"$$DESTINATION"!==n&&(e?t[n.url()]=n[n]:t[n]=u[n]);return t},this.sounds=function(e){var t={},e=!!e;for(var n in i)i.hasOwnProperty(n)&&(e?t[n]=i[n]:t[i[n].name()]=i[n]);return t},this.destination=function(){return u.$$DESTINATION}}]),$R.service(["@inject",function State(e){function ParseAddress(e){var t=e.match(/^([a-zA-Z]+).([a-zA-Z]+)$/),n=t[0],r=t[1];if(n&&r)return{state:n,prop:r}}var t={};this.watch=function(n,r){"function"==typeof r&&(n=ParseAddress(n),n&&(t[n.state]||(t[n.state]=e("$State")),t[n.prop].when(n.prop,r)))},this.define=function(n,r){n=ParseAddress(n),n&&(t[n.state]||(t[n.state]=e("$State")),t[n.state].define(n.prop,r))}}]),$R.service(["Debug","@Canvas","@Config",function Tree(e,t,n){var r=null,o=null,i=null,a=n.define("clear",!1,{isBool:!0}).watch(function(e){a=e});this.root=function(t){if(r)return r;if(!t.type||"function"!=typeof t.type||"Group"!==t.type())return void e.error({},"Tree / Unable to set tree root! Wrong object type!");r=t;var n=r.extension("Drawer");return n?n.draw&&"function"==typeof n.draw?(o=n,i=r.extension("Style"),r):void e.error({},"Tree / Unable to register root Drawer. Drawer.draw is not a function!"):void e.error({},"Tree / Unable to get Drawer extension!")},t.queue(0,function drawGraphicsTree(e,t,n){r&&o&&(a&&e.clearRect(0,0,e.canvas.offsetWidth,e.canvas.offsetHeight),o.draw.apply(r,arguments))})}]),$R.plugin["class"]("Objects","Animation",["+Animation","Morphine",function Animation(e,t){function Resolve(e){if(e==p)for(var t=0;t<a.length;t++)c.hasOwnProperty(a[t].morph.property())&&c[a[t].morph.property()].apply(u,[n,a[t].result]);else if(e==v){i=!0;for(var r={},t=0;t<a.length;t++)r[a[t].morph.property()]=a[t].result;g.done(1,r),h()}}var n=0,r=null,o=null,i=!1,a=null,s=null,u=null,c=null,l=!1,f=!1,h=null,p="type",v="complete",g=null;this.target=function(){return u},this.queue=function(){return l},this.active=function(){return f},this.done=function(){return i},this.hasProperty=function(e){for(var t=0,n=0;n<a.length;n++)if(a[n].morph.property()==e){t=n+1;break}return t},this.properties=function(){for(var e=[],t=0;t<a.length;t++)e.push(a[t].morph.property());return e},this.stop=function(e){if(e){var t=this.hasProperty(e);t&&(t-=1,a.splice(t,1))}else a=[]},this.start=function(){if(!f){f=!0;for(var n=[],i=0;i<a.length;i++){var u=a[i].morph.get(a[i].value);void 0!==u&&u.start()!==!1&&u.end()!==!1&&n.push(a[i])}a=n;var c=e.getTickFunction();s=t.create(0,1,function(e,t){if(0===a.length)Resolve(v),s.stop();else{for(var n=0;n<a.length;n++)a[n].result=c(t,e,a[n].morph.start(),a[n].morph.end()),a[n].morph.apply(e,a[n].result);Resolve(p),1===e&&Resolve(v)}},o,r,0)}},this.config=function(t,n,i,s){e.normalizeConfig(i),r=i.duration,o=i.easing,c=i.step,l=i.queue,h=s,a=n,u=t,g=i}}]),$R.plugin["class"]("Objects","Animation",["Debug",function Morph(e){function SetStartValue(e){t=e}function SetEndValue(e){n=e}var t,n,r=null,o=null,i=null,a=null,s=!1,u=0;this.start=function(){return t},this.end=function(){return n},this.property=function(){return r},this.ordering=function(){return u},this.get=function(e){return o.apply(a,[SetStartValue,SetEndValue,e]),this},this.valid=function(){return s},this.apply=function(e,t){a.style(r,i.apply(a,[t,e]))},this.config=function(t,n,c,l,f){return"string"!=typeof t?void e.error({name:t},"Unable to config Morph. arg1 [{name}] is not a string!"):"object"!=typeof n?void e.error({name:t},"Unable to config Morph. arg3 is not an object!"):"function"!=typeof l?void e.error({name:t},"Unable to config Morph. arg4 is not a function!"):"number"!=typeof c?void e.error({name:t},"Unable to config Morph. arg2 is not a number!"):"function"!=typeof f?void e.error({name:t},"Unable to config Morph. arg5 is not a function!"):(r=t,o=l,i=f,u=c,a=n,void(s=!0))}}]),$R.plugin["class"]("Objects","Box",[function Box(){var e={size:[0,0],position:[0,0]},t={margin:[0,0,0,0],position:[0,0],size:[0,0]};this.get=function(){return{size:[e.size[0],e.size[1]],position:[e.position[0],e.position[1]]}},this.set=function(n,r,o,i,a,s,u,c){e.size[0]=o,e.size[1]=i,e.position[0]=n,e.position[1]=r,t.margin[0]=a,t.margin[1]=s,t.margin[2]=u,t.margin[3]=c,t.size[0]=c+o+s,t.size[1]=a+i+u,t.position[0]=n-c,t.position[1]=r-a},this.value=function(){return e},this.sprite=function(){return t}}]),$R.plugin["class"]("Objects","Text",["@extend","@inject","+Drawer",function TextLineClass(e,t,n){function getWidth(){if(s){r=0;for(var e=0;e<o.length;e++)r+=o[e].width();return s=!1,r}return r}e(this,"$TextElementClass");var r=0,o=[],i=t("$TextSpaceClass"),a=0,s=!1;this.width=function(){return n.measureText(getWidth)},this.length=function(){return a},this.words=function(e){if(e&&"object"==typeof e&&e.constructor===Array){for(var t=0;t<e.length;t++)o.push(e[t].size(this.size()).height(this.height()).style(this.style()).weight(this.weight()).color(this.color()).font(this.font()));a=o.length;for(var n=[],t=0;t<o.length;t++)n.push(o[t]);return this.propertyChanged("string",n),this}return s=!0,o},this.push=function(e){return o.length>0&&o.push(i),o.push(e.size(this.size()).height(this.height()).style(this.style()).weight(this.weight()).color(this.color()).font(this.font())),s=!0,this},this.string=function(){for(var e="",t=0;t<o.length;t++)e+=o[t].string();return e},this.onPropertyChange(function(e,t){"string"!==e&&i[e](t)})}]),$R.plugin["class"]("Objects","Text",["@extend","+Drawer",function TextSpaceClass(e,t){function getWidth(e){return e.font=r.extractFontString(),e.measureText(n).width}e(this,"$TextElementClass");var n=" ",r=this;this.string=function(){return n},this.width=function(e){return t.measureText(getWidth)}}]),$R.plugin["class"]("Objects","Text",["+Color",function TextElementClass(e){function resolve(e,t){for(var n=0;n<s.length;n++)s[n].apply(u,[e,t])}var t="rgba(0,0,0,1)",n="sans-serif",r=400,o=14,i=14,a="normal",s=[],u=this;this.size=function(e){return"number"==typeof e?(e<0&&(e=0),o=e,resolve("size",o),this):o},this.height=function(e){return"number"==typeof e?(e<0&&(e=0),i=e,resolve("height",i),this):i},this.weight=function(e){return"number"==typeof e?(e<100&&(e=100),e>900&&(e=900),e%100!==0&&(e-=e%100),r=e,resolve("weight",r),this):r},this.font=function(e){return"string"==typeof e&&e.length>0?(n=e,resolve("font",n),this):n},this.color=function(n){return"string"==typeof n?(e.colorToArray(n)&&(t=n,resolve("color",t)),this):t},this.style=function(e){return"normal"===e||"italic"===e||"oblique"===e?(a=e,resolve("style",a),this):a},this.extractFontString=function(){return a+" "+o+'px "'+n+"-"+r+'"'},this.onPropertyChange=function(e){"function"==typeof e&&s.push(e)},this.propertyChanged=function(e,t){resolve(e,t)}}]),$R.plugin["class"]("Objects","Text",["+Color","@extend","+Drawer",function TextWordClass(e,t,n){function getWidth(e){return e.font=o.extractFontString(),e.measureText(r).width}t(this,"$TextElementClass");var r="",o=this;this.string=function(e){return"string"==typeof e?(r=e,this.propertyChanged("string",e),
this):r},this.width=function(){return n.measureText(getWidth)},this.draw=function(e,t,n){return"number"!=typeof t&&(t=0),"number"!=typeof n&&(n=0),e.save(),e.fillStyle=this.color(),e.font=this.extractFontString(),e.fillText(r,t,n),e.restore(),this}}]),$R.service["class"]("Dispatcher",["Tree","Debug",function Finder(e,t){function CheckElement(e,t){if("Group"===e.type()){var n=null,r=e.extension("Layers");return r.forEach(function(){if(!this.disabled())if("Group"===this.type()){var e=CheckElement(this,t);e&&(n=e)}else{var r=this.extension("Mouse"),e=r.check(this,t);e&&(n=e)}}),n}}this.check=function(n){var r=e.root();return r?"object"!=typeof n||n.constructor!==Array||2!==n.length||"number"!=typeof n[0]||"number"!=typeof n[1]?(t.warn({c:n},"ObjectFinder ; {[c]} is not a valid cursor value."),null):CheckElement(r,n):null}}]),$R.service["class"]("Morphine",[function Morphine(){function Tick(f){if(!l){if(c)return void(o=(new Date).getTime()-t*u);o||(o=(new Date).getTime()),u=(f-o)/t,u>1&&(u=1),1===u&&(n&&r>0?(r!==1/0&&r--,o=(new Date).getTime()):l=!0),i.apply(null,[u,e((f-o)/1e3,a,s-a,t/1e3),o])}}var e=null,t=1,n=!1,r=1,o=null,i=null,a=0,s=0;this.done=function(){return l},this.pause=function(){c=!0},this.paused=function(){return c},this.stop=function(){l=!0};var u=0,c=!1,l=!1;this.config=function(r,o,u,c,l,f){if(!("number"!=typeof r||"number"!=typeof o||"number"!=typeof c||c<0)&&"function"==typeof l&&"function"==typeof u)return"number"==typeof f&&(n=f),a=r,s=o,e=l,i=u,t=c>0?c:1,delete this.config,Tick}}]),$R.service["class"]("Objects",[function Canvas(){var e=document.createElement("canvas"),t=e.getContext("2d"),n=0,r=0;this.context=function(){return t},this.width=function(t){return"number"!=typeof t?n:(n=t,void e.setAttribute("width",n))},this.height=function(t){return"number"!=typeof t?r:(r=t,void e.setAttribute("height",r))},this["export"]=function(){return e}}]),$R.service["class"]("Objects",["@inject","Debug",function GraphicsAssembler(e,t){function SetSize(e,t){for(var r=0;r<o.length;r++)o[r].size(e,t);n.width(e),n.height(t),a=e,s=t}function compose(e){if(!c){if(u){var t=u.box().sprite();t.size[0]===a&&t.size[1]===s||SetSize(t.size[0],t.size[1])}c=!0}if(!l){r.clearRect(0,0,a,s);for(var i=0;i<o.length;i++)o[i].draw(r);l=!0}e.drawImage(n["export"](),0,0)}var n=e("$Canvas"),r=n.context(),o=[],i={},a=0,s=0,u=null,c=!1,l=!1;this.layer=function(n,r,a){return"number"!=typeof n?void t.warn({o:n},"Invalid order argument [{o}] is not a number."):"string"!=typeof r?void t.warn({n:r},"[{n}] is not valid name for layer"):"function"!=typeof a?void t.warn("updateFunc is not a function!"):(i[r]=e("$GraphicsAssemblerLayer"),i[r].f(a),i[r].ordering(n),i[r].update(),o.push(i[r]),o.sort(function(e,t){return e.ordering()-t.ordering()}),void(l=!1))},this.ready=function(){return l},this.box=function(e){u=e},this.size=function(e,t){e===a&&t===s||(SetSize(e,t),l=!1)},this.resize=function(){c=!1,l=!1},this.update=function(e){l=!1,i[e].update()},this.draw=compose}]),$R.service["class"]("Objects",["@inject","Debug",function GraphicsAssemblerLayer(e,t){function updateCanvas(e){s||(r.clearRect(0,0,o,i),r.save(),a&&a(r),s=!0,r.restore()),e.drawImage(n["export"](),0,0)}var n=e("$Canvas"),r=n.context(),o=0,i=0,a=null,s=!1,u=0;this.f=function(e){"function"==typeof e?(a=e,delete this.f):t.warn({f:e},"[{f}] is not a function")},this.size=function(e,t){o===e&&t===t||(n.width(e),n.height(t),o=e,i=t,s=!1)},this.ordering=function(e){return e&&"number"==typeof e&&(u=e),u},this.update=function(){s=!1},this.draw=updateCanvas}]),$R.service["class"]("Objects",function Plugin(){var e={},t={},n=null,r=[];this.defineObject=function(e){n=e,delete this.defineObject},this.object=function(){return n},this.matchType=function(e){if(0==r.length)return!0;for(var t=!1,n=0;n<r.length;n++)if(r[n]===e){t=!0;break}return this.applyTo&&(delete this.applyTo,delete this.matchType),t},this.applyTo=function(e){if("string"==typeof e)r.push(e);else if("object"==typeof e&&e.constructor===Array)for(var t=0;t<e.length;t++)"string"==typeof e[t]&&r.push(e[t]);delete this.applyTo},this.register=function(n,r,o){e[n]||(e[n]=r),o&&(t[n]=!0)},this.wrap=function(t){for(var n in e)e.hasOwnProperty(n)&&(t[n]||(t[n]=e[n]));delete this.wrap,delete this.register,delete this.clear},this.hasProperty=function(t){var n=!1;for(var r in e)if(e.hasOwnProperty(r)&&t==r){n=!0;break}return n},this.clear=function(e){for(var n in t)t.hasOwnProperty(n)&&delete e[n]}}),$R.service["class"]("Objects",[function AreaObjectClass(){}]),$R.service["class"]("Objects",["+Mouse",function CircleObjectClass(e){this.mouseCheckFunction(e.circleCheckFunction)}]),$R.service["class"]("Objects",["Tree",function DefaultObjectType(e){e.root(this).append(this)}]),$R.service["class"]("Objects",function GroupObjectClass(){}),$R.service["class"]("Objects",["+Mouse",function ImageObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction)}]),$R.service["class"]("Objects",function LineObjectClass(){}),$R.service["class"]("Objects",["+Mouse",function RectangleObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction);var t=this.extension("Mouse");t.cursorTransformFunction(e.rectCursorTransformFunction)}]),$R.service["class"]("Objects",["+Mouse",function SpriteObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction)}]),$R.service["class"]("Objects",["+Mouse",function TextObjectClass(e){this.mouseCheckFunction(e.rectCheckFunction)}]),$R.service["class"]("Resource",["@extend","Debug",function Audio(e,t){function createAudio(){var e=new XMLHttpRequest;e.open("GET",o,!0),e.responseType="arraybuffer",e.onload=function(e){r(1),i=this.response,n("load",[i])},e.onerror=function(){r(-2),n("error",[]),t.error({url:o},"Unable to load audio [{url}].")},e.send()}e(this,"$Resource"),this.type="Audio";var n=null,r=null,o=null,i=null;this.on("init",function(e,t,i){n=t,r=i,o=e,createAudio()}),this["export"]=function(){return i}}]),$R.service["class"]("Resource",["@extend","Debug","@Config","@Fonts",function Font(e,t,n,r){function getFont(){r.font(s,a,u,c),document.getElementsByTagName("body")[0].appendChild(f),l=!0;var e=1e3,n=0,p=[f.offsetWidth,f.offsetHeight];f.style.fontFamily='"'+r.format(a)+"-"+u+'", sans-serif',h=setInterval(function(){f.offsetWidth===p[0]&&f.offsetHeight===p[1]||(document.getElementsByTagName("body")[0].removeChild(f),l=!1,clearInterval(h),o(1),i("load",[])),n++,n>e&&(o(-2),i("error",[]),t.warn({font:a+"-"+u},"Unable to load font [{font}]. Font pending timed out..."),document.getElementsByTagName("body")[0].removeChild(f),l=!1,clearInterval(h))},50)}e(this,"$Resource"),this.type="Font";var o=null,i=null,a=null,s=n.watch("fontDir",function(e){s=e,l&&document.getElementsByTagName("body")[0].removeChild(f),h&&window.clearInterval(h),getFont()}),u=(r.formats(),null),c=null,l=!1,f=document.createElement("div");f.setAttribute("class","reflect-font-loader-element"),f.style.fontFamily="sans-serif",f.style.fontSize="12px",f.style.lineHeight="12px",f.style.position="absolute",f.style.left="-9999px",f.style.top="-9999px",f.innerText='abcdefghijklmnopqrstuvwxyz 1234567890[!?,.<>"£$%^&*()~@#-=]',this.on("init",function(e,t,n){i=t,o=n,a=e[0],u=e[1],c=e[2],f.style.fontStyle=c,getFont()});var h=null;this["export"]=function(){return r.format(a)}}]),$R.service["class"]("Resource",["@extend","Debug",function Image(e,t){function CreateImage(){i=document.createElement("img"),i.addEventListener("load",function(){o(1),a=i.width,s=i.height,r("load",[])}),i.addEventListener("error",function(){o(-2),r("error",[]),t.error({url:n},"Unable to load image [{url}].")}),i.setAttribute("src",n)}e(this,"$Resource");var n=null,r=null,o=null,i=null,a=0,s=0;this.type="Image",this.on("init",function(e,t,i){r=t,o=i,n=e,CreateImage()}),this.width=function(){return a},this.height=function(){return s},this["export"]=function(){return i}}]),$R.service["class"]("Resource",["@extend","Debug",function Resource(e,t){function setStatus(e){return"number"!=typeof e?void t.error({val:e},"[{val}] is not valid value for status"):e>1||e<-2?void t.error({val:e},"[{val}] no such status possible!"):void(i=e)}function ResolveEvent(e,n){if(a[e]){n="object"==typeof n&&n.constructor==Array?n:[];for(var o=0;o<a[e].length;o++)a[e][o].apply(r,n)}else t.warn({e:e},"Unable to set event {e}. No such event!")}var n=null,r=this,o=!1,i=-1;this.loaded=function(){return 1==i},this.error=function(){return i==-2},this.loading=function(){return 0==i},this.url=function(e){return void 0==e?n:(void 0==n&&(n=e,i=0,o?ResolveEvent("init",[n]):(ResolveEvent("init",[n,ResolveEvent,setStatus]),o=!0)),n)};var a={init:[],load:[],error:[],loading:[]};this.on=function(e,n){var r=a[e],n="function"==typeof n&&n;return"load"==e&&1==i&&n.call(this),"error"==e&&i==-2&&n.call(this),r&&n?void a[e].push(n):void t.warn({e:e},"Unable to set handler for event [{e}].")}}]),$R.service["class"]("Resource",["@extend","Debug",function Sprite(e,t){function CreateCanvasArray(){for(var e=0,t=0;t<o;t++){g.push([]);for(var n=0;n<o;n++)e++,e<i&&g[t].push(document.createElement("canvas"))}}function SetCanvasSize(){c=Math.round(u/o),l=Math.round(s/o);for(var e=0;e<o;e++)for(var t=0;t<o;t++)if(g[e][t]){g[e][t].setAttribute("width",l),g[e][t].setAttribute("height",c);var n=g[e][t].getContext("2d");n.translate(-l*t,-c*e),n.drawImage(r,0,0)}}e(this,"$Resource");var n=null,r=null,o=0,i=0,a=0,s=0,u=0,c=0,l=0,f=12,h=null,p=null,v=!1,g=[];this.type="Sprite",this.on("init",function(e,t,o){h=o,p=t,n=e,r=document.createElement("img"),r.addEventListener("load",function(){h(1),s=r.width,u=r.height,v&&(CreateCanvasArray(),SetCanvasSize()),p("load",[])}),r.addEventListener("error",function(){h(-2),p("error",[])}),r.setAttribute("src",n)}),this.ready=function(){return v},this.width=function(){return l},this.height=function(){return c},this.spriteWidth=function(){return s},this.spriteHeight=function(){return u},this.fps=function(e){return"number"!=typeof e||e<=0?(t.warn({n:e},"[{n}] is not a correct fps number"),!1):(f=e,void(a=Math.round(i/f*1e3)))};var d=!1;this.pause=function(){d=!0},this.play=function(){d=!1},this.config=function(e){if(!v){if("number"!=typeof e||e<=0)return void t.warn({rows:e},"[{rows}] is not a valid frames number");o=Math.ceil(Math.sqrt(e)),i=e,a=Math.round(i/f*1e3),v=!0,CreateCanvasArray()}},this.frames=function(){return i};var y=0,m=0,b=(new Date).getTime();this.tick=function(e){if(e=e.getTime(),!d){var t=(e-b)/a;t>1&&(t=1,b=(new Date).getTime()),t<0&&(t=0);var n=Math.floor((i-1)*t);m=Math.floor(n/o),y=n-m*o}},this["export"]=function(){if(g[m][y])return g[m][y]}}]),$R.service["class"]("Sound",["@inject","Debug",function AnimationProvider(e,t){function findCompetitor(e,t){t.$$SELF=!0;for(var r=null,o=0;o<n.length;o++)if(!n[o].$$SELF&&n[o].active()&&!n[o].done()){for(var i=!1,a=0;a<e.length;a++)if(n[o].hasProperty(e[a])){i=!0;break}i&&(r||(r=[]),r.push(n[o]))}return delete t.$$SELF,r}function CheckAnimationQueue(){for(var e=[],t=0;t<n.length;t++)if(n[t].active())n[t].done()||e.push(n[t]);else{var r=n[t].properties();if(n[t].queue())findCompetitor(r,n[t])||n[t].start();else{var o=findCompetitor(r,n[t]);if(o)for(var i=0;i<o.length;i++)for(var a=0;a<r.length;a++)o[i].stop(r[a]);n[t].start()}e.push(n[t])}n=e}function CreateAnimationType1(t,r,i,a){var s={};if(s[t]=r,o[t]){var u=[{ordering:o[t].ordering(),morph:o[t],value:r}],c={};i&&"number"==typeof i&&(c.duration=i),a&&"string"==typeof a&&(c.easing=a);var l=e("$Animation");l.config(this,u,c,CheckAnimationQueue),n.push(l)}}function CreateAnimationType2(r,i,a){var s={};"object"==typeof i?s=i:"number"==typeof i?(s={duration:i},"string"==typeof a&&(s.easing=a)):"string"==typeof i&&(s={easing:i});var u={};for(var c in r)r.hasOwnProperty(c)&&(o[c]?u[c]={ordering:o[c].ordering(),morph:o[c],value:r[c]}:t.warn({type:this.type(),property:c},"Property {property} of {type} can not be animated!"));var l=[];for(var f in u)l.push(u[f]);if(l.length){l.sort(function(e,t){return e.ordering-t.ordering});var h=e("$Animation");h.config(this,l,s,CheckAnimationQueue),n.push(h)}else t.warn("No properties to animate!")}var n=[],r=!1,o={};this.morph=function(t,n,r,i){var a=e("$Morph");a.config(t,this,n,r,i),a.valid()&&(o[t]=a)},this.extractMorph=function(e){return o[e]},this.animate=function(e,n,r,o){"string"==typeof e&&n?CreateAnimationType1.apply(this,arguments):"object"==typeof e&&e.constructor!==Array?CreateAnimationType2.apply(this,arguments):t.warn("Unable to create animation. Wrong arguments"),CheckAnimationQueue()},this.animated=function(){return r},this.stop=function(e){if("string"==typeof e&&0!==e.length)for(var t=0;t<n.length;t++)n[t].stop(e)}}]),$R.service["class"]("Sound",["@inject","Debug",function Audio(e,t){function eventArgs(){return[s,u,r,o]}function createAnimationMorph(e,t){a.morph.apply(this,[t.name,0,function(n,r,o){o=t.normalizer(o),void 0!==o&&(r(o),n(e.get(t.name)))},function(n){return n=t.normalizer(n),e.set(t.name,n)}])}var n=null,r=null,o=null,i=e("$EventProvider"),a=e("$AnimationProvider"),s=this,u=null,c="";i.wrap(this),i.event("ready",eventArgs,!0),i.event("load",eventArgs,!0),i.event("error",eventArgs,!0),i.event("play",eventArgs,!1),i.event("connect",eventArgs,!1),i.event("disconnect",eventArgs,!1),i.event("end",eventArgs,!1),this.build=function(a,s){if("string"==typeof a&&a.length>0){"string"==typeof s&&"destination"!==s&&s.length>0?(r=s,n=e("$UserAudioSource").build(s),o="Sample",n.on("load",function(){i.resolve("load")}),this.play=function(){return n.play(),this},this.terminate=function(){return n.stop(),this}):"destination"===s?(n=e("$UserAudioMixer").build(a,s),this.connect=function(){return arguments[0]&&"object"==typeof arguments[0]&&arguments[0].$$SOURCE?n:this},r="["+a+"]AudioChannel",o="Channel",i.resolve("load")):void 0===s&&(n=e("$UserAudioMixer").build(a),r="["+a+"]AudioChannel",o="Channel",i.resolve("load")),n.on("error",function(){i.resolve("error")}),n.on("play",function(){i.resolve("play")}),n.on("end",function(){i.resolve("end")}),n.on("connect",function(){i.resolve("connect")}),n.on("disconnect",function(){i.resolve("disconnect")});for(var u=n.filters(),l=0;l<u.length;l++)for(var f=u[l].props(),h=0;h<f.length;h++)f[h].animated&&createAnimationMorph.apply(this,[u[l],f[h]]);c=a,i.resolve("ready")}else t.warn("Audio mixer have no name! Should be a string");return this},this.filter=function(e,r){if("string"==typeof e&&e.length>0){for(var o=null,i=n.filters(),a=0;a<i.length;a++)i[a].has(e)&&(o=i[a]);if(o){if(void 0===r)return o.get(e);o.set(e,r)}else t.warn({name:e},"Unable to set filter property [{name}]. No filter with that param!")}return this},this.connect=function(e){if(e&&"object"==typeof e&&e.$$SOURCE)return n;if("object"==typeof e&&e.type&&"function"==typeof e.type){var r=e.type();if("Channel"===o&&"Sample"===r)return t.error("Trying to connect Channel with Sample!"),this;if(e.connect&&"function"==typeof e.connect){var i=e.connect({$$SOURCE:!0});return u=e,n.connect(i),e}t.error("Unknown type of  object passed as output!")}else t.error("Unknown type of  object passed as output!");return this},this.output=function(){return u},this.animate=function(){return a.animate.apply(this,arguments),this},this.type=function(e){return"string"==typeof e?e===o:o},this.url=function(){return r},this.name=function(){return c},this.stop=function(){return a.stop.apply(this,arguments),this}}]),$R.service["class"]("Sound",["@inject","@Config","Debug",function UserAudioMixer(e,t,n){function argF(){return[this]}var r=e("$EventProvider"),o=[],i=null,a="",s=t.watch("filters",function(e){o=e});r.wrap(this),r.event("play",argF,!1),r.event("connect",argF,!1),r.event("ready",argF,!0),r.event("error",argF,!0),this.build=function(t,i){for(var u=0;u<s.length;u++){var c=e("$"+s[u]+"Node");o[o.length-1]&&o[o.length-1].connect(c),o.push(c)}if("string"==typeof t&&t.length>0?a=t:(n.warn({n:t},"[{n}] is not a valid name for channel"),r.resolve("error")),i&&"object"==typeof i&&i.connect&&"function"==typeof i.connect)this.connect(i);else if("destination"===i){var l=e("$DestinationNode");o[o.length-1].connect(l),this.connect=function(e){if(e.$$AUDIONODE)return o[0]}}return delete this.build,this},this.connect=function(e){if(e.$$AUDIONODE)return o[0];var t=e.connect({$$AUDIONODE:!0});return o[o.length-1].connect(t),i=e,this},this.output=function(){return i},this.filters=function(){return o},this.name=function(){return a}}]),$R.service["class"]("Sound",["@extend","@inject",function UserAudioSource(e,t){function cbArgs(){return[this]}function connectCbArgs(){return[this,i]}var n=t("$AudioSource"),r=t("$EventProvider"),o=null,i=null,a="";r.wrap(this),r.event("ready",cbArgs,!0),r.event("load",cbArgs,!0),r.event("error",cbArgs,!0),r.event("connect",connectCbArgs,!1),r.event("play",cbArgs,!1),r.event("stop",cbArgs,!1),n.on("ready",function(){r.resolve("ready")}),n.on("load",function(){r.resolve("load")}),n.on("error",function(){r.resolve("error")}),this.build=function(e){return"string"==typeof e&&e.length>0?(a=e,n.build(e),o=t("$UserAudioMixer").build("source-built-in-filter"),o.on("connect",function(){r.resolve("connect")}),n.connect(o.connect({$$AUDIONODE:!0})),delete this.build,r.resolve("ready")):(delete this.build,r.resolve("error")),this},this.filters=function(){return o?o.filters():[]},this.play=function(){return this.status("error")||this.status("ready")&&(this.status("load")?n.play():this.on("load",function(){n.play()})),this},this.stop=function(){return n.stop(),this},this.output=function(){return i},this.connect=function(e){return e&&e.constructor===o.constructor&&(i=e,o.connect(e)),this}}]),$R.service["class"]("Sound",["@inject","Debug",function AudioNode(e,t){function args(){return[o]}var n=null,r=null,o=null,i=function(e,t){if(!t)for(var n=this.input(),r=0;r<n.length;r++)e.connect(n[r]);return this.output()},a=[],s=e("$EventProvider"),u="";s.wrap(this),s.event("ready",args,!0),s.event("play",args,!1),s.event("end",args,!1),s.event("connect",args,!1),s.event("disconnect",args,!1),s.event("property",args,!1),this.disconnect=function(){if(o&&n){for(var e=o.input(),t=0;t<n.length;t++)for(var r=0;r<e.length;r++)n[t].disconnect(e[r]);o=null,s.resolve("disconnect")}return this},this.connect=function(e){if(this.disconnect(),o=e,o&&n)for(var t=o.input(),r=0;r<n.length;r++)for(var i=0;i<t.length;i++)n[r].connect(t[r]);return s.resolve("connect"),this},this.build=function(e,t,o,a){return r="object"==typeof t&&t.constructor===Array?t:[t],n="object"==typeof o&&o.constructor===Array?o:[o],u=e,"function"==typeof a&&(i=a),delete this.build,s.resolve("ready"),this},this.input=function(){return r},this.output=function(){return n},this.name=function(){return u},this.play=function(e,t){a.push(e),e.addEventListener("ended",function(){var t=[];e.$$SEARCH=!0;for(var n=0;n<a.length;n++)a.$$SEARCH||t.push(a[n]);delete e.$$SEARCH,a=t}),o&&o.play(e,i.apply(this,arguments))};var c={};this.property=function(e,n,r,o,i){if("string"==typeof e){var a={name:e,value:null,getter:null,setter:null,normalizer:i,animated:"function"==typeof i};"function"==typeof o&&(a.getter=o),"function"==typeof r&&(a.setter=r),a.value=n,n&&a.setter&&(c[a.name]?t.warn({property:a},"Duplicated property [{property}]"):c[a.name]=a)}else t.warn({name:e},"Property name [{name}] is not valid!")},this.set=function(e,n){if("string"==typeof e&&e.length>0){var r=c[e].setter(n);void 0!==r?c[e].value=r:t.warn({prop:e,val:n},"[{val}] is not a valid valuen for [{prop}].")}},this.get=function(e){if("string"==typeof e&&e.length>0){if(c[e])return c[e].value;t.warn({name:e},"Object has no property [{name}]. Unable to get value.")}else t.warn("Property name has to be a string")},this.props=function(){var e=[];for(var t in c)c.hasOwnProperty(t)&&e.push(c[t]);return e},this.has=function(e){return!!c[e]}}]),$R.service["class"]("Sound",function AudioNodeSoundDispatcher(){var e=[];this.register=function(t){t.addEventListener("end",function(){t.$$SEARCH=!0;for(var n=[],r=0;r<e.length;r++)e[r].$$SEARCH||n.push(e[r]);e=n}),e.push(t)},this.reconnect=function(t){for(var n=0;n<e.length;n++)e[n].disconnect(),e[n].connect(t)}}),$R.service["class"]("Sound",["@Audio","@inject","Resource","Debug",function AudioSource(e,t,n,r){function args(){return[o,i,a]}var o=null,i=null,a=null,s=t("$EventProvider"),u=[];s.wrap(this),s.event("ready",args,!0),s.event("load",args,!0),s.event("error",args,!0),s.event("connect",args,!1),s.event("disconnect",args,!1),s.event("play",!1),s.event("end",!1),this.build=function(t){return o=n.audio(t),o.on("load",function(n){e.context().decodeAudioData(n,function(e){i=e,s.resolve("load")},function(){r.error({src:t},"[{src}] audio buffer can not be decoded. Resource not found, or of wrong format"),s.resolve("error")})}),o.on("error",function(){r.error({src:t},"Unable to load audio file"),s.resolve(error)}),delete this.build,this},this.disconnect=function(){return a&&(a=null,s.resolve("disconnect")),this},this.connect=function(e){return this.disconnect(),a=e,s.resolve("connect"),this},this.play=function(){if(a&&this.status("load")){var t=e.context().createBufferSource();t.buffer=i,u.push(t),a.play(t,!1),t.start(0)}return this},this.stop=function(){for(var e=0;e<u.length;e++)u[e].stop(0);return u=[],this}}]),$R.service["class"]("Sound",["Debug",function Event(e){var t=[],n=!1,r="default",o=!1,i=this,a=function(){return[]};this.build=function(e,t,o){return n=!!o,"function"==typeof t&&(a=t),"string"==typeof e&&e.length>0&&(r=e),delete this.build,this},this.name=function(){return r},this.active=function(){return o},this.resolve=function(){n&&(o=!0);var e=a();if("object"!=typeof e||e.constructor!==Array)e=[];else for(var r=0;r<t.length;r++)t[r].apply(this,e);return this},this.callback=function(e){if("function"!=typeof e)return this;if(i.active()){var n=a();return"object"==typeof n&&n.constructor===Array||(n=[]),e.apply(this,n),t.push(arguments[0]),this}return t.push(e),this}}]),$R.service["class"]("Sound",["@inject",function EventProvider(e){var t=[];this.event=function(n,r,o){var i=e("$Event");return i.build.apply(i,arguments),t[n]=i,this},this.resolve=function(e){return t[e]&&t[e].resolve.call(t[e]),this},this.wrap=function(e){return e.on=function(n,r){t[n]&&t[n].callback.call(e,r)},e.status=function(e){return!!t[e]&&t[e].active()},this}}]),$R.service["class"]("Sound",["@Audio","@extend",function DelayNode(e,t){t(this,"$AudioNode");var n=0,r=0,o=e.context().createGain(),i=e.context().createDelay(),a=e.context().createGain(),s=e.context().createBiquadFilter();o.gain.value=1,s.frequency.value=2e3,a.gain.value=r,i.delayTime.value=n,i.connect(a),a.connect(s),s.connect(i),a.connect(o),this.build("delay",[o,a],o),this.property("delay",[0,0],function(e){if("object"==typeof e&&e.constructor===Array&&2==e.length&&"number"==typeof e[0]&&"number"==typeof e[1]){var t=e[0],o=e[1];return t>1&&(t=1),t<0&&(t=0),o>.8&&(o=.8),o<0&&(o=0),n=t,r=o,i.delayTime.value=n,a.gain.value=r,[o,t]}},function(e){return[e[0],e[1]]},function(e){var t=e[0],n=e[1];return t>1&&(t=1),t<0&&(t=0),n>.8&&(n=.8),n<0&&(n=0),[n,t]})}]),$R.service["class"]("Sound",["@Audio","@extend",function DestinationNode(e,t){t(this,"$AudioNode"),this.build("destination",e.context().destination,!1)}]),$R.service["class"]("Sound",["@Audio","@extend",function GainNode(e,t){t(this,"$AudioNode");var n=1,r=e.context().createGain();r.gain.value=n,this.build("gain",r,r),this.property("volume",1,function(e){if("number"==typeof e)return e<0&&(e=0),e>1&&(e=1),n=e,r.gain.value=n,e},function(e){return e},function(e){return e<0&&(e=0),e>1&&(e=1),e})}]),$R.service["class"]("Sound",["@Audio","@extend",function LowpassNode(e,t){t(this,"$AudioNode");var n=e.context().createBiquadFilter(),r=22050;n.type="lowpass",n.frequency.value=r,this.build("lowpass",n,n),this.property("lowpass",22050,function(e){return e<0&&(e=0),e>22050&&(e=22050),r=e,n.frequency.value=e,e},function(e){return e},function(e){return e<0&&(e=0),e>22050&&(e=22050),e})}]),$R.service["class"]("State",function Property(){var e=null,t=[];this.set=function(n){for(var r=0;r<t.length;r++)t[r](n,e);e=n},this.onset=function(e){"function"==typeof e&&t.push(e)}}),$R.service["class"]("State",["@inject",function State(e){function GetPropertyCallback(e){return function(n,r){if(t[e])for(var o=0;o<t.length;o++)t[e][o](n,r)}}var t={},n={};this.define=function(t,r){return n[t]?void n[t].set(r):(n[t]=e("$Property"),n[t].onset(GetPropertyCallback(t)),void n[t].set(r))},this.watch=function(e,r){"string"==typeof e&&"function"==typeof r&&(t[e]||(t[e]=[]),n[e]||this.def(e,null),t[e].push(r))}}]),$R.service["class"]("Objects",["@inject","+Drawer","+Path","+Model",function AreaObjectDrawer(e,t,n,r){function UpdateFill(e){var r=this.extension("Box").box().sprite(),o=this.extension("Style"),i=o.get("path");e.save(),e.translate(r.margin[3]-h,r.margin[0]-p);var a=o.get("interpolation");c||(n.interpolate(i,a,!0),c=!0),a?t.drawBezierPathFill(e,i,o):t.drawLinePathFill(e,i,o),e.restore()}function UpdateStroke(e){var o=this.extension("Box").box().sprite(),i=this.extension("Style"),a=r.cloneArray(i.get("path")),s=i.get("interpolation");e.translate(o.margin[3]-h,o.margin[0]-p),c||(n.interpolate(a,s,!0),c=!0),s&&t.drawLinePath(e,a,i),t.drawBezierPath(e,a,i)}function UpdateBg(e){var i=this.extension("Style"),a=this.extension("Box").box().sprite(),s=r.cloneArray(i.get("path")),u=i.get("interpolation");e.translate(a.margin[3]-h,a.margin[0]-p),c||(n.interpolate(s,u,!0),c=!0),u?t.drawLineBgClipPath(e,s,i,o,a):t.drawBezierBgClipPath(e,s,i,o,a)}var o=e("$GraphicsAssembler"),i=this.extension("Box"),a=this.extension("Style"),s=this.extension("Matrix"),u=this.extension("Drawer"),c=!1,l=1,f=0,h=0,p=0;o.layer(0,"fill",UpdateFill.bind(this)),o.layer(1,"bg",UpdateBg.bind(this)),o.layer(2,"stroke",UpdateStroke.bind(this)),o.box(i),this.watch("path",function(){a.get("interpolation");c=!1,i.purge(),s.purge(),o.resize(),o.update("fill"),o.update("stroke"),o.update("bg")}),this.watch("interpolation",function(e,t){c=!1,f=Math.round(40*t),o.update("fill"),o.update("stroke"),o.update("bg"),o.resize()}),this.watch("position",function(){i.purge(),s.purge()}),this.watch(["strokeStyle","strokeColor"],function(){o.update("stroke"),o.resize()}),this.watch("fill",function(){o.update("fill")}),this.watch(["bg","bgSize","bgPosition"],function(){o.update("bg")}),this.watch("strokeWidth",function(e,t){for(var n=0,r=0;r<t.length;r++)t[r]>n&&(n=t[r]);l=n/2,o.update("stroke"),i.purge(),s.purge(),o.resize()}),i.f(function(e){for(var t=a.get("position"),n=a.get("path"),r=a.get("anchor"),o=t[0],i=t[1],s=1/0,u=1/0,c=-(1/0),v=-(1/0),g=0;g<n.length;g++)n[g][0]<s&&(s=n[g][0]),n[g][2]<s&&(s=n[g][2]),n[g][1]<u&&(u=n[g][1]),n[g][3]<u&&(u=n[g][3]),n[g][0]>c&&(c=n[g][0]),n[g][2]>c&&(c=n[g][2]),n[g][1]>v&&(v=n[g][1]),n[g][3]>v&&(v=n[g][3]);s===1/0&&(s=0),u===1/0&&(u=0),c===-(1/0)&&(c=0),v===-(1/0)&&(c=0),h=s,p=u;var d=l+f,y=Math.abs(c-s),m=Math.abs(v-u);"center"===r[0]&&(o-=y?y/2:0),"right"===r[0]&&(o-=y?y:0),"middle"===r[1]&&(i-=m?m/2:0),"bottom"===r[1]&&(i-=m?m:0),e.set(o+h,i+p,y,m,d,d,d,d)}),u.f(function(e){t.transform(this,e),o.draw(e)})}]),$R.service["class"]("Objects",["+Drawer","Debug","@inject",function CircleObjectDrawer(e,t,n){function UpdateStroke(e){var t=i.box().sprite();e.beginPath(),e.strokeStyle=a.get("strokeColor"),e.lineWidth=a.get("strokeWidth"),e.setLineDash(a.get("strokeStyle")),e.arc(t.size[0]/2,t.size[1]/2,a.get("radius"),0,2*Math.PI),e.stroke()}function UpdateFill(e){var t=i.box().sprite();e.beginPath(),e.fillStyle=a.get("fill"),e.arc(t.size[0]/2,t.size[1]/2,a.get("radius"),0,2*Math.PI),e.fill()}function UpdateBg(e){var t=i.box().sprite(),n=i.box().value();e.beginPath(),e.arc(t.size[0]/2,t.size[1]/2,a.get("radius"),0,Math.PI/2),e.clip();for(var o=a.get("bgPosition"),s=a.get("bgSize"),u=a.get("bg"),c=0;c<u.length;c++)if(u[c].loaded()){e.save();var l=n.size[0]*s[c][0],f=n.size[1]*s[c][1],h=n.size[0]*o[c][0],p=n.size[1]*o[c][1];e.translate(t.margin[3]+h,t.margin[0]+p),e.drawImage(u[c]["export"](),0,0,l,f),e.restore()}else u[c].on("load",function(){r.update("bg")})}var r=n("$GraphicsAssembler"),o=this.extension("Drawer"),i=this.extension("Box"),a=this.extension("Style"),s=this.extension("Matrix"),u=1;r.layer(0,"fill",UpdateFill.bind(this)),r.layer(1,"bg",UpdateBg.bind(this)),r.layer(2,"stroke",UpdateStroke.bind(this)),r.box(i),i.f(function(e){var t=a.get("radius"),n=a.get("position"),r=a.get("anchor"),o=2*t,i=n[0],s=n[1];"center"===r[0]&&(i-=t),"right"===r[0]&&(i-=o),"middle"===r[1]&&(s-=t),"bottom"===r[1]&&(s-=o),e.set(i,s,o,o,u,u,u,u)}),this.watch("radius",function(){r.update("stroke"),r.update("bg"),r.update("fill"),i.purge(),s.purge(),r.resize()}),this.watch("fill",function(){r.update("fill")}),this.watch("position",function(){i.purge()}),this.watch("strokeWidth",function(e,t){t!==e&&(u=t,i.purge(),r.update("stroke"),s.purge(),r.resize())}),this.watch(["strokeStyle","strokeColor"],function(){r.update("stoke")}),this.watch(["bg","bgPosition","bgSize"],function(){r.update("bg")}),o.f(function(t){e.transform(this,t),r.draw(t)})}]),$R.service["class"]("Objects",["Debug","+Matrix",function DefaultObjectDrawer(e,t){var n=this.extension("Matrix");n.f(function(){return t.objectMatrix(this)}),this.watch(["position","rotate","translate","scale","skew"],function(){n.purge()})}]),$R.service["class"]("Objects",["+Drawer",function GroupObjectDrawer(e){var t=this.extension("Drawer"),n=this.extension("Layers"),r=this.extension("Box"),o=this.extension("Style");r.f(function(e){var t=1/0,r=1/0,i=-(1/0),a=-(1/0);n.forEach(function(){var e=this.extension("Box").box().value();e.position[0]<t&&(t=e.position[0]),e.position[1]<r&&(r=e.position[1]),e.position[0]+e.size[0]>i&&(i=e.position[0]+e.size[0]),e.position[1]+e.size[1]>a&&(a=e.position[1]+e.size[1])});var s=o.get("position");t===1/0&&(t=0),i===-(1/0)&&(i=0),r===1/0&&(r=0),a===-(1/0)&&(a=0),e.set(t+s[0],r+s[1],i-t,a-r,0,0,0,0)});var i=[0,0];this.watch("position",function(e,t){i=t,r.purge()}),t.f(function(t,r,i){var a=arguments;t.save(),t.globalAlpha*=o.get("opacity"),e.transform(this,t),n.forEach(function(){var e=this.extension("Drawer"),n=this.type();if("Group"===n)e.draw.apply(this,a);else{var r=this.extension("Style");t.save(),t.globalCompositeOperation=r.get("blending"),t.globalAlpha*=r.get("opacity"),e.draw.apply(this,a),t.restore()}}),t.restore()})}]),$R.service["class"]("Objects",["+Drawer","Resource",function ImageObjectDrawer(e,t){var n=this.extension("Style"),r=this.extension("Box"),o=this.extension("Drawer"),i=this.extension("Matrix"),a=null,s=null,u=null;this.watch("src",function(e,n){e!==n&&(u=t.image(n),u.on("load",function(){null===a&&(a=u.width()),null===s&&(s=u.height()),i.purge(),r.purge()}))}),this.watch("size",function(e,t){e[0]===t[0]&&e[1]===t[1]||(a=t[0],s=t[1],r.purge())}),this.watch("position",function(e,t){e[0]===t[0]&&e[1]===t[1]||r.purge()}),r.f(function(e){var t=n.get("position"),r=n.get("anchor"),o=t[0],i=t[1];"center"===r[0]&&(o-=a?a/2:0),"right"===r[0]&&(o-=a?a:0),"middle"===r[1]&&(i-=s?s/2:0),"bottom"===r[1]&&(i-=s?s:0),e.set(o,i,a?a:0,s?s:0,0,0,0,0)}),o.f(function(t){u&&u.loaded()&&!u.error()&&null!==a&&null!==s&&a>0&&s>0&&(e.transform(this,t),t.drawImage(u["export"](),0,0,a,s))})}]),$R.service["class"]("Objects",["@inject","Debug","+Drawer","+Path",function LineObjectDrawer(e,t,n,r){function UpdateCanvas(){var e=o.box().sprite(),t=i.get("path"),s=i.get("interpolation");if(a.width()!==e.size[0]||a.height()!==e.size[1]){var l=e.size[0],f=e.size[1];a.width(l),a.height(f)}g.clearRect(0,0,e.size[0],e.size[1]),g.save(),c||(r.interpolate(t,s),c=!0),g.translate(e.margin[3]-p,e.margin[0]-v),s>0?t.length>0&&n.drawBezierPath(g,t,i):t.length>0&&n.drawLinePath(g,t,i),g.restore(),u=!1}var o=this.extension("Box"),i=this.extension("Style"),a=e("$Canvas"),s=this.extension("Matrix"),u=!1,c=!1,l=1,f=0,h=this.extension("Drawer"),p=0,v=0;o.f(function(e){for(var t=i.get("position"),n=i.get("path"),r=i.get("anchor"),o=t[0],a=t[1],s=1/0,u=1/0,c=-(1/0),h=-(1/0),g=0;g<n.length;g++)n[g][0]<s&&(s=n[g][0]),n[g][2]<s&&(s=n[g][2]),n[g][1]<u&&(u=n[g][1]),n[g][3]<u&&(u=n[g][3]),
n[g][0]>c&&(c=n[g][0]),n[g][2]>c&&(c=n[g][2]),n[g][1]>h&&(h=n[g][1]),n[g][3]>h&&(h=n[g][3]);s===1/0&&(s=0),u===1/0&&(u=0),c===-(1/0)&&(c=0),h===-(1/0)&&(c=0),p=s,v=u;var d=l+f,y=Math.abs(c-s),m=Math.abs(h-u);"center"===r[0]&&(o-=y?y/2:0),"right"===r[0]&&(o-=y?y:0),"middle"===r[1]&&(a-=m?m/2:0),"bottom"===r[1]&&(a-=m?m:0),e.set(o+p,a+v,y,m,d,d,d,d)}),this.watch("path",function(){var e=i.get("interpolation");0!==e&&(c=!1),o.purge(),s.purge(),u=!0}),this.watch("position",function(){o.purge()}),this.watch("strokeWidth",function(e,t){for(var n=0,r=0;r<t.length;r++)t[r]>n&&(n=t[r]);l=n/2,u=!0,o.purge(),s.purge()}),this.watch("interpolation",function(e,t){e!==t&&(c=!1),f=Math.round(20*t),o.purge(),s.purge(),u=!0}),this.watch(["strokeStyle","strokeColor"],function(){u=!0});var g=a.context();h.f(function(e){u&&UpdateCanvas.call(this),n.transform(this,e),e.drawImage(a["export"](),0,0)})}]),$R.service["class"]("Objects",["@inject","+Drawer",function RectangleObjectDrawer(e,t){function normalizeRadius(e){for(var t=[e[0],e[1],e[2],e[3]],n=i.box().value(),r=[n.size[0]/2,n.size[1]/2],o=0;o<t.length;o++)t[o]>r[0]&&(t[o]=r[0]),t[o]>r[1]&&(t[o]=r[1]);return t}function drawRectPath(e,t){var n=normalizeRadius(r.get("radius")),o=.5522847498,a=i.box().value(),s=i.box().sprite();if(t){var u=r.get("strokeColor"),c=r.get("strokeWidth"),l=r.get("strokeStyle"),f=r.get("cap");e.lineCap=f}if(e.beginPath(),n[0]>0?e.moveTo(s.margin[3]+n[0],s.margin[0]):e.moveTo(s.margin[3],s.margin[0]),t&&(e.setLineDash(l[0]),e.strokeStyle=u[0],e.lineWidth=c[0]),n[1]>0){e.lineTo(a.size[0]+s.margin[3]-n[1],s.margin[0]);var h=o*n[1];e.bezierCurveTo(a.size[0]+s.margin[3]-n[1]+h,s.margin[0],a.size[0]+s.margin[3],s.margin[0]+n[1]-h,a.size[0]+s.margin[3],s.margin[0]+n[1])}else e.lineTo(a.size[0]+s.margin[3],s.margin[0]);if(t&&e.stroke(),t&&(e.setLineDash(l[1]),e.strokeStyle=u[1],e.lineWidth=c[1]),n[2]>0){var h=o*n[2];e.lineTo(a.size[0]+s.margin[3],a.size[1]+s.margin[0]-n[2]),t&&e.stroke(),t&&(e.setLineDash(l[2]),e.strokeStyle=u[2],e.lineWidth=c[2]),e.bezierCurveTo(a.size[0]+s.margin[3],a.size[1]+s.margin[0]-n[2]+h,a.size[0]+s.margin[3]-n[2]+h,a.size[1]+s.margin[0],a.size[0]+s.margin[3]-n[2],a.size[1]+s.margin[0]),t&&e.stroke()}else e.lineTo(a.size[0]+s.margin[3],a.size[1]+s.margin[0]),t&&e.stroke();if(t&&(e.setLineDash(l[2]),e.strokeStyle=u[2],e.lineWidth=c[2]),n[3]>0){var h=o*n[3];e.lineTo(s.margin[3]+n[3],a.size[1]+s.margin[0]),e.bezierCurveTo(s.margin[3]+n[3]-h,a.size[1]+s.margin[0],s.margin[3],a.size[1]+s.margin[0]-n[3]+h,s.margin[3],a.size[1]+s.margin[0]-n[3])}else e.lineTo(s.margin[3],a.size[1]+s.margin[0]);if(t&&e.stroke(),t&&(e.setLineDash(l[3]),e.strokeStyle=u[3],e.lineWidth=c[3]),n[0]>0){var h=o*n[0];e.lineTo(s.margin[3],s.margin[0]+n[0]),t&&e.stroke(),t&&(e.setLineDash(l[0]),e.strokStyle=u[0],e.lineWidth=c[0]),e.bezierCurveTo(s.margin[3],s.margin[0]+n[0]-h,s.margin[0]+n[0]-h,s.margin[0],s.margin[3]+n[0],s.margin[0]),t&&e.stroke()}else e.lineTo(s.margin[3],s.margin[0]),t&&e.stroke()}function hasRadius(){for(var e=!1,t=r.get("radius"),n=0;n<t.length;n++)if(t[n]>0){e=!0;break}return e}function hasStroke(){for(var e=r.get("strokeWidth"),t=!1,n=0;n<e.length;n++)if(e[n]>0){t=!0;break}return t}function monoStroke(){for(var e=r.get("strokeColor"),t=r.get("strokeWidth"),n=r.get("strokeStyle"),o=e[0],i=t[0],a=n[0],s=!0,u=1;u<4;u++)if(o!==e[u]||i!==t[u]||n[u][0]!==a[0]||n[u][1]!==a[1]){s=!1;break}return s}function UpdateBg(e){var t=i.box(),o=t.value(),a=t.sprite(),s=r.get("bgPosition"),u=r.get("bgSize"),c=r.get("bg");hasRadius()?drawRectPath(e):e.rect(a.margin[3],a.margin[0],o.size[0],o.size[1]),e.clip();for(var l=0;l<c.length;l++)if(c[l].loaded()){e.save();var f=o.size[0]*u[l][0],h=o.size[1]*u[l][1],p=o.size[0]*s[l][0],v=o.size[1]*s[l][1];e.translate(a.margin[3]+p,a.margin[0]+v),e.drawImage(c[l]["export"](),0,0,f,h),e.restore()}else c[l].on("load",function(){n.update("bg")})}function UpdateStroke(e){if(hasStroke()){var t=r.get("strokeColor"),n=r.get("strokeWidth"),o=r.get("strokeStyle"),a=i.box(),s=a.value(),u=a.sprite();if(hasRadius())drawRectPath(e,!0);else if(monoStroke()){var c=r.get("cap");e.lineCap=c,e.setLineDash(o[0]),e.strokeStyle=t[0],e.lineWidth=n[0],e.beginPath(),e.moveTo(u.margin[3],u.margin[0]),e.lineTo(u.margin[3]+s.size[0],u.margin[0]),e.lineTo(u.margin[3]+s.size[0],u.margin[0]+s.size[1]),e.lineTo(u.margin[3],u.margin[0]+s.size[1]),e.lineTo(u.margin[3],u.margin[0]),e.stroke()}}}function UpdateFill(e){var t=r.get("fill"),n=i.box(),o=n.value(),a=n.sprite();hasRadius()?drawRectPath(e):e.rect(a.margin[3],a.margin[0],o.size[0],o.size[1]),e.fillStyle=t,e.fill()}var n=e("$GraphicsAssembler"),r=this.extension("Style"),o=this.extension("Drawer"),i=this.extension("Box"),a=this.extension("Matrix"),s=[2,2,2,2];n.layer(0,"fill",UpdateFill.bind(this)),n.layer(1,"bg",UpdateBg.bind(this)),n.layer(2,"stroke",UpdateStroke.bind(this)),n.box(i),i.f(function(e){var t=r.get("position"),n=r.get("size"),o=r.get("anchor"),i=t[0],a=t[1];"center"===o[0]&&(i-=n[0]/2),"right"===o[0]&&(i-=n[0]),"middle"===o[1]&&(a-=n[1]/2),"bottom"===o[1]&&(a-=n[1]),e.set(i,a,n[0],n[1],s[0],s[1],s[2],s[3])}),o.f(function(e){t.transform(this,e),n.draw(e)}),this.watch("size",function(e,t){n.update("fill"),n.update("stroke"),n.update("bg"),n.resize(),a.purge(),i.purge()}),this.watch("radius",function(e,t){n.update("fill"),n.update("stroke"),n.update("bg")}),this.watch("strokeWidth",function(e,t){s[0]=t[0],s[1]=t[1],s[2]=t[2],s[3]=t[3],i.purge(),n.resize(),a.purge(),n.update("fill"),n.update("stroke"),n.update("bg")}),this.watch(["position","size"],function(){i.purge(),a.purge()}),this.watch(["bg","bgSize","bgPosition"],function(){n.update("bg")}),this.watch(["strokeStyle","strokeColor"],function(){n.update("stroke")}),this.watch(["fill"],function(){n.update("fill")})}]),$R.service["class"]("Objects",["+Drawer","+Model","Resource",function SpriteObjectDrawer(e,t,n){var r=this.extension("Style"),o=this.extension("Box"),i=this.extension("Drawer"),a=this.extension("Matrix"),s=null,u=null,c=null;o.f(function(e){var t=r.get("position"),n=r.get("anchor"),o=t[0],i=t[1];"center"==n[0]&&(o-=s?s/2:0),"right"==n[0]&&(o-=s?s:0),"middle"==n[1]&&(i-=u?u/2:0),"bottom"==n[1]&&(i-=u?u:0),e.set(o,i,s?s:0,u?u:0,0,0,0,0)}),i.f(function(t,n,r){c&&c.loaded()&&!c.error()&&c.ready()&&null!==s&&null!==u&&s>0&&u>0&&(e.transform(this,t),c.tick(n),t.drawImage(c["export"](),0,0,s,u))}),this.watch("src",function(e,r){if(r!==e){var i=t.readSpriteString(r);c=n.sprite(i.url),c.config(i.frames),c.on("load",function(){null==s&&(s=c.width()),null==u&&(u=c.height()),a.purge(),o.purge()})}}),this.watch("size",function(e,t){e[0]===t[0]&&e[1]===t[1]||(s=t[0],u=t[1],o.purge())}),this.watch("position",function(e,t){e[0]===t[0]&&e[1]===t[1]||o.purge()})}]),$R.service["class"]("Objects",["@inject","+Drawer","Resource",function TextObjectDrawer(e,t,n){function UpdateTextLayer(e){r.update();var t=o.get("lineHeight"),n=(o.get("color"),o.get("fontSize")),i=o.get("align");e.beginPath();var a=t-n/5;n<t?a-=t-n:a+=n-t,r.forEachLine(function(n){e.beginPath();var o=a+n*t;e.font=this.extractFontString(),e.fillStyle=this.color(),"center"===i?e.fillText(this.string(),(r.textBlockWidth()-this.width())/2,o):"right"===i?e.fillText(this.string(),r.textBlockWidth()-this.width()-2,o):e.fillText(this.string(),2,o)})}function getFontFile(){var e="oblique"===f?"normal":f,t=n.font(c,l,e);t.on("load",function(){u=!0,i.purge(),s.purge(),r.update(!0)}),t.on("error",function(){u=!0,i.purge(),s.purge(),r.update(!0)})}function drawText(e){u&&(h.size(r.textBlockWidth(),r.textBlockHeight()),h.update("text"),u=!1),t.transform(this,e),h.draw(e)}var r=this.extension("Text"),o=this.extension("Style"),i=this.extension("Box"),a=this.extension("Drawer"),s=this.extension("Matrix"),u=!1,c=o.get("font"),l=o.get("weight"),f=o.get("style"),h=e("$GraphicsAssembler");h.layer(0,"text",UpdateTextLayer),this.watch(["str","style","font","weight","size","color","fontSize","lineHeight"],function(){u=!0,i.purge(),s.purge()}),this.watch("font",function(e,t){c=t,getFontFile()}),this.watch("style",function(e,t){f=t,getFontFile()}),this.watch("weight",function(e,t){l=t,getFontFile()}),this.watch("anchor",function(){i.purge(),s.purge()}),this.watch("position",function(){i.purge()}),i.f(function(e){var t=o.get("position"),n=o.get("anchor"),i=t[0],a=t[1];"center"===n[0]&&(i-=r.textBlockWidth()/2),"right"===n[0]&&(i-=r.textBlockWidth()),"middle"===n[1]&&(a-=r.textBlockHeight()/2),"bottom"===n[1]&&(a-=r.textBlockHeight()),e.set(i,a,r.textBlockWidth(),r.textBlockHeight(),0,0,0,0)}),a.f(drawText)}]),$R.service["class"]("Objects",["@extend","+Model","+Path","Debug",function AreaObjectModel(e,t,n,r){function SyncPathProperty(e,t){for(var n=0;n<e.length;n++)t[n]||t.push(t[t.length-1]);e.length<t.length&&t.splice(e.length-1,t.length-e.length)}e(this,"$DefaultObjectModel"),e(this,"$GlobalBackgroundModel"),e(this,"$DefaultFreeStrokeModel");var o=this.extension("Style");this.extension("Animation");o.define(0,"path",[[0,0,0,0,0,0,0,0]],function(e){if(n.checkSimplePath(e)){var t=o.get("path"),i=n.convertSimplePath(e);return i[0][0]===i[i.length-1][2]&&i[0][1]===i[i.length-1][3]||i.push([i[i.length-1][2],i[i.length-1][3],i[0][0],i[0][1],i[i.length-1][2],i[i.length-1][3],i[0][0],i[0][1]]),t.length!==i.length&&(SyncPathProperty(i,o.get("strokeStyle")),SyncPathProperty(i,o.get("strokeWidth")),SyncPathProperty(i,o.get("strokeColor"))),i}return r.warn("Area Model / Invalid value for area path!"),!1},function(e){return n.convertComplexPath(e)})}]),$R.service["class"]("Objects",["@extend","+Color","+Model","Debug",function CircleObjectModel(e,t,n,r){e(this,"$DefaultObjectModel"),e(this,"$GlobalBackgroundModel");var o=this.extension("Style"),i=this.extension("Animation");o.define(0,"radius",0,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.morph("radius",0,function(e,t,n){"number"==typeof n?(n<0&&(n=0),e(this.style("radius")),t(n)):r.warn({v:n},"[{v}] is not a valid radius value")},function(e){return e<0&&(e=0),e}),o.define(0,"strokeWidth",1,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.morph("strokeWidth",0,function(e,t,n){"number"==typeof n&&(n<0&&(n=0),e(this.style("strokeWidth")),t(n))},function(e){return e<0&&(e=0),e}),o.define(0,"strokeColor","rgba(0,0,0,1)",function(e){return"string"==typeof e?t.colorToArray(e)?e:(r.warn({val:e},"[{val}] is not a valid strokeColor value"),!1):"object"==typeof e&&e.constructor===Array?t.isColor(e)?t.arrayToColor(e):(r.warn({val:e},"[{val}] is not a valid strokeColor value"),!1):void 0},function(e){return t.colorToArray(e)}),i.morph("strokeColor",0,function(e,o,i){if("string"==typeof i){var a=t.colorToArray(i);a?(e(this.style("strokeColor")),o(a)):r.warn({v:i},"[{v}] is not a valid value for strokeColor")}else"object"==typeof i&&i.constructor===Array&&t.isColor(i)?(e(this.style("strokeColor")),o(n.cloneArray(i))):r.warn({v:i},"[{v}] is not a valid value for strokeColor")},function(e){return t.normalize(e),e}),o.define(0,"strokeStyle",[1,0],function(e){if("object"==typeof e&&e.constructor===Array){if(n.validNumericValue(e)){if(2!==e.length)return r.warn({val:e},"[{val}] is not a valid strokeStyle value."),!1;for(var t=0;t<e.length;t++)e[t]<0&&(e[t]=0);return n.cloneArray(e)}return r.warn({val:e},"[{val}] is not a valid strokeStyle value."),!1}return r.warn({val:e},"[{val}] is not a valid strokeStyle value"),!1},function(e){return n.cloneArray(e)}),i.morph("strokeStyle",0,function(e,t,o){"object"==typeof o&&o.constructor===Array&&n.validNumericArray(o)&&2===o.length?(e(this.style("strokeStyle")),t(n.cloneArray(o))):r.warn({v:o},"[{v}] is not a valid value for strokeColor")},function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e})}]),$R.service["class"]("Objects",["+Model","+Path","Debug",function DefaultObjectModel(e,t,n){var r=this.extension("Style"),o=this.extension("Animation");r.define(2,"position",[0,0],function(t){return e.validNumericArray(t)&&2===t.length?e.cloneArray(t):(n.warn("Invalid numeric array for position!"),!1)},function(t){return e.cloneArray(t)}),o.morph("position",2,function(t,r,o){e.validNumericArray(o)&&2===o.length?(t(this.style("position")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for position")},function(e){return e}),r.define(0,"rotate",0,function(e){if("number"==typeof e)return e<-360&&(e+=360),e>360&&(e-=360),e=e*Math.PI/180},function(e){return e*(180/Math.PI)}),o.morph("rotate",0,function(e,t,r){"number"==typeof r?(e(this.style("rotate")),t(r)):n.warn({v:r},"Is not a valid value to animate rotate")},function(e){return e}),r.define(0,"translate",[0,0],function(t){return e.validNumericArray(t)&&2===t.length?e.cloneArray(t):(n.warn("Invalid numeric array for translate!"),!1)},function(t){return e.cloneArray(t)}),o.morph("translate",0,function(t,r,o){e.validNumericArray(o)&&2===o.length?(t(this.style("translate")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for translate")},function(e){return e}),r.define(0,"opacity",1,function(e){return"number"==typeof e?(e<0&&(e=0),e>1&&(e=1),e):(n.warn("Opacity value is not a number"),!1)},function(e){return e}),o.morph("opacity",0,function(e,t,r){"number"==typeof r?(r<0&&(r=0),r>1&&(r=1),e(this.style("opacity")),t(r)):n.warn({v:r},"Invalid value for translate")},function(e){return e<0&&(e=0),e>1&&(e=1),e}),r.define(0,"scale",[1,1],function(t){return"number"==typeof t?t>0?[t,t]:[0,0]:e.validNumericArray(t)&&2===t.length?e.cloneArray(t):(n.warn("Unknown type of value for scale!"),!1)},function(t){return e.cloneArray(t)}),o.morph("scale",0,function(t,r,o){if("number"==typeof o)o<0&&(o=0),t(this.style("scale")),r([o,o]);else if(e.validNumericArray(o)&&2===o.length){t(this.style("scale"));var i=[o[0],o[1]];i[0]<0&&(i[0]=0),i[1]<0&&(i[1]=0),r(i)}else n.warn({v:o},"Invalid value for scale")},function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e}),r.define(0,"skew",[0,0],function(t){if("number"==typeof t){t>360&&(t-=360),t<-360&&(t+=360);var r=t*Math.PI/180;return[r,r]}if(e.validNumericArray(t)&&2===t.length){t[0]>360&&(t[0]=t[1]-360),t[1]<-360&&(t[1]=t[1]+360);var o=t[0]*Math.PI/180,i=t[1]*Math.PI/180;return[o,i]}n.warn({v:t},"Ubknown value format for skew. [{v}]")},function(t){return e.cloneArray(t)}),o.morph("skew",0,function(t,r,o){"number"==typeof o?(t(this.style("skew")),r([o,o])):e.validNumericArray(o)&&2===o.length?(t(this.style("skew")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for skew")},function(e){return e}),r.define(0,"origin",[.5,.5],function(t){return"object"==typeof t&&t.constructor===Array?e.validNumericArray(t)&&2===t.length?[t[0],t[1]]:(n.warn("Unknown format of value for origin. Invalid Array!"),!1):(n.warn("Unknown type of value for origin"),!1)},function(t){e.cloneArray(t)}),o.morph("origin",0,function(t,r,o){e.validNumericArray(o)&&2===o.length?(t(this.style("origin")),r(e.cloneArray(o))):n.warn({v:o},"Invalid value for origin")},function(e){return e}),r.define(2,"cap","round",function(e){return"string"==typeof e?"round"===e||"butt"===e||"square"===e?e:(n.error({val:e},"{val} is incorrect value for line cap property!"),!1):void n.error("Cap property is a string!")},function(e){return e}),"Group"!==this.type()&&(r.define(0,"blending","source-over",function(t){return e.validBlending(t)?t:(n.warn({val:t}," [{val}] is not a valid blending!"),!1)},function(e){return e}),r.define(1,"anchor",["left","top"],function(e){return"object"==typeof e&&e.constructor===Array&&2===e.length?"left"!==e[0]&&"center"!==e[0]&&"right"!==e[0]||"top"!==e[1]&&"middle"!==e[1]&&"bottom"!==e[1]?(n.warn({v:e},'[{v}] is not a valid value. Array ["left" || "center" || "right" , "top" || "middle" || "bottom" ] is required format.'),!1):[e[0],e[1]]:(n.warn({v:e},"[{v}] is not a valid anchor value for text element"),!1)},function(e){return[e[0],e[1]]}))}]),$R.service["class"]("Objects",["+Model","+Color","Debug",function DefaultFreeStrokeModel(e,t,n){var r=this.extension("Style");r.define(1,"interpolation",0,function(e){return e>.4&&(e=.4),e<0&&(e=0),e},function(e){return e}),r.define(2,"strokeColor",["rgba(0,0,0,1)"],function(e){if("string"==typeof e){if(t.colorToArray(e)){for(var o=r.get("path"),i=[],a=0;a<o.length;a++)i[a]=e;return i}return n.warn({val:e},"Line Model / {val} is not a color!"),!1}if("object"==typeof e&&e.constructor==Array){for(var o=r.get("path"),s=r.get("strokeColor"),i=[],a=0;a<o.length;a++)e[a]?"string"==typeof e[a]?t.colorToArray(e[a])?i.push(e[a]):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):("object"==typeof e[a]||e[a].constructor==Array)&&t.isColor(e[a])?i.push(t.arrayToColor(e[a])):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!"));return i.length?i:(n.warn({val:e},"Line Model / {val} is not a color!"),!1)}if("object"==typeof e){for(var o=r.get("path"),s=r.get("strokeColor"),i=[],a=0;a<o.length;a++)e[a]?"string"==typeof e[a]?t.colorToArray(e[a])?i.push(e[a]):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, mo changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):("object"==typeof e[a]||e[a].constructor==Array)&&t.isColor(e[a])?i.push(t.arrayToColor(e[a])):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, no changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!")):s[a]?(i.push(s[a]),n.warn({val:e[a]},"Line Model / {val} is not a color, no changes made!")):(i.push(s[s.length-1]),n.warn({val:e[a]},"Line Model / {val} is not a color, replace with rgba(0,0,0,1)!"));return i.length?i:(n.warn({val:e},"Line Model / {val} is not a color!"),!1)}return n.warn("Line Model / Wrong type of value"),!1},function(e){for(var n=[],r=0;r<e.length;r++)n.push(t.colorToArray(e[r]));return n}),r.define(2,"strokeWidth",[1],function(e){if("number"==typeof e){for(var t=r.get("path"),o=[],i=0;i<t.length;i++)o.push(e);return o}if("object"==typeof e&&e.constructor==Array){for(var t=r.get("path"),a=r.get("strokeWidth"),o=[],i=0;i<t.length;i++)"number"==typeof e[i]?o.push(e[i]):a[i]?(o.push(a[i]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):(o.push(a[a.length-1]),n.warn({val:e[i]},"Line Model / {val} is not a number!"));return o}if("object"==typeof e){for(var t=r.get("path"),a=r.get("strokeWidth"),o=[],i=0;i<t.length;i++)e[i]?"number"==typeof e[i]?o.push(e[i]):a[i]?(o.push(a[i]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):(o.push(a[a.length-1]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):a[i]?(o.push(a[i]),n.warn({val:e[i]},"Line Model / {val} is not a number!")):o.push(a[a.length-1]);return o}n.warn({val:e},"Line Model / {val} is not valid value for strokeWidth!")},function(t){return e.cloneArray(t)}),r.define(2,"strokeStyle",[[1,0]],function(t){if("object"==typeof t&&t.constructor==Array){if(e.validNumericArray(t)){for(var o=[],i=r.get("path"),a=0;a<i.length;a++)o.push(e.cloneArray(t));return o}for(var o=[],i=r.get("path"),s=r.get("strokeStyle"),a=0;a<i.length;a++)t[a]?e.validNumericArray(t[a])?o.push(t[a]):(s[a]?o.push(s[a]):o.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a valid value for strokeStyle!")):s[a]?o.push(s[a]):o.push(s[s.length-1]);return o}if("object"==typeof t){for(var o=[],s=r.get("strokeStyle"),i=r.get("path"),a=0;a<i.length;a++)t[a]?e.validNumericArray(t[a])?o.push(t[a]):(s[a]?o.push(s[a]):o.push(s[s.length-1]),n.warn({val:t[a]},"Line Model / {val} is not a valid value for strokeStyle!")):s[a]?o.push(s[a]):o.push(s[s.length-1]);return o}},function(t){return e.cloneArray(t)})}]),$R.service["class"]("Objects",["+Model","+Color","Debug","Resource",function GlobalBackgroundModel(e,t,n,r){function SyncBgProperty(t,n,r){for(var o=0;o<t.length;o++)n[o]||n.push(e.cloneArray(r));t.length<n.length&&n.splice(t.length-1,n.length-path.length)}var o=this.extension("Style"),i=this.extension("Animation");o.define(0,"fill","rgba(0,0,0,1)",function(e){return"string"==typeof e?t.colorToArray(e)?e:(n.warn({val:e},"[{val}] is not a valid color!"),!1):"object"==typeof e&&e.constructor===Array?t.isColor(e)?t.arrayToColor(e):(n.warn({val:e},"[{val}] is not a valid color"),!1):(n.warn({val:e},"[{val}] is not a valid color!"),!1)},function(e){return t.colorToArray(e)}),i.morph("fill",0,function(r,o,i){if("string"==typeof i){var a=t.colorToArray(i);a?(r(this.style("fill")),o(a)):n.warn({v:i},"[{v}] is not avalid color!")}else"object"==typeof i&&i.constructor===Array?t.isColor(i)&&(r(this.style("fill")),o(e.cloneArray(i))):n.warn({v:i},"[{v}] is not a valid color!")},function(e){return t.normalize(e),e}),o.define(0,"bg",[],function(t){if("string"==typeof t){if(e.isSpriteString(t)){var i=e.readSpriteString(t),a=r.sprite(i.url);return a.config(i.frames),[a]}return[r.image(t)]}if("object"==typeof t||t.constructor===Array){if(2===t.length&&"string"==typeof t[0]&&"number"==typeof t[1]){if(t[1]>0){var a=r.sprite(t[0]);return a.config(t[1]),[a]}return!1}for(var s=[],u=0;u<t.length;u++)if("string"==typeof t[u])if(e.isSpriteString(t[u])){var i=e.readSpriteString(t[u]),a=r.sprite(i.url);a.config(i.frames),s.push(t)}else s.push(r.image(t[u]));else if("object"==typeof t[u]&&t[u].constructor==Array){if(2==t[u].length&&"string"==typeof t[u][0]&&"number"==typeof t[u][1])if(t[u][1]>0){var a=r.sprite(t[u][0]);a.config(t[u][1]),s.push(a)}else n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bg value. Skipped.")}else n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bg value. Skipped");return s}if("object"==typeof t){for(var c=o.get("bg"),s=[],u=0;u<c.length;u++)if(t[u])if("object"==typeof t[u]&&t[u].constructor==Array)if("string"==typeof t[u][0]&&"number"==typeof t[u][1]){var a=r.sprite(t[u][0]);a.config(t[u][1]),s.push(a)}else n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bg array value.");else if("string"==typeof t[u])if(e.isSpriteString(t[u])){var i=e.readSpriteString(t[u]),a=r.sprite(i.url);a.config(i.frames),s.push(t)}else s.push(r.image(t[u]));else s.push(c[u]),n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid value for bg.");else s.push(c[u]);return s}return n.warn({val:t},"[{val}] is not valid value for bg"),!1},function(e){for(var t=[],r=0;r<e.length;r++)"Image"==e[r].type?t.push(e[r].url()):"Sprite"==e[r].type?t.push(e[r].url()+"["+e[r].frames()+"]"):n.error({val:e[r],i:r}+"[{i}][{val}] Unknown type of the background object container. Critical error.");return t});var a=[0,0];o.define(2,"bgPosition",[a],function(t){if("object"==typeof t&&t.constructor==Array){if(e.validNumericArray(t)&&2==t.length){for(var r=o.get("bg"),i=[],s=[t[0],t[1]],u=0;u<r.length;u++)i.push(s);return i}for(var i=[],r=o.get("bg"),c=o.get("bgPosition"),u=0;u<r.length;u++)t[u]?e.validNumericArray(t[u])&&2==t[u].length?i.push([t[0],t[1]]):(c[u]?i.push(c[u]):i.push(e.cloneArray(a)),n.warn({i:u,val:t[u]},"[{i}][{val}] is not a valid bgposition value")):c[u]?i.push(c[u]):i.push(e.cloneArray(a));return i}if("object"==typeof t){for(var i=[],r=o.get("bg"),c=o.get("bgPosition"),u=0;u<r.length;u++)t.hasOwnProperty(u)?c[u]?e.validNumericValue()&&2==t[u].length?i.push([t[0],t[1]]):(i.push(c[u]),n.warn({i:u,val:t[u]},"[{i}][{val}] is not a valid bgposition value")):i.push(e.cloneArray(a)):c[u]?i.push(c[u]):i.push(e.cloneArray(a));return i}n.warn({val:t},"[{val}] is not a valid bgposition value")},function(t){return e.cloneArray(t)});var s=[1,1];o.define(1,"bgSize",[s],function(t){if("object"==typeof t&&t.constructor==Array){if(2==t.length&&e.validNumericArray(t)){for(var r=o.get("bg"),i=[],a=[t[0],t[1]],u=0;u<r.length;u++)i.push(a);return i}for(var r=o.get("bg"),c=o.get("bgSize"),i=[],u=0;u<r.length;u++)2==t[u].length&&e.validNumericArray(t[u])?i.push(t[u][0],t[u][1]):(c[u]?i.push(c[u]):i.push(e.cloneArray(s)),n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bgsize value"));return i}if("object"==typeof t){for(var r=o.get("bg"),c=o.get("bgSize"),i=[],u=0;u<r.length;u++)t.hasOwnProperty(u)?"object"==typeof t[u]&&t[u].constructor==Array&&2==t[u].length&&e.validNumericArray(t[u])?i.push([t[u][0],t[u][1]]):(c[u]?i.push(c[u]):i.push(e.cloneArray(s)),n.warn({val:t[u],i:u},"[{i}][{val}] is not a valid bgsize value.")):c[u]?i.push(c[u]):i.push(e.cloneArray(s));return i}},function(t){return e.cloneArray(t)}),this.watch("bg",function(e,t){e.length!==t.length&&(SyncBgProperty(t,o.get("bgPosition"),a),SyncBgProperty(t,o.get("bgSize"),s))})}]),$R.service["class"]("Objects",["+Model",function GlobalSizeModel(e){var t=this.extension("Animation"),n=this.extension("Style");t.morph("size",1,function(t,n,r){"number"==typeof r?(r<0&&(r=0),t(this.style("size")),n([r,r])):"object"==typeof r&&r.constructor==Array&&e.validNumericArray(r)&&2==r.length?(r[0]<0&&(r[0]=0),r[1]<0&&(r[1]=0),t(this.style("size")),n(e.cloneArray(r))):Debug.warn({v:r},"[{v}] is not valid value for size")},function(e){return e[0]<0&&(e[0]=0),e[1]<0&&(e[1]=0),e}),n.define(1,"size",[0,0],function(t){return"number"==typeof t?(t<0&&(t=0),[t,t]):"object"==typeof t&&t.constructor==Array&&2==t.length&&e.validNumericArray(t)?(t[0]<0&&(t[0]=0),t[1]<0&&(t[1]=0),[t[0],t[1]]):(Debug.warn({val:t},"[{val}] is not valid value for size!"),!1)},function(t){return e.cloneArray(t)})}]),$R.service["class"]("Objects",["@extend",function GroupObjectModel(e){e(this,"$DefaultObjectModel")}]),$R.service["class"]("Objects",["@extend","Debug",function ImageObjectModel(e,t){e(this,"$DefaultObjectModel"),e(this,"$GlobalSizeModel");var n=this.extension("Style");n.define(0,"src",null,function(e){return"string"==typeof e?e:(t.warn({val:e},"[{val}] is not a valid src value"),!1)},function(e){return e})}]),$R.service["class"]("Objects",["@extend","+Model","+Path","+Color","Debug",function LineObjectModel(e,t,n,r,o){function SyncPathProperty(e,t){for(var n=0;n<e.length;n++)t[n]||t.push(t[t.length-1])}e(this,"$DefaultObjectModel"),e(this,"$DefaultFreeStrokeModel");var i=this.extension("Style");i.define(0,"path",[[0,0,0,0,0,0,0,0]],function(e){if(n.checkSimplePath(e)){var t=i.get("path"),r=n.convertSimplePath(e);return t.length!==r.length&&(SyncPathProperty(r,i.get("strokeStyle")),SyncPathProperty(r,i.get("strokeWidth")),SyncPathProperty(r,i.get("strokeColor"))),r}return o.warn("Line Model / Invalid value for path!"),!1},function(e){return n.convertComplexPath(e)})}]),$R.service["class"]("Objects",["@extend","+Model","+Color","Debug",function RectangleObjectModel(e,t,n,r){e(this,"$DefaultObjectModel"),e(this,"$GlobalBackgroundModel"),e(this,"$GlobalSizeModel");var i=this.extension("Style"),a=this.extension("Animation");i.define(0,"radius",[0,0,0,0],function(e){if("number"==typeof e)return e=Math.round(e),[e,e,e,e];if("object"==typeof e){if(e.constructor!==Array){for(var t=i.get("radius"),n=[],r=0;r<t.length;r++)"number"==typeof e[r]?n.push(Math.round(e[r])):n.push(t[r]);return n}for(var o=[],a=!0,r=0;r<e.length;r++){if("number"!=typeof e[r]){a=!1;break}e[r]<0?o.push(0):o.push(Math.round(e[r]))}if(a){for(var n=[],t=this.style("radius"),r=0;r<t.length;r++)void 0!==o[r]?n.push(o[r]):n.push(t[r]);return n}}},function(e){return t.cloneArray(e)}),a.morph("radius",1,function(e,t,n){if("number"==typeof n)n<0&&(n=0),e(this.style("radius")),t([n,n,n,n]);else if("object"==typeof n){var o=this.style("radius"),i=[];e(o);for(var a=0;a<o.length;a++)"number"==typeof n[a]?n[a]<0?i.push(0):i.push(Math.round(n[a])):i.push(o[a]);t(i)}else r.warn({v:n},"{v} is not a valid radius value for rectangle")},function(e){return e}),i.define(0,"strokeColor",["rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)","rgba(0,0,0,1)"],function(e){if("string"==typeof e)return n.colorToArray(e)?[e,e,e,e]:(r.warn({value:val}," [{val} is not a valid stroke string"),!1);if("object"==typeof e&&e.constructor===Array){for(var t=i.get("strokeColor"),o=[],a=0;a<t.length;a++)e[a]?"string"==typeof e[a]?n.colorToArray(e[a])?o.push(e[a]):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid stroke color value!")):"object"==typeof e[a]&&e[a].constructor===Array?n.isColor(e[a])?o.push(n.arrayToColor(e[a])):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid stroke color value")):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid color value")):o.push(t[a]);return o}if("object"==typeof e){for(var t=i.get("strokeColor"),o=[],a=0;a<t.length;a++)e.hasOwnProperty(a)?"string"==typeof e[a]?n.colorToArray(e[a])?o.push(e[a]):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid color value")):"object"==typeof e[a]&&e[a].constructor===Array&&n.isColor(e[a])?o.push(n.arrayToColor(e[a])):(o.push(t[a]),r.warn({val:e[a]},"[{val}] is not a valid color value")):o.push(t[a]);return o}return r.warn({val:e},"[{val}] is not a valid value for strokeColor!"),!1},function(e){for(var t=[],r=0;r<e.length;r++)t.push(n.colorToArray(e[r]));return t}),a.morph("strokeColor",0,function(e,o,i){if("string"==typeof i){var a=n.colorToArray(i);a?(o([t.cloneArray(a),t.cloneArray(a),t.cloneArray(a),t.cloneArray(a)]),e(this.style("strokeColor"))):r.warn({v:i},"{v} is not a valid color")}else if("object"==typeof i&&i.constructor===Array)if(n.isColor(i))o([t.cloneArray(i),t.cloneArray(i),t.cloneArray(i),t.cloneArray(i)]),e(this.style("strokeColor"));else{for(var s=this.style("strokeColor"),u=[],c=!1,l=0;l<s.length;l++)if("string"==typeof i[l]){var a=n.colorToArray(i[l]);a?(u.push(a),c=!0):u.push(f[l])}else"object"==typeof i[l]&&i[l].constructor===Array&&i[l]&&n.isColor(i[l])?(u.push(t.cloneArray(i[l])),c=!0):u.push(f[l]);c?(e(s),o(u)):r.warn({v:i},"[{v}] is not a valid value for strokeColor")}else if("object"==typeof i){for(var f=this.style("strokeColor"),u=[],c=!1,l=0;l<f.length;l++)if("string"==typeof i[l]){var a=n.colorToArray(i[l]);a?(u.push(a),c=!0):u.push(f[l])}else"object"==typeof i[l]&&i[l].constructor===Array&&n.isColor(i[l])?(u.push(t.cloneArray(i[l])),c=!0):u.push(f[l]);c?(e(f),o(u)):r.warn({v:i},"[{v}] is not a valid value for strokeColor!")}},function(e){for(var t=0;t<e.length;t++)n.normalize(e[t]);return e}),i.define(0,"strokeWidth",[1,1,1,1],function(e){if("number"==typeof e)return[e,e,e,e];if("object"==typeof e&&e.constructor===Array){for(var t=i.get("strokeWidth"),n=[],o=0;o<t.length;o++)e[o]?"number"==typeof e[o]?n.push(e[o]):(n.push(t[o]),r.warn({val:e}," [{val}] is not a valid stroke width value")):n.push(t[o]);return n}if("object"==typeof e){for(var n=[],t=i.get("strokeWidth"),o=0;o<t.length;o++)e.hasOwnProperty(o)?"number"==typeof e[o]?n.push(e[o]):(r.warn({val:e},"[{val}] is not a valid value for strokeWidth"),n.push(t[o])):n.push(t[o]);return n}return r.warn({val:e}," [{val}] is not a valid strokeWidth value"),!1},function(e){return t.cloneArray(e)}),a.morph("strokeWidth",0,function(e,t,n){if("number"==typeof n)t([n,n,n,n]),e(this.style("strokeWidth"));else if("object"==typeof n&&n.constructor===Array){for(var o=this.style("strokeWidth"),i=[],a=0;a<o.length;a++)n[a]&&"number"==typeof n[a]?i.push(n[a]):i.push(o[a]);t(i),e(o)}else if("object"==typeof n){for(var o=this.style("strokeWidth"),i=[],s=!1,a=0;a<o.length;a++)n[a]&&"number"==typeof n[a]?(i.push(n),s=!0):i.push(o[a]);s?(t(i),e(o)):r.warn({v:n}," [{v}] is not a valid strokeWidth object")}else r.warn({v:n}," [{v}] is not a valid value for strokeWidth")},function(e){return e}),i.define(0,"strokeStyle",[[1,0],[1,0],[1,0],[1,0]],function(e){if("object"!=typeof e)return r.warn({val:e}," [{val}] is not valid strokeStyle value"),!1;if(e.constructor!==Array){for(var n=[],o=i.get("strokeStyle"),a=0;a<o.length;a++)e.hasOwnProperty(a)?"object"==typeof e[a]&&e[a].constructor===Array?t.validNumericArray(e[a])&&2===e[a].length?n.push(t.cloneArray(e[a])):(n.push(o[a]),
r.warn({val:e[a]},"[{val}] is not a valid strokeStyle value")):(n.push(o[a]),r.watch({val:e[a]}," [{val}] is not a valid strokeStyle value")):n.push(o[a]);return n}if(!t.validNumericArray(e)){for(var n=[],o=i.get("strokeStyle"),a=0;a<o.length;a++)e[a]?t.validNumericArray(e[a])&&2===e.length?n.push(t.cloneArray(e[a])):(n.push(o[a]),r.warn({val:e[a]}," [{val}] is not a valid stroke style value")):n.push(o[a]);return n}return 2===e.length?[e,e,e,e]:void r.warn({v:e}," [{v}] is not a valid value for stroke width!")},function(e){return t.cloneArray(e)}),a.morph("strokeStyle",0,function(e,n,i){if("object"==typeof i)if(i.constructor===Array)if(t.validNumericArray(i))2===i.length?(e(this.style("strokeStyle")),n(t.cloneArray(i),t.cloneArray(i),t.cloneArray(i),t.cloneArray(i))):r.warn({v:i}," [{v}] is not a valid strokeStyle value!");else{for(var a=this.style("strokeStylr"),s=[],u=!1,c=0;c<a.length;c++)i[c]&&t.validNumericArray(i[c])&&2===i[c].length?(s.push(t.cloneArray(i[c])),u=!0):s.push(a[c]);u?(e(a),n(s)):r.warn({v:i},"[{v}] is not a valid strokeStyle value")}else{for(var a=this.style("strokeStyle"),s=[],u=!1,c=0;c<a.length;c++)i[c]&&t.validNumericArray(i[c])&&2===i[c].length?(s.push(t.cloneArray(i[o])),u=!0):s.push(a[c]);u?(e(a),n(s)):r.warn({v:i},"[{v}] is not a valid strokeStyleValue")}else r.warn({v:i},"[{v}] is not a valid strokeStyleValue")},function(e){return e})}]),$R.service["class"]("Objects",["@extend","+Model","Debug",function SpriteObjectModel(e,t,n){e(this,"$DefaultObjectModel"),e(this,"$GlobalSizeModel");var r=this.extension("Style");r.define(0,"src",null,function(e){return"string"==typeof e?t.isSpriteString(e)?e:(n.warn({val:e},"[{val}] is not a valid value for sprite src"),!1):"object"==typeof e&&e.constructor==Array?"string"==typeof e[0]&&"number"==typeof e[1]&&e[1]>0?e[0]+"["+e[1]+"]":(n.warn({val:e},"[{val}] is not a valid sprite src"),!1):void n.warn({val:e},"[{val}] is not a valid sprite src")},function(e){return e})}]),$R.service["class"]("Objects",["@extend","+Model","+Color","Debug","@Fonts",function TextObjectModel(e,t,n,r,o){e(this,"$DefaultObjectModel");var i=this.extension("Style"),a=this.extension("Text"),s=this.extension("Animation"),u=this;i.define(1,"size",["auto","auto"],function(e){if("string"==typeof e&&"auto"===e)return a.limits(1/0,1/0),[e,e];if("number"==typeof e)return a.limits(e,e),[e,e];if("object"==typeof e&&e.constructor===Array&&2===e.length){for(var t=!0,n=0;n<e.length;n++)if("string"!=typeof e[n]&&"number"!=typeof e[n]||"string"==typeof e[n]&&"auto"!==e[n]){t=!1;break}return t?("number"==typeof e[0]&&e[0]<0&&(e[0]=0),"number"==typeof e[1]&&e[1]<0&&(e[1]=0),a.limits("auto"===e[0]?1/0:e[0],"auto"===e[1]?1/0:e[1]),[e[0],e[1]]):(r.warn({v:e},"[{v}] is not a valid size array"),!1)}return r.warn({v:e},"[{v}] is not a valid value for size"),!1},function(e){return[e[0],e[1]]}),i.define(1,"str","",function(e){return"string"==typeof e&&e},function(e){return e});var c="sans-serif";i.define(1,"font","sans-serif",function(e){if("string"==typeof e)return c=o.format(e),u.style("systemFont",null),e},function(e){return e}),i.define(1,"systemFont",c,function(){return c},function(){return c}),i.define(1,"weight",400,function(e){return"number"==typeof e&&(e<100&&(e=100),e>900&&(e=900),e%100!==0&&(e-=e%100),e)},function(e){return e}),i.define(1,"style","normal",function(e){return"string"==typeof e&&("normal"===e||"italic"===e||"oblique"===e)&&e},function(e){return e}),i.define(1,"lineHeight",14,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.define(1,"fontSize",14,function(e){if("number"==typeof e)return e<0&&(e=0),e},function(e){return e}),i.define(1,"color","rgba(0,0,0,1)",function(e){return"string"==typeof e?n.colorToArray(e)?e:(r.warn({val:e},"[{val}] is not a valid color!"),!1):"object"==typeof e&&e.constructor===Array?n.isColor(e)?n.arrayToColor(e):(r.warn({val:e},"[{val}] is not a valid color"),!1):(r.warn({val:e},"[{val}] is not a valid color!"),!1)},function(e){return n.colorToArray(e)}),i.define(1,"align","left",function(e){return"center"===e||"left"===e||"right"===e?e:(r.warn({v:e},"[{v}] is not a proper value for aling text property"),!1)},function(e){return e}),s.morph("color",1,function(e,o,i){if("string"==typeof i){var a=n.colorToArray(i);a?(e(this.style("fill")),o(a)):r.warn({v:i},"[{v}] is not avalid color!")}else"object"==typeof i&&i.constructor===Array?n.isColor(i)&&(e(this.style("fill")),o(t.cloneArray(i))):r.warn({v:i},"[{v}] is not a valid color!")},function(e){return n.normalize(e),e})}]),$R.service["class"]("Sound",["+Animation","Morphine",function Animation(e,t){function Resolve(e){if(e==p)for(var t=0;t<a.length;t++)c.hasOwnProperty(a[t].morph.property())&&c[a[t].morph.property()].apply(u,[n,a[t].result]);else if(e==v){i=!0;for(var r={},t=0;t<a.length;t++)r[a[t].morph.property()]=a[t].result;g.done(1,r),h()}}var n=0,r=null,o=null,i=!1,a=null,s=null,u=null,c=null,l=!1,f=!1,h=null,p="type",v="complete",g=null;this.target=function(){return u},this.queue=function(){return l},this.active=function(){return f},this.done=function(){return i},this.hasProperty=function(e){for(var t=0,n=0;n<a.length;n++)if(a[n].morph.property()==e){t=n+1;break}return t},this.properties=function(){for(var e=[],t=0;t<a.length;t++)e.push(a[t].morph.property());return e},this.stop=function(e){if(e){var t=this.hasProperty(e);t&&(t-=1,a.splice(t,1))}else a=[]},this.start=function(){f=!0;for(var n=[],i=0;i<a.length;i++){var u=a[i].morph.get(a[i].value);void 0!==u&&u.start()!==!1&&u.end()!==!1&&n.push(a[i])}a=n;var c=e.getTickFunction();s=t.create(0,1,function(e,t){if(0==a.length)Resolve(v),s.stop();else{for(var n=0;n<a.length;n++)a[n].result=c(t,a[n].morph.start(),a[n].morph.end()),a[n].morph.apply(e,a[n].result);Resolve(p),1==e&&Resolve(v)}},o,r,0)},this.config=function(t,n,i,s){e.normalizeConfig(i),r=i.duration,o=i.easing,c=i.step,l=i.queue,h=s,a=n,u=t,g=i}}]),$R.service["class"]("Sound",["Debug",function Morph(e){function SetStartValue(e){t=e}function SetEndValue(e){n=e}var t,n,r=null,o=null,i=null,a=null,s=!1,u=0;this.start=function(){return t},this.end=function(){return n},this.property=function(){return r},this.ordering=function(){return u},this.get=function(e){return o.apply(a,[SetStartValue,SetEndValue,e]),this},this.valid=function(){return s},this.apply=function(e,t){a.filter(r,i.apply(a,[t,e]))},this.config=function(t,n,c,l,f){return"string"!=typeof t?void e.error({name:t},"Unable to config Morph. arg1 [{name}] is not a string!"):"object"!=typeof n?void e.error({name:t},"Unable to config Morph. arg3 is not an object!"):"function"!=typeof l?void e.error({name:t},"Unable to config Morph. arg4 is not a function!"):"number"!=typeof c?void e.error({name:t},"Unable to config Morph. arg2 is not a number!"):"function"!=typeof f?void e.error({name:t},"Unable to config Morph. arg5 is not a function!"):(r=t,o=l,i=f,u=c,a=n,void(s=!0))}}]),$R.helper.system(function Animation(){function TickVal(e,t,n,r){var o=!1,i=!1;if("function"==typeof n&&(o=n()),"function"==typeof r&&(i=r()),n.constructor===Array)for(var a=[],s=0;s<n.length;s++)a.push(TickVal(e,t,n[s],r[s]));else if("object"==typeof n){var a={};for(var u in n)a[u]=TickVal(e,t,n[u],r[u])}else if("number"==typeof n||"function"==typeof n){var c=i===!1?r:i,l=o===!1?n:o,f=c-l,a=l+f*e;t>=1&&(a=c)}return a}this.normalizeConfig=function(e){e.duration="number"==typeof e.duration&&e.duration>0?e.duration:1e3,e.queue=!!e.queue,e.step="object"==typeof e.step?e.step:{},e.easing="string"==typeof e.easing?e.easing:"linear",e.done="function"==typeof e.done?e.done:function(){}},this.getTickFunction=function(){return TickVal}}),$R.helper.system(function Color(){function NormalizeColorArray(e){if(e!==!1&&void 0!==e){for(var t=0;t<e.length;t++)e[t]=e[t]<=255?e[t]:255,e[t]=e[t]>=0?e[t]:0,e[t]=3!==t&&0!==e[t]?parseInt(e[t]):e[t],e[t]=(3==t&&e[t])<=1?e[t]:1,e[t]=Math.abs(e[t]);return e}return!1}function ParseColour(e){var t,n=parseInt,e=e.replace(/\s\s*/g,"");if(t=/^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})/.exec(e))t=[n(t[1],16),n(t[2],16),n(t[3],16)];else if(t=/^#([\da-fA-F])([\da-fA-F])([\da-fA-F])/.exec(e))t=[17*n(t[1],16),17*n(t[2],16),17*n(t[3],16)];else if(t=/^rgba\(([\d]+),([\d]+),([\d]+),([\d]+|[\d]*.[\d]+)\)/.exec(e))t=[+t[1],+t[2],+t[3],+t[4]];else{if(!(t=/^rgb\(([\d]+),([\d]+),([\d]+)\)/.exec(e)))return!1;t=[+t[1],+t[2],+t[3]]}return isNaN(t[3])&&(t[3]=1),NormalizeColorArray(t.slice(0,4))}this.colorToArray=ParseColour,this.normalize=NormalizeColorArray,this.isColor=function(e){var t=!1;if(4==e.length)for(var n=0;n<e.length;n++)"number"==typeof e[n]||"string"==typeof e[n]?"string"==typeof e[n]&&isNaN(1*e[n])&&(t=!0):t=!0;else t=!0;return t&&console.warn('Silk : Check for color unsuccessful. "'+e+'" is not a color Array.'),!t},this.arrayToColor=function(e){if(e&&4==e.length){for(var t="rgba(",n=0;n<e.length;n++)t+=3==n?e[n]+")":e[n]+",";return t}return console.warn("Unknown Input array format. Should be [R,G,B,A];"),!1}}),$R.helper.system(function Drawer(e){var t=document.createElement("canvas").getContext("2d");this.measureText=function(e){t.save();var n=e(t);return t.restore(),n},this.transform=function(e,t){t.transform.apply(t,e.matrix().extract())},this.drawLineBgClipPath=function(t,n,r,o,i){var a=r.get("bg"),s=r.get("bgSize"),u=r.get("bgPosition");t.save(),t.beginPath(),t.moveTo(n[0][0],n[0][1]);for(var c=0;c<n.length;c++){var l=n[c][0],f=n[c][1],h=n[c][2],p=n[c][3];if("number"!=typeof l||"number"!=typeof h||"number"!=typeof f||"number"!=typeof p){e.error("Invalid path!");break}t.lineTo(h,p)}t.closePath(),t.clip();for(var v=0;v<a.length;v++)if(a[v].loaded()){t.save();var g=box.size[0]*s[v][0],d=box.size[1]*s[v][1],y=box.size[0]*u[v][0],m=box.size[1]*u[v][1];t.translate(i.margin[3]+y,i.margin[0]+m),t.drawImage(a[c]["export"](),0,0,g,d),t.restore()}else a[v].on("load",function(){o.update("bg")});t.restore()},this.drawBezierBgClipPath=function(t,n,r,o,i){var a=r.get("bg"),s=r.get("bgSize"),u=r.get("bgPosition");t.save(),t.beginPath(),t.moveTo(n[0][0],n[0][1]);for(var c=0;c<n.length;c++){var l=n[c][0],f=n[c][1],h=n[c][2],p=n[c][3],v=n[c][4],g=n[c][5],d=n[c][6],y=n[c][7];if("number"!=typeof l||"number"!=typeof h||"number"!=typeof f||"number"!=typeof p){e.error("Invalid path!");break}if("number"!=typeof v||"number"!=typeof d||"number"!=typeof g||"number"!=typeof y){e.error("Invalid curve!");break}t.bezierCurveTo(v,g,d,y,h,p)}t.closePath(),t.clip();for(var m=0;m<a.length;m++)if(a[m].loaded()){t.save();var b=box.size[0]*s[m][0],w=box.size[1]*s[m][1],C=box.size[0]*u[m][0],A=box.size[1]*u[m][1];t.translate(i.margin[3]+C,i.margin[0]+A),t.drawImage(a[c]["export"](),0,0,b,w),t.restore()}else a[m].on("load",function(){o.update("bg")});t.restore()},this.drawLinePathFill=function(t,n,r){var o=r.get("fill"),i=r.get("cap");t.save(),t.lineCap=i,t.moveTo(n[0][0],n[0][1]),t.beginPath();for(var a=0;a<n.length;a++){var s=n[a][0],u=n[a][1],c=n[a][2],l=n[a][3];if("number"!=typeof s||"number"!=typeof c||"number"!=typeof u||"number"!=typeof l){e.error("Invalid path!");break}t.lineTo(c,l)}t.closePath(),t.fillStyle=o,t.fill(),t.restore()},this.drawBezierPathFill=function(t,n,r){var o=r.get("fill"),i=r.get("cap");t.save(),t.lineCap=i,t.beginPath(),t.moveTo(n[0][0],n[0][1]);for(var a=0;a<n.length;a++){var s=n[a][0],u=n[a][1],c=n[a][2],l=n[a][3],f=n[a][4],h=n[a][5],p=n[a][6],v=n[a][7];if("number"!=typeof s||"number"!=typeof c||"number"!=typeof u||"number"!=typeof l){e.error("Invalid path!");break}if("number"!=typeof f||"number"!=typeof p||"number"!=typeof h||"number"!=typeof v){e.error("Invalid curve!");break}t.bezierCurveTo(f,h,p,v,c,l)}t.closePath(),t.fillStyle=o,t.fill(),t.restore()},this.drawLinePath=function(t,n,r){var o=r.get("strokeColor"),i=r.get("strokeWidth"),a=r.get("strokeStyle"),s=r.get("cap");t.save(),t.lineCap=s;for(var u=0;u<n.length;u++){var c=n[u][0],l=n[u][1],f=n[u][2],h=n[u][3];if("number"!=typeof c||"number"!=typeof f||"number"!=typeof l||"number"!=typeof h){e.error("Invalid path!");break}i[u]<.1?t.moveTo(f,h):(t.beginPath(),t.moveTo(c,l),t.strokeStyle=o[u],t.lineWidth=i[u],t.setLineDash(a[u]),t.lineTo(f,h),t.stroke())}t.restore()},this.drawBezierPath=function(t,n,r){var o=r.get("strokeColor"),i=r.get("strokeWidth"),a=r.get("strokeStyle"),s=r.get("cap");t.save(),t.lineCap=s;for(var u=0;u<n.length;u++){var c=n[u][0],l=n[u][1],f=n[u][2],h=n[u][3],p=n[u][4],v=n[u][5],g=n[u][6],d=n[u][7];if("number"!=typeof c||"number"!=typeof f||"number"!=typeof l||"number"!=typeof h){e.error("Invalid path!");break}if("number"!=typeof p||"number"!=typeof g||"number"!=typeof v||"number"!=typeof d){e.error("Invalid curve!");break}i[u]<.1?t.moveTo(f,h):(t.beginPath(),t.moveTo(c,l),t.strokeStyle=o[u],t.lineWidth=i[u],t.setLineDash(a[u]),t.bezierCurveTo(p,v,g,d,f,h),t.stroke())}t.restore()},this.drawRectFill=function(e,t,n,r,o,i){e.save();var a=t.get("fill");e.fillStyle=a,e.rect(n,r,o,i),e.fill(),e.restore()},this.drawRectStroke=function(e,t,n,r,o,i){var a=t.get("strokeStyle"),s=t.get("strokeColor"),u=t.get("strokeWidth");e.save();for(var c=0,l=0,f=0;f<4;f++)e.beginPath(),e.strokeStyle=s[f],e.strokeWidth=u[f],e.setLineDash(a[f]),0===f&&(c=n+o,l=r),1===f&&(c=n+o,l=r+i),2===f&&(c=n,l=r+i),3===f&&(c=n,l=r),u[f]<.1?e.moveTo(c,l):(e.lineTo(c,l),e.stroke());e.restore()}}),$R.helper.system(["Debug",function Easing(e){var t={_:function(e,t,n,r){return n*(e/=r)*e*e+t},linear:function(e,t,n,r){return e/=r,t+n*e},linearSoft:function(e,t,n,r){var o=(e/=r)*e,i=o*e;return t+n*(4*i*o+-10*o*o+8*i+-2*o+e)},linearSoftOut:function(e,t,n,r){var o=(e/=r)*e,i=o*e;return t+n*(-3*i*o+11*o*o+-14*i+6*o+e)},linearSoftIn:function(e,t,n,r){var o=(e/=r)*e,i=o*e;return t+n*(-1*i*o+2*i)},easeInQuad:function(e,t,n,r){n*(e/=r)*e+t;return n*(e/=r)*e+t},easeOutQuad:function(e,t,n,r){return-n*(e/=r)*(e-2)+t},easeInOutQuad:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},easeInCubic:function(e,t,n,r){return n*(e/=r)*e*e+t},easeOutCubic:function(e,t,n,r){return n*((e=e/r-1)*e*e+1)+t},easeInOutCubic:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e+t:n/2*((e-=2)*e*e+2)+t},easeInQuart:function(e,t,n,r){return n*(e/=r)*e*e*e+t},easeOutQuart:function(e,t,n,r){return-n*((e=e/r-1)*e*e*e-1)+t},easeInOutQuart:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e*e+t:-n/2*((e-=2)*e*e*e-2)+t},easeInQuint:function(e,t,n,r){return n*(e/=r)*e*e*e*e+t},easeOutQuint:function(e,t,n,r){return n*((e=e/r-1)*e*e*e*e+1)+t},easeInOutQuint:function(e,t,n,r){return(e/=r/2)<1?n/2*e*e*e*e*e+t:n/2*((e-=2)*e*e*e*e+2)+t},easeInSine:function(e,t,n,r){return-n*Math.cos(e/r*(Math.PI/2))+n+t},easeOutSine:function(e,t,n,r){return n*Math.sin(e/r*(Math.PI/2))+t},easeInOutSine:function(e,t,n,r){return-n/2*(Math.cos(Math.PI*e/r)-1)+t},easeInExpo:function(e,t,n,r){return 0===e?t:n*Math.pow(2,10*(e/r-1))+t},easeOutExpo:function(e,t,n,r){return e===r?t+n:n*(-Math.pow(2,-10*e/r)+1)+t},easeInOutExpo:function(e,t,n,r){return 0===e?t:e===r?t+n:(e/=r/2)<1?n/2*Math.pow(2,10*(e-1))+t:n/2*(-Math.pow(2,-10*--e)+2)+t},easeInCirc:function(e,t,n,r){return-n*(Math.sqrt(1-(e/=r)*e)-1)+t},easeOutCirc:function(e,t,n,r){return n*Math.sqrt(1-(e=e/r-1)*e)+t},easeInOutCirc:function(e,t,n,r){return(e/=r/2)<1?-n/2*(Math.sqrt(1-e*e)-1)+t:n/2*(Math.sqrt(1-(e-=2)*e)+1)+t},easeInBack:function(e,t,n,r,o){var i=(e/=r)*e,a=i*e;return t+n*(15.26*a*i+-43.56*i*i+39.8*a+-10.6*i+.1*e)},easeOutBack:function(e,t,n,r,o){var i=(e/=r)*e,a=i*e;return t+n*(11.24*a*i+-23.96*i*i+12.24*a+1.44*i+.04*e)},easeInOutBack:function(e,t,n,r,o){var i=(e/=r)*e,a=i*e;return t+n*(22.92*a*i+-57.78*i*i+45*a+-9.28*i+.14*e)},easeOutBounce:function(e,t,n,r){return(e/=r)<1/2.75?n*(7.5625*e*e)+t:e<2/2.75?n*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?n*(7.5625*(e-=2.25/2.75)*e+.9375)+t:n*(7.5625*(e-=2.625/2.75)*e+.984375)+t}};this.get=function(n){return t[n]?t[n]:(e.error({name:n},"Easings / Unable to get undefined easing [{name}]. Linear easing function provided."),t.linear)}}]),$R.helper.system(function Matrix(){function GraphicsTransformMatrix(e){function multiply(e,t){var n=e[0]*t[0]+e[2]*t[1],r=e[1]*t[0]+e[3]*t[1],o=e[0]*t[2]+e[2]*t[3],i=e[1]*t[2]+e[3]*t[3],a=e[0]*t[4]+e[2]*t[5]+e[4],s=e[1]*t[4]+e[3]*t[5]+e[5];e[0]=n,e[1]=r,e[2]=o,e[3]=i,e[4]=a,e[5]=s}function invert(){for(var e=o.length-1;e>=0;e--){if(o[e].rotate){var t=Math.sin(-o[e].rotate),r=Math.cos(-o[e].rotate);multiply(n,[r,t,-t,r,0,0])}o[e].translate&&multiply(n,[1,0,0,1,-o[e].translate[0],-o[e].translate[1]]),o[e].skew&&multiply(n,[1,Math.tan(-o[e].skew[1]),Math.tan(-o[e].skew[0]),1,0,0]),o[e].scale&&multiply(n,[1/o[e].scale[0],0,0,1/o[e].scale[1],0,0])}i=!0,o=null}function invertGlobal(){var t=e.parent();if(i||invert(),t){if(r)return r;r=[n[0],n[1],n[2],n[3],n[4],n[5]],multiply(r,t.matrix().globalInversionMatrix())}else r=n;return r}var t=[1,0,0,1,0,0],n=[1,0,0,1,0,0],r=null,o=[],i=!1;this.rotate=function(e){var n=Math.sin(e),r=Math.cos(e),i=[r,n,-n,r,0,0];return multiply(t,i),o.push({rotate:e}),this},this.translate=function(e,n){var r=[1,0,0,1,e,n];return 0===e&&0===n||(multiply(t,r),o.push({translate:[e,n]})),this},this.scale=function(e,n){if(1!==e||1!==n){var r=[e,0,0,n,0,0];multiply(t,r),o.push({scale:[e,n]})}return this},this.skew=function(e,n){if(0!==e||0!==n){var r=Math.tan(e),i=Math.tan(n),a=[1,i,r,1,0,0];multiply(t,a),o.push({skew:[e,n]})}return this},this.extract=function(){return t},this.globalInversionMatrix=invertGlobal,this.globalCursorProjection=function(e){r||invertGlobal();var t=e[0]*r[0]+e[1]*r[2]+r[4],n=e[0]*r[1]+e[1]*r[3]+r[5];return e[0]=t,e[1]=n,e},this.cursorProjection=function(e){i||invert();var t=e[0]*n[0]+e[1]*n[2]+n[4],r=e[0]*n[1]+e[1]*n[3]+n[5];return e[0]=t,e[1]=r,e}}this.objectMatrix=function(e){var t=new GraphicsTransformMatrix(e),n=e.extension("Style"),r=e.extension("Box").box(),o=r.sprite(),i=n.get("position"),a=n.get("origin"),s=n.get("skew"),u=n.get("rotate"),c=n.get("scale"),l=n.get("translate"),f="Group"===e.type()?[i[0]+l[0]-o.margin[3],i[1]+l[1]-o.margin[0]]:[o.position[0]+l[0],o.position[1]+l[1]],h=[a[0]*o.size[0],a[1]*o.size[1]];return t.translate(h[0],h[1]),0===f[0]&&0===f[1]||t.translate(f[0],f[1]),0!==u&&t.rotate(u),0===s[0]&&0===s[1]||t.skew(s[0],s[1]),1===c[0]&&1===c[1]||t.scale(c[0],c[1]),t.translate(-h[0],-h[1]),t}}),$R.helper.system(["Debug",function Model(Debug){this.cloneHash=function(e){return"object"!=typeof e?void Debug.error("Hash is not an object!"):JSON.parse(JSON.stringify(e))},this.cloneArray=function(array){if("object"!=typeof array||array.constructor!==Array)return void Debug.error("array is not an array!");for(var result=[],i=0;i<array.length;i++)if("object"==typeof array[i])array[i].constructor==Array?result.push(this.cloneArray(array[i])):result.push(this.cloneHash(array[i]));else if("function"==typeof array[i]){var text=array[i].toString();result.push(eval(text)),Debug.warn("You clone functions! It can be slow!")}else result.push(array[i]);return result},this.validNumericArray=function(e){var t=!0;if("object"!=typeof e||e.constructor!==Array)return!1;for(var n=0;n<e.length;n++)if("number"!=typeof e[n]){t=!1;break}return t};var blendings=["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","copy","xor","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity"];this.validBlending=function(e){for(var t=!1,n=0;n<blendings.length;n++)if(blendings[n]==e){t=!0;break}return t};var sprite_regexp=/^([./_\da-zA-Z]+)(\[(\d+)\])$/;this.isSpriteString=function(e){return sprite_regexp.test(e)},this.readSpriteString=function(e){var t=e.match(sprite_regexp);return{url:t[1],frames:parseInt(t[3])}}}]),$R.helper.system(function Mouse(){this.circleUserCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]);if(t<[0]||t[1]<0)return!1;var n=this.extension("Box").box().sprite();if(t[0]>n.size[0])return!1;if(t[1]>n.size[1])return!1;var r=n.size[0]/2,o=r,i=n.size[1]/2;return Math.pow(t[0]-o,2)+Math.pow(t[1]-i,2)<=Math.pow(r,2)&&this},this.squareUserCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]),n=this.extension("Box").box().sprite();return t[0]>0&&t[0]<n.size[0]&&(t[1]>0&&t[1]<n.size[1]&&this)},this.circleCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]);if(t<[0]||t[1]<0)return!1;var n=this.extension("Box").box().sprite();if(t[0]>n.size[0])return!1;if(t[1]>n.size[1])return!1;var r=n.size[0]/2,o=this.extension("Style").get("radius");return Math.pow(t[0]-r,2)+Math.pow(t[1]-r,2)<Math.pow(o,2)&&this},this.rectCheckFunction=function(e){var t=this.matrix().globalCursorProjection([e[0],e[1]]),n=this.extension("Box").box().sprite();return t[0]>0&&t[0]<n.size[0]&&(t[1]>0&&t[1]<n.size[1]&&this)}}),$R.helper.system(["Debug",function Path(e){function getControlPoints(e,t,n,r,o,i,a){var s=Math.sqrt(Math.pow(n-e,2)+Math.pow(r-t,2)),u=Math.sqrt(Math.pow(o-n,2)+Math.pow(i-r,2)),c=a*s/(s+u),l=a*u/(s+u),f=n-c*(o-e),h=r-c*(i-t),p=n+l*(o-e),v=r+l*(i-t);return[f,h,p,v]}this.convertComplexPath=function(e){for(var t=[],n=0;n<e.length;n++)t.push([e[n][0],e[n][1]]);return t},this.convertSimplePath=function(t){if(t.length<2)return void e.error("Path should consist of at least two points!");for(var n=[],r=0;r<t.length;r++){var o=t[r][0],i=t[r][1];if("number"!=typeof o||"number"!=typeof i){e.error("Incorrect Path!"),n=void 0;break}r<t.length-1&&(n[r]||n.push([]),n[r].push(o),n[r].push(i)),0!==r&&(n[r-1].push(o),n[r-1].push(i),n[r-1].push(n[r-1][0]),n[r-1].push(n[r-1][1]),n[r-1].push(o),n[r-1].push(i))}return n},this.interpolate=function(e,t,n){for(var r=0;r<e.length;r++){var o=[],i=[e[r][0],e[r][1]],a=[e[r][2],e[r][3]],s=null;if(o=0==r?i:[e[r-1][0],e[r-1][1]],s=getControlPoints(o[0],o[1],i[0],i[1],a[0],a[1],t),0==r?(e[r][4]=s[2],e[r][5]=s[3]):(e[r-1][6]=s[0],e[r-1][7]=s[1],e[r][4]=s[2],e[r][5]=s[3]),r==e.length-1&&(o=[e[r][0],e[r][1]],i=[e[r][2],e[r][3]],a=i,s=getControlPoints(o[0],o[1],i[0],i[1],a[0],a[1],t),e[r][6]=s[0],e[r][7]=s[1]),n){var u=e[e.length-1],c=e[0],l=[[u[0],u[1],u[2],u[3],u[4],u[5],u[6],u[7]],[c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7]]];this.interpolate(l,t),e[0][4]=l[1][4],e[0][5]=l[1][5],e[e.length-1][6]=l[0][6],e[e.length-1][7]=l[0][7]}}},this.checkSimplePath=function(e){if("object"!=typeof e||e.constructor!==Array)return!1;for(var t=!0,n=0;n<e.length;n++)if("object"!=typeof e[n]||e[n].constructor!==Array||2!==e[n].length||"number"!=typeof e[n][0]||"number"!=typeof e[n][1]){t=!1;break}return t},this.comparePaths=function(e,t){var n=!0;if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)for(var o=0;o<e[r].length;o++)if(e[r][o]!==t[r][o]){n=!1;break}return n}}]); export default core
//# sourceMappingURL=data:application/json;base64,
